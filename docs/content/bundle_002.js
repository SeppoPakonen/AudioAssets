var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/* Generated from Java with JSweet 2.0.0-CUSTOM - http://www.jsweet.org */
var org;
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var TGCompatPlugin = (function () {
                        function TGCompatPlugin() {
                        }
                        return TGCompatPlugin;
                    }());
                    TGCompatPlugin.MODULE_ID = "tuxguitar-compat";
                    tg.TGCompatPlugin = TGCompatPlugin;
                    TGCompatPlugin["__class"] = "org.herac.tuxguitar.io.tg.TGCompatPlugin";
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var gm;
            (function (gm) {
                var GMChannelRoute = (function () {
                    function GMChannelRoute(channelId) {
                        this.channelId = 0;
                        this.channel1 = 0;
                        this.channel2 = 0;
                        this.channelId = channelId;
                    }
                    GMChannelRoute.prototype.getChannelId = function () {
                        return this.channelId;
                    };
                    GMChannelRoute.prototype.getChannel1 = function () {
                        return this.channel1;
                    };
                    GMChannelRoute.prototype.setChannel1 = function (channel1) {
                        this.channel1 = channel1;
                    };
                    GMChannelRoute.prototype.getChannel2 = function () {
                        return this.channel2;
                    };
                    GMChannelRoute.prototype.setChannel2 = function (channel2) {
                        this.channel2 = channel2;
                    };
                    return GMChannelRoute;
                }());
                GMChannelRoute.PARAMETER_GM_CHANNEL_1 = "gm-channel-1";
                GMChannelRoute.PARAMETER_GM_CHANNEL_2 = "gm-channel-2";
                GMChannelRoute.NULL_VALUE = -1;
                gm.GMChannelRoute = GMChannelRoute;
                GMChannelRoute["__class"] = "org.herac.tuxguitar.gm.GMChannelRoute";
            })(gm = tuxguitar.gm || (tuxguitar.gm = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var gm;
            (function (gm) {
                var GMChannelRouter = (function () {
                    function GMChannelRouter() {
                        this.midiChannels = null;
                        this.midiChannels = (new java.util.ArrayList());
                    }
                    GMChannelRouter.prototype.resetRoutes = function () {
                        this.midiChannels.clear();
                    };
                    GMChannelRouter.prototype.removeRoute = function (route) {
                        if (this.midiChannels.contains(route)) {
                            this.midiChannels.remove(route);
                        }
                    };
                    GMChannelRouter.prototype.getRoute = function (channelId) {
                        var channelIt = this.midiChannels.iterator();
                        while ((channelIt.hasNext())) {
                            var midiChannel = channelIt.next();
                            if (midiChannel.getChannelId() === channelId) {
                                return midiChannel;
                            }
                        }
                        ;
                        return null;
                    };
                    GMChannelRouter.prototype.configureRoutes = function (route, percussionChannel) {
                        var conflictingRoutes = null;
                        if (this.midiChannels.contains(route)) {
                            this.midiChannels.remove(route);
                        }
                        if (percussionChannel) {
                            route.setChannel1(GMChannelRouter.PERCUSSION_CHANNEL);
                            route.setChannel2(GMChannelRouter.PERCUSSION_CHANNEL);
                        }
                        else {
                            if (route.getChannel1() >= 0) {
                                if (route.getChannel2() < 0) {
                                    route.setChannel2(route.getChannel1());
                                }
                                conflictingRoutes = this.findConflictingRoutes(route);
                            }
                            else {
                                var freeChannels = this.getFreeChannels();
                                route.setChannel1((freeChannels.size() > 0 ? (freeChannels.get(0) | 0) : org.herac.tuxguitar.gm.GMChannelRoute.NULL_VALUE));
                                route.setChannel2((freeChannels.size() > 1 ? (freeChannels.get(1) | 0) : route.getChannel1()));
                            }
                        }
                        this.midiChannels.add(route);
                        if (conflictingRoutes != null) {
                            var it = conflictingRoutes.iterator();
                            while ((it.hasNext())) {
                                var conflictingRoute = it.next();
                                conflictingRoute.setChannel1(org.herac.tuxguitar.gm.GMChannelRoute.NULL_VALUE);
                                conflictingRoute.setChannel2(org.herac.tuxguitar.gm.GMChannelRoute.NULL_VALUE);
                                this.configureRoutes(conflictingRoute, false);
                            }
                            ;
                        }
                    };
                    GMChannelRouter.prototype.findConflictingRoutes = function (gmChannelRoute) {
                        var routes = (new java.util.ArrayList());
                        var it = this.midiChannels.iterator();
                        while ((it.hasNext())) {
                            var route = it.next();
                            if (!(function (o1, o2) { if (o1.equals) {
                                return o1.equals(o2);
                            }
                            else {
                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                            } })(route, gmChannelRoute)) {
                                if (route.getChannel1() === gmChannelRoute.getChannel1() || route.getChannel1() === gmChannelRoute.getChannel2() || route.getChannel2() === gmChannelRoute.getChannel1() || route.getChannel2() === gmChannelRoute.getChannel2()) {
                                    routes.add(route);
                                }
                            }
                        }
                        ;
                        return routes;
                    };
                    GMChannelRouter.prototype.getFreeChannels$ = function () {
                        return this.getFreeChannels$org_herac_tuxguitar_gm_GMChannelRoute(null);
                    };
                    GMChannelRouter.prototype.getFreeChannels$org_herac_tuxguitar_gm_GMChannelRoute = function (forRoute) {
                        var freeChannels = (new java.util.ArrayList());
                        for (var ch = 0; ch < GMChannelRouter.MAX_CHANNELS; ch++) {
                            if (ch !== GMChannelRouter.PERCUSSION_CHANNEL) {
                                var isFreeChannel = true;
                                var channelIt = this.midiChannels.iterator();
                                while ((channelIt.hasNext())) {
                                    var route = channelIt.next();
                                    if (forRoute == null || !(function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(forRoute, route)) {
                                        if (route.getChannel1() === ch || route.getChannel2() === ch) {
                                            isFreeChannel = false;
                                        }
                                    }
                                }
                                ;
                                if (isFreeChannel) {
                                    freeChannels.add(new Number(ch));
                                }
                            }
                        }
                        return freeChannels;
                    };
                    GMChannelRouter.prototype.getFreeChannels = function (forRoute) {
                        if (((forRoute != null && forRoute instanceof org.herac.tuxguitar.gm.GMChannelRoute) || forRoute === null)) {
                            return this.getFreeChannels$org_herac_tuxguitar_gm_GMChannelRoute(forRoute);
                        }
                        else if (forRoute === undefined) {
                            return this.getFreeChannels$();
                        }
                        else
                            throw new Error('invalid overload');
                    };
                    return GMChannelRouter;
                }());
                GMChannelRouter.MAX_CHANNELS = 16;
                GMChannelRouter.PERCUSSION_CHANNEL = 9;
                gm.GMChannelRouter = GMChannelRouter;
                GMChannelRouter["__class"] = "org.herac.tuxguitar.gm.GMChannelRouter";
            })(gm = tuxguitar.gm || (tuxguitar.gm = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var gm;
            (function (gm) {
                var GMChannelRouterConfigurator = (function () {
                    function GMChannelRouterConfigurator(router) {
                        this.router = null;
                        this.router = router;
                    }
                    GMChannelRouterConfigurator.prototype.configureRouter = function (tgChannels) {
                        this.router.resetRoutes();
                        while ((tgChannels.hasNext())) {
                            var tgChannel = tgChannels.next();
                            var cmChannelRoute = new org.herac.tuxguitar.gm.GMChannelRoute(tgChannel.getChannelId());
                            cmChannelRoute.setChannel1(this.getIntegerChannelParameter(tgChannel, org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_1, org.herac.tuxguitar.gm.GMChannelRoute.NULL_VALUE));
                            cmChannelRoute.setChannel2(this.getIntegerChannelParameter(tgChannel, org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_2, org.herac.tuxguitar.gm.GMChannelRoute.NULL_VALUE));
                            this.router.configureRoutes(cmChannelRoute, tgChannel.isPercussionChannel());
                        }
                        ;
                    };
                    GMChannelRouterConfigurator.prototype.getIntegerChannelParameter = function (tgChannel, key, nullValue) {
                        var tgChannelParameter = this.findChannelParameter(tgChannel, key);
                        if (tgChannelParameter != null && tgChannelParameter.getValue() != null) {
                            return javaemul.internal.IntegerHelper.parseInt(tgChannelParameter.getValue());
                        }
                        return nullValue;
                    };
                    GMChannelRouterConfigurator.prototype.findChannelParameter = function (tgChannel, key) {
                        var it = tgChannel.getParameters();
                        while ((it.hasNext())) {
                            var parameter = it.next();
                            if ((function (o1, o2) { if (o1.equals) {
                                return o1.equals(o2);
                            }
                            else {
                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                            } })(parameter.getKey(), key)) {
                                return parameter;
                            }
                        }
                        ;
                        return null;
                    };
                    return GMChannelRouterConfigurator;
                }());
                gm.GMChannelRouterConfigurator = GMChannelRouterConfigurator;
                GMChannelRouterConfigurator["__class"] = "org.herac.tuxguitar.gm.GMChannelRouterConfigurator";
            })(gm = tuxguitar.gm || (tuxguitar.gm = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var gm;
            (function (gm) {
                var port;
                (function (port) {
                    var GMChannel = (function () {
                        function GMChannel(channelId, router, receiver) {
                            this.receiver = null;
                            this.route = null;
                            this.router = null;
                            this.receiver = receiver;
                            this.route = new org.herac.tuxguitar.gm.GMChannelRoute(channelId);
                            this.router = router;
                            this.router.configureRoutes(this.route, false);
                        }
                        GMChannel.prototype.getRoute = function () {
                            return this.route;
                        };
                        GMChannel.prototype.sendAllNotesOff = function () {
                            this.receiver.sendAllNotesOff();
                        };
                        GMChannel.prototype.sendNoteOn = function (key, velocity, voice, bendMode) {
                            this.receiver.sendNoteOn(this.resolveChannel(bendMode), key, velocity);
                        };
                        GMChannel.prototype.sendNoteOff = function (key, velocity, voice, bendMode) {
                            this.receiver.sendNoteOff(this.resolveChannel(bendMode), key, velocity);
                        };
                        GMChannel.prototype.sendPitchBend = function (value, voice, bendMode) {
                            this.receiver.sendPitchBend(this.resolveChannel(bendMode), value);
                        };
                        GMChannel.prototype.sendProgramChange = function (value) {
                            this.receiver.sendProgramChange(this.route.getChannel1(), value);
                            if (this.route.getChannel1() !== this.route.getChannel2()) {
                                this.receiver.sendProgramChange(this.route.getChannel2(), value);
                            }
                        };
                        GMChannel.prototype.sendControlChange = function (controller, value) {
                            if (controller === org.herac.tuxguitar.player.base.MidiControllers.BANK_SELECT && value === GMChannel.PERCUSSION_BANK) {
                                this.router.configureRoutes(this.route, true);
                            }
                            this.receiver.sendControlChange(this.route.getChannel1(), controller, value);
                            if (this.route.getChannel1() !== this.route.getChannel2()) {
                                this.receiver.sendControlChange(this.route.getChannel2(), controller, value);
                            }
                        };
                        GMChannel.prototype.sendParameter = function (key, value) {
                            if ((function (o1, o2) { if (o1.equals) {
                                return o1.equals(o2);
                            }
                            else {
                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                            } })(key, org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_1)) {
                                this.route.setChannel1(javaemul.internal.IntegerHelper.parseInt(value));
                                this.router.configureRoutes(this.route, false);
                            }
                            if ((function (o1, o2) { if (o1.equals) {
                                return o1.equals(o2);
                            }
                            else {
                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                            } })(key, org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_2)) {
                                this.route.setChannel2(javaemul.internal.IntegerHelper.parseInt(value));
                                this.router.configureRoutes(this.route, false);
                            }
                        };
                        GMChannel.prototype.resolveChannel = function (bendMode) {
                            return (bendMode ? this.route.getChannel2() : this.route.getChannel1());
                        };
                        return GMChannel;
                    }());
                    GMChannel.PERCUSSION_BANK = 128;
                    port.GMChannel = GMChannel;
                    GMChannel["__class"] = "org.herac.tuxguitar.gm.port.GMChannel";
                    GMChannel["__interfaces"] = ["org.herac.tuxguitar.player.base.MidiChannel"];
                })(port = gm.port || (gm.port = {}));
            })(gm = tuxguitar.gm || (tuxguitar.gm = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var gm;
            (function (gm) {
                var port;
                (function (port) {
                    var GMOutputPort = (function () {
                        function GMOutputPort() {
                            this.midiSynthesizer = null;
                            this.midiSynthesizer = new org.herac.tuxguitar.gm.port.GMSynthesizer(this);
                        }
                        GMOutputPort.prototype.getSynthesizer = function () {
                            return this.midiSynthesizer;
                        };
                        return GMOutputPort;
                    }());
                    port.GMOutputPort = GMOutputPort;
                    GMOutputPort["__class"] = "org.herac.tuxguitar.gm.port.GMOutputPort";
                    GMOutputPort["__interfaces"] = ["org.herac.tuxguitar.player.base.MidiOutputPort", "org.herac.tuxguitar.player.base.MidiDevice"];
                })(port = gm.port || (gm.port = {}));
            })(gm = tuxguitar.gm || (tuxguitar.gm = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var gm;
            (function (gm) {
                var port;
                (function (port) {
                    var GMSynthesizer = (function () {
                        function GMSynthesizer(midiOutputPort) {
                            this.midiOutputPort = null;
                            this.gmChannelRouter = null;
                            this.midiOutputPort = midiOutputPort;
                            this.gmChannelRouter = new org.herac.tuxguitar.gm.GMChannelRouter();
                        }
                        GMSynthesizer.prototype.closeChannel = function (midiChannel) {
                            if (midiChannel != null && midiChannel instanceof org.herac.tuxguitar.gm.port.GMChannel) {
                                this.gmChannelRouter.removeRoute(midiChannel.getRoute());
                            }
                        };
                        GMSynthesizer.prototype.openChannel = function (channelId) {
                            return new org.herac.tuxguitar.gm.port.GMChannel(channelId, this.gmChannelRouter, this.midiOutputPort.getReceiver());
                        };
                        GMSynthesizer.prototype.isChannelOpen = function (midiChannel) {
                            return true;
                        };
                        return GMSynthesizer;
                    }());
                    port.GMSynthesizer = GMSynthesizer;
                    GMSynthesizer["__class"] = "org.herac.tuxguitar.gm.port.GMSynthesizer";
                    GMSynthesizer["__interfaces"] = ["org.herac.tuxguitar.player.base.MidiSynthesizer"];
                })(port = gm.port || (gm.port = {}));
            })(gm = tuxguitar.gm || (tuxguitar.gm = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var action;
                (function (action) {
                    var consumer;
                    (function (consumer) {
                        var TGActionConsumer = (function () {
                            function TGActionConsumer() {
                            }
                            TGActionConsumer.createJQuery = function (context, actionId) {
                                return function (t) {
                                    new org.herac.tg.webapp.action.TGActionProcessor(context, actionId).process();
                                    return true;
                                };
                            };
                            return TGActionConsumer;
                        }());
                        consumer.TGActionConsumer = TGActionConsumer;
                        TGActionConsumer["__class"] = "org.herac.tg.webapp.action.consumer.TGActionConsumer";
                    })(consumer = action.consumer || (action.consumer = {}));
                })(action = webapp.action || (webapp.action = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var action;
                (function (action) {
                    var TGActionAdapter = (function () {
                        function TGActionAdapter(context, name) {
                            this.context = null;
                            this.name = null;
                            this.context = context;
                            this.name = name;
                        }
                        TGActionAdapter.prototype.getName = function () {
                            return this.name;
                        };
                        TGActionAdapter.prototype.getContext = function () {
                            return this.context;
                        };
                        return TGActionAdapter;
                    }());
                    action.TGActionAdapter = TGActionAdapter;
                    TGActionAdapter["__class"] = "org.herac.tg.webapp.action.TGActionAdapter";
                    TGActionAdapter["__interfaces"] = ["org.herac.tuxguitar.action.TGAction"];
                })(action = webapp.action || (webapp.action = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var action;
                (function (action_1) {
                    var TGActionAdapterManager = (function () {
                        function TGActionAdapterManager(context) {
                            this.context = null;
                            this.context = context;
                        }
                        TGActionAdapterManager.prototype.initialize = function () {
                            this.initializeHandlers();
                            this.initializeDefaultActions();
                        };
                        TGActionAdapterManager.prototype.initializeHandlers = function () {
                            var tgActionManager = org.herac.tuxguitar.action.TGActionManager.getInstance(this.context);
                            tgActionManager.setActionContextFactory(new org.herac.tg.webapp.action.TGActionContextFactoryImpl(this.context));
                        };
                        TGActionAdapterManager.prototype.initializeDefaultActions = function () {
                            this.mapAction(new org.herac.tg.webapp.action.impl.TGLoadSongAction(this.context));
                            this.mapAction(new org.herac.tg.webapp.action.impl.TGLoadURLAction(this.context));
                            this.mapAction(new org.herac.tg.webapp.action.impl.TGTransportPlayAction(this.context));
                            this.mapAction(new org.herac.tg.webapp.action.impl.TGTransportStopAction(this.context));
                            this.mapAction(new org.herac.tg.webapp.action.impl.TGSetTabEnabledAction(this.context));
                            this.mapAction(new org.herac.tg.webapp.action.impl.TGSetScoreEnabledAction(this.context));
                            this.mapAction(new org.herac.tg.webapp.action.impl.TGSetMultitrackAction(this.context));
                            this.mapAction(new org.herac.tg.webapp.action.impl.TGMoveToAction(this.context));
                            this.mapAction(new org.herac.tg.webapp.action.impl.TGSetSelectedTrackAction(this.context));
                        };
                        TGActionAdapterManager.prototype.mapAction = function (action) {
                            org.herac.tuxguitar.action.TGActionManager.getInstance(this.context).mapAction(action.getName(), action);
                        };
                        TGActionAdapterManager.prototype.getContext = function () {
                            return this.context;
                        };
                        TGActionAdapterManager.getInstance = function (context) {
                            return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGActionAdapterManager), new TGActionAdapterManager.TGActionAdapterManager$0());
                        };
                        return TGActionAdapterManager;
                    }());
                    action_1.TGActionAdapterManager = TGActionAdapterManager;
                    TGActionAdapterManager["__class"] = "org.herac.tg.webapp.action.TGActionAdapterManager";
                    (function (TGActionAdapterManager) {
                        var TGActionAdapterManager$0 = (function () {
                            function TGActionAdapterManager$0() {
                            }
                            TGActionAdapterManager$0.prototype.createInstance = function (context) {
                                return new org.herac.tg.webapp.action.TGActionAdapterManager(context);
                            };
                            return TGActionAdapterManager$0;
                        }());
                        TGActionAdapterManager.TGActionAdapterManager$0 = TGActionAdapterManager$0;
                        TGActionAdapterManager$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                    })(TGActionAdapterManager = action_1.TGActionAdapterManager || (action_1.TGActionAdapterManager = {}));
                })(action = webapp.action || (webapp.action = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var action;
                (function (action) {
                    var TGActionContextFactoryImpl = (function () {
                        function TGActionContextFactoryImpl(context) {
                            this.context = null;
                            this.context = context;
                        }
                        TGActionContextFactoryImpl.prototype.createActionContext = function () {
                            var selection = org.herac.tg.webapp.selection.TGSelection.getInstance(this.context);
                            var documentManager = org.herac.tuxguitar.document.TGDocumentManager.getInstance(this.context);
                            var tgActionContext = new org.herac.tg.webapp.action.TGActionContextImpl();
                            tgActionContext.setAttribute(/* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.document.TGDocumentManager), documentManager);
                            tgActionContext.setAttribute(org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_SONG_MANAGER_$LI$(), documentManager.getSongManager());
                            tgActionContext.setAttribute(org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_SONG_$LI$(), documentManager.getSong());
                            tgActionContext.setAttribute(org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_TRACK_$LI$(), selection.getTrack());
                            tgActionContext.setAttribute(org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_MEASURE_$LI$(), selection.getMeasure());
                            tgActionContext.setAttribute(org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_POSITION, selection.getMeasure() != null ? selection.getMeasure().getStart() : org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME);
                            return tgActionContext;
                        };
                        return TGActionContextFactoryImpl;
                    }());
                    action.TGActionContextFactoryImpl = TGActionContextFactoryImpl;
                    TGActionContextFactoryImpl["__class"] = "org.herac.tg.webapp.action.TGActionContextFactoryImpl";
                    TGActionContextFactoryImpl["__interfaces"] = ["org.herac.tuxguitar.action.TGActionContextFactory"];
                })(action = webapp.action || (webapp.action = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var action;
                (function (action) {
                    var TGActionProcessor = (function () {
                        function TGActionProcessor(context, actionName) {
                            this.context = null;
                            this.actionName = null;
                            this.attributes = null;
                            this.__onFinish = null;
                            this.errorHandler = null;
                            this.context = context;
                            this.actionName = actionName;
                            this.attributes = (new java.util.HashMap());
                        }
                        TGActionProcessor.prototype.getContext = function () {
                            return this.context;
                        };
                        TGActionProcessor.prototype.getActionName = function () {
                            return this.actionName;
                        };
                        TGActionProcessor.prototype.setAttribute = function (key, value) {
                            this.attributes.put(key, value);
                        };
                        TGActionProcessor.prototype.clearAttributes = function () {
                            this.attributes.clear();
                        };
                        TGActionProcessor.prototype.setOnFinish = function (onFinish) {
                            this.__onFinish = onFinish;
                        };
                        TGActionProcessor.prototype.setErrorHandler = function (errorHandler) {
                            this.errorHandler = errorHandler;
                        };
                        TGActionProcessor.prototype.createActionContext = function () {
                            var actionContext = org.herac.tuxguitar.action.TGActionManager.getInstance(this.getContext()).createActionContext();
                            this.appendAttributes(actionContext, this.attributes);
                            return actionContext;
                        };
                        TGActionProcessor.prototype.appendAttributes = function (actionContext, attributes) {
                            if (attributes != null && attributes.size() > 0 && attributes.entrySet() != null) {
                                var it = attributes.entrySet().iterator();
                                while ((it.hasNext())) {
                                    var entry = it.next();
                                    actionContext.setAttribute(entry.getKey(), entry.getValue());
                                }
                                ;
                            }
                        };
                        TGActionProcessor.prototype.processOnCurrentThread = function () {
                            try {
                                var tgActionManager = org.herac.tuxguitar.action.TGActionManager.getInstance(this.getContext());
                                tgActionManager.execute$java_lang_String$org_herac_tuxguitar_action_TGActionContext(this.getActionName(), this.createActionContext());
                                this.onFinish();
                            }
                            catch (e) {
                                this.onError(e);
                            }
                            ;
                        };
                        TGActionProcessor.prototype.processOnNewThread = function () {
                            org.herac.tuxguitar.thread.TGThreadManager.getInstance(this.context).start(new TGActionProcessor.TGActionProcessor$0(this));
                        };
                        TGActionProcessor.prototype.process = function () {
                            this.processOnNewThread();
                        };
                        TGActionProcessor.prototype.onFinish = function () {
                            if (this.__onFinish != null) {
                                this.__onFinish.run();
                            }
                        };
                        TGActionProcessor.prototype.onError = function (e) {
                            if (this.errorHandler != null) {
                                this.errorHandler.handleError(e);
                            }
                        };
                        return TGActionProcessor;
                    }());
                    action.TGActionProcessor = TGActionProcessor;
                    TGActionProcessor["__class"] = "org.herac.tg.webapp.action.TGActionProcessor";
                    (function (TGActionProcessor) {
                        var TGActionProcessor$0 = (function () {
                            function TGActionProcessor$0(__parent) {
                                this.__parent = __parent;
                            }
                            TGActionProcessor$0.prototype.run = function () {
                                this.__parent.processOnCurrentThread();
                            };
                            return TGActionProcessor$0;
                        }());
                        TGActionProcessor.TGActionProcessor$0 = TGActionProcessor$0;
                        TGActionProcessor$0["__interfaces"] = ["java.lang.Runnable"];
                    })(TGActionProcessor = action.TGActionProcessor || (action.TGActionProcessor = {}));
                })(action = webapp.action || (webapp.action = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var busy;
                (function (busy) {
                    var TGBusyControl = (function () {
                        function TGBusyControl() {
                            this.count = 0;
                            this.count = 0;
                        }
                        TGBusyControl.prototype.block = function () {
                            this.count++;
                            this.updateViewLater(100);
                        };
                        TGBusyControl.prototype.unBlock = function () {
                            this.count--;
                            this.updateViewLater(0);
                        };
                        TGBusyControl.prototype.log = function (log) {
                            if (this.count > 0) {
                                $(TGBusyControl.BUSY_LOG).html(log);
                            }
                        };
                        TGBusyControl.prototype.updateView = function () {
                            if (this.count > 0) {
                                $(TGBusyControl.BUSY_OVERLAY).show();
                            }
                            else {
                                $(TGBusyControl.BUSY_OVERLAY).hide();
                                $(TGBusyControl.BUSY_LOG).empty();
                            }
                        };
                        TGBusyControl.prototype.updateViewLater = function (timeout) {
                            var _this = this;
                            var consumer = function (o) {
                                _this.updateView();
                            };
                            window.setTimeout(consumer, timeout);
                        };
                        TGBusyControl.getInstance = function (context) {
                            return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGBusyControl), new TGBusyControl.TGBusyControl$0());
                        };
                        return TGBusyControl;
                    }());
                    TGBusyControl.BUSY_OVERLAY = ".busy-overlay";
                    TGBusyControl.BUSY_LOG = ".busy-log";
                    busy.TGBusyControl = TGBusyControl;
                    TGBusyControl["__class"] = "org.herac.tg.webapp.busy.TGBusyControl";
                    (function (TGBusyControl) {
                        var TGBusyControl$0 = (function () {
                            function TGBusyControl$0() {
                            }
                            TGBusyControl$0.prototype.createInstance = function (context) {
                                return new org.herac.tg.webapp.busy.TGBusyControl();
                            };
                            return TGBusyControl$0;
                        }());
                        TGBusyControl.TGBusyControl$0 = TGBusyControl$0;
                        TGBusyControl$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                    })(TGBusyControl = busy.TGBusyControl || (busy.TGBusyControl = {}));
                })(busy = webapp.busy || (webapp.busy = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var control;
                (function (control) {
                    var TGTabAxisSelector = (function () {
                        function TGTabAxisSelector(controller) {
                            this.controller = null;
                            this.controller = controller;
                        }
                        TGTabAxisSelector.prototype.select = function (x, y) {
                            if (x >= 0 && y >= 0) {
                                var track = this.findSelectedTrack(y);
                                if (track != null) {
                                    var measure = this.findSelectedMeasure(track, x, y);
                                    if (measure != null) {
                                        this.callMoveTo(track, measure);
                                        return true;
                                    }
                                }
                            }
                            return false;
                        };
                        TGTabAxisSelector.prototype.findSelectedTrack = function (y) {
                            var layout = this.controller.getLayout();
                            var number = layout.getTrackNumberAt(y);
                            if (number >= 0) {
                                return layout.getSongManager().getTrack(this.controller.getSong(), number);
                            }
                            return null;
                        };
                        TGTabAxisSelector.prototype.findSelectedMeasure = function (track, x, y) {
                            var measure = null;
                            var minorDistance = 0;
                            var it = track.getMeasures();
                            while ((it.hasNext())) {
                                var m = it.next();
                                if (!m.isOutOfBounds() && m.getTs() != null) {
                                    var isAtX = (x >= m.getPosX() && x <= m.getPosX() + m.getWidth(this.controller.getLayout()) + m.getSpacing());
                                    if (isAtX) {
                                        var measureHeight = m.getTs().getSize();
                                        var distanceY = Math.min(Math.abs(y - (m.getPosY())), Math.abs(y - (m.getPosY() + measureHeight - 10)));
                                        if (measure == null || distanceY < minorDistance) {
                                            measure = m;
                                            minorDistance = distanceY;
                                        }
                                    }
                                }
                            }
                            ;
                            return measure;
                        };
                        TGTabAxisSelector.prototype.callMoveTo = function (track, measure) {
                            var tgActionProcessor = new org.herac.tg.webapp.action.TGActionProcessor(this.controller.getContext(), org.herac.tg.webapp.action.impl.TGMoveToAction.NAME);
                            tgActionProcessor.setAttribute(org.herac.tg.webapp.action.impl.TGMoveToAction.ATTRIBUTE_TRACK_NUMBER, track.getNumber());
                            tgActionProcessor.setAttribute(org.herac.tg.webapp.action.impl.TGMoveToAction.ATTRIBUTE_POSITION, measure.getStart());
                            tgActionProcessor.process();
                        };
                        return TGTabAxisSelector;
                    }());
                    control.TGTabAxisSelector = TGTabAxisSelector;
                    TGTabAxisSelector["__class"] = "org.herac.tg.webapp.control.TGTabAxisSelector";
                })(control = webapp.control || (webapp.control = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var control;
                (function (control) {
                    var TGTabControl = (function () {
                        function TGTabControl(context) {
                            this.context = null;
                            this.documentManager = null;
                            this.resourceFactory = null;
                            this.resourceBuffer = null;
                            this.styles = null;
                            this.layout = null;
                            this.scroll = null;
                            this.canvas = null;
                            this.selectionUpdated = null;
                            this.canvasWidth = 0;
                            this.canvasHeight = 0;
                            this.context = context;
                        }
                        TGTabControl.prototype.initialize = function () {
                            var canvasId = "canvas";
                            if (this.context != null) {
                                if (this.context.getAttribute(org.herac.tg.webapp.TGWebApp.CANVAS_ID) != null) {
                                    canvasId = this.context.getAttribute(org.herac.tg.webapp.TGWebApp.CANVAS_ID);
                                }
                                if (this.context.getAttribute(org.herac.tg.webapp.TGWebApp.CANVAS_WIDTH) != null) {
                                    var s = this.context.getAttribute(org.herac.tg.webapp.TGWebApp.CANVAS_WIDTH);
                                    try {
                                        this.canvasWidth = javaemul.internal.IntegerHelper.parseInt(s);
                                    }
                                    catch (e) {
                                    }
                                    ;
                                }
                                if (this.context.getAttribute(org.herac.tg.webapp.TGWebApp.CANVAS_HEIGHT) != null) {
                                    var s = this.context.getAttribute(org.herac.tg.webapp.TGWebApp.CANVAS_HEIGHT);
                                    try {
                                        this.canvasHeight = javaemul.internal.IntegerHelper.parseInt(s);
                                    }
                                    catch (e) {
                                    }
                                    ;
                                }
                            }
                            this.canvas = document.getElementById(canvasId);
                            this.documentManager = org.herac.tuxguitar.document.TGDocumentManager.getInstance(this.context);
                            this.resourceBuffer = new org.herac.tuxguitar.graphics.control.TGResourceBuffer();
                            this.resourceFactory = new org.herac.tg.webapp.graphics.TGWebResourceFactory();
                            this.styles = new org.herac.tg.webapp.control.TGTabLayoutStyles();
                            this.layout = new org.herac.tuxguitar.graphics.control.TGLayoutVertical(this, org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE | org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE | org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_COMPACT);
                            this.layout.loadStyles();
                            this.scroll = new org.herac.tg.webapp.control.TGTabScrollBar(this.context);
                            this.appendListeners();
                        };
                        TGTabControl.prototype.appendListeners = function () {
                            var listener = new org.herac.tg.webapp.control.TGTabEventListener(this);
                            org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.context).addRedrawListener(listener);
                            org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.context).addUpdateListener(listener);
                            org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.context).addDestroyListener(listener);
                            var tgTabGestureDetector = new org.herac.tg.webapp.control.TGTabGestureDetector(this);
                            tgTabGestureDetector.connect();
                            this.scroll.setHandler(new TGTabControl.TGTabControl$0(this));
                        };
                        TGTabControl.prototype.updateSelection = function () {
                            this.selectionUpdated = true;
                        };
                        TGTabControl.prototype.update = function () {
                            this.layout.updateSong();
                        };
                        TGTabControl.prototype.updateMeasure = function (number) {
                            this.layout.updateMeasureNumber(number);
                        };
                        TGTabControl.prototype.resizeCanvas = function () {
                            if (this.canvasWidth === 0) {
                                this.canvasWidth = TGTabControl.defaultCanvasWidth;
                            }
                            if (this.canvasHeight === 0) {
                                this.canvasHeight = TGTabControl.defaultCanvasHeight;
                            }
                            this.canvas.width = this.canvasWidth;
                            this.canvas.height = this.canvasHeight;
                        };
                        TGTabControl.prototype.paint = function () {
                            this.resizeCanvas();
                            var ctx = this.canvas.getContext("2d");
                            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                            var painter = new org.herac.tg.webapp.graphics.TGWebPainter(ctx);
                            var area = new org.herac.tuxguitar.graphics.TGRectangle(0, 0, Math.round(this.canvas.width), Math.round(this.canvas.height));
                            var oldWidth = this.layout.getWidth();
                            var oldHeight = this.layout.getHeight();
                            this.layout.paint(painter, area, 0, -this.scroll.getValue());
                            this.updateScroll();
                            if (org.herac.tuxguitar.player.base.MidiPlayer.getInstance(this.context).isRunning()) {
                                this.paintTablaturePlayMode(painter);
                            }
                            else if (this.selectionUpdated || (this.layout.getWidth() !== oldWidth || this.layout.getHeight() !== oldHeight)) {
                                this.selectionUpdated = false;
                                this.moveScrollTo$org_herac_tuxguitar_graphics_control_TGMeasureImpl$org_herac_tuxguitar_graphics_TGRectangle(org.herac.tg.webapp.selection.TGSelection.getInstance(this.context).getMeasure(), area);
                            }
                        };
                        TGTabControl.prototype.paintTablaturePlayMode = function (painter) {
                            var transportCache = org.herac.tg.webapp.transport.TGTransport.getInstance(this.context).getCache();
                            var measure = transportCache.getPlayMeasure();
                            var beat = transportCache.getPlayBeat();
                            if (measure != null) {
                                this.moveScrollTo$org_herac_tuxguitar_graphics_control_TGMeasureImpl(measure);
                                if (!measure.isOutOfBounds()) {
                                    this.layout.paintPlayMode(painter, measure, beat);
                                }
                            }
                        };
                        TGTabControl.prototype.updateScroll = function () {
                            this.scroll.setMaximum(Math.max(0, (this.layout.getHeight() - Math.round(this.canvas.height))));
                        };
                        TGTabControl.prototype.moveScrollTo$org_herac_tuxguitar_graphics_control_TGMeasureImpl = function (measure) {
                            this.moveScrollTo$org_herac_tuxguitar_graphics_control_TGMeasureImpl$org_herac_tuxguitar_graphics_TGRectangle(measure, new org.herac.tuxguitar.graphics.TGRectangle(0, 0, Math.round(this.canvas.width), Math.round(this.canvas.height)));
                        };
                        TGTabControl.prototype.moveScrollTo$org_herac_tuxguitar_graphics_control_TGMeasureImpl$org_herac_tuxguitar_graphics_TGRectangle = function (measure, area) {
                            if (measure != null && measure.getTs() != null) {
                                var mY = measure.getPosY();
                                var mHeight = measure.getTs().getSize();
                                var marginHeight = this.layout.getFirstTrackSpacing();
                                var playMode = org.herac.tuxguitar.player.base.MidiPlayer.getInstance(this.context).isRunning();
                                var vScrollValue = this.computeScrollValue(mY, mHeight, marginHeight, area.getHeight(), this.layout.getHeight(), playMode);
                                if (vScrollValue != null) {
                                    this.scroll.setValue(vScrollValue);
                                }
                            }
                        };
                        TGTabControl.prototype.moveScrollTo = function (measure, area) {
                            if (((measure != null && measure instanceof org.herac.tuxguitar.graphics.control.TGMeasureImpl) || measure === null) && ((area != null && area instanceof org.herac.tuxguitar.graphics.TGRectangle) || area === null)) {
                                return this.moveScrollTo$org_herac_tuxguitar_graphics_control_TGMeasureImpl$org_herac_tuxguitar_graphics_TGRectangle(measure, area);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.graphics.control.TGMeasureImpl) || measure === null) && area === undefined) {
                                return this.moveScrollTo$org_herac_tuxguitar_graphics_control_TGMeasureImpl(measure);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGTabControl.prototype.computeScrollValue = function (mPos, mSize, mMargin, areaSize, fullSize, playMode) {
                            var value = null;
                            var scrollPos = this.scroll.getValue();
                            if (mPos < 0 && (areaSize >= (mSize + mMargin) || ((mPos + mSize - mMargin) <= 0))) {
                                value = ((scrollPos + mPos) - mMargin);
                            }
                            else if ((mPos + mSize) > areaSize && (areaSize >= (mSize + mMargin) || mPos > areaSize)) {
                                value = (scrollPos + mPos + mSize + mMargin - areaSize);
                                if (playMode) {
                                    value += Math.min((fullSize - (scrollPos + mPos + mSize + mMargin)), (areaSize - mSize - (mMargin * 2)));
                                }
                            }
                            return (value != null ? Math.max(value, 0) : null);
                        };
                        TGTabControl.prototype.getCanvas = function () {
                            return this.canvas;
                        };
                        TGTabControl.prototype.getScroll = function () {
                            return this.scroll;
                        };
                        TGTabControl.prototype.getContext = function () {
                            return this.context;
                        };
                        TGTabControl.prototype.getLayout = function () {
                            return this.layout;
                        };
                        TGTabControl.prototype.getResourceFactory = function () {
                            return this.resourceFactory;
                        };
                        TGTabControl.prototype.getResourceBuffer = function () {
                            return this.resourceBuffer;
                        };
                        TGTabControl.prototype.getSongManager = function () {
                            return this.documentManager.getSongManager();
                        };
                        TGTabControl.prototype.getSong = function () {
                            return this.documentManager.getSong();
                        };
                        TGTabControl.prototype.getStyles = function () {
                            return this.styles;
                        };
                        TGTabControl.prototype.getTrackSelection = function () {
                            return ((this.getLayout().getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_MULTITRACK) === 0 ? org.herac.tg.webapp.selection.TGSelection.getInstance(this.context).getTrack().getNumber() : -1);
                        };
                        TGTabControl.prototype.isRunning$org_herac_tuxguitar_song_models_TGBeat = function (beat) {
                            return (this.isRunning$org_herac_tuxguitar_song_models_TGMeasure(beat.getMeasure()) && org.herac.tg.webapp.transport.TGTransport.getInstance(this.context).getCache().isPlaying$org_herac_tuxguitar_song_models_TGMeasure$org_herac_tuxguitar_song_models_TGBeat(beat.getMeasure(), beat));
                        };
                        TGTabControl.prototype.isRunning = function (beat) {
                            if (((beat != null && beat instanceof org.herac.tuxguitar.song.models.TGBeat) || beat === null)) {
                                return this.isRunning$org_herac_tuxguitar_song_models_TGBeat(beat);
                            }
                            else if (((beat != null && beat instanceof org.herac.tuxguitar.song.models.TGMeasure) || beat === null)) {
                                return this.isRunning$org_herac_tuxguitar_song_models_TGMeasure(beat);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGTabControl.prototype.isRunning$org_herac_tuxguitar_song_models_TGMeasure = function (measure) {
                            return (org.herac.tg.webapp.transport.TGTransport.getInstance(this.context).getCache().isPlaying$org_herac_tuxguitar_song_models_TGMeasure(measure));
                        };
                        TGTabControl.prototype.isLoopSHeader = function (measureHeader) {
                            return false;
                        };
                        TGTabControl.prototype.isLoopEHeader = function (measureHeader) {
                            return false;
                        };
                        TGTabControl.getInstance = function (context) {
                            return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGTabControl), new TGTabControl.TGTabControl$1());
                        };
                        return TGTabControl;
                    }());
                    TGTabControl.defaultCanvasWidth = 920;
                    TGTabControl.defaultCanvasHeight = 500;
                    control.TGTabControl = TGTabControl;
                    TGTabControl["__class"] = "org.herac.tg.webapp.control.TGTabControl";
                    TGTabControl["__interfaces"] = ["org.herac.tuxguitar.graphics.control.TGController"];
                    (function (TGTabControl) {
                        var TGTabControl$0 = (function () {
                            function TGTabControl$0(__parent) {
                                this.__parent = __parent;
                            }
                            TGTabControl$0.prototype.run = function () {
                                this.__parent.paint();
                            };
                            return TGTabControl$0;
                        }());
                        TGTabControl.TGTabControl$0 = TGTabControl$0;
                        TGTabControl$0["__interfaces"] = ["java.lang.Runnable"];
                        var TGTabControl$1 = (function () {
                            function TGTabControl$1() {
                            }
                            TGTabControl$1.prototype.createInstance = function (context) {
                                return new org.herac.tg.webapp.control.TGTabControl(context);
                            };
                            return TGTabControl$1;
                        }());
                        TGTabControl.TGTabControl$1 = TGTabControl$1;
                        TGTabControl$1["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                    })(TGTabControl = control.TGTabControl || (control.TGTabControl = {}));
                })(control = webapp.control || (webapp.control = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var control;
                (function (control) {
                    var TGTabEventListener = (function () {
                        function TGTabEventListener(songView) {
                            this.controller = null;
                            this.controller = songView;
                        }
                        TGTabEventListener.prototype.processUpdateEvent = function (event) {
                            var type = (event.getAttribute(org.herac.tg.webapp.event.TGUpdateEvent.PROPERTY_UPDATE_MODE) | 0);
                            if (type === org.herac.tg.webapp.event.TGUpdateEvent.SELECTION) {
                                this.controller.updateSelection();
                            }
                            else if (type === org.herac.tg.webapp.event.TGUpdateEvent.MEASURE_UPDATED) {
                                this.controller.updateMeasure(/* intValue */ (event.getAttribute(org.herac.tg.webapp.event.TGUpdateMeasureEvent.PROPERTY_MEASURE_NUMBER) | 0));
                            }
                            else if (type === org.herac.tg.webapp.event.TGUpdateEvent.SONG_UPDATED) {
                                this.controller.update();
                            }
                            else if (type === org.herac.tg.webapp.event.TGUpdateEvent.SONG_LOADED) {
                                this.controller.update();
                            }
                        };
                        TGTabEventListener.prototype.processRedrawEvent = function (event) {
                            var type = (event.getAttribute(org.herac.tg.webapp.event.TGRedrawEvent.PROPERTY_REDRAW_MODE) | 0);
                            if (type === org.herac.tg.webapp.event.TGRedrawEvent.NORMAL || type === org.herac.tg.webapp.event.TGRedrawEvent.PLAYING_NEW_BEAT) {
                                this.controller.paint();
                            }
                        };
                        TGTabEventListener.prototype.processEvent = function (event) {
                            if ((function (o1, o2) { if (o1.equals) {
                                return o1.equals(o2);
                            }
                            else {
                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                            } })(org.herac.tg.webapp.event.TGRedrawEvent.EVENT_TYPE, event.getEventType())) {
                                this.processRedrawEvent(event);
                            }
                            else if ((function (o1, o2) { if (o1.equals) {
                                return o1.equals(o2);
                            }
                            else {
                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                            } })(org.herac.tg.webapp.event.TGUpdateEvent.EVENT_TYPE, event.getEventType())) {
                                this.processUpdateEvent(event);
                            }
                        };
                        return TGTabEventListener;
                    }());
                    control.TGTabEventListener = TGTabEventListener;
                    TGTabEventListener["__class"] = "org.herac.tg.webapp.control.TGTabEventListener";
                    TGTabEventListener["__interfaces"] = ["org.herac.tuxguitar.event.TGEventListener"];
                })(control = webapp.control || (webapp.control = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var control;
                (function (control) {
                    var TGTabGestureDetector = (function () {
                        function TGTabGestureDetector(controller) {
                            this.controller = null;
                            this.axisSelector = null;
                            this.scrolling = false;
                            this.scrollPosition = 0;
                            this.controller = controller;
                            this.axisSelector = new org.herac.tg.webapp.control.TGTabAxisSelector(controller);
                        }
                        TGTabGestureDetector.prototype.connect = function () {
                            var _this = this;
                            this.controller.getCanvas().setAttribute("draggable", "false");
                            this.controller.getCanvas().onmouseup = function (e) {
                                _this.onMouseUp(e);
                                return true;
                            };
                            this.controller.getCanvas().onmousedown = function (e) {
                                _this.onMouseDown(e);
                                return true;
                            };
                            this.controller.getCanvas().onmousemove = function (e) {
                                _this.onMouseMove(e);
                                return true;
                            };
                            this.controller.getCanvas().onmouseleave = function (e) {
                                _this.onMouseLeave(e);
                                return true;
                            };
                        };
                        TGTabGestureDetector.prototype.onMouseDown = function (e) {
                            this.scrolling = false;
                        };
                        TGTabGestureDetector.prototype.onMouseUp = function (e) {
                            if (!this.scrolling) {
                                this.axisSelector.select(e.offsetX, e.offsetY);
                            }
                            this.scrolling = false;
                        };
                        TGTabGestureDetector.prototype.onMouseMove = function (e) {
                            if (e.buttons === 1) {
                                if (this.scrolling) {
                                    var currentMove = (this.scrollPosition - e.offsetY);
                                    this.controller.getScroll().setValue(this.controller.getScroll().getValue() + currentMove);
                                }
                                else {
                                }
                                this.scrollPosition = e.offsetY;
                                this.scrolling = true;
                            }
                        };
                        TGTabGestureDetector.prototype.onMouseLeave = function (e) {
                            this.scrolling = false;
                        };
                        return TGTabGestureDetector;
                    }());
                    control.TGTabGestureDetector = TGTabGestureDetector;
                    TGTabGestureDetector["__class"] = "org.herac.tg.webapp.control.TGTabGestureDetector";
                })(control = webapp.control || (webapp.control = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var control;
                (function (control) {
                    var TGTabScrollBar = (function () {
                        function TGTabScrollBar(context) {
                            this.context = null;
                            this.handler = null;
                            this.value = 0;
                            this.maximum = 0;
                            this.context = context;
                            this.initialize();
                        }
                        TGTabScrollBar.prototype.initialize = function () {
                            var _this = this;
                            $("#action-scroll-up").click(function (t) {
                                _this.decrement();
                                return true;
                            });
                            $("#action-scroll-down").click(function (t) {
                                _this.increment();
                                return true;
                            });
                        };
                        TGTabScrollBar.prototype.setHandler = function (handler) {
                            this.handler = handler;
                        };
                        TGTabScrollBar.prototype.getMaximum = function () {
                            return this.maximum;
                        };
                        TGTabScrollBar.prototype.setMaximum = function (maximum) {
                            this.maximum = maximum;
                        };
                        TGTabScrollBar.prototype.getValue = function () {
                            return this.value;
                        };
                        TGTabScrollBar.prototype.setValue = function (value) {
                            var newValue = value;
                            if (newValue < 0) {
                                newValue = 0;
                            }
                            else if (newValue > this.maximum) {
                                newValue = this.maximum;
                            }
                            if (this.value !== newValue) {
                                this.value = newValue;
                                this.onChange();
                            }
                        };
                        TGTabScrollBar.prototype.increment = function () {
                            this.setValue(this.getValue() + TGTabScrollBar.DEFAULT_INCREMENT);
                        };
                        TGTabScrollBar.prototype.decrement = function () {
                            this.setValue(this.getValue() - TGTabScrollBar.DEFAULT_INCREMENT);
                        };
                        TGTabScrollBar.prototype.onChange = function () {
                            if (this.handler != null) {
                                org.herac.tuxguitar.thread.TGThreadManager.getInstance(this.context).start(this.handler);
                            }
                        };
                        return TGTabScrollBar;
                    }());
                    TGTabScrollBar.DEFAULT_INCREMENT = 50;
                    control.TGTabScrollBar = TGTabScrollBar;
                    TGTabScrollBar["__class"] = "org.herac.tg.webapp.control.TGTabScrollBar";
                })(control = webapp.control || (webapp.control = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var editor;
                (function (editor) {
                    var TGEditorManager = (function () {
                        function TGEditorManager(context) {
                            this.context = null;
                            this.context = context;
                        }
                        TGEditorManager.prototype.redraw = function (sourceContext) {
                            if (sourceContext === void 0) { sourceContext = null; }
                            this.asyncRun(new TGEditorManager.TGEditorManager$0(this, sourceContext));
                        };
                        TGEditorManager.prototype.redrawPlayingThread = function (sourceContext) {
                            if (sourceContext === void 0) { sourceContext = null; }
                            this.asyncRun(new TGEditorManager.TGEditorManager$1(this, sourceContext));
                        };
                        TGEditorManager.prototype.redrawPlayingNewBeat = function (sourceContext) {
                            if (sourceContext === void 0) { sourceContext = null; }
                            this.asyncRun(new TGEditorManager.TGEditorManager$2(this, sourceContext));
                        };
                        TGEditorManager.prototype.updateSelection = function (sourceContext) {
                            if (sourceContext === void 0) { sourceContext = null; }
                            this.asyncRun(new TGEditorManager.TGEditorManager$3(this, sourceContext));
                        };
                        TGEditorManager.prototype.updateMeasure = function (number, sourceContext) {
                            if (sourceContext === void 0) { sourceContext = null; }
                            this.doUpdateMeasure(number, sourceContext);
                        };
                        TGEditorManager.prototype.updateSong = function (sourceContext) {
                            if (sourceContext === void 0) { sourceContext = null; }
                            this.doUpdate(org.herac.tg.webapp.event.TGUpdateEvent.SONG_UPDATED, sourceContext);
                        };
                        TGEditorManager.prototype.updateSavedSong = function (sourceContext) {
                            if (sourceContext === void 0) { sourceContext = null; }
                            this.doUpdate(org.herac.tg.webapp.event.TGUpdateEvent.SONG_SAVED, sourceContext);
                        };
                        TGEditorManager.prototype.updateLoadedSong = function (context) {
                            if (context === void 0) { context = null; }
                            this.doUpdate(org.herac.tg.webapp.event.TGUpdateEvent.SONG_LOADED, context);
                        };
                        TGEditorManager.prototype.destroy = function (context) {
                            this.doDestroy(context);
                        };
                        TGEditorManager.prototype.addRedrawListener = function (listener) {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).addListener(org.herac.tg.webapp.event.TGRedrawEvent.EVENT_TYPE, listener);
                        };
                        TGEditorManager.prototype.removeRedrawListener = function (listener) {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).removeListener(org.herac.tg.webapp.event.TGRedrawEvent.EVENT_TYPE, listener);
                        };
                        TGEditorManager.prototype.addUpdateListener = function (listener) {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).addListener(org.herac.tg.webapp.event.TGUpdateEvent.EVENT_TYPE, listener);
                        };
                        TGEditorManager.prototype.removeUpdateListener = function (listener) {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).removeListener(org.herac.tg.webapp.event.TGUpdateEvent.EVENT_TYPE, listener);
                        };
                        TGEditorManager.prototype.addDestroyListener = function (listener) {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).addListener(org.herac.tg.webapp.event.TGDestroyEvent.EVENT_TYPE, listener);
                        };
                        TGEditorManager.prototype.removeDestroyListener = function (listener) {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).removeListener(org.herac.tg.webapp.event.TGDestroyEvent.EVENT_TYPE, listener);
                        };
                        TGEditorManager.prototype.doRedraw = function (type, context) {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).fireEvent(new org.herac.tg.webapp.event.TGRedrawEvent(type, context));
                        };
                        TGEditorManager.prototype.doUpdate = function (type, context) {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).fireEvent(new org.herac.tg.webapp.event.TGUpdateEvent(type, context));
                        };
                        TGEditorManager.prototype.doUpdateMeasure = function (number, context) {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).fireEvent(new org.herac.tg.webapp.event.TGUpdateMeasureEvent(number, context));
                        };
                        TGEditorManager.prototype.doDestroy = function (context) {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).fireEvent(new org.herac.tg.webapp.event.TGDestroyEvent(context));
                        };
                        TGEditorManager.prototype.asyncRun = function (runnable) {
                            org.herac.tuxguitar.thread.TGThreadManager.getInstance(this.context).start(new TGEditorManager.TGEditorManager$4(this, runnable));
                        };
                        TGEditorManager.getInstance = function (context) {
                            return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGEditorManager), new TGEditorManager.TGEditorManager$5());
                        };
                        return TGEditorManager;
                    }());
                    editor.TGEditorManager = TGEditorManager;
                    TGEditorManager["__class"] = "org.herac.tg.webapp.editor.TGEditorManager";
                    (function (TGEditorManager) {
                        var TGEditorManager$0 = (function () {
                            function TGEditorManager$0(__parent, sourceContext) {
                                this.sourceContext = sourceContext;
                                this.__parent = __parent;
                            }
                            TGEditorManager$0.prototype.run = function () {
                                this.__parent.doRedraw(org.herac.tg.webapp.event.TGRedrawEvent.NORMAL, this.sourceContext);
                            };
                            return TGEditorManager$0;
                        }());
                        TGEditorManager.TGEditorManager$0 = TGEditorManager$0;
                        TGEditorManager$0["__interfaces"] = ["java.lang.Runnable"];
                        var TGEditorManager$1 = (function () {
                            function TGEditorManager$1(__parent, sourceContext) {
                                this.sourceContext = sourceContext;
                                this.__parent = __parent;
                            }
                            TGEditorManager$1.prototype.run = function () {
                                this.__parent.doRedraw(org.herac.tg.webapp.event.TGRedrawEvent.PLAYING_THREAD, this.sourceContext);
                            };
                            return TGEditorManager$1;
                        }());
                        TGEditorManager.TGEditorManager$1 = TGEditorManager$1;
                        TGEditorManager$1["__interfaces"] = ["java.lang.Runnable"];
                        var TGEditorManager$2 = (function () {
                            function TGEditorManager$2(__parent, sourceContext) {
                                this.sourceContext = sourceContext;
                                this.__parent = __parent;
                            }
                            TGEditorManager$2.prototype.run = function () {
                                this.__parent.doRedraw(org.herac.tg.webapp.event.TGRedrawEvent.PLAYING_NEW_BEAT, this.sourceContext);
                            };
                            return TGEditorManager$2;
                        }());
                        TGEditorManager.TGEditorManager$2 = TGEditorManager$2;
                        TGEditorManager$2["__interfaces"] = ["java.lang.Runnable"];
                        var TGEditorManager$3 = (function () {
                            function TGEditorManager$3(__parent, sourceContext) {
                                this.sourceContext = sourceContext;
                                this.__parent = __parent;
                            }
                            TGEditorManager$3.prototype.run = function () {
                                this.__parent.doUpdate(org.herac.tg.webapp.event.TGUpdateEvent.SELECTION, this.sourceContext);
                            };
                            return TGEditorManager$3;
                        }());
                        TGEditorManager.TGEditorManager$3 = TGEditorManager$3;
                        TGEditorManager$3["__interfaces"] = ["java.lang.Runnable"];
                        var TGEditorManager$4 = (function () {
                            function TGEditorManager$4(__parent, runnable) {
                                this.runnable = runnable;
                                this.__parent = __parent;
                            }
                            TGEditorManager$4.prototype.run = function () {
                                try {
                                    this.runnable.run();
                                }
                                catch (throwable) {
                                    org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.__parent.context).handleError(throwable);
                                }
                                ;
                            };
                            return TGEditorManager$4;
                        }());
                        TGEditorManager.TGEditorManager$4 = TGEditorManager$4;
                        TGEditorManager$4["__interfaces"] = ["java.lang.Runnable"];
                        var TGEditorManager$5 = (function () {
                            function TGEditorManager$5() {
                            }
                            TGEditorManager$5.prototype.createInstance = function (context) {
                                return new org.herac.tg.webapp.editor.TGEditorManager(context);
                            };
                            return TGEditorManager$5;
                        }());
                        TGEditorManager.TGEditorManager$5 = TGEditorManager$5;
                        TGEditorManager$5["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                    })(TGEditorManager = editor.TGEditorManager || (editor.TGEditorManager = {}));
                })(editor = webapp.editor || (webapp.editor = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var graphics;
                (function (graphics) {
                    var TGWebResourceFactory = (function () {
                        function TGWebResourceFactory() {
                        }
                        TGWebResourceFactory.prototype.createColor$int$int$int = function (red, green, blue) {
                            return new org.herac.tg.webapp.graphics.TGWebColor(red, green, blue);
                        };
                        TGWebResourceFactory.prototype.createColor = function (red, green, blue) {
                            if (((typeof red === 'number') || red === null) && ((typeof green === 'number') || green === null) && ((typeof blue === 'number') || blue === null)) {
                                return this.createColor$int$int$int(red, green, blue);
                            }
                            else if (((red != null && red instanceof org.herac.tuxguitar.graphics.TGColorModel) || red === null) && green === undefined && blue === undefined) {
                                return this.createColor$org_herac_tuxguitar_graphics_TGColorModel(red);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGWebResourceFactory.prototype.createColor$org_herac_tuxguitar_graphics_TGColorModel = function (cm) {
                            return this.createColor$int$int$int(cm.getRed(), cm.getGreen(), cm.getBlue());
                        };
                        TGWebResourceFactory.prototype.createFont$java_lang_String$float$boolean$boolean = function (name, height, bold, italic) {
                            return new org.herac.tg.webapp.graphics.TGWebFont(name, height, bold, italic);
                        };
                        TGWebResourceFactory.prototype.createFont = function (name, height, bold, italic) {
                            if (((typeof name === 'string') || name === null) && ((typeof height === 'number') || height === null) && ((typeof bold === 'boolean') || bold === null) && ((typeof italic === 'boolean') || italic === null)) {
                                return this.createFont$java_lang_String$float$boolean$boolean(name, height, bold, italic);
                            }
                            else if (((name != null && name instanceof org.herac.tuxguitar.graphics.TGFontModel) || name === null) && height === undefined && bold === undefined && italic === undefined) {
                                return this.createFont$org_herac_tuxguitar_graphics_TGFontModel(name);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGWebResourceFactory.prototype.createFont$org_herac_tuxguitar_graphics_TGFontModel = function (fm) {
                            return this.createFont$java_lang_String$float$boolean$boolean(fm.getName(), fm.getHeight(), fm.isBold(), fm.isItalic());
                        };
                        TGWebResourceFactory.prototype.createImage = function (width, height) {
                            throw new org.herac.tg.webapp.exception.TGWebUnsupportedOperationException();
                        };
                        return TGWebResourceFactory;
                    }());
                    graphics.TGWebResourceFactory = TGWebResourceFactory;
                    TGWebResourceFactory["__class"] = "org.herac.tg.webapp.graphics.TGWebResourceFactory";
                    TGWebResourceFactory["__interfaces"] = ["org.herac.tuxguitar.graphics.TGResourceFactory"];
                })(graphics = webapp.graphics || (webapp.graphics = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var midi;
                (function (midi) {
                    var synthesizer;
                    (function (synthesizer) {
                        var MidiOutputPortProviderImpl = (function () {
                            function MidiOutputPortProviderImpl() {
                                this.ports = null;
                            }
                            MidiOutputPortProviderImpl.prototype.listPorts = function () {
                                try {
                                    if (this.ports == null) {
                                        this.ports = (new java.util.ArrayList());
                                        this.ports.add(new org.herac.tg.webapp.midi.synthesizer.MidiOutputPortImpl());
                                    }
                                    return this.ports;
                                }
                                catch (throwable) {
                                    throw new org.herac.tuxguitar.player.base.MidiPlayerException(throwable.message, throwable);
                                }
                                ;
                            };
                            MidiOutputPortProviderImpl.prototype.closeAll = function () {
                                try {
                                    if (this.ports != null) {
                                        for (var index121 = this.ports.iterator(); index121.hasNext();) {
                                            var midiOutputPort = index121.next();
                                            {
                                                midiOutputPort.close();
                                            }
                                        }
                                        this.ports = null;
                                    }
                                }
                                catch (throwable) {
                                    throw new org.herac.tuxguitar.player.base.MidiPlayerException(throwable.message, throwable);
                                }
                                ;
                            };
                            return MidiOutputPortProviderImpl;
                        }());
                        synthesizer.MidiOutputPortProviderImpl = MidiOutputPortProviderImpl;
                        MidiOutputPortProviderImpl["__class"] = "org.herac.tg.webapp.midi.synthesizer.MidiOutputPortProviderImpl";
                        MidiOutputPortProviderImpl["__interfaces"] = ["org.herac.tuxguitar.player.base.MidiOutputPortProvider"];
                    })(synthesizer = midi.synthesizer || (midi.synthesizer = {}));
                })(midi = webapp.midi || (webapp.midi = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var midi;
                (function (midi) {
                    var synthesizer;
                    (function (synthesizer) {
                        var MidiReceiverImpl = (function () {
                            function MidiReceiverImpl() {
                            }
                            MidiReceiverImpl.prototype.sendProgramChange = function (channel, value) {
                                MIDI.programChange(channel, channel === MidiReceiverImpl.PERCUSSION_CHANNEL ? MidiReceiverImpl.PERCUSSION_PROGRAM : value, 0);
                            };
                            MidiReceiverImpl.prototype.sendControlChange = function (channel, controller, value) {
                                MIDI.setController(channel, controller, value, 0);
                            };
                            MidiReceiverImpl.prototype.sendNoteOn = function (channel, key, velocity) {
                                MIDI.noteOn(channel, key, velocity, 0);
                            };
                            MidiReceiverImpl.prototype.sendNoteOff = function (channel, key, velocity) {
                                MIDI.noteOff(channel, key, 0);
                            };
                            MidiReceiverImpl.prototype.sendPitchBend = function (channel, value) {
                                MIDI.pitchBend(channel, value, 0);
                            };
                            MidiReceiverImpl.prototype.sendAllNotesOff = function () {
                                MIDI.stopAllNotes();
                            };
                            return MidiReceiverImpl;
                        }());
                        MidiReceiverImpl.PERCUSSION_CHANNEL = 9;
                        MidiReceiverImpl.PERCUSSION_PROGRAM = 128;
                        synthesizer.MidiReceiverImpl = MidiReceiverImpl;
                        MidiReceiverImpl["__class"] = "org.herac.tg.webapp.midi.synthesizer.MidiReceiverImpl";
                        MidiReceiverImpl["__interfaces"] = ["org.herac.tuxguitar.gm.port.GMReceiver"];
                    })(synthesizer = midi.synthesizer || (midi.synthesizer = {}));
                })(midi = webapp.midi || (webapp.midi = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var midi;
                (function (midi) {
                    var util;
                    (function (util) {
                        var MidiTickUtil = (function () {
                            function MidiTickUtil() {
                            }
                            MidiTickUtil.getStart = function (context, tick) {
                                var startPoint = MidiTickUtil.getStartPoint(context);
                                var start = startPoint;
                                var length = 0;
                                var song = org.herac.tuxguitar.document.TGDocumentManager.getInstance(context).getSong();
                                var controller = new org.herac.tuxguitar.player.base.MidiRepeatController(song, MidiTickUtil.getSHeader(context), MidiTickUtil.getEHeader(context));
                                while ((!controller.finished())) {
                                    var header = song.getMeasureHeader(controller.getIndex());
                                    controller.process();
                                    if (controller.shouldPlay()) {
                                        start += length;
                                        length = header.getLength();
                                        if (tick >= start && tick < (start + length)) {
                                            return header.getStart() + (tick - start);
                                        }
                                    }
                                }
                                ;
                                return (tick < startPoint ? startPoint : start);
                            };
                            MidiTickUtil.getTick = function (context, start) {
                                var startPoint = MidiTickUtil.getStartPoint(context);
                                var tick = startPoint;
                                var length = 0;
                                var song = org.herac.tuxguitar.document.TGDocumentManager.getInstance(context).getSong();
                                var controller = new org.herac.tuxguitar.player.base.MidiRepeatController(song, MidiTickUtil.getSHeader(context), MidiTickUtil.getEHeader(context));
                                while ((!controller.finished())) {
                                    var header = song.getMeasureHeader(controller.getIndex());
                                    controller.process();
                                    if (controller.shouldPlay()) {
                                        tick += length;
                                        length = header.getLength();
                                        if (start >= header.getStart() && start < (header.getStart() + length)) {
                                            return tick;
                                        }
                                    }
                                }
                                ;
                                return (start < startPoint ? startPoint : tick);
                            };
                            MidiTickUtil.getStartPoint = function (context) {
                                var midiPlayer = org.herac.tuxguitar.player.base.MidiPlayer.getInstance(context);
                                midiPlayer.updateLoop(false);
                                return midiPlayer.getLoopSPosition();
                            };
                            MidiTickUtil.getSHeader = function (context) {
                                return org.herac.tuxguitar.player.base.MidiPlayer.getInstance(context).getLoopSHeader();
                            };
                            MidiTickUtil.getEHeader = function (context) {
                                return org.herac.tuxguitar.player.base.MidiPlayer.getInstance(context).getLoopEHeader();
                            };
                            return MidiTickUtil;
                        }());
                        util.MidiTickUtil = MidiTickUtil;
                        MidiTickUtil["__class"] = "org.herac.tg.webapp.midi.util.MidiTickUtil";
                    })(util = midi.util || (midi.util = {}));
                })(midi = webapp.midi || (webapp.midi = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var selection;
                (function (selection) {
                    var TGSelection = (function () {
                        function TGSelection(context) {
                            this.context = null;
                            this.track = null;
                            this.measure = null;
                            this.context = context;
                            this.appendListeners();
                        }
                        TGSelection.prototype.getTrack = function () {
                            return this.track;
                        };
                        TGSelection.prototype.setTrack = function (track) {
                            this.track = track;
                        };
                        TGSelection.prototype.getMeasure = function () {
                            return this.measure;
                        };
                        TGSelection.prototype.setMeasure = function (measure) {
                            this.measure = measure;
                        };
                        TGSelection.prototype.moveTo$org_herac_tuxguitar_song_models_TGTrack$org_herac_tuxguitar_song_models_TGMeasure = function (track, measure) {
                            this.track = track;
                            this.measure = measure;
                        };
                        TGSelection.prototype.moveTo = function (track, measure) {
                            if (((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null) && ((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null)) {
                                return this.moveTo$org_herac_tuxguitar_song_models_TGTrack$org_herac_tuxguitar_song_models_TGMeasure(track, measure);
                            }
                            else if (((typeof track === 'number') || track === null) && ((typeof measure === 'number') || measure === null)) {
                                return this.moveTo$java_lang_Integer$java_lang_Long(track, measure);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSelection.prototype.moveTo$java_lang_Integer$java_lang_Long = function (trackNumber, position) {
                            var track = this.findTrack(trackNumber);
                            var measure = this.findMeasure(position, track);
                            if (track != null && measure != null) {
                                this.moveTo$org_herac_tuxguitar_song_models_TGTrack$org_herac_tuxguitar_song_models_TGMeasure(track, measure);
                            }
                        };
                        TGSelection.prototype.findTrack = function (number) {
                            var documentManager = org.herac.tuxguitar.document.TGDocumentManager.getInstance(this.context);
                            var track = null;
                            if (number != null) {
                                track = documentManager.getSongManager().getTrack(documentManager.getSong(), number);
                            }
                            if (track == null) {
                                track = documentManager.getSongManager().getFirstTrack(documentManager.getSong());
                            }
                            return track;
                        };
                        TGSelection.prototype.findMeasure = function (position, track) {
                            var documentManager = org.herac.tuxguitar.document.TGDocumentManager.getInstance(this.context);
                            var measure = null;
                            if (track != null) {
                                if (position != null) {
                                    measure = documentManager.getSongManager().getTrackManager().getMeasureAt(track, position);
                                }
                                if (measure == null) {
                                    measure = documentManager.getSongManager().getTrackManager().getFirstMeasure(track);
                                }
                            }
                            return measure;
                        };
                        TGSelection.prototype.appendListeners = function () {
                            org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.context).addUpdateListener(new org.herac.tg.webapp.selection.TGSelectionEventListener(this));
                        };
                        TGSelection.getInstance = function (context) {
                            return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGSelection), new TGSelection.TGSelection$0());
                        };
                        return TGSelection;
                    }());
                    selection.TGSelection = TGSelection;
                    TGSelection["__class"] = "org.herac.tg.webapp.selection.TGSelection";
                    (function (TGSelection) {
                        var TGSelection$0 = (function () {
                            function TGSelection$0() {
                            }
                            TGSelection$0.prototype.createInstance = function (context) {
                                return new org.herac.tg.webapp.selection.TGSelection(context);
                            };
                            return TGSelection$0;
                        }());
                        TGSelection.TGSelection$0 = TGSelection$0;
                        TGSelection$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                    })(TGSelection = selection.TGSelection || (selection.TGSelection = {}));
                })(selection = webapp.selection || (webapp.selection = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var selection;
                (function (selection_1) {
                    var TGSelectionEventListener = (function () {
                        function TGSelectionEventListener(selection) {
                            this.selection = null;
                            this.selection = selection;
                        }
                        TGSelectionEventListener.prototype.processUpdateEvent = function (event) {
                            var type = (event.getAttribute(org.herac.tg.webapp.event.TGUpdateEvent.PROPERTY_UPDATE_MODE) | 0);
                            if (type === org.herac.tg.webapp.event.TGUpdateEvent.SONG_LOADED) {
                                this.selection.moveTo$java_lang_Integer$java_lang_Long(1, org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME);
                            }
                        };
                        TGSelectionEventListener.prototype.processEvent = function (event) {
                            if ((function (o1, o2) { if (o1.equals) {
                                return o1.equals(o2);
                            }
                            else {
                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                            } })(org.herac.tg.webapp.event.TGUpdateEvent.EVENT_TYPE, event.getEventType())) {
                                this.processUpdateEvent(event);
                            }
                        };
                        return TGSelectionEventListener;
                    }());
                    selection_1.TGSelectionEventListener = TGSelectionEventListener;
                    TGSelectionEventListener["__class"] = "org.herac.tg.webapp.selection.TGSelectionEventListener";
                    TGSelectionEventListener["__interfaces"] = ["org.herac.tuxguitar.event.TGEventListener"];
                })(selection = webapp.selection || (webapp.selection = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var TGWebApp = (function () {
                    function TGWebApp(tabURL, soundfontsURL, canvasId, width, height) {
                        this.initialize(tabURL, soundfontsURL, canvasId, width, height);
                    }
                    TGWebApp.main = function (args) {
                        window.onload = function (e) {
                            var canvasId = "tgcanvas";
                            var playerURI = $("#" + canvasId).attr("player");
                            var tabURL = $("#" + canvasId).attr("tab");
                            var width = $("#" + canvasId).attr("width");
                            var height = $("#" + canvasId).attr("height");
                            return new TGWebApp(tabURL, playerURI + "/soundfonts/FluidR3_GM/", canvasId, width, height);
                        };
                    };
                    TGWebApp.prototype.initialize = function (tabURL, soundfontsURL, canvasId, width, height) {
                        var context = new org.herac.tuxguitar.util.TGContext();
                        context.setAttribute(TGWebApp.ATTRIBUTE_SOUNDFONTS_URL, soundfontsURL);
                        context.setAttribute(TGWebApp.CANVAS_ID, canvasId);
                        context.setAttribute(TGWebApp.CANVAS_WIDTH, width);
                        context.setAttribute(TGWebApp.CANVAS_HEIGHT, height);
                        org.herac.tuxguitar.thread.TGThreadManager.getInstance(context).setThreadHandler(new org.herac.tg.webapp.thread.TGThreadHandlerImpl());
                        org.herac.tg.webapp.action.TGActionAdapterManager.getInstance(context).initialize();
                        var documentManager = org.herac.tuxguitar.document.TGDocumentManager.getInstance(context);
                        org.herac.tg.webapp.selection.TGSelection.getInstance(context);
                        org.herac.tg.webapp.control.TGTabControl.getInstance(context).initialize();
                        var tgToolControl = new org.herac.tg.webapp.tool.TGToolControl(context);
                        tgToolControl.initialize();
                        var tgFileFormatManager = org.herac.tuxguitar.io.base.TGFileFormatManager.getInstance(context);
                        tgFileFormatManager.addReader(new org.herac.tuxguitar.io.tg.v12.TGSongReaderImpl());
                        tgFileFormatManager.addReader(new org.herac.tuxguitar.io.tg.v11.TGSongReaderImpl());
                        tgFileFormatManager.addReader(new org.herac.tuxguitar.io.tg.v10.TGSongReaderImpl());
                        tgFileFormatManager.addReader(new org.herac.tuxguitar.io.tg.v09.TGSongReaderImpl());
                        tgFileFormatManager.addFileFormatDetector(new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(org.herac.tuxguitar.io.tg.v12.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$()));
                        tgFileFormatManager.addFileFormatDetector(new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(org.herac.tuxguitar.io.tg.v11.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$()));
                        tgFileFormatManager.addFileFormatDetector(new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(org.herac.tuxguitar.io.tg.v10.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$()));
                        tgFileFormatManager.addFileFormatDetector(new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(org.herac.tuxguitar.io.tg.v09.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$()));
                        var midiPlayer = org.herac.tuxguitar.player.base.MidiPlayer.getInstance(context);
                        midiPlayer.init(documentManager);
                        midiPlayer.addListener(new org.herac.tg.webapp.transport.TGTransportListener(context));
                        try {
                            midiPlayer.addOutputPortProvider$org_herac_tuxguitar_player_base_MidiOutputPortProvider$boolean(new org.herac.tg.webapp.midi.synthesizer.MidiOutputPortProviderImpl(), true);
                            midiPlayer.addSequencerProvider$org_herac_tuxguitar_player_base_MidiSequencerProvider$boolean(new org.herac.tuxguitar.player.impl.sequencer.MidiSequencerProviderImpl(context), true);
                        }
                        catch (e) {
                            console.error(e.message, e);
                        }
                        ;
                        var tgActionProcessor = new org.herac.tg.webapp.action.TGActionProcessor(context, org.herac.tg.webapp.action.impl.TGLoadURLAction.NAME);
                        tgActionProcessor.setAttribute(org.herac.tg.webapp.action.impl.TGLoadURLAction.ATTRIBUTE_URL, tabURL);
                        tgActionProcessor.process();
                        $(window).resize(function (t) {
                            org.herac.tg.webapp.editor.TGEditorManager.getInstance(context).redraw();
                            return true;
                        });
                    };
                    return TGWebApp;
                }());
                TGWebApp.ATTRIBUTE_SOUNDFONTS_URL = "SOUNDFONTS_URL";
                TGWebApp.CANVAS_ID = "CANVAS_ID";
                TGWebApp.CANVAS_WIDTH = "CANVAS_WIDTH";
                TGWebApp.CANVAS_HEIGHT = "CANVAS_HEIGHT";
                webapp.TGWebApp = TGWebApp;
                TGWebApp["__class"] = "org.herac.tg.webapp.TGWebApp";
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var thread;
                (function (thread) {
                    var TGThreadHandlerImpl = (function () {
                        function TGThreadHandlerImpl() {
                        }
                        TGThreadHandlerImpl.prototype.start = function (runnable) {
                            var consumer = function (o) {
                                runnable.run();
                            };
                            window.setTimeout(consumer, 0);
                        };
                        TGThreadHandlerImpl.prototype.loop = function (loop) {
                            var _this = this;
                            var timeout = loop.process();
                            if (!(function (o1, o2) { return o2 !== null && o2 !== undefined && o1.valueOf() === (o2.valueOf ? o2.valueOf() : o2); })(org.herac.tuxguitar.thread.TGThreadLoop.BREAK, timeout)) {
                                var consumer = function (o) {
                                    _this.loop(loop);
                                };
                                window.setTimeout(consumer, (timeout != null && timeout >= 0 ? timeout : 0));
                            }
                        };
                        TGThreadHandlerImpl.prototype.getThreadId = function () {
                            return "js-thread";
                        };
                        TGThreadHandlerImpl.prototype.yield = function () {
                        };
                        return TGThreadHandlerImpl;
                    }());
                    thread.TGThreadHandlerImpl = TGThreadHandlerImpl;
                    TGThreadHandlerImpl["__class"] = "org.herac.tg.webapp.thread.TGThreadHandlerImpl";
                    TGThreadHandlerImpl["__interfaces"] = ["org.herac.tuxguitar.thread.TGThreadHandler"];
                })(thread = webapp.thread || (webapp.thread = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var tool;
                (function (tool) {
                    var TGToolControl = (function () {
                        function TGToolControl(context) {
                            this.context = null;
                            this.context = context;
                        }
                        TGToolControl.prototype.initialize = function () {
                            this.appendListeners();
                        };
                        TGToolControl.prototype.appendListeners = function () {
                            org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.context).addUpdateListener(new org.herac.tg.webapp.tool.TGToolEventListener(this));
                            $("#action-play").click(org.herac.tg.webapp.action.consumer.TGActionConsumer.createJQuery(this.context, org.herac.tg.webapp.action.impl.TGTransportPlayAction.NAME));
                            $("#action-stop").click(org.herac.tg.webapp.action.consumer.TGActionConsumer.createJQuery(this.context, org.herac.tg.webapp.action.impl.TGTransportStopAction.NAME));
                            $("#action-set-tab-enabled").click(org.herac.tg.webapp.action.consumer.TGActionConsumer.createJQuery(this.context, org.herac.tg.webapp.action.impl.TGSetTabEnabledAction.NAME));
                            $("#action-set-score-enabled").click(org.herac.tg.webapp.action.consumer.TGActionConsumer.createJQuery(this.context, org.herac.tg.webapp.action.impl.TGSetScoreEnabledAction.NAME));
                            $("#action-set-multitrack-enabled").click(org.herac.tg.webapp.action.consumer.TGActionConsumer.createJQuery(this.context, org.herac.tg.webapp.action.impl.TGSetMultitrackAction.NAME));
                            $("#action-set-selected-track").change(org.herac.tg.webapp.action.consumer.TGActionConsumer.createJQuery(this.context, org.herac.tg.webapp.action.impl.TGSetSelectedTrackAction.NAME));
                        };
                        TGToolControl.prototype.updateSelection = function () {
                            var selection = org.herac.tg.webapp.selection.TGSelection.getInstance(this.context);
                            var tabControl = org.herac.tg.webapp.control.TGTabControl.getInstance(this.context);
                            var style = tabControl.getLayout().getStyle();
                            $("#action-set-tab-enabled").prop("checked", ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0));
                            $("#action-set-score-enabled").prop("checked", ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0));
                            $("#action-set-multitrack-enabled").prop("checked", ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_MULTITRACK) !== 0));
                            $("#action-set-selected-track").val(selection.getTrack().getNumber());
                        };
                        TGToolControl.prototype.updateSong = function () {
                            this.updateTracks();
                        };
                        TGToolControl.prototype.updateTracks = function () {
                            var sb = new java.lang.StringBuilder();
                            var song = org.herac.tuxguitar.document.TGDocumentManager.getInstance(this.context).getSong();
                            var it = song.getTracks();
                            while ((it.hasNext())) {
                                var track = it.next();
                                sb.append("<option value=\"");
                                sb.append(track.getNumber());
                                sb.append("\">");
                                sb.append(track.getNumber() + " - " + track.getName());
                                sb.append("</option>");
                            }
                            ;
                            $("#action-set-selected-track").html(sb.toString());
                        };
                        return TGToolControl;
                    }());
                    tool.TGToolControl = TGToolControl;
                    TGToolControl["__class"] = "org.herac.tg.webapp.tool.TGToolControl";
                })(tool = webapp.tool || (webapp.tool = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var tool;
                (function (tool) {
                    var TGToolEventListener = (function () {
                        function TGToolEventListener(control) {
                            this.control = null;
                            this.control = control;
                        }
                        TGToolEventListener.prototype.processEvent = function (event) {
                            var type = (event.getAttribute(org.herac.tg.webapp.event.TGUpdateEvent.PROPERTY_UPDATE_MODE) | 0);
                            if (type === org.herac.tg.webapp.event.TGUpdateEvent.SELECTION) {
                                this.control.updateSelection();
                            }
                            if (type === org.herac.tg.webapp.event.TGUpdateEvent.SONG_LOADED || type === org.herac.tg.webapp.event.TGUpdateEvent.SONG_UPDATED) {
                                this.control.updateSong();
                            }
                        };
                        return TGToolEventListener;
                    }());
                    tool.TGToolEventListener = TGToolEventListener;
                    TGToolEventListener["__class"] = "org.herac.tg.webapp.tool.TGToolEventListener";
                    TGToolEventListener["__interfaces"] = ["org.herac.tuxguitar.event.TGEventListener"];
                })(tool = webapp.tool || (webapp.tool = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var transport;
                (function (transport) {
                    var TGTransport = (function () {
                        function TGTransport(context) {
                            this.context = null;
                            this.cache = null;
                            this.context = context;
                            this.cache = new org.herac.tg.webapp.transport.TGTransportCache(context);
                        }
                        TGTransport.prototype.getCache = function () {
                            return this.cache;
                        };
                        TGTransport.prototype.getSongManager = function () {
                            return org.herac.tuxguitar.document.TGDocumentManager.getInstance(this.context).getSongManager();
                        };
                        TGTransport.prototype.getSong = function () {
                            return org.herac.tuxguitar.document.TGDocumentManager.getInstance(this.context).getSong();
                        };
                        TGTransport.prototype.gotoFirst = function () {
                            this.gotoMeasure(this.getSongManager().getFirstMeasureHeader(this.getSong()), true);
                        };
                        TGTransport.prototype.gotoLast = function () {
                            this.gotoMeasure(this.getSongManager().getLastMeasureHeader(this.getSong()), true);
                        };
                        TGTransport.prototype.gotoNext = function () {
                            var player = org.herac.tuxguitar.player.base.MidiPlayer.getInstance(this.context);
                            var header = this.getSongManager().getMeasureHeaderAt(this.getSong(), org.herac.tg.webapp.midi.util.MidiTickUtil.getStart(this.context, player.getTickPosition()));
                            if (header != null) {
                                this.gotoMeasure(this.getSongManager().getNextMeasureHeader(this.getSong(), header), true);
                            }
                        };
                        TGTransport.prototype.gotoPrevious = function () {
                            var player = org.herac.tuxguitar.player.base.MidiPlayer.getInstance(this.context);
                            var header = this.getSongManager().getMeasureHeaderAt(this.getSong(), org.herac.tg.webapp.midi.util.MidiTickUtil.getStart(this.context, player.getTickPosition()));
                            if (header != null) {
                                this.gotoMeasure(this.getSongManager().getPrevMeasureHeader(this.getSong(), header), true);
                            }
                        };
                        TGTransport.prototype.gotoMeasure = function (header, moveCaret) {
                            if (moveCaret === void 0) { moveCaret = false; }
                            if (header != null) {
                                var playingMeasure = null;
                                var player = org.herac.tuxguitar.player.base.MidiPlayer.getInstance(this.context);
                                if (player.isRunning()) {
                                    this.getCache().updatePlayMode();
                                    playingMeasure = this.getCache().getPlayMeasure();
                                }
                                if (playingMeasure == null || playingMeasure.getHeader().getNumber() !== header.getNumber()) {
                                    player.setTickPosition(org.herac.tg.webapp.midi.util.MidiTickUtil.getTick(this.context, header.getStart()));
                                }
                            }
                        };
                        TGTransport.prototype.gotoPlayerPosition = function () {
                            var player = org.herac.tuxguitar.player.base.MidiPlayer.getInstance(this.context);
                            var header = this.getSongManager().getMeasureHeaderAt(this.getSong(), org.herac.tg.webapp.midi.util.MidiTickUtil.getStart(this.context, player.getTickPosition()));
                            if (header != null) {
                                player.setTickPosition(org.herac.tg.webapp.midi.util.MidiTickUtil.getTick(this.context, header.getStart()));
                            }
                        };
                        TGTransport.prototype.play = function () {
                            var player = org.herac.tuxguitar.player.base.MidiPlayer.getInstance(this.context);
                            if (!player.isRunning()) {
                                try {
                                    player.getMode().reset();
                                    player.play();
                                }
                                catch (exception) {
                                    org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.context).handleError(exception);
                                }
                                ;
                            }
                            else {
                                player.pause();
                            }
                        };
                        TGTransport.prototype.stop = function () {
                            var player = org.herac.tuxguitar.player.base.MidiPlayer.getInstance(this.context);
                            if (!player.isRunning()) {
                                player.reset();
                                this.gotoPlayerPosition();
                            }
                            else {
                                player.reset();
                            }
                        };
                        TGTransport.getInstance = function (context) {
                            return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGTransport), new TGTransport.TGTransport$0());
                        };
                        return TGTransport;
                    }());
                    transport.TGTransport = TGTransport;
                    TGTransport["__class"] = "org.herac.tg.webapp.transport.TGTransport";
                    (function (TGTransport) {
                        var TGTransport$0 = (function () {
                            function TGTransport$0() {
                            }
                            TGTransport$0.prototype.createInstance = function (context) {
                                return new org.herac.tg.webapp.transport.TGTransport(context);
                            };
                            return TGTransport$0;
                        }());
                        TGTransport.TGTransport$0 = TGTransport$0;
                        TGTransport$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                    })(TGTransport = transport.TGTransport || (transport.TGTransport = {}));
                })(transport = webapp.transport || (webapp.transport = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var transport;
                (function (transport) {
                    var TGTransportCache = (function () {
                        function TGTransportCache(context) {
                            this.context = null;
                            this.playTrack = 0;
                            this.playTick = 0;
                            this.playStart = 0;
                            this.playBeatEnd = 0;
                            this.playChanges = false;
                            this.playUpdate = false;
                            this.playBeat = null;
                            this.playMeasure = null;
                            this.context = context;
                            this.reset();
                        }
                        TGTransportCache.prototype.reset = function () {
                            this.playBeat = null;
                            this.playMeasure = null;
                            this.playUpdate = false;
                            this.playChanges = false;
                            this.playTrack = 0;
                            this.playTick = 0;
                            this.playStart = 0;
                            this.playBeatEnd = 0;
                        };
                        TGTransportCache.prototype.updatePlayMode = function () {
                            this.playUpdate = true;
                            this.getPlayBeat();
                        };
                        TGTransportCache.prototype.getPlayBeat = function () {
                            if (this.playUpdate) {
                                this.playChanges = false;
                                var player = org.herac.tuxguitar.player.base.MidiPlayer.getInstance(this.context);
                                if (this.isPlaying()) {
                                    var documentManager = org.herac.tuxguitar.document.TGDocumentManager.getInstance(this.context);
                                    var manager = documentManager.getSongManager();
                                    var track = org.herac.tg.webapp.selection.TGSelection.getInstance(this.context).getTrack();
                                    var tick = player.getTickPosition();
                                    var start = this.playStart + (tick - this.playTick);
                                    if (this.playMeasure == null || start < this.playMeasure.getStart() || start > (this.playMeasure.getStart() + this.playMeasure.getLength())) {
                                        this.playMeasure = null;
                                        start = org.herac.tg.webapp.midi.util.MidiTickUtil.getStart(this.context, tick);
                                    }
                                    if (this.playMeasure == null || this.playBeatEnd === 0 || start > this.playBeatEnd || start < this.playStart || track.getNumber() !== this.playTrack) {
                                        this.playBeat = null;
                                        this.playBeatEnd = 0;
                                        this.playChanges = true;
                                        if (this.playMeasure == null || this.playMeasure.getTrack().getNumber() !== track.getNumber() || !this.isPlaying$org_herac_tuxguitar_song_models_TGMeasure(this.playMeasure)) {
                                            this.playMeasure = manager.getTrackManager().getMeasureAt(track, start);
                                        }
                                        if (this.playMeasure != null && !this.isPlayingCountDown()) {
                                            this.playBeat = manager.getMeasureManager().getBeatIn(this.playMeasure, start);
                                            if (this.playBeat != null) {
                                                var next = manager.getMeasureManager().getNextBeat(this.playMeasure.getBeats(), this.playBeat);
                                                if (next != null) {
                                                    this.playBeatEnd = next.getStart();
                                                }
                                                else {
                                                    var duration = manager.getMeasureManager().getMinimumDuration(this.playBeat);
                                                    this.playBeatEnd = (this.playBeat.getStart() + duration.getTime());
                                                }
                                            }
                                        }
                                    }
                                    this.playTrack = track.getNumber();
                                    this.playTick = tick;
                                    this.playStart = start;
                                }
                                this.playUpdate = false;
                            }
                            return this.playBeat;
                        };
                        TGTransportCache.prototype.getPlayTick = function () {
                            return this.playTick;
                        };
                        TGTransportCache.prototype.getPlayStart = function () {
                            return this.playStart;
                        };
                        TGTransportCache.prototype.getPlayMeasure = function () {
                            return this.playMeasure;
                        };
                        TGTransportCache.prototype.shouldRedraw = function () {
                            return this.playChanges;
                        };
                        TGTransportCache.prototype.isPlaying$ = function () {
                            return org.herac.tuxguitar.player.base.MidiPlayer.getInstance(this.context).isRunning();
                        };
                        TGTransportCache.prototype.isPlayingCountDown = function () {
                            return org.herac.tuxguitar.player.base.MidiPlayer.getInstance(this.context).getCountDown().isRunning();
                        };
                        TGTransportCache.prototype.isPlaying$org_herac_tuxguitar_song_models_TGMeasure = function (measure) {
                            return (this.isPlaying() && this.playMeasure != null && (function (o1, o2) { if (o1.equals) {
                                return o1.equals(o2);
                            }
                            else {
                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                            } })(measure, this.playMeasure));
                        };
                        TGTransportCache.prototype.isPlaying$org_herac_tuxguitar_song_models_TGMeasure$org_herac_tuxguitar_song_models_TGBeat = function (measure, b) {
                            return (this.isPlaying$org_herac_tuxguitar_song_models_TGMeasure(measure) && this.playBeat != null && this.playBeat.getStart() === b.getStart());
                        };
                        TGTransportCache.prototype.isPlaying = function (measure, b) {
                            if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((b != null && b instanceof org.herac.tuxguitar.song.models.TGBeat) || b === null)) {
                                return this.isPlaying$org_herac_tuxguitar_song_models_TGMeasure$org_herac_tuxguitar_song_models_TGBeat(measure, b);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && b === undefined) {
                                return this.isPlaying$org_herac_tuxguitar_song_models_TGMeasure(measure);
                            }
                            else if (measure === undefined && b === undefined) {
                                return this.isPlaying$();
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        return TGTransportCache;
                    }());
                    transport.TGTransportCache = TGTransportCache;
                    TGTransportCache["__class"] = "org.herac.tg.webapp.transport.TGTransportCache";
                })(transport = webapp.transport || (webapp.transport = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var transport;
                (function (transport) {
                    var TGTransportListener = (function () {
                        function TGTransportListener(context) {
                            this.context = null;
                            this.context = context;
                        }
                        TGTransportListener.prototype.startLoop = function () {
                            org.herac.tuxguitar.thread.TGThreadManager.getInstance(this.context).loop(new TGTransportListener.TGTransportListener$0(this));
                        };
                        TGTransportListener.prototype.processLoop = function () {
                            try {
                                var tgEditorManager = org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.context);
                                var tgTransport = org.herac.tg.webapp.transport.TGTransport.getInstance(this.context);
                                var midiPlayer = org.herac.tuxguitar.player.base.MidiPlayer.getInstance(this.context);
                                if (midiPlayer.isRunning()) {
                                    tgTransport.getCache().updatePlayMode();
                                    if (tgTransport.getCache().shouldRedraw()) {
                                        tgEditorManager.redrawPlayingNewBeat();
                                    }
                                    else {
                                        tgEditorManager.redrawPlayingThread();
                                    }
                                    return true;
                                }
                                else {
                                    this.notifyStopped();
                                }
                            }
                            catch (throwable) {
                                org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.context).handleError(throwable);
                            }
                            ;
                            return false;
                        };
                        TGTransportListener.prototype.processRedraw = function () {
                            org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.context).redrawPlayingThread();
                        };
                        TGTransportListener.prototype.notifyStarted = function () {
                            org.herac.tuxguitar.thread.TGThreadManager.getInstance(this.context).start(new TGTransportListener.TGTransportListener$1(this));
                        };
                        TGTransportListener.prototype.notifyStopped = function () {
                            org.herac.tuxguitar.thread.TGThreadManager.getInstance(this.context).start(new TGTransportListener.TGTransportListener$2(this));
                        };
                        TGTransportListener.prototype.processEvent = function (event) {
                            if ((function (o1, o2) { if (o1.equals) {
                                return o1.equals(o2);
                            }
                            else {
                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                            } })(org.herac.tuxguitar.player.base.MidiPlayerEvent.EVENT_TYPE, event.getEventType())) {
                                var type = (event.getAttribute(org.herac.tuxguitar.player.base.MidiPlayerEvent.PROPERTY_NOTIFICATION_TYPE) | 0);
                                if (type === org.herac.tuxguitar.player.base.MidiPlayerEvent.NOTIFY_STARTED) {
                                    this.notifyStarted();
                                }
                                else if (type === org.herac.tuxguitar.player.base.MidiPlayerEvent.NOTIFY_STOPPED) {
                                    this.notifyStopped();
                                }
                            }
                        };
                        return TGTransportListener;
                    }());
                    transport.TGTransportListener = TGTransportListener;
                    TGTransportListener["__class"] = "org.herac.tg.webapp.transport.TGTransportListener";
                    TGTransportListener["__interfaces"] = ["org.herac.tuxguitar.event.TGEventListener"];
                    (function (TGTransportListener) {
                        var TGTransportListener$0 = (function () {
                            function TGTransportListener$0(__parent) {
                                this.__parent = __parent;
                            }
                            TGTransportListener$0.prototype.process = function () {
                                return (this.__parent.processLoop() ? 25 : org.herac.tuxguitar.thread.TGThreadLoop.BREAK);
                            };
                            return TGTransportListener$0;
                        }());
                        TGTransportListener.TGTransportListener$0 = TGTransportListener$0;
                        TGTransportListener$0["__interfaces"] = ["org.herac.tuxguitar.thread.TGThreadLoop"];
                        var TGTransportListener$1 = (function () {
                            function TGTransportListener$1(__parent) {
                                this.__parent = __parent;
                            }
                            TGTransportListener$1.prototype.run = function () {
                                try {
                                    var tgTransport = org.herac.tg.webapp.transport.TGTransport.getInstance(this.__parent.context);
                                    tgTransport.getCache().reset();
                                    this.__parent.startLoop();
                                }
                                catch (throwable) {
                                    org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.__parent.context).handleError(throwable);
                                }
                                ;
                            };
                            return TGTransportListener$1;
                        }());
                        TGTransportListener.TGTransportListener$1 = TGTransportListener$1;
                        TGTransportListener$1["__interfaces"] = ["java.lang.Runnable"];
                        var TGTransportListener$2 = (function () {
                            function TGTransportListener$2(__parent) {
                                this.__parent = __parent;
                            }
                            TGTransportListener$2.prototype.run = function () {
                                try {
                                    var tgTransport = org.herac.tg.webapp.transport.TGTransport.getInstance(this.__parent.context);
                                    tgTransport.gotoPlayerPosition();
                                    tgTransport.getCache().reset();
                                    this.__parent.processRedraw();
                                }
                                catch (throwable) {
                                    org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.__parent.context).handleError(throwable);
                                }
                                ;
                            };
                            return TGTransportListener$2;
                        }());
                        TGTransportListener.TGTransportListener$2 = TGTransportListener$2;
                        TGTransportListener$2["__interfaces"] = ["java.lang.Runnable"];
                    })(TGTransportListener = transport.TGTransportListener || (transport.TGTransportListener = {}));
                })(transport = webapp.transport || (webapp.transport = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
var java;
(function (java) {
    var io;
    (function (io) {
        /**
         * Constructs a new {@code BufferedInputStream}, providing {@code in} with {@code size} bytes
         * of buffer.
         *
         * <p><strong>Warning:</strong> passing a null source creates a closed
         * {@code BufferedInputStream}. All read operations on such a stream will
         * fail with an IOException.
         *
         * @param {java.io.InputStream} in the {@code InputStream} the buffer reads from.
         * @param {number} size the size of buffer in bytes.
         * @throws IllegalArgumentException if {@code size <= 0}.
         * @class
         */
        var BufferedInputStream = (function (_super) {
            __extends(BufferedInputStream, _super);
            function BufferedInputStream(__in, size) {
                var _this = this;
                if (((__in != null && __in instanceof java.io.InputStream) || __in === null) && ((typeof size === 'number') || size === null)) {
                    var __args = Array.prototype.slice.call(arguments);
                    _this = _super.call(this, __in) || this;
                    _this.buf = null;
                    _this.count = 0;
                    _this.marklimit = 0;
                    _this.pos = 0;
                    _this.markpos = -1;
                    _this.buf = null;
                    _this.count = 0;
                    _this.marklimit = 0;
                    _this.pos = 0;
                    (function () {
                        if (size <= 0) {
                            throw new java.lang.IllegalArgumentException("size <= 0");
                        }
                        _this.buf = (function (s) { var a = []; while (s-- > 0)
                            a.push(0); return a; })(size);
                    })();
                }
                else if (((__in != null && __in instanceof java.io.InputStream) || __in === null) && size === undefined) {
                    var __args = Array.prototype.slice.call(arguments);
                    {
                        var __args_1 = Array.prototype.slice.call(arguments);
                        var size_1 = 8192;
                        _this = _super.call(this, __in) || this;
                        _this.buf = null;
                        _this.count = 0;
                        _this.marklimit = 0;
                        _this.pos = 0;
                        _this.markpos = -1;
                        _this.buf = null;
                        _this.count = 0;
                        _this.marklimit = 0;
                        _this.pos = 0;
                        (function () {
                            if (size_1 <= 0) {
                                throw new java.lang.IllegalArgumentException("size <= 0");
                            }
                            _this.buf = (function (s) { var a = []; while (s-- > 0)
                                a.push(0); return a; })(size_1);
                        })();
                    }
                }
                else
                    throw new Error('invalid overload');
                return _this;
            }
            /**
             * Returns an estimated number of bytes that can be read or skipped without blocking for more
             * input. This method returns the number of bytes available in the buffer
             * plus those available in the source stream, but see {@link InputStream#available} for
             * important caveats.
             *
             * @return {number} the estimated number of bytes available
             * @throws IOException if this stream is closed or an error occurs
             */
            BufferedInputStream.prototype.available = function () {
                var localIn = this["in"];
                if (this.buf == null || localIn == null) {
                    throw this.streamClosed();
                }
                return this.count - this.pos + localIn.available();
            };
            BufferedInputStream.prototype.streamClosed = function () {
                throw new java.io.IOException("BufferedInputStream is closed");
            };
            /**
             * Closes this stream. The source stream is closed and any resources
             * associated with it are released.
             *
             * @throws IOException
             * if an error occurs while closing this stream.
             */
            BufferedInputStream.prototype.close = function () {
                this.buf = null;
                var localIn = this["in"];
                this["in"] = null;
                if (localIn != null) {
                    localIn.close();
                }
            };
            BufferedInputStream.prototype.fillbuf = function (localIn, localBuf) {
                if (this.markpos === -1 || (this.pos - this.markpos >= this.marklimit)) {
                    var result = localIn.read(localBuf);
                    if (result > 0) {
                        this.markpos = -1;
                        this.pos = 0;
                        this.count = result === -1 ? 0 : result;
                    }
                    return result;
                }
                if (this.markpos === 0 && this.marklimit > localBuf.length) {
                    var newLength = localBuf.length * 2;
                    if (newLength > this.marklimit) {
                        newLength = this.marklimit;
                    }
                    var newbuf = (function (s) { var a = []; while (s-- > 0)
                        a.push(0); return a; })(newLength);
                    java.lang.System.arraycopy(localBuf, 0, newbuf, 0, localBuf.length);
                    localBuf = this.buf = newbuf;
                }
                else if (this.markpos > 0) {
                    java.lang.System.arraycopy(localBuf, this.markpos, localBuf, 0, localBuf.length - this.markpos);
                }
                this.pos -= this.markpos;
                this.count = this.markpos = 0;
                var bytesread = localIn.read(localBuf, this.pos, localBuf.length - this.pos);
                this.count = bytesread <= 0 ? this.pos : this.pos + bytesread;
                return bytesread;
            };
            /**
             * Sets a mark position in this stream. The parameter {@code readlimit}
             * indicates how many bytes can be read before a mark is invalidated.
             * Calling {@code reset()} will reposition the stream back to the marked
             * position if {@code readlimit} has not been surpassed. The underlying
             * buffer may be increased in size to allow {@code readlimit} number of
             * bytes to be supported.
             *
             * @param {number} readlimit
             * the number of bytes that can be read before the mark is
             * invalidated.
             * @see #reset()
             */
            BufferedInputStream.prototype.mark = function (readlimit) {
                this.marklimit = readlimit;
                this.markpos = this.pos;
            };
            /**
             * Indicates whether {@code BufferedInputStream} supports the {@code mark()}
             * and {@code reset()} methods.
             *
             * @return {boolean} {@code true} for BufferedInputStreams.
             * @see #mark(int)
             * @see #reset()
             */
            BufferedInputStream.prototype.markSupported = function () {
                return true;
            };
            /**
             * Reads a single byte from this stream and returns it as an integer in the
             * range from 0 to 255. Returns -1 if the end of the source string has been
             * reached. If the internal buffer does not contain any available bytes then
             * it is filled from the source stream and the first byte is returned.
             *
             * @return {number} the byte read or -1 if the end of the source stream has been
             * reached.
             * @throws IOException
             * if this stream is closed or another IOException occurs.
             */
            BufferedInputStream.prototype.read$ = function () {
                var localBuf = this.buf;
                var localIn = this["in"];
                if (localBuf == null || localIn == null) {
                    throw this.streamClosed();
                }
                if (this.pos >= this.count && this.fillbuf(localIn, localBuf) === -1) {
                    return -1;
                }
                if (localBuf !== this.buf) {
                    localBuf = this.buf;
                    if (localBuf == null) {
                        throw this.streamClosed();
                    }
                }
                if (this.count - this.pos > 0) {
                    return localBuf[this.pos++] & 255;
                }
                return -1;
            };
            /**
             * Reads at most {@code byteCount} bytes from this stream and stores them in
             * byte array {@code buffer} starting at offset {@code offset}. Returns the
             * number of bytes actually read or -1 if no bytes were read and the end of
             * the stream was encountered. If all the buffered bytes have been used, a
             * mark has not been set and the requested number of bytes is larger than
             * the receiver's buffer size, this implementation bypasses the buffer and
             * simply places the results directly into {@code buffer}.
             *
             * @param {Array} buffer
             * the byte array in which to store the bytes read.
             * @return {number} the number of bytes actually read or -1 if end of stream.
             * @throws IndexOutOfBoundsException
             * if {@code offset < 0} or {@code byteCount < 0}, or if
             * {@code offset + byteCount} is greater than the size of
             * {@code buffer}.
             * @throws IOException
             * if the stream is already closed or another IOException
             * occurs.
             * @param {number} offset
             * @param {number} byteCount
             */
            BufferedInputStream.prototype.read$byte_A$int$int = function (buffer, offset, byteCount) {
                var localBuf = this.buf;
                if (localBuf == null) {
                    throw this.streamClosed();
                }
                if ((offset | byteCount) < 0 || offset > buffer.length || buffer.length - offset < byteCount) {
                    throw new java.lang.ArrayIndexOutOfBoundsException();
                }
                if (byteCount === 0) {
                    return 0;
                }
                var localIn = this["in"];
                if (localIn == null) {
                    throw this.streamClosed();
                }
                var required;
                if (this.pos < this.count) {
                    var copylength = this.count - this.pos >= byteCount ? byteCount : this.count - this.pos;
                    java.lang.System.arraycopy(localBuf, this.pos, buffer, offset, copylength);
                    this.pos += copylength;
                    if (copylength === byteCount || localIn.available() === 0) {
                        return copylength;
                    }
                    offset += copylength;
                    required = byteCount - copylength;
                }
                else {
                    required = byteCount;
                }
                while ((true)) {
                    var read = void 0;
                    if (this.markpos === -1 && required >= localBuf.length) {
                        read = localIn.read(buffer, offset, required);
                        if (read === -1) {
                            return required === byteCount ? -1 : byteCount - required;
                        }
                    }
                    else {
                        if (this.fillbuf(localIn, localBuf) === -1) {
                            return required === byteCount ? -1 : byteCount - required;
                        }
                        if (localBuf !== this.buf) {
                            localBuf = this.buf;
                            if (localBuf == null) {
                                throw this.streamClosed();
                            }
                        }
                        read = this.count - this.pos >= required ? required : this.count - this.pos;
                        java.lang.System.arraycopy(localBuf, this.pos, buffer, offset, read);
                        this.pos += read;
                    }
                    required -= read;
                    if (required === 0) {
                        return byteCount;
                    }
                    if (localIn.available() === 0) {
                        return byteCount - required;
                    }
                    offset += read;
                }
                ;
            };
            /**
             * Reads at most {@code byteCount} bytes from this stream and stores them in
             * byte array {@code buffer} starting at offset {@code offset}. Returns the
             * number of bytes actually read or -1 if no bytes were read and the end of
             * the stream was encountered. If all the buffered bytes have been used, a
             * mark has not been set and the requested number of bytes is larger than
             * the receiver's buffer size, this implementation bypasses the buffer and
             * simply places the results directly into {@code buffer}.
             *
             * @param {Array} buffer
             * the byte array in which to store the bytes read.
             * @return {number} the number of bytes actually read or -1 if end of stream.
             * @throws IndexOutOfBoundsException
             * if {@code offset < 0} or {@code byteCount < 0}, or if
             * {@code offset + byteCount} is greater than the size of
             * {@code buffer}.
             * @throws IOException
             * if the stream is already closed or another IOException
             * occurs.
             * @param {number} offset
             * @param {number} byteCount
             */
            BufferedInputStream.prototype.read = function (buffer, offset, byteCount) {
                if (((buffer != null && buffer instanceof Array && (buffer.length == 0 || buffer[0] == null || (typeof buffer[0] === 'number'))) || buffer === null) && ((typeof offset === 'number') || offset === null) && ((typeof byteCount === 'number') || byteCount === null)) {
                    return this.read$byte_A$int$int(buffer, offset, byteCount);
                }
                else if (buffer === undefined && offset === undefined && byteCount === undefined) {
                    return this.read$();
                }
                else
                    throw new Error('invalid overload');
            };
            /**
             * Resets this stream to the last marked location.
             *
             * @throws IOException
             * if this stream is closed, no mark has been set or the mark is
             * no longer valid because more than {@code readlimit} bytes
             * have been read since setting the mark.
             * @see #mark(int)
             */
            BufferedInputStream.prototype.reset = function () {
                if (this.buf == null) {
                    throw new java.io.IOException("Stream is closed");
                }
                if (-1 === this.markpos) {
                    throw new java.io.IOException("Mark has been invalidated.");
                }
                this.pos = this.markpos;
            };
            /**
             * Skips {@code byteCount} bytes in this stream. Subsequent calls to
             * {@code read} will not return these bytes unless {@code reset} is
             * used.
             *
             * @param {number} byteCount
             * the number of bytes to skip. {@code skip} does nothing and
             * returns 0 if {@code byteCount} is less than zero.
             * @return {number} the number of bytes actually skipped.
             * @throws IOException
             * if this stream is closed or another IOException occurs.
             */
            BufferedInputStream.prototype.skip = function (byteCount) {
                var localBuf = this.buf;
                var localIn = this["in"];
                if (localBuf == null) {
                    throw this.streamClosed();
                }
                if (byteCount < 1) {
                    return 0;
                }
                if (localIn == null) {
                    throw this.streamClosed();
                }
                if (this.count - this.pos >= byteCount) {
                    this.pos += byteCount;
                    return byteCount;
                }
                var read = this.count - this.pos;
                this.pos = this.count;
                if (this.markpos !== -1) {
                    if (byteCount <= this.marklimit) {
                        if (this.fillbuf(localIn, localBuf) === -1) {
                            return read;
                        }
                        if (this.count - this.pos >= byteCount - read) {
                            this.pos += byteCount - read;
                            return byteCount;
                        }
                        read += (this.count - this.pos);
                        this.pos = this.count;
                        return read;
                    }
                }
                return read + localIn.skip(byteCount - read);
            };
            return BufferedInputStream;
        }(java.io.FilterInputStream));
        io.BufferedInputStream = BufferedInputStream;
        BufferedInputStream["__class"] = "java.io.BufferedInputStream";
        BufferedInputStream["__interfaces"] = ["java.io.Closeable", "java.lang.AutoCloseable"];
    })(io = java.io || (java.io = {}));
})(java || (java = {}));
(function (java) {
    var io;
    (function (io) {
        var DataInputStream = (function (_super) {
            __extends(DataInputStream, _super);
            function DataInputStream(__in) {
                var _this = _super.call(this) || this;
                /**
                 * working arrays initialized on demand by readUTF
                 */
                /*private*/ _this.bytearr = (function (s) { var a = []; while (s-- > 0)
                    a.push(0); return a; })(80);
                /*private*/ _this.chararr = new Array(80);
                /*private*/ _this.readBuffer = [0, 0, 0, 0, 0, 0, 0, 0];
                _this["in"] = null;
                _this.lineBuffer = null;
                _this["in"] = __in;
                return _this;
            }
            /**
             * Reads the next byte of data from this input stream. The value
             * byte is returned as an <code>int</code> in the range
             * <code>0</code> to <code>255</code>. If no byte is available
             * because the end of the stream has been reached, the value
             * <code>-1</code> is returned. This method blocks until input data
             * is available, the end of the stream is detected, or an exception
             * is thrown.
             * <p>
             * This method
             * simply performs <code>in.read()</code> and returns the result.
             *
             * @return     {number} the next byte of data, or <code>-1</code> if the end of the
             * stream is reached.
             * @exception  IOException  if an I/O error occurs.
             * @see        java.io.FilterInputStream#in
             */
            DataInputStream.prototype.read$ = function () {
                return this["in"].read();
            };
            /**
             * Reads up to <code>byte.length</code> bytes of data from this
             * input stream into an array of bytes. This method blocks until some
             * input is available.
             * <p>
             * This method simply performs the call
             * <code>read(b, 0, b.length)</code> and returns
             * the  result. It is important that it does
             * <i>not</i> do <code>in.read(b)</code> instead;
             * certain subclasses of  <code>FilterInputStream</code>
             * depend on the implementation strategy actually
             * used.
             *
             * @param      {Array} b   the buffer into which the data is read.
             * @return     {number} the total number of bytes read into the buffer, or
             * <code>-1</code> if there is no more data because the end of
             * the stream has been reached.
             * @exception  IOException  if an I/O error occurs.
             * @see        java.io.FilterInputStream#read(byte[], int, int)
             */
            DataInputStream.prototype.read$byte_A = function (b) {
                return this.read$byte_A$int$int(b, 0, b.length);
            };
            /**
             * Reads up to <code>len</code> bytes of data from this input stream
             * into an array of bytes. If <code>len</code> is not zero, the method
             * blocks until some input is available; otherwise, no
             * bytes are read and <code>0</code> is returned.
             * <p>
             * This method simply performs <code>in.read(b, off, len)</code>
             * and returns the result.
             *
             * @param      {Array} b     the buffer into which the data is read.
             * @param      {number} off   the start offset in the destination array <code>b</code>
             * @param      {number} len   the maximum number of bytes read.
             * @return     {number} the total number of bytes read into the buffer, or
             * <code>-1</code> if there is no more data because the end of
             * the stream has been reached.
             * @exception  NullPointerException If <code>b</code> is <code>null</code>.
             * @exception  IndexOutOfBoundsException If <code>off</code> is negative,
             * <code>len</code> is negative, or <code>len</code> is greater than
             * <code>b.length - off</code>
             * @exception  IOException  if an I/O error occurs.
             * @see        java.io.FilterInputStream#in
             */
            DataInputStream.prototype.read$byte_A$int$int = function (b, off, len) {
                return this["in"].read(b, off, len);
            };
            /**
             * Reads up to <code>len</code> bytes of data from this input stream
             * into an array of bytes. If <code>len</code> is not zero, the method
             * blocks until some input is available; otherwise, no
             * bytes are read and <code>0</code> is returned.
             * <p>
             * This method simply performs <code>in.read(b, off, len)</code>
             * and returns the result.
             *
             * @param      {Array} b     the buffer into which the data is read.
             * @param      {number} off   the start offset in the destination array <code>b</code>
             * @param      {number} len   the maximum number of bytes read.
             * @return     {number} the total number of bytes read into the buffer, or
             * <code>-1</code> if there is no more data because the end of
             * the stream has been reached.
             * @exception  NullPointerException If <code>b</code> is <code>null</code>.
             * @exception  IndexOutOfBoundsException If <code>off</code> is negative,
             * <code>len</code> is negative, or <code>len</code> is greater than
             * <code>b.length - off</code>
             * @exception  IOException  if an I/O error occurs.
             * @see        java.io.FilterInputStream#in
             */
            DataInputStream.prototype.read = function (b, off, len) {
                if (((b != null && b instanceof Array && (b.length == 0 || b[0] == null || (typeof b[0] === 'number'))) || b === null) && ((typeof off === 'number') || off === null) && ((typeof len === 'number') || len === null)) {
                    return this.read$byte_A$int$int(b, off, len);
                }
                else if (((b != null && b instanceof Array && (b.length == 0 || b[0] == null || (typeof b[0] === 'number'))) || b === null) && off === undefined && len === undefined) {
                    return this.read$byte_A(b);
                }
                else if (b === undefined && off === undefined && len === undefined) {
                    return this.read$();
                }
                else
                    throw new Error('invalid overload');
            };
            /**
             * Skips over and discards <code>n</code> bytes of data from the
             * input stream. The <code>skip</code> method may, for a variety of
             * reasons, end up skipping over some smaller number of bytes,
             * possibly <code>0</code>. The actual number of bytes skipped is
             * returned.
             * <p>
             * This method simply performs <code>in.skip(n)</code>.
             *
             * @param      {number} n   the number of bytes to be skipped.
             * @return     {number} the actual number of bytes skipped.
             * @exception  IOException  if the stream does not support seek,
             * or if some other I/O error occurs.
             */
            DataInputStream.prototype.skip = function (n) {
                return this["in"].skip(n);
            };
            /**
             * Returns an estimate of the number of bytes that can be read (or
             * skipped over) from this input stream without blocking by the next
             * caller of a method for this input stream. The next caller might be
             * the same thread or another thread.  A single read or skip of this
             * many bytes will not block, but may read or skip fewer bytes.
             * <p>
             * This method returns the result of {@link #in}.available().
             *
             * @return     {number} an estimate of the number of bytes that can be read (or skipped
             * over) from this input stream without blocking.
             * @exception  IOException  if an I/O error occurs.
             */
            DataInputStream.prototype.available = function () {
                return this["in"].available();
            };
            /**
             * Closes this input stream and releases any system resources
             * associated with the stream.
             * This
             * method simply performs <code>in.close()</code>.
             *
             * @exception  IOException  if an I/O error occurs.
             * @see        java.io.FilterInputStream#in
             */
            DataInputStream.prototype.close = function () {
                this["in"].close();
            };
            /**
             * Marks the current position in this input stream. A subsequent
             * call to the <code>reset</code> method repositions this stream at
             * the last marked position so that subsequent reads re-read the same bytes.
             * <p>
             * The <code>readlimit</code> argument tells this input stream to
             * allow that many bytes to be read before the mark position gets
             * invalidated.
             * <p>
             * This method simply performs <code>in.mark(readlimit)</code>.
             *
             * @param   {number} readlimit   the maximum limit of bytes that can be read before
             * the mark position becomes invalid.
             * @see     java.io.FilterInputStream#in
             * @see     java.io.FilterInputStream#reset()
             */
            DataInputStream.prototype.mark = function (readlimit) {
                this["in"].mark(readlimit);
            };
            /**
             * Repositions this stream to the position at the time the
             * <code>mark</code> method was last called on this input stream.
             * <p>
             * This method
             * simply performs <code>in.reset()</code>.
             * <p>
             * Stream marks are intended to be used in
             * situations where you need to read ahead a little to see what's in
             * the stream. Often this is most easily done by invoking some
             * general parser. If the stream is of the type handled by the
             * parse, it just chugs along happily. If the stream is not of
             * that type, the parser should toss an exception when it fails.
             * If this happens within readlimit bytes, it allows the outer
             * code to reset the stream and try another parser.
             *
             * @exception  IOException  if the stream has not been marked or if the
             * mark has been invalidated.
             * @see        java.io.FilterInputStream#in
             * @see        java.io.FilterInputStream#mark(int)
             */
            DataInputStream.prototype.reset = function () {
                this["in"].reset();
            };
            /**
             * Tests if this input stream supports the <code>mark</code>
             * and <code>reset</code> methods.
             * This method
             * simply performs <code>in.markSupported()</code>.
             *
             * @return  {boolean} <code>true</code> if this stream type supports the
             * <code>mark</code> and <code>reset</code> method;
             * <code>false</code> otherwise.
             * @see     java.io.FilterInputStream#in
             * @see     java.io.InputStream#mark(int)
             * @see     java.io.InputStream#reset()
             */
            DataInputStream.prototype.markSupported = function () {
                return this["in"].markSupported();
            };
            /**
             * See the general contract of the <code>readFully</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @param {Array} b
             * the buffer into which the data is read.
             * @exception EOFException
             * if this input stream reaches the end before reading all
             * the bytes.
             * @exception IOException
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             * @see java.io.FilterInputStream#in
             */
            DataInputStream.prototype.readFully$byte_A = function (b) {
                this.readFully$byte_A$int$int(b, 0, b.length);
            };
            /**
             * See the general contract of the <code>readFully</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @param {Array} b
             * the buffer into which the data is read.
             * @param {number} off
             * the start offset of the data.
             * @param {number} len
             * the number of bytes to read.
             * @exception EOFException
             * if this input stream reaches the end before reading all
             * the bytes.
             * @exception IOException
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             * @see java.io.FilterInputStream#in
             */
            DataInputStream.prototype.readFully$byte_A$int$int = function (b, off, len) {
                if (len < 0)
                    throw new java.lang.IndexOutOfBoundsException();
                var n = 0;
                while ((n < len)) {
                    var count = this["in"].read(b, off + n, len - n);
                    if (count < 0)
                        throw new java.io.EOFException();
                    n += count;
                }
                ;
            };
            /**
             * See the general contract of the <code>readFully</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @param {Array} b
             * the buffer into which the data is read.
             * @param {number} off
             * the start offset of the data.
             * @param {number} len
             * the number of bytes to read.
             * @exception EOFException
             * if this input stream reaches the end before reading all
             * the bytes.
             * @exception IOException
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             * @see java.io.FilterInputStream#in
             */
            DataInputStream.prototype.readFully = function (b, off, len) {
                if (((b != null && b instanceof Array && (b.length == 0 || b[0] == null || (typeof b[0] === 'number'))) || b === null) && ((typeof off === 'number') || off === null) && ((typeof len === 'number') || len === null)) {
                    return this.readFully$byte_A$int$int(b, off, len);
                }
                else if (((b != null && b instanceof Array && (b.length == 0 || b[0] == null || (typeof b[0] === 'number'))) || b === null) && off === undefined && len === undefined) {
                    return this.readFully$byte_A(b);
                }
                else
                    throw new Error('invalid overload');
            };
            /**
             * See the general contract of the <code>skipBytes</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @param {number} n
             * the number of bytes to be skipped.
             * @return {number} the actual number of bytes skipped.
             * @exception IOException
             * if the contained input stream does not support seek, or
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             */
            DataInputStream.prototype.skipBytes = function (n) {
                var total = 0;
                var cur = 0;
                while (((total < n) && ((cur = (this["in"].skip(n - total) | 0)) > 0))) {
                    total += cur;
                }
                ;
                return total;
            };
            /**
             * See the general contract of the <code>readBoolean</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @return {boolean} the <code>boolean</code> value read.
             * @exception EOFException
             * if this input stream has reached the end.
             * @exception IOException
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             * @see java.io.FilterInputStream#in
             */
            DataInputStream.prototype.readBoolean = function () {
                var ch = this["in"].read();
                if (ch < 0)
                    throw new java.io.EOFException();
                return (ch !== 0);
            };
            /**
             * See the general contract of the <code>readByte</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @return {number} the next byte of this input stream as a signed 8-bit
             * <code>byte</code>.
             * @exception EOFException
             * if this input stream has reached the end.
             * @exception IOException
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             * @see java.io.FilterInputStream#in
             */
            DataInputStream.prototype.readByte = function () {
                var ch = this["in"].read();
                if (ch < 0)
                    throw new java.io.EOFException();
                return ((ch) | 0);
            };
            /**
             * See the general contract of the <code>readUnsignedByte</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @return {number} the next byte of this input stream, interpreted as an unsigned
             * 8-bit number.
             * @exception EOFException
             * if this input stream has reached the end.
             * @exception IOException
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             * @see java.io.FilterInputStream#in
             */
            DataInputStream.prototype.readUnsignedByte = function () {
                var ch = this["in"].read();
                if (ch < 0)
                    throw new java.io.EOFException();
                return ch;
            };
            /**
             * See the general contract of the <code>readShort</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @return {number} the next two bytes of this input stream, interpreted as a signed
             * 16-bit number.
             * @exception EOFException
             * if this input stream reaches the end before reading two
             * bytes.
             * @exception IOException
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             * @see java.io.FilterInputStream#in
             */
            DataInputStream.prototype.readShort = function () {
                var ch1 = this["in"].read();
                var ch2 = this["in"].read();
                if ((ch1 | ch2) < 0)
                    throw new java.io.EOFException();
                return (((ch1 << 8) + (ch2 << 0)) | 0);
            };
            /**
             * See the general contract of the <code>readUnsignedShort</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @return {number} the next two bytes of this input stream, interpreted as an
             * unsigned 16-bit integer.
             * @exception EOFException
             * if this input stream reaches the end before reading two
             * bytes.
             * @exception IOException
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             * @see java.io.FilterInputStream#in
             */
            DataInputStream.prototype.readUnsignedShort = function () {
                var ch1 = this["in"].read();
                var ch2 = this["in"].read();
                if ((ch1 | ch2) < 0)
                    throw new java.io.EOFException();
                return (ch1 << 8) + (ch2 << 0);
            };
            /**
             * See the general contract of the <code>readChar</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @return {string} the next two bytes of this input stream, interpreted as a
             * <code>char</code>.
             * @exception EOFException
             * if this input stream reaches the end before reading two
             * bytes.
             * @exception IOException
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             * @see java.io.FilterInputStream#in
             */
            DataInputStream.prototype.readChar = function () {
                var ch1 = this["in"].read();
                var ch2 = this["in"].read();
                if ((ch1 | ch2) < 0)
                    throw new java.io.EOFException();
                return String.fromCharCode(((ch1 << 8) + (ch2 << 0)));
            };
            /**
             * See the general contract of the <code>readInt</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @return {number} the next four bytes of this input stream, interpreted as an
             * <code>int</code>.
             * @exception EOFException
             * if this input stream reaches the end before reading four
             * bytes.
             * @exception IOException
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             * @see java.io.FilterInputStream#in
             */
            DataInputStream.prototype.readInt = function () {
                var ch1 = this["in"].read();
                var ch2 = this["in"].read();
                var ch3 = this["in"].read();
                var ch4 = this["in"].read();
                if ((ch1 | ch2 | ch3 | ch4) < 0)
                    throw new java.io.EOFException();
                return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0));
            };
            /**
             * See the general contract of the <code>readLong</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @return {number} the next eight bytes of this input stream, interpreted as a
             * <code>long</code>.
             * @exception EOFException
             * if this input stream reaches the end before reading eight
             * bytes.
             * @exception IOException
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             * @see java.io.FilterInputStream#in
             */
            DataInputStream.prototype.readLong = function () {
                this.readFully$byte_A$int$int(this.readBuffer, 0, 8);
                return ((Math.floor(this.readBuffer[0]) << 56) + (Math.floor((this.readBuffer[1] & 255)) << 48) + (Math.floor((this.readBuffer[2] & 255)) << 40) + (Math.floor((this.readBuffer[3] & 255)) << 32) + (Math.floor((this.readBuffer[4] & 255)) << 24) + ((this.readBuffer[5] & 255) << 16) + ((this.readBuffer[6] & 255) << 8) + ((this.readBuffer[7] & 255) << 0));
            };
            /**
             * See the general contract of the <code>readFloat</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @return {number} the next four bytes of this input stream, interpreted as a
             * <code>float</code>.
             * @exception EOFException
             * if this input stream reaches the end before reading four
             * bytes.
             * @exception IOException
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             * @see java.io.DataInputStream#readInt()
             * @see java.lang.Float#intBitsToFloat(int)
             */
            DataInputStream.prototype.readFloat = function () {
                return javaemul.internal.FloatHelper.intBitsToFloat(this.readInt());
            };
            /**
             * See the general contract of the <code>readDouble</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @return {number} the next eight bytes of this input stream, interpreted as a
             * <code>double</code>.
             * @exception EOFException
             * if this input stream reaches the end before reading eight
             * bytes.
             * @exception IOException
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             * @see java.io.DataInputStream#readLong()
             * @see java.lang.Double#longBitsToDouble(long)
             */
            DataInputStream.prototype.readDouble = function () {
                return javaemul.internal.DoubleHelper.longBitsToDouble(this.readLong());
            };
            /**
             * See the general contract of the <code>readLine</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @deprecated This method does not properly convert bytes to characters. As
             * of JDK&nbsp;1.1, the preferred way to read lines of text is
             * via the <code>BufferedReader.readLine()</code> method.
             * Programs that use the <code>DataInputStream</code> class to
             * read lines can be converted to use the
             * <code>BufferedReader</code> class by replacing code of the
             * form: <blockquote>
             *
             * <pre>
             * DataInputStream d = new DataInputStream(in);
             * </pre>
             *
             * </blockquote> with: <blockquote>
             *
             * <pre>
             * BufferedReader d = new BufferedReader(new InputStreamReader(in));
             * </pre>
             *
             * </blockquote>
             *
             * @return {string} the next line of text from this input stream.
             * @exception IOException
             * if an I/O error occurs.
             * @see java.io.BufferedReader#readLine()
             * @see java.io.FilterInputStream#in
             */
            DataInputStream.prototype.readLine = function () {
                var buf = this.lineBuffer;
                if (buf == null) {
                    buf = this.lineBuffer = new Array(128);
                }
                var room = buf.length;
                var offset = 0;
                var c;
                loop: while ((true)) {
                    switch ((c = this["in"].read())) {
                        case -1:
                        case 10 /* '\n' */:
                            break loop;
                        case 13 /* '\r' */:
                            var c2 = this["in"].read();
                            if ((c2 != '\n'.charCodeAt(0)) && (c2 !== -1)) {
                                if (!(this["in"] != null && this["in"] instanceof java.io.PushbackInputStream)) {
                                    this["in"] = new java.io.PushbackInputStream(this["in"]);
                                }
                                this["in"].unread(c2);
                            }
                            break loop;
                        default:
                            if (--room < 0) {
                                buf = new Array(offset + 128);
                                room = buf.length - offset - 1;
                                java.lang.System.arraycopy(this.lineBuffer, 0, buf, 0, offset);
                                this.lineBuffer = buf;
                            }
                            buf[offset++] = String.fromCharCode(c);
                            break;
                    }
                }
                ;
                if ((c === -1) && (offset === 0)) {
                    return null;
                }
                return javaemul.internal.StringHelper.copyValueOf(buf, 0, offset);
            };
            /**
             * See the general contract of the <code>readUTF</code> method of
             * <code>DataInput</code>.
             * <p>
             * Bytes for this operation are read from the contained input stream.
             *
             * @return {string} a Unicode string.
             * @exception EOFException
             * if this input stream reaches the end before reading all
             * the bytes.
             * @exception IOException
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             * @exception UTFDataFormatException
             * if the bytes do not represent a valid modified UTF-8
             * encoding of a string.
             * @see java.io.DataInputStream#readUTF(java.io.DataInput)
             */
            DataInputStream.prototype.readUTF = function () {
                return DataInputStream.readUTF(this);
            };
            /**
             * Reads from the stream <code>in</code> a representation of a Unicode
             * character string encoded in
             * <a href="DataInput.html#modified-utf-8">modified UTF-8</a> format; this
             * string of characters is then returned as a <code>String</code>. The
             * details of the modified UTF-8 representation are exactly the same as for
             * the <code>readUTF</code> method of <code>DataInput</code>.
             *
             * @param {java.io.DataInputStream} in
             * a data input stream.
             * @return {string} a Unicode string.
             * @exception EOFException
             * if the input stream reaches the end before all the bytes.
             * @exception IOException
             * the stream has been closed and the contained input stream
             * does not support reading after close, or another I/O error
             * occurs.
             * @exception UTFDataFormatException
             * if the bytes do not represent a valid modified UTF-8
             * encoding of a Unicode string.
             * @see java.io.DataInputStream#readUnsignedShort()
             */
            DataInputStream.readUTF = function (__in) {
                var utflen = __in.readUnsignedShort();
                var bytearr = null;
                var chararr = null;
                if (__in != null && __in instanceof java.io.DataInputStream) {
                    var dis = __in;
                    if (dis.bytearr.length < utflen) {
                        dis.bytearr = (function (s) { var a = []; while (s-- > 0)
                            a.push(0); return a; })(utflen * 2);
                        dis.chararr = new Array(utflen * 2);
                    }
                    chararr = dis.chararr;
                    bytearr = dis.bytearr;
                }
                else {
                    bytearr = (function (s) { var a = []; while (s-- > 0)
                        a.push(0); return a; })(utflen);
                    chararr = new Array(utflen);
                }
                var c;
                var char2;
                var char3;
                var count = 0;
                var chararr_count = 0;
                __in.readFully$byte_A$int$int(bytearr, 0, utflen);
                while ((count < utflen)) {
                    c = (bytearr[count] | 0) & 255;
                    if (c > 127)
                        break;
                    count++;
                    chararr[chararr_count++] = String.fromCharCode(c);
                }
                ;
                while ((count < utflen)) {
                    c = (bytearr[count] | 0) & 255;
                    switch ((c >> 4)) {
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                            count++;
                            chararr[chararr_count++] = String.fromCharCode(c);
                            break;
                        case 12:
                        case 13:
                            count += 2;
                            if (count > utflen)
                                throw new java.io.UTFDataFormatException("malformed input: partial character at end");
                            char2 = (bytearr[count - 1] | 0);
                            if ((char2 & 192) !== 128)
                                throw new java.io.UTFDataFormatException("malformed input around byte " + count);
                            chararr[chararr_count++] = String.fromCharCode((((c & 31) << 6) | (char2 & 63)));
                            break;
                        case 14:
                            count += 3;
                            if (count > utflen)
                                throw new java.io.UTFDataFormatException("malformed input: partial character at end");
                            char2 = (bytearr[count - 2] | 0);
                            char3 = (bytearr[count - 1] | 0);
                            if (((char2 & 192) !== 128) || ((char3 & 192) !== 128))
                                throw new java.io.UTFDataFormatException("malformed input around byte " + (count - 1));
                            chararr[chararr_count++] = String.fromCharCode((((c & 15) << 12) | ((char2 & 63) << 6) | ((char3 & 63) << 0)));
                            break;
                        default:
                            throw new java.io.UTFDataFormatException("malformed input around byte " + count);
                    }
                }
                ;
                return (function (str, index, len) { return str.substring(index, index + len); })((chararr).join(''), 0, chararr_count);
            };
            return DataInputStream;
        }(java.io.InputStream));
        io.DataInputStream = DataInputStream;
        DataInputStream["__class"] = "java.io.DataInputStream";
        DataInputStream["__interfaces"] = ["java.io.Closeable", "java.lang.AutoCloseable"];
    })(io = java.io || (java.io = {}));
})(java || (java = {}));
(function (java) {
    var io;
    (function (io) {
        var DataOutputStream = (function (_super) {
            __extends(DataOutputStream, _super);
            function DataOutputStream(out) {
                var _this = _super.call(this) || this;
                _this.out = null;
                _this.out = out;
                return _this;
            }
            DataOutputStream.prototype.write = function (b) {
                this.out.write(b);
            };
            DataOutputStream.prototype.writeShort = function (v) {
                this.out.write((v >>> 8) & 255);
                this.out.write((v >>> 0) & 255);
            };
            DataOutputStream.prototype.writeInt = function (v) {
                this.out.write((v >>> 24) & 255);
                this.out.write((v >>> 16) & 255);
                this.out.write((v >>> 8) & 255);
                this.out.write((v >>> 0) & 255);
            };
            DataOutputStream.prototype.writeChars = function (s) {
                var len = s.length;
                for (var i = 0; i < len; i++) {
                    var v = (s.charAt(i)).charCodeAt(0);
                    this.out.write((v >>> 8) & 255);
                    this.out.write((v >>> 0) & 255);
                }
            };
            DataOutputStream.prototype.flush = function () {
                this.out.flush();
            };
            DataOutputStream.prototype.close = function () {
                this.out.close();
            };
            return DataOutputStream;
        }(java.io.OutputStream));
        io.DataOutputStream = DataOutputStream;
        DataOutputStream["__class"] = "java.io.DataOutputStream";
        DataOutputStream["__interfaces"] = ["java.io.Closeable", "java.lang.AutoCloseable", "java.io.Flushable"];
    })(io = java.io || (java.io = {}));
})(java || (java = {}));
(function (java) {
    var io;
    (function (io) {
        /**
         * Constructs an <code>EOFException</code> with the specified detail
         * message. The string <code>s</code> may later be retrieved by the
         * <code>{@link java.lang.Throwable#getMessage}</code> method of class
         * <code>java.lang.Throwable</code>.
         *
         * @param   {string} s   the detail message.
         * @class
         */
        var EOFException = (function (_super) {
            __extends(EOFException, _super);
            function EOFException(s) {
                var _this = this;
                if (((typeof s === 'string') || s === null)) {
                    var __args = Array.prototype.slice.call(arguments);
                    _this = _super.call(this, s) || this;
                }
                else if (s === undefined) {
                    var __args = Array.prototype.slice.call(arguments);
                    _this = _super.call(this) || this;
                }
                else
                    throw new Error('invalid overload');
                return _this;
            }
            return EOFException;
        }(java.io.IOException));
        EOFException.serialVersionUID = 6433858223774886977;
        io.EOFException = EOFException;
        EOFException["__class"] = "java.io.EOFException";
        EOFException["__interfaces"] = ["java.io.Serializable"];
    })(io = java.io || (java.io = {}));
})(java || (java = {}));
(function (java) {
    var io;
    (function (io) {
        var File = (function () {
            function File(fileName) {
            }
            File.prototype.getAbsolutePath = function () {
                return null;
            };
            File.prototype.isDirectory = function () {
                return false;
            };
            File.prototype.exists = function () {
                return false;
            };
            File.prototype.list$ = function () {
                return new Array(0);
            };
            File.prototype.list$java_io_FilenameFilter = function (filter) {
                return new Array(0);
            };
            File.prototype.list = function (filter) {
                if (((filter != null && (filter["__interfaces"] != null && filter["__interfaces"].indexOf("java.io.FilenameFilter") >= 0 || filter.constructor != null && filter.constructor["__interfaces"] != null && filter.constructor["__interfaces"].indexOf("java.io.FilenameFilter") >= 0)) || filter === null)) {
                    return this.list$java_io_FilenameFilter(filter);
                }
                else if (filter === undefined) {
                    return this.list$();
                }
                else
                    throw new Error('invalid overload');
            };
            return File;
        }());
        File.separator = "/";
        io.File = File;
        File["__class"] = "java.io.File";
    })(io = java.io || (java.io = {}));
})(java || (java = {}));
(function (java) {
    var lang;
    (function (lang) {
        var Thread = (function () {
            function Thread(target) {
                var _this = this;
                if (((target != null && (target["__interfaces"] != null && target["__interfaces"].indexOf("java.lang.Runnable") >= 0 || target.constructor != null && target.constructor["__interfaces"] != null && target.constructor["__interfaces"].indexOf("java.lang.Runnable") >= 0)) || target === null)) {
                    var __args = Array.prototype.slice.call(arguments);
                    this.target = null;
                    this.target = null;
                    (function () {
                        _this.target = target;
                    })();
                }
                else if (target === undefined) {
                    var __args = Array.prototype.slice.call(arguments);
                    {
                        var __args_2 = Array.prototype.slice.call(arguments);
                        var target_1 = null;
                        this.target = null;
                        this.target = null;
                        (function () {
                            _this.target = target_1;
                        })();
                    }
                }
                else
                    throw new Error('invalid overload');
            }
            Thread.MAIN_THREAD_$LI$ = function () { if (Thread.MAIN_THREAD == null)
                Thread.MAIN_THREAD = new java.lang.Thread(); return Thread.MAIN_THREAD; };
            ;
            Thread.prototype.run = function () {
                if (this.target != null) {
                    this.target.run();
                }
            };
            Thread.prototype.start = function () {
                var _this = this;
                var consumer = function (o) {
                    _this.run();
                };
                window.setTimeout(consumer, 0);
            };
            Thread.yield = function () {
            };
            Thread.currentThread = function () {
                return Thread.MAIN_THREAD_$LI$();
            };
            return Thread;
        }());
        lang.Thread = Thread;
        Thread["__class"] = "java.lang.Thread";
    })(lang = java.lang || (java.lang = {}));
})(java || (java = {}));
(function (java) {
    var net;
    (function (net) {
        var URL = (function () {
            function URL(url) {
                this.url = null;
                this.url = url;
            }
            URL.prototype.openStream = function () {
                return null;
            };
            return URL;
        }());
        net.URL = URL;
        URL["__class"] = "java.net.URL";
    })(net = java.net || (java.net = {}));
})(java || (java = {}));
(function (java) {
    var util;
    (function (util) {
        var concurrent;
        (function (concurrent) {
            var ConcurrentHashMap = (function (_super) {
                __extends(ConcurrentHashMap, _super);
                function ConcurrentHashMap() {
                    return _super.call(this) || this;
                }
                return ConcurrentHashMap;
            }(java.util.HashMap));
            ConcurrentHashMap.serialVersionUID = -3568484410355934922;
            concurrent.ConcurrentHashMap = ConcurrentHashMap;
            ConcurrentHashMap["__class"] = "java.util.concurrent.ConcurrentHashMap";
            ConcurrentHashMap["__interfaces"] = ["java.lang.Cloneable", "java.util.Map", "java.io.Serializable"];
        })(concurrent = util.concurrent || (util.concurrent = {}));
    })(util = java.util || (java.util = {}));
})(java || (java = {}));
(function (java) {
    var util;
    (function (util) {
        /**
         * See <a
         * href="http://docs.oracle.com/javase/7/docs/api/java/util/Objects.html">the
         * official Java API doc</a> for details.
         */
        var Objects = (function () {
            function Objects() {
            }
            Objects.compare = function (a, b, c) {
                return a === b ? 0 : c.compare(a, b);
            };
            Objects.deepEquals = function (a, b) {
                if (a === b) {
                    return true;
                }
                if (a == null || b == null) {
                    return false;
                }
                if ((function (o1, o2) { if (o1.equals) {
                    return o1.equals(o2);
                }
                else {
                    return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                } })(a, b)) {
                    return true;
                }
                var class1 = a.constructor;
                var class2 = b.constructor;
                if (!class1.isArray() || !(function (o1, o2) { if (o1.equals) {
                    return o1.equals(o2);
                }
                else {
                    return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                } })(class1, class2)) {
                    return false;
                }
                if (a != null && a instanceof Array && (a.length == 0 || a[0] == null || a[0] != null)) {
                    return java.util.Arrays.deepEquals(a, b);
                }
                if (a != null && a instanceof Array && (a.length == 0 || a[0] == null || typeof a[0] === 'boolean')) {
                    return java.util.Arrays.equals(a, b);
                }
                if (a != null && a instanceof Array && (a.length == 0 || a[0] == null || typeof a[0] === 'number')) {
                    return java.util.Arrays.equals(a, b);
                }
                if (a != null && a instanceof Array && (a.length == 0 || a[0] == null || typeof a[0] === 'string')) {
                    return java.util.Arrays.equals(a, b);
                }
                if (a != null && a instanceof Array && (a.length == 0 || a[0] == null || typeof a[0] === 'number')) {
                    return java.util.Arrays.equals(a, b);
                }
                if (a != null && a instanceof Array && (a.length == 0 || a[0] == null || typeof a[0] === 'number')) {
                    return java.util.Arrays.equals(a, b);
                }
                if (a != null && a instanceof Array && (a.length == 0 || a[0] == null || typeof a[0] === 'number')) {
                    return java.util.Arrays.equals(a, b);
                }
                if (a != null && a instanceof Array && (a.length == 0 || a[0] == null || typeof a[0] === 'number')) {
                    return java.util.Arrays.equals(a, b);
                }
                if (a != null && a instanceof Array && (a.length == 0 || a[0] == null || typeof a[0] === 'number')) {
                    return java.util.Arrays.equals(a, b);
                }
                return true;
            };
            Objects.equals = function (a, b) {
                return (a === b) || (a != null && (function (o1, o2) { if (o1.equals) {
                    return o1.equals(o2);
                }
                else {
                    return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                } })(a, b));
            };
            Objects.hashCode = function (o) {
                return o != null ? (function (o) { if (o.hashCode) {
                    return o.hashCode();
                }
                else if (!isNaN(parseInt(o.toString()))) {
                    return parseInt(o.toString());
                }
                else {
                    window['hashCodeCounter'] = (window['hashCodeCounter'] ? window['hashCodeCounter'] + 1 : 1);
                    o['generatedHashCode'] = window['hashCodeCounter'];
                    o.hashCode = function () { return o['generatedHashCode']; };
                    return o.hashCode();
                } })(o) : 0;
            };
            Objects.hash = function () {
                var values = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    values[_i] = arguments[_i];
                }
                return (function (o1, o2) { if (o1.equals) {
                    return o1.equals(o2);
                }
                else {
                    return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                } })(java.util.Arrays, values);
            };
            Objects.isNull = function (obj) {
                return obj == null;
            };
            Objects.nonNull = function (obj) {
                return obj != null;
            };
            Objects.requireNonNull$java_lang_Object = function (obj) {
                if (obj == null) {
                    throw new java.lang.NullPointerException();
                }
                return obj;
            };
            Objects.requireNonNull$java_lang_Object$java_lang_String = function (obj, message) {
                if (obj == null) {
                    throw new java.lang.NullPointerException(message);
                }
                return obj;
            };
            Objects.requireNonNull = function (obj, message) {
                if (((obj != null) || obj === null) && ((typeof message === 'string') || message === null)) {
                    return java.util.Objects.requireNonNull$java_lang_Object$java_lang_String(obj, message);
                }
                else if (((obj != null) || obj === null) && ((typeof message === 'function' && message.length == 0) || message === null)) {
                    return java.util.Objects.requireNonNull$java_lang_Object$java_util_function_Supplier(obj, message);
                }
                else if (((obj != null) || obj === null) && message === undefined) {
                    return java.util.Objects.requireNonNull$java_lang_Object(obj);
                }
                else
                    throw new Error('invalid overload');
            };
            Objects.requireNonNull$java_lang_Object$java_util_function_Supplier = function (obj, messageSupplier) {
                if (obj == null) {
                    throw new java.lang.NullPointerException(messageSupplier());
                }
                return obj;
            };
            Objects.toString$java_lang_Object = function (o) {
                return new String(o).toString();
            };
            Objects.toString$java_lang_Object$java_lang_String = function (o, nullDefault) {
                return o != null ? o.toString() : nullDefault;
            };
            Objects.toString = function (o, nullDefault) {
                if (((o != null) || o === null) && ((typeof nullDefault === 'string') || nullDefault === null)) {
                    return java.util.Objects.toString$java_lang_Object$java_lang_String(o, nullDefault);
                }
                else if (((o != null) || o === null) && nullDefault === undefined) {
                    return java.util.Objects.toString$java_lang_Object(o);
                }
                else
                    throw new Error('invalid overload');
            };
            return Objects;
        }());
        util.Objects = Objects;
        Objects["__class"] = "java.util.Objects";
    })(util = java.util || (java.util = {}));
})(java || (java = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var action;
            (function (action_2) {
                var TGActionManager = (function () {
                    function TGActionManager(context) {
                        this.context = null;
                        this.actions = null;
                        this.interceptors = null;
                        this.actionContextFactory = null;
                        this.context = context;
                        this.actions = (new java.util.HashMap());
                        this.interceptors = (new java.util.ArrayList());
                        this.actionContextFactory = null;
                    }
                    TGActionManager.prototype.mapAction = function (id, action) {
                        this.actions.put(id, action);
                    };
                    TGActionManager.prototype.unmapAction = function (id) {
                        if (this.actions.containsKey(id)) {
                            this.actions.remove(id);
                        }
                    };
                    TGActionManager.prototype.getAction = function (id) {
                        if (this.actions.containsKey(id)) {
                            return this.actions.get(id);
                        }
                        return null;
                    };
                    TGActionManager.prototype.getActions = function () {
                        return this.actions;
                    };
                    TGActionManager.prototype.createActionContext = function () {
                        if (this.actionContextFactory != null) {
                            return this.actionContextFactory.createActionContext();
                        }
                        return null;
                    };
                    TGActionManager.prototype.execute$java_lang_String = function (id) {
                        this.execute$java_lang_String$org_herac_tuxguitar_action_TGActionContext(id, this.createActionContext());
                    };
                    TGActionManager.prototype.execute$java_lang_String$org_herac_tuxguitar_action_TGActionContext = function (id, context) {
                        try {
                            var action_3 = this.getAction(id);
                            if (action_3 != null) {
                                if (!this.intercept(id, context)) {
                                    this.doPreExecution(id, context);
                                    action_3.execute(context);
                                    this.doPostExecution(id, context);
                                }
                            }
                        }
                        catch (__e) {
                            if (__e != null && __e instanceof org.herac.tuxguitar.action.TGActionException) {
                                var tgActionException = __e;
                                this.fireErrorEvent(id, context, tgActionException);
                                throw tgActionException;
                            }
                            if (__e != null && __e instanceof Error) {
                                var throwable = __e;
                                this.fireErrorEvent(id, context, throwable);
                                throw new org.herac.tuxguitar.action.TGActionException(throwable);
                            }
                        }
                        ;
                    };
                    TGActionManager.prototype.execute = function (id, context) {
                        if (((typeof id === 'string') || id === null) && ((context != null && context instanceof org.herac.tuxguitar.action.TGActionContext) || context === null)) {
                            return this.execute$java_lang_String$org_herac_tuxguitar_action_TGActionContext(id, context);
                        }
                        else if (((typeof id === 'string') || id === null) && context === undefined) {
                            return this.execute$java_lang_String(id);
                        }
                        else
                            throw new Error('invalid overload');
                    };
                    TGActionManager.prototype.intercept = function (id, context) {
                        for (var index122 = this.interceptors.iterator(); index122.hasNext();) {
                            var interceptor = index122.next();
                            {
                                if (interceptor.intercept(id, context)) {
                                    return true;
                                }
                            }
                        }
                        return false;
                    };
                    TGActionManager.prototype.doPreExecution = function (id, context) {
                        org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).fireEvent(new org.herac.tuxguitar.action.TGActionPreExecutionEvent(id, context));
                    };
                    TGActionManager.prototype.doPostExecution = function (id, context) {
                        org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).fireEvent(new org.herac.tuxguitar.action.TGActionPostExecutionEvent(id, context));
                    };
                    TGActionManager.prototype.fireErrorEvent = function (id, context, throwable) {
                        org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).fireEvent(new org.herac.tuxguitar.action.TGActionErrorEvent(id, context, throwable));
                    };
                    TGActionManager.prototype.addPreExecutionListener = function (listener) {
                        org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).addListener(org.herac.tuxguitar.action.TGActionPreExecutionEvent.EVENT_TYPE, listener);
                    };
                    TGActionManager.prototype.removePreExecutionListener = function (listener) {
                        org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).removeListener(org.herac.tuxguitar.action.TGActionPreExecutionEvent.EVENT_TYPE, listener);
                    };
                    TGActionManager.prototype.addPostExecutionListener = function (listener) {
                        org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).addListener(org.herac.tuxguitar.action.TGActionPostExecutionEvent.EVENT_TYPE, listener);
                    };
                    TGActionManager.prototype.removePostExecutionListener = function (listener) {
                        org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).removeListener(org.herac.tuxguitar.action.TGActionPostExecutionEvent.EVENT_TYPE, listener);
                    };
                    TGActionManager.prototype.addErrorListener = function (listener) {
                        org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).addListener(org.herac.tuxguitar.action.TGActionErrorEvent.EVENT_TYPE, listener);
                    };
                    TGActionManager.prototype.removeErrorListener = function (listener) {
                        org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).removeListener(org.herac.tuxguitar.action.TGActionErrorEvent.EVENT_TYPE, listener);
                    };
                    TGActionManager.prototype.addInterceptor = function (interceptor) {
                        if (!this.interceptors.contains(interceptor)) {
                            this.interceptors.add(interceptor);
                        }
                    };
                    TGActionManager.prototype.removeInterceptor = function (interceptor) {
                        if (this.interceptors.contains(interceptor)) {
                            this.interceptors.remove(interceptor);
                        }
                    };
                    TGActionManager.prototype.setActionContextFactory = function (actionContextFactory) {
                        this.actionContextFactory = actionContextFactory;
                    };
                    TGActionManager.getInstance = function (context) {
                        return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGActionManager), new TGActionManager.TGActionManager$0());
                    };
                    return TGActionManager;
                }());
                action_2.TGActionManager = TGActionManager;
                TGActionManager["__class"] = "org.herac.tuxguitar.action.TGActionManager";
                (function (TGActionManager) {
                    var TGActionManager$0 = (function () {
                        function TGActionManager$0() {
                        }
                        TGActionManager$0.prototype.createInstance = function (context) {
                            return new org.herac.tuxguitar.action.TGActionManager(context);
                        };
                        return TGActionManager$0;
                    }());
                    TGActionManager.TGActionManager$0 = TGActionManager$0;
                    TGActionManager$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                })(TGActionManager = action_2.TGActionManager || (action_2.TGActionManager = {}));
            })(action = tuxguitar.action || (tuxguitar.action = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var document;
            (function (document) {
                var TGDocumentManager = (function () {
                    function TGDocumentManager() {
                        this.songManager = null;
                        this.song = null;
                        this.songManager = new org.herac.tuxguitar.song.managers.TGSongManager(new org.herac.tuxguitar.graphics.control.TGFactoryImpl());
                        this.song = this.songManager.newSong();
                    }
                    TGDocumentManager.prototype.getSongManager = function () {
                        return this.songManager;
                    };
                    TGDocumentManager.prototype.getSong = function () {
                        return this.song;
                    };
                    TGDocumentManager.prototype.setSong = function (song) {
                        if (song != null) {
                            this.song = song;
                        }
                    };
                    TGDocumentManager.getInstance = function (context) {
                        return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGDocumentManager), new TGDocumentManager.TGDocumentManager$0());
                    };
                    return TGDocumentManager;
                }());
                document.TGDocumentManager = TGDocumentManager;
                TGDocumentManager["__class"] = "org.herac.tuxguitar.document.TGDocumentManager";
                (function (TGDocumentManager) {
                    var TGDocumentManager$0 = (function () {
                        function TGDocumentManager$0() {
                        }
                        TGDocumentManager$0.prototype.createInstance = function (context) {
                            return new org.herac.tuxguitar.document.TGDocumentManager();
                        };
                        return TGDocumentManager$0;
                    }());
                    TGDocumentManager.TGDocumentManager$0 = TGDocumentManager$0;
                    TGDocumentManager$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                })(TGDocumentManager = document.TGDocumentManager || (document.TGDocumentManager = {}));
            })(document = tuxguitar.document || (tuxguitar.document = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var event;
            (function (event_1) {
                var TGEventHandler = (function () {
                    function TGEventHandler() {
                        this.lock = null;
                        this.listeners = null;
                        this.lock = new Object();
                        this.listeners = (new java.util.ArrayList());
                    }
                    TGEventHandler.prototype.processEvent = function (event) {
                        var listeners = (new java.util.ArrayList());
                        {
                            listeners.addAll(this.listeners);
                        }
                        ;
                        try {
                            for (var index123 = listeners.iterator(); index123.hasNext();) {
                                var tgEventListener = index123.next();
                                {
                                    tgEventListener.processEvent(event);
                                }
                            }
                        }
                        catch (e) {
                            throw new org.herac.tuxguitar.event.TGEventException(e);
                        }
                        ;
                    };
                    TGEventHandler.prototype.addListener = function (listener) {
                        {
                            if (!this.listeners.contains(listener)) {
                                this.listeners.add(listener);
                            }
                        }
                        ;
                    };
                    TGEventHandler.prototype.removeListener = function (listener) {
                        {
                            if (this.listeners.contains(listener)) {
                                this.listeners.remove(listener);
                            }
                        }
                        ;
                    };
                    return TGEventHandler;
                }());
                event_1.TGEventHandler = TGEventHandler;
                TGEventHandler["__class"] = "org.herac.tuxguitar.event.TGEventHandler";
            })(event = tuxguitar.event || (tuxguitar.event = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var event;
            (function (event_2) {
                var TGEventManager = (function () {
                    function TGEventManager() {
                        this.eventHandlers = null;
                        this.eventHandlers = (new java.util.HashMap());
                    }
                    TGEventManager.prototype.addListener = function (eventType, listener) {
                        if (eventType != null) {
                            this.findEventHandler(eventType).addListener(listener);
                        }
                    };
                    TGEventManager.prototype.removeListener = function (eventType, listener) {
                        if (eventType != null) {
                            this.findEventHandler(eventType).removeListener(listener);
                        }
                    };
                    TGEventManager.prototype.fireEvent = function (event) {
                        var handler = this.findEventHandler(event.getEventType());
                        if (handler != null) {
                            handler.processEvent(event);
                        }
                    };
                    TGEventManager.prototype.findEventHandler = function (eventType) {
                        if (eventType == null) {
                            return null;
                        }
                        if (this.eventHandlers.containsKey(eventType)) {
                            return this.eventHandlers.get(eventType);
                        }
                        this.eventHandlers.put(eventType, new org.herac.tuxguitar.event.TGEventHandler());
                        return this.findEventHandler(eventType);
                    };
                    TGEventManager.prototype.clear = function () {
                        this.eventHandlers.clear();
                    };
                    TGEventManager.getInstance = function (context) {
                        return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGEventManager), new TGEventManager.TGEventManager$0());
                    };
                    return TGEventManager;
                }());
                event_2.TGEventManager = TGEventManager;
                TGEventManager["__class"] = "org.herac.tuxguitar.event.TGEventManager";
                (function (TGEventManager) {
                    var TGEventManager$0 = (function () {
                        function TGEventManager$0() {
                        }
                        TGEventManager$0.prototype.createInstance = function (context) {
                            return new org.herac.tuxguitar.event.TGEventManager();
                        };
                        return TGEventManager$0;
                    }());
                    TGEventManager.TGEventManager$0 = TGEventManager$0;
                    TGEventManager$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                })(TGEventManager = event_2.TGEventManager || (event_2.TGEventManager = {}));
            })(event = tuxguitar.event || (tuxguitar.event = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var command;
                (function (command) {
                    var TGCubicTo = (function () {
                        function TGCubicTo(xc1, yc1, xc2, yc2, x1, y1) {
                            this.xc1 = 0;
                            this.yc1 = 0;
                            this.xc2 = 0;
                            this.yc2 = 0;
                            this.x1 = 0;
                            this.y1 = 0;
                            this.xc1 = xc1;
                            this.yc1 = yc1;
                            this.xc2 = xc2;
                            this.yc2 = yc2;
                            this.x1 = x1;
                            this.y1 = y1;
                        }
                        TGCubicTo.prototype.paint = function (painter, x, y, scale) {
                            painter.cubicTo((x + (this.xc1 * scale)), (y + (this.yc1 * scale)), (x + (this.xc2 * scale)), (y + (this.yc2 * scale)), (x + (this.x1 * scale)), (y + (this.y1 * scale)));
                        };
                        return TGCubicTo;
                    }());
                    command.TGCubicTo = TGCubicTo;
                    TGCubicTo["__class"] = "org.herac.tuxguitar.graphics.command.TGCubicTo";
                    TGCubicTo["__interfaces"] = ["org.herac.tuxguitar.graphics.command.TGPaintCommand"];
                })(command = graphics.command || (graphics.command = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var command;
                (function (command) {
                    var TGLineTo = (function () {
                        function TGLineTo(x, y) {
                            this.x = 0;
                            this.y = 0;
                            this.x = x;
                            this.y = y;
                        }
                        TGLineTo.prototype.paint = function (painter, x, y, scale) {
                            painter.lineTo((x + (this.x * scale)), (y + (this.y * scale)));
                        };
                        return TGLineTo;
                    }());
                    command.TGLineTo = TGLineTo;
                    TGLineTo["__class"] = "org.herac.tuxguitar.graphics.command.TGLineTo";
                    TGLineTo["__interfaces"] = ["org.herac.tuxguitar.graphics.command.TGPaintCommand"];
                })(command = graphics.command || (graphics.command = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var command;
                (function (command) {
                    var TGMoveTo = (function () {
                        function TGMoveTo(x, y) {
                            this.x = 0;
                            this.y = 0;
                            this.x = x;
                            this.y = y;
                        }
                        TGMoveTo.prototype.paint = function (painter, x, y, scale) {
                            painter.moveTo((x + (this.x * scale)), (y + (this.y * scale)));
                        };
                        return TGMoveTo;
                    }());
                    command.TGMoveTo = TGMoveTo;
                    TGMoveTo["__class"] = "org.herac.tuxguitar.graphics.command.TGMoveTo";
                    TGMoveTo["__interfaces"] = ["org.herac.tuxguitar.graphics.command.TGPaintCommand"];
                })(command = graphics.command || (graphics.command = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var command;
                (function (command_1) {
                    var TGPaintModel = (function () {
                        function TGPaintModel() {
                            var commands = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                commands[_i] = arguments[_i];
                            }
                            this.commands = null;
                            this.commands = commands;
                        }
                        TGPaintModel.prototype.paint = function (painter, x, y, scale) {
                            for (var index124 = 0; index124 < this.commands.length; index124++) {
                                var command_2 = this.commands[index124];
                                {
                                    command_2.paint(painter, x, y, scale);
                                }
                            }
                        };
                        return TGPaintModel;
                    }());
                    command_1.TGPaintModel = TGPaintModel;
                    TGPaintModel["__class"] = "org.herac.tuxguitar.graphics.command.TGPaintModel";
                    TGPaintModel["__interfaces"] = ["org.herac.tuxguitar.graphics.command.TGPaintCommand"];
                })(command = graphics.command || (graphics.command = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var painters;
                    (function (painters) {
                        var TGTempoPainter = (function () {
                            function TGTempoPainter() {
                            }
                            TGTempoPainter.paintTempo = function (painter, x, y, scale) {
                                var width = Math.round(scale * 1.33);
                                var height = Math.round(scale * (1.0 + 2.5));
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                org.herac.tuxguitar.graphics.control.painters.TGNotePainter.paintNote(painter, x + (width - (scale * 1.33)), y + (height - (1.0 * scale)), scale);
                                painter.closePath();
                                painter.initPath();
                                painter.setAntialias(false);
                                painter.moveTo(x + width, y);
                                painter.lineTo(x + width, y + (height - (0.66 * scale)));
                                painter.closePath();
                            };
                            return TGTempoPainter;
                        }());
                        painters.TGTempoPainter = TGTempoPainter;
                        TGTempoPainter["__class"] = "org.herac.tuxguitar.graphics.control.painters.TGTempoPainter";
                    })(painters = control.painters || (control.painters = {}));
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var painters;
                    (function (painters) {
                        var TGTripletFeelPainter = (function () {
                            function TGTripletFeelPainter() {
                            }
                            TGTripletFeelPainter.paintTripletFeel8 = function (painter, x, y, scale) {
                                var topSpacing = (1.0 * scale);
                                var horizontalSpacing = (1.5 * scale);
                                var verticalSpacing = (2.5 * scale);
                                var ovalWidth = (1.33 * scale);
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                org.herac.tuxguitar.graphics.control.painters.TGNotePainter.paintNote(painter, x, y + (topSpacing + verticalSpacing), scale);
                                painter.closePath();
                                painter.initPath();
                                painter.setAntialias(false);
                                painter.moveTo(x + Math.round(ovalWidth), y + Math.round(topSpacing + verticalSpacing + (0.33 * scale)));
                                painter.lineTo(x + Math.round(ovalWidth), y + topSpacing);
                                painter.closePath();
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                org.herac.tuxguitar.graphics.control.painters.TGNotePainter.paintNote(painter, x + horizontalSpacing, y + (topSpacing + verticalSpacing), scale);
                                painter.closePath();
                                painter.initPath();
                                painter.setAntialias(false);
                                painter.moveTo(x + Math.round(ovalWidth + horizontalSpacing), y + Math.round(topSpacing + verticalSpacing + (0.33 * scale)));
                                painter.lineTo(x + Math.round(ovalWidth + horizontalSpacing), y + topSpacing);
                                painter.closePath();
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                org.herac.tuxguitar.graphics.control.painters.TGNotePainter.paintFooter(painter, x + Math.round(ovalWidth + horizontalSpacing), y + (topSpacing + (scale * 2.3)), -1, scale);
                                painter.closePath();
                                painter.initPath();
                                painter.moveTo(x, y + (1.2 * scale));
                                painter.cubicTo(x + (horizontalSpacing / 2.0), y, x + ((ovalWidth * 2.0) + (horizontalSpacing / 2.0)), y, x + ((ovalWidth * 2.0) + horizontalSpacing), y + (1.2 * scale));
                                painter.moveTo(x + ((ovalWidth * 2.0) + horizontalSpacing), y + (1.2 * scale));
                                painter.closePath();
                            };
                            TGTripletFeelPainter.paintTripletFeelNone8 = function (painter, x, y, scale) {
                                var horizontalSpacing = (1.5 * scale);
                                var verticalSpacing = (2.5 * scale);
                                var ovalWidth = (1.33 * scale);
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                org.herac.tuxguitar.graphics.control.painters.TGNotePainter.paintNote(painter, x, y + verticalSpacing, scale);
                                painter.closePath();
                                painter.initPath();
                                painter.setAntialias(false);
                                painter.moveTo(x + Math.round(ovalWidth), y + Math.round(verticalSpacing + (0.33 * scale)));
                                painter.lineTo(x + Math.round(ovalWidth), y);
                                painter.lineTo(x + Math.round(ovalWidth + horizontalSpacing), y);
                                painter.lineTo(x + Math.round(ovalWidth + horizontalSpacing), y + Math.round(verticalSpacing + (0.33 * scale)));
                                painter.closePath();
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                org.herac.tuxguitar.graphics.control.painters.TGNotePainter.paintNote(painter, x + horizontalSpacing, y + verticalSpacing, scale);
                                painter.closePath();
                            };
                            TGTripletFeelPainter.paintTripletFeel16 = function (painter, x, y, scale) {
                                var topSpacing = (1.0 * scale);
                                var horizontalSpacing = (1.5 * scale);
                                var verticalSpacing = (2.5 * scale);
                                var ovalWidth = (1.33 * scale);
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                org.herac.tuxguitar.graphics.control.painters.TGNotePainter.paintNote(painter, x, y + (topSpacing + verticalSpacing), scale);
                                painter.closePath();
                                painter.initPath();
                                painter.setAntialias(false);
                                painter.moveTo(x + Math.round(ovalWidth), y + Math.round(topSpacing + verticalSpacing + (0.33 * scale)));
                                painter.lineTo(x + Math.round(ovalWidth), y + topSpacing);
                                painter.lineTo(x + Math.round(ovalWidth + horizontalSpacing), y + topSpacing);
                                painter.lineTo(x + Math.round(ovalWidth + horizontalSpacing), y + Math.round(topSpacing + verticalSpacing + (0.33 * scale)));
                                painter.moveTo(x + Math.round(ovalWidth + horizontalSpacing - (0.55 * scale)), y + Math.round(topSpacing + (0.5 * scale)));
                                painter.lineTo(x + Math.round(ovalWidth + horizontalSpacing), y + Math.round(topSpacing + (0.5 * scale)));
                                painter.closePath();
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                org.herac.tuxguitar.graphics.control.painters.TGNotePainter.paintNote(painter, x + horizontalSpacing, y + (topSpacing + verticalSpacing), scale);
                                painter.closePath();
                                painter.initPath();
                                painter.moveTo(x, y + (1.2 * scale));
                                painter.cubicTo(x + (horizontalSpacing / 2.0), y, x + ((ovalWidth * 2.0) + (horizontalSpacing / 2.0)), y, x + ((ovalWidth * 2.0) + horizontalSpacing), y + (1.2 * scale));
                                painter.moveTo(x + ((ovalWidth * 2.0) + horizontalSpacing), y + (1.2 * scale));
                                painter.closePath();
                                return Math.round((ovalWidth * 2.0) + horizontalSpacing);
                            };
                            TGTripletFeelPainter.paintTripletFeelNone16 = function (painter, x, y, scale) {
                                var horizontalSpacing = (1.5 * scale);
                                var verticalSpacing = (2.5 * scale);
                                var ovalWidth = (1.33 * scale);
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                org.herac.tuxguitar.graphics.control.painters.TGNotePainter.paintNote(painter, x, y + verticalSpacing, scale);
                                painter.closePath();
                                painter.initPath();
                                painter.setAntialias(false);
                                painter.moveTo(x + Math.round(ovalWidth), y + Math.round(verticalSpacing + (0.33 * scale)));
                                painter.lineTo(x + Math.round(ovalWidth), y);
                                painter.lineTo(x + Math.round(ovalWidth + horizontalSpacing), y);
                                painter.lineTo(x + Math.round(ovalWidth + horizontalSpacing), y + Math.round(verticalSpacing + (0.33 * scale)));
                                painter.moveTo(x + Math.round(ovalWidth), y + Math.round(0.5 * scale));
                                painter.lineTo(x + Math.round(ovalWidth + horizontalSpacing), y + Math.round(0.5 * scale));
                                painter.closePath();
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                org.herac.tuxguitar.graphics.control.painters.TGNotePainter.paintNote(painter, x + horizontalSpacing, y + verticalSpacing, scale);
                                painter.closePath();
                                return Math.round(ovalWidth + horizontalSpacing);
                            };
                            return TGTripletFeelPainter;
                        }());
                        painters.TGTripletFeelPainter = TGTripletFeelPainter;
                        TGTripletFeelPainter["__class"] = "org.herac.tuxguitar.graphics.control.painters.TGTripletFeelPainter";
                    })(painters = control.painters || (control.painters = {}));
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var print;
                    (function (print) {
                        var TGPrintController = (function () {
                            function TGPrintController(song, songManager, resourceFactory, styles) {
                                this.song = null;
                                this.songManager = null;
                                this.resourceFactory = null;
                                this.resourceBuffer = null;
                                this.styles = null;
                                this.song = song;
                                this.songManager = songManager;
                                this.styles = styles;
                                this.resourceFactory = resourceFactory;
                                this.resourceBuffer = new org.herac.tuxguitar.graphics.control.TGResourceBuffer();
                            }
                            TGPrintController.prototype.getSong = function () {
                                return this.song;
                            };
                            TGPrintController.prototype.getSongManager = function () {
                                return this.songManager;
                            };
                            TGPrintController.prototype.getResourceFactory = function () {
                                return this.resourceFactory;
                            };
                            TGPrintController.prototype.getResourceBuffer = function () {
                                return this.resourceBuffer;
                            };
                            TGPrintController.prototype.getStyles = function () {
                                return this.styles;
                            };
                            TGPrintController.prototype.getTrackSelection = function () {
                                return -1;
                            };
                            TGPrintController.prototype.isRunning$org_herac_tuxguitar_song_models_TGBeat = function (beat) {
                                return false;
                            };
                            TGPrintController.prototype.isRunning = function (beat) {
                                if (((beat != null && beat instanceof org.herac.tuxguitar.song.models.TGBeat) || beat === null)) {
                                    return this.isRunning$org_herac_tuxguitar_song_models_TGBeat(beat);
                                }
                                else if (((beat != null && beat instanceof org.herac.tuxguitar.song.models.TGMeasure) || beat === null)) {
                                    return this.isRunning$org_herac_tuxguitar_song_models_TGMeasure(beat);
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGPrintController.prototype.isRunning$org_herac_tuxguitar_song_models_TGMeasure = function (measure) {
                                return false;
                            };
                            TGPrintController.prototype.isLoopSHeader = function (measureHeader) {
                                return false;
                            };
                            TGPrintController.prototype.isLoopEHeader = function (measureHeader) {
                                return false;
                            };
                            return TGPrintController;
                        }());
                        print.TGPrintController = TGPrintController;
                        TGPrintController["__class"] = "org.herac.tuxguitar.graphics.control.print.TGPrintController";
                        TGPrintController["__interfaces"] = ["org.herac.tuxguitar.graphics.control.TGController"];
                    })(print = control.print || (control.print = {}));
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var print;
                    (function (print) {
                        var TGPrintSettings = (function () {
                            function TGPrintSettings(trackNumber, fromMeasure, toMeasure, style) {
                                var _this = this;
                                if (((typeof trackNumber === 'number') || trackNumber === null) && ((typeof fromMeasure === 'number') || fromMeasure === null) && ((typeof toMeasure === 'number') || toMeasure === null) && ((typeof style === 'number') || style === null)) {
                                    var __args = Array.prototype.slice.call(arguments);
                                    this.trackNumber = 0;
                                    this.fromMeasure = 0;
                                    this.toMeasure = 0;
                                    this.style = 0;
                                    this.trackNumber = 0;
                                    this.fromMeasure = 0;
                                    this.toMeasure = 0;
                                    this.style = 0;
                                    (function () {
                                        _this.trackNumber = trackNumber;
                                        _this.fromMeasure = fromMeasure;
                                        _this.toMeasure = toMeasure;
                                        _this.style = style;
                                    })();
                                }
                                else if (trackNumber === undefined && fromMeasure === undefined && toMeasure === undefined && style === undefined) {
                                    var __args = Array.prototype.slice.call(arguments);
                                    {
                                        var __args_3 = Array.prototype.slice.call(arguments);
                                        var trackNumber_1 = TGPrintSettings.ALL_TRACKS;
                                        var fromMeasure_1 = -1;
                                        var toMeasure_1 = -1;
                                        var style_1 = org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE | org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE | org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_CHORD_DIAGRAM | org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_COMPACT | org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_MODE_BLACK_WHITE;
                                        this.trackNumber = 0;
                                        this.fromMeasure = 0;
                                        this.toMeasure = 0;
                                        this.style = 0;
                                        this.trackNumber = 0;
                                        this.fromMeasure = 0;
                                        this.toMeasure = 0;
                                        this.style = 0;
                                        (function () {
                                            _this.trackNumber = trackNumber_1;
                                            _this.fromMeasure = fromMeasure_1;
                                            _this.toMeasure = toMeasure_1;
                                            _this.style = style_1;
                                        })();
                                    }
                                }
                                else
                                    throw new Error('invalid overload');
                            }
                            TGPrintSettings.prototype.getFromMeasure = function () {
                                return this.fromMeasure;
                            };
                            TGPrintSettings.prototype.setFromMeasure = function (fromMeasure) {
                                this.fromMeasure = fromMeasure;
                            };
                            TGPrintSettings.prototype.getStyle = function () {
                                return this.style;
                            };
                            TGPrintSettings.prototype.setStyle = function (style) {
                                this.style = style;
                            };
                            TGPrintSettings.prototype.getToMeasure = function () {
                                return this.toMeasure;
                            };
                            TGPrintSettings.prototype.setToMeasure = function (toMeasure) {
                                this.toMeasure = toMeasure;
                            };
                            TGPrintSettings.prototype.getTrackNumber = function () {
                                return this.trackNumber;
                            };
                            TGPrintSettings.prototype.setTrackNumber = function (trackNumber) {
                                this.trackNumber = trackNumber;
                            };
                            return TGPrintSettings;
                        }());
                        TGPrintSettings.ALL_TRACKS = -1;
                        print.TGPrintSettings = TGPrintSettings;
                        TGPrintSettings["__class"] = "org.herac.tuxguitar.graphics.control.print.TGPrintSettings";
                    })(print = control.print || (control.print = {}));
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGBeatGroup = (function () {
                        function TGBeatGroup(voice) {
                            this.voice = 0;
                            this.direction = 0;
                            this.voices = null;
                            this.firstMinNote = null;
                            this.firstMaxNote = null;
                            this.lastMinNote = null;
                            this.lastMaxNote = null;
                            this.maxNote = null;
                            this.minNote = null;
                            this.voice = voice;
                            this.voices = (new java.util.ArrayList());
                            this.direction = TGBeatGroup.DIRECTION_NOT_SETTED;
                            this.firstMinNote = null;
                            this.firstMaxNote = null;
                            this.lastMinNote = null;
                            this.lastMaxNote = null;
                            this.maxNote = null;
                            this.minNote = null;
                        }
                        TGBeatGroup.SCORE_MIDDLE_KEYS_$LI$ = function () { if (TGBeatGroup.SCORE_MIDDLE_KEYS == null)
                            TGBeatGroup.SCORE_MIDDLE_KEYS = [55, 40, 40, 50]; return TGBeatGroup.SCORE_MIDDLE_KEYS; };
                        ;
                        TGBeatGroup.SCORE_SHARP_POSITIONS_$LI$ = function () { if (TGBeatGroup.SCORE_SHARP_POSITIONS == null)
                            TGBeatGroup.SCORE_SHARP_POSITIONS = [7, 7, 6, 6, 5, 4, 4, 3, 3, 2, 2, 1]; return TGBeatGroup.SCORE_SHARP_POSITIONS; };
                        ;
                        TGBeatGroup.SCORE_FLAT_POSITIONS_$LI$ = function () { if (TGBeatGroup.SCORE_FLAT_POSITIONS == null)
                            TGBeatGroup.SCORE_FLAT_POSITIONS = [7, 6, 6, 5, 5, 4, 3, 3, 2, 2, 1, 1]; return TGBeatGroup.SCORE_FLAT_POSITIONS; };
                        ;
                        TGBeatGroup.prototype.check$org_herac_tuxguitar_graphics_control_TGVoiceImpl = function (voice) {
                            this.check$org_herac_tuxguitar_graphics_control_TGNoteImpl(voice.getMaxNote());
                            this.check$org_herac_tuxguitar_graphics_control_TGNoteImpl(voice.getMinNote());
                            this.voices.add(voice);
                            if (voice.getDirection() !== org.herac.tuxguitar.song.models.TGVoice.DIRECTION_NONE) {
                                if (voice.getDirection() === org.herac.tuxguitar.song.models.TGVoice.DIRECTION_UP) {
                                    this.direction = TGBeatGroup.DIRECTION_UP;
                                }
                                else if (voice.getDirection() === org.herac.tuxguitar.song.models.TGVoice.DIRECTION_DOWN) {
                                    this.direction = TGBeatGroup.DIRECTION_DOWN;
                                }
                            }
                        };
                        TGBeatGroup.prototype.check = function (voice) {
                            if (((voice != null && voice instanceof org.herac.tuxguitar.graphics.control.TGVoiceImpl) || voice === null)) {
                                return this.check$org_herac_tuxguitar_graphics_control_TGVoiceImpl(voice);
                            }
                            else if (((voice != null && voice instanceof org.herac.tuxguitar.graphics.control.TGNoteImpl) || voice === null)) {
                                return this.check$org_herac_tuxguitar_graphics_control_TGNoteImpl(voice);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGBeatGroup.prototype.check$org_herac_tuxguitar_graphics_control_TGNoteImpl = function (note) {
                            var value = note.getRealValue();
                            if (this.firstMinNote == null || note.getVoice().getBeat().getStart() < this.firstMinNote.getVoice().getBeat().getStart()) {
                                this.firstMinNote = note;
                            }
                            else if (note.getVoice().getBeat().getStart() === this.firstMinNote.getVoice().getBeat().getStart()) {
                                if (note.getRealValue() < this.firstMinNote.getRealValue()) {
                                    this.firstMinNote = note;
                                }
                            }
                            if (this.firstMaxNote == null || note.getVoice().getBeat().getStart() < this.firstMaxNote.getVoice().getBeat().getStart()) {
                                this.firstMaxNote = note;
                            }
                            else if (note.getVoice().getBeat().getStart() === this.firstMaxNote.getVoice().getBeat().getStart()) {
                                if (note.getRealValue() > this.firstMaxNote.getRealValue()) {
                                    this.firstMaxNote = note;
                                }
                            }
                            if (this.lastMinNote == null || note.getVoice().getBeat().getStart() > this.lastMinNote.getVoice().getBeat().getStart()) {
                                this.lastMinNote = note;
                            }
                            else if (note.getVoice().getBeat().getStart() === this.lastMinNote.getVoice().getBeat().getStart()) {
                                if (note.getRealValue() < this.lastMinNote.getRealValue()) {
                                    this.lastMinNote = note;
                                }
                            }
                            if (this.lastMaxNote == null || note.getVoice().getBeat().getStart() > this.lastMaxNote.getVoice().getBeat().getStart()) {
                                this.lastMaxNote = note;
                            }
                            else if (note.getVoice().getBeat().getStart() === this.lastMaxNote.getVoice().getBeat().getStart()) {
                                if (note.getRealValue() > this.lastMaxNote.getRealValue()) {
                                    this.lastMaxNote = note;
                                }
                            }
                            if (this.maxNote == null || value > this.maxNote.getRealValue()) {
                                this.maxNote = note;
                            }
                            if (this.minNote == null || value < this.minNote.getRealValue()) {
                                this.minNote = note;
                            }
                        };
                        TGBeatGroup.prototype.finish = function (layout, measure) {
                            if (this.direction === TGBeatGroup.DIRECTION_NOT_SETTED) {
                                if (measure.getNotEmptyVoices() > 1) {
                                    this.direction = this.voice === 0 ? TGBeatGroup.DIRECTION_UP : TGBeatGroup.DIRECTION_DOWN;
                                }
                                else if ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) === 0) {
                                    this.direction = TGBeatGroup.DIRECTION_DOWN;
                                }
                                else {
                                    var max = Math.abs(this.minNote.getRealValue() - (TGBeatGroup.SCORE_MIDDLE_KEYS_$LI$()[measure.getClef() - 1] + 100));
                                    var min = Math.abs(this.maxNote.getRealValue() - (TGBeatGroup.SCORE_MIDDLE_KEYS_$LI$()[measure.getClef() - 1] - 100));
                                    if (max > min) {
                                        this.direction = TGBeatGroup.DIRECTION_UP;
                                    }
                                    else {
                                        this.direction = TGBeatGroup.DIRECTION_DOWN;
                                    }
                                }
                            }
                        };
                        TGBeatGroup.prototype.getVoices = function () {
                            return this.voices;
                        };
                        TGBeatGroup.prototype.getY1 = function (layout, note, key, clef) {
                            var noteValue = note.getRealValue();
                            var scale = (layout.getScoreLineSpacing() / 2.0);
                            var scoreLineY = 0;
                            if (key <= 7) {
                                scoreLineY = ((TGBeatGroup.SCORE_SHARP_POSITIONS_$LI$()[noteValue % 12] * scale) - ((((7 * ((noteValue / 12 | 0))) | 0)) * scale));
                            }
                            else {
                                scoreLineY = ((TGBeatGroup.SCORE_FLAT_POSITIONS_$LI$()[noteValue % 12] * scale) - ((((7 * ((noteValue / 12 | 0))) | 0)) * scale));
                            }
                            scoreLineY += (org.herac.tuxguitar.graphics.control.TGMeasureImpl.SCORE_KEY_OFFSETS_$LI$()[clef - 1] * scale);
                            return scoreLineY;
                        };
                        TGBeatGroup.prototype.getY2 = function (layout, x, key, clef) {
                            var maxDistance = (10.0 * layout.getScale());
                            var upOffset = TGBeatGroup.getUpOffset(layout);
                            var downOffset = TGBeatGroup.getDownOffset(layout);
                            if (this.direction === TGBeatGroup.DIRECTION_DOWN) {
                                if (this.minNote !== this.firstMinNote && this.minNote !== this.lastMinNote) {
                                    return (this.getY1(layout, this.minNote, key, clef) + downOffset);
                                }
                                var y = 0;
                                var x1 = this.firstMinNote.getPosX() + this.firstMinNote.getBeatImpl().getSpacing(layout);
                                var x2 = this.lastMinNote.getPosX() + this.lastMinNote.getBeatImpl().getSpacing(layout);
                                var y1 = (this.getY1(layout, this.firstMinNote, key, clef) + downOffset);
                                var y2 = (this.getY1(layout, this.lastMinNote, key, clef) + downOffset);
                                if (y1 > y2 && (y1 - y2) > maxDistance) {
                                    y2 = (y1 - maxDistance);
                                }
                                if (y2 > y1 && (y2 - y1) > maxDistance) {
                                    y1 = (y2 - maxDistance);
                                }
                                if ((y1 - y2) !== 0 && (x1 - x2) !== 0 && (x1 - x) !== 0) {
                                    y = (((y1 - y2) / (x1 - x2)) * (x1 - x));
                                }
                                return y1 - y;
                            }
                            else if (this.maxNote !== this.firstMaxNote && this.maxNote !== this.lastMaxNote) {
                                return (this.getY1(layout, this.maxNote, key, clef) - upOffset);
                            }
                            else {
                                var y = 0;
                                var x1 = this.firstMaxNote.getPosX() + this.firstMaxNote.getBeatImpl().getSpacing(layout);
                                var x2 = this.lastMaxNote.getPosX() + this.lastMaxNote.getBeatImpl().getSpacing(layout);
                                var y1 = (this.getY1(layout, this.firstMaxNote, key, clef) - upOffset);
                                var y2 = (this.getY1(layout, this.lastMaxNote, key, clef) - upOffset);
                                if (y1 < y2 && (y2 - y1) > maxDistance) {
                                    y2 = (y1 + maxDistance);
                                }
                                if (y2 < y1 && (y1 - y2) > maxDistance) {
                                    y1 = (y2 + maxDistance);
                                }
                                if ((y1 - y2) !== 0 && (x1 - x2) !== 0 && (x1 - x) !== 0) {
                                    y = (((y1 - y2) / (x1 - x2)) * (x1 - x));
                                }
                                return y1 - y;
                            }
                        };
                        TGBeatGroup.prototype.getDirection = function () {
                            return this.direction;
                        };
                        TGBeatGroup.prototype.getMinNote = function () {
                            return this.minNote;
                        };
                        TGBeatGroup.prototype.getMaxNote = function () {
                            return this.maxNote;
                        };
                        TGBeatGroup.getUpOffset = function (layout) {
                            var scale = (layout.getScoreLineSpacing() / 8.0);
                            return (TGBeatGroup.UP_OFFSET * scale);
                        };
                        TGBeatGroup.getDownOffset = function (layout) {
                            var scale = (layout.getScoreLineSpacing() / 8.0);
                            return (TGBeatGroup.DOWN_OFFSET * scale);
                        };
                        return TGBeatGroup;
                    }());
                    TGBeatGroup.DIRECTION_NOT_SETTED = 0;
                    TGBeatGroup.DIRECTION_UP = 1;
                    TGBeatGroup.DIRECTION_DOWN = 2;
                    TGBeatGroup.UP_OFFSET = 28;
                    TGBeatGroup.DOWN_OFFSET = 35;
                    control.TGBeatGroup = TGBeatGroup;
                    TGBeatGroup["__class"] = "org.herac.tuxguitar.graphics.control.TGBeatGroup";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGLayout = (function () {
                        function TGLayout(controller, style) {
                            this.style = 0;
                            this.scale = 0;
                            this.fontScale = 0;
                            this.width = 0;
                            this.height = 0;
                            this.minBufferSeparator = 0;
                            this.minTopSpacing = 0;
                            this.minScoreTabSpacing = 0;
                            this.stringSpacing = 0;
                            this.scoreLineSpacing = 0;
                            this.trackSpacing = 0;
                            this.firstTrackSpacing = 0;
                            this.firstMeasureSpacing = 0;
                            this.firstNoteSpacing = 0;
                            this.measureLeftSpacing = 0;
                            this.measureRightSpacing = 0;
                            this.clefSpacing = 0;
                            this.keySignatureSpacing = 0;
                            this.timeSignatureSpacing = 0;
                            this.chordFretIndexSpacing = 0;
                            this.chordStringSpacing = 0;
                            this.chordFretSpacing = 0;
                            this.chordNoteSize = 0;
                            this.chordLineWidth = 0;
                            this.repeatEndingSpacing = 0;
                            this.effectSpacing = 0;
                            this.divisionTypeSpacing = 0;
                            this.textSpacing = 0;
                            this.markerSpacing = 0;
                            this.loopMarkerSpacing = 0;
                            this.lineWidths = null;
                            this.durationWidths = null;
                            this.bufferEnabled = false;
                            this.playModeEnabled = false;
                            this.trackPositions = null;
                            this.controller = null;
                            this.resources = null;
                            this.controller = controller;
                            this.trackPositions = (new java.util.ArrayList());
                            this.playModeEnabled = false;
                            this.resources = new org.herac.tuxguitar.graphics.control.TGResources(this);
                            this.style = style;
                            if ((this.style & TGLayout.DISPLAY_TABLATURE) === 0 && (this.style & TGLayout.DISPLAY_SCORE) === 0) {
                                this.style |= TGLayout.DISPLAY_TABLATURE;
                            }
                        }
                        TGLayout.DEFAULT_MODE_$LI$ = function () { if (TGLayout.DEFAULT_MODE == null)
                            TGLayout.DEFAULT_MODE = TGLayout.MODE_HORIZONTAL; return TGLayout.DEFAULT_MODE; };
                        ;
                        TGLayout.prototype.loadStyles$ = function () {
                            this.loadStyles$float(1.0);
                        };
                        TGLayout.prototype.loadStyles$float = function (scale) {
                            this.loadStyles$float$float(scale, scale);
                        };
                        TGLayout.prototype.loadStyles$float$float = function (scale, fontScale) {
                            var styles = this.getComponent().getStyles();
                            this.scale = scale;
                            this.fontScale = fontScale;
                            this.bufferEnabled = styles.isBufferEnabled();
                            this.stringSpacing = (styles.getStringSpacing() * this.getScale());
                            this.scoreLineSpacing = (styles.getScoreLineSpacing() * this.getScale());
                            this.minBufferSeparator = (styles.getMinBufferSeparator() * this.getScale());
                            this.minTopSpacing = (styles.getMinTopSpacing() * this.getScale());
                            this.minScoreTabSpacing = (styles.getMinScoreTabSpacing() * this.getScale());
                            this.firstTrackSpacing = (styles.getFirstTrackSpacing() * this.getScale());
                            this.firstMeasureSpacing = (styles.getFirstMeasureSpacing() * this.getScale());
                            this.firstNoteSpacing = (styles.getFirstNoteSpacing() * this.getScale());
                            this.measureLeftSpacing = (styles.getMeasureLeftSpacing() * this.getScale());
                            this.measureRightSpacing = (styles.getMeasureRightSpacing() * this.getScale());
                            this.clefSpacing = (styles.getClefSpacing() * this.getScale());
                            this.keySignatureSpacing = (styles.getKeySignatureSpacing() * this.getScale());
                            this.timeSignatureSpacing = (styles.getTimeSignatureSpacing() * this.getScale());
                            this.trackSpacing = (styles.getTrackSpacing() * this.getScale());
                            this.chordFretIndexSpacing = (styles.getChordFretIndexSpacing() * this.getScale());
                            this.chordStringSpacing = (styles.getChordStringSpacing() * this.getScale());
                            this.chordFretSpacing = (styles.getChordFretSpacing() * this.getScale());
                            this.chordNoteSize = (styles.getChordNoteSize() * this.getScale());
                            this.chordLineWidth = (styles.getChordLineWidth() * this.getScale());
                            this.repeatEndingSpacing = (styles.getRepeatEndingSpacing() * this.getScale());
                            this.textSpacing = (styles.getTextSpacing() * this.getScale());
                            this.markerSpacing = (styles.getMarkerSpacing() * this.getScale());
                            this.loopMarkerSpacing = (styles.getLoopMarkerSpacing() * this.getScale());
                            this.divisionTypeSpacing = (styles.getDivisionTypeSpacing() * this.getScale());
                            this.effectSpacing = (styles.getEffectSpacing() * this.getScale());
                            this.lineWidths = (function (s) { var a = []; while (s-- > 0)
                                a.push(0); return a; })(styles.getLineWidths() != null ? styles.getLineWidths().length : 0);
                            for (var i = 0; i < this.lineWidths.length; i++) {
                                this.lineWidths[i] = (styles.getLineWidths()[i] * this.getScale());
                            }
                            this.durationWidths = (function (s) { var a = []; while (s-- > 0)
                                a.push(0); return a; })(styles.getDurationWidths() != null ? styles.getDurationWidths().length : 0);
                            for (var i = 0; i < this.durationWidths.length; i++) {
                                this.durationWidths[i] = (styles.getDurationWidths()[i] * this.getScale());
                            }
                            this.getResources().load(styles);
                        };
                        TGLayout.prototype.loadStyles = function (scale, fontScale) {
                            if (((typeof scale === 'number') || scale === null) && ((typeof fontScale === 'number') || fontScale === null)) {
                                return this.loadStyles$float$float(scale, fontScale);
                            }
                            else if (((typeof scale === 'number') || scale === null) && fontScale === undefined) {
                                return this.loadStyles$float(scale);
                            }
                            else if (scale === undefined && fontScale === undefined) {
                                return this.loadStyles$();
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGLayout.prototype.paint = function (painter, clientArea, fromX, fromY) {
                            this.playModeEnabled = false;
                            this.paintSong(painter, clientArea, fromX, fromY);
                        };
                        TGLayout.prototype.paintMeasure = function (measure, painter, spacing) {
                            measure.setSpacing(spacing);
                            measure.paintMeasure(this, painter);
                        };
                        TGLayout.prototype.updateSong = function () {
                            this.getResourceBuffer().clearRegistry();
                            this.updateMeasures();
                        };
                        TGLayout.prototype.updateMeasures = function () {
                            var measureCount = this.getSong().countMeasureHeaders();
                            for (var measureIdx = 0; measureIdx < measureCount; measureIdx++) {
                                this.updateMeasureIndex(measureIdx);
                            }
                        };
                        TGLayout.prototype.updateMeasureIndex = function (index) {
                            if (index >= 0 && index < this.getSong().countMeasureHeaders()) {
                                this.getSong().getMeasureHeader(index).update(this, index);
                                var trackCount = this.getSong().countTracks();
                                for (var trackIdx = 0; trackIdx < trackCount; trackIdx++) {
                                    var track = this.getSong().getTrack(trackIdx);
                                    var measure = track.getMeasure(index);
                                    measure.create(this);
                                }
                                for (var trackIdx = 0; trackIdx < trackCount; trackIdx++) {
                                    var track = this.getSong().getTrack(trackIdx);
                                    var measure = track.getMeasure(index);
                                    track.update(this);
                                    measure.update(this);
                                }
                            }
                        };
                        TGLayout.prototype.updateMeasureNumber = function (number) {
                            var header = this.getSongManager().getMeasureHeader(this.getSong(), number);
                            if (header != null) {
                                var index = this.getSongManager().getMeasureHeaderIndex(this.getSong(), header);
                                if (index >= 0) {
                                    this.updateMeasureIndex(index);
                                }
                            }
                        };
                        /**
                         * Pinta las lineas
                         * @param {org.herac.tuxguitar.graphics.control.TGTrackImpl} track
                         * @param {org.herac.tuxguitar.graphics.control.TGTrackSpacing} ts
                         * @param {org.herac.tuxguitar.graphics.TGPainter} painter
                         * @param {number} x
                         * @param {number} y
                         * @param {number} width
                         */
                        TGLayout.prototype.paintLines = function (track, ts, painter, x, y, width) {
                            if (width > 0) {
                                this.setLineStyle(painter);
                                var tempX = ((x < 0) ? 0 : x);
                                var tempY = y;
                                if ((this.style & TGLayout.DISPLAY_SCORE) !== 0) {
                                    var posY = tempY + ts.getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES);
                                    painter.initPath();
                                    painter.setAntialias(false);
                                    for (var i = 1; i <= 5; i++) {
                                        painter.moveTo(tempX, posY);
                                        painter.lineTo(tempX + width, posY);
                                        posY += this.getScoreLineSpacing();
                                    }
                                    painter.closePath();
                                }
                                if ((this.style & TGLayout.DISPLAY_TABLATURE) !== 0) {
                                    tempY += ts.getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE);
                                    painter.initPath();
                                    painter.setAntialias(false);
                                    for (var i = 0; i < track.stringCount(); i++) {
                                        painter.moveTo(tempX, tempY);
                                        painter.lineTo(tempX + width, tempY);
                                        tempY += this.getStringSpacing();
                                    }
                                    painter.closePath();
                                }
                            }
                        };
                        /**
                         * Pinta el compas y las notas que estan sonando
                         * @param {org.herac.tuxguitar.graphics.TGPainter} painter
                         * @param {org.herac.tuxguitar.graphics.control.TGMeasureImpl} measure
                         * @param {org.herac.tuxguitar.graphics.control.TGBeatImpl} beat
                         */
                        TGLayout.prototype.paintPlayMode = function (painter, measure, beat) {
                            this.playModeEnabled = true;
                            measure.paintPlayMode(this, painter);
                            if (beat != null) {
                                beat.paint(this, painter, measure.getPosX() + measure.getHeaderImpl().getLeftSpacing(this), measure.getPosY());
                            }
                            measure.getTrackImpl().getLyrics().paintCurrentNoteBeats(painter, this, measure, measure.getPosX(), measure.getPosY());
                            this.playModeEnabled = false;
                        };
                        TGLayout.prototype.checkScale = function () {
                            var v1 = ((this.style & TGLayout.DISPLAY_SCORE) !== 0 ? (this.getScoreLineSpacing() * 1.25) : 0);
                            var v2 = ((this.style & TGLayout.DISPLAY_TABLATURE) !== 0 ? this.getStringSpacing() : 0);
                            var scale = (Math.max(v1, v2) / 10.0);
                            return scale;
                        };
                        TGLayout.prototype.checkDefaultSpacing = function (ts) {
                            var checkPosition = -1;
                            var minBufferSeparator = this.getMinBufferSeparator();
                            if ((this.style & TGLayout.DISPLAY_SCORE) !== 0) {
                                var bufferSeparator = (ts.getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_UP_LINES) - ts.getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_BUFFER_SEPARATOR));
                                if (bufferSeparator < minBufferSeparator) {
                                    ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_BUFFER_SEPARATOR, minBufferSeparator - bufferSeparator);
                                }
                                checkPosition = ts.getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES);
                            }
                            else if ((this.style & TGLayout.DISPLAY_TABLATURE) !== 0) {
                                var bufferSeparator = (ts.getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE) - ts.getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_BUFFER_SEPARATOR));
                                if (bufferSeparator < minBufferSeparator) {
                                    ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_BUFFER_SEPARATOR, minBufferSeparator - bufferSeparator);
                                }
                                checkPosition = ts.getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE);
                            }
                            if (checkPosition >= 0 && checkPosition < this.getMinTopSpacing()) {
                                ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TOP, (this.getMinTopSpacing() - checkPosition));
                            }
                        };
                        /**
                         * Calcula el espacio minimo entre negras, dependiendo de la duracion de la nota
                         * @param {org.herac.tuxguitar.song.models.TGDuration} duration
                         * @return {number}
                         */
                        TGLayout.prototype.getSpacingForQuarter = function (duration) {
                            return ((org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME / duration.getTime()) * this.getDurationWidth(duration));
                        };
                        TGLayout.prototype.getDurationWidth = function (duration) {
                            var durationWidth = 0.0;
                            if (this.durationWidths != null) {
                                var index = 0;
                                for (var value = org.herac.tuxguitar.song.models.TGDuration.WHOLE; value <= duration.getValue(); value *= 2) {
                                    if (this.durationWidths.length > index) {
                                        durationWidth = this.durationWidths[index++];
                                    }
                                }
                            }
                            return durationWidth;
                        };
                        TGLayout.prototype.getMinimumDurationWidth = function () {
                            var minimumWidth = null;
                            if (this.durationWidths != null) {
                                for (var i = 0; i < this.durationWidths.length; i++) {
                                    if (minimumWidth == null || minimumWidth > this.durationWidths[i]) {
                                        minimumWidth = this.durationWidths[i];
                                    }
                                }
                            }
                            return (minimumWidth != null ? minimumWidth : 0.0);
                        };
                        TGLayout.prototype.getLineWidth = function (level) {
                            if (this.lineWidths != null) {
                                return this.lineWidths[this.lineWidths.length > level ? level : this.lineWidths.length - 1];
                            }
                            return org.herac.tuxguitar.graphics.TGPainter.THINNEST_LINE_WIDTH;
                        };
                        TGLayout.prototype.getScoreNoteWidth = function () {
                            return (this.getScoreLineSpacing() * 1.085);
                        };
                        TGLayout.prototype.isPlayModeEnabled = function () {
                            return this.playModeEnabled;
                        };
                        TGLayout.prototype.setMeasureNumberStyle = function (painter) {
                            painter.setFont(this.getResources().getDefaultFont());
                            painter.setBackground(this.getLightColor(this.getResources().getBackgroundColor()));
                            painter.setForeground(this.getDarkColor(this.getResources().getColorRed()));
                        };
                        TGLayout.prototype.setDivisionsStyle = function (painter, fill) {
                            painter.setFont(this.getResources().getDefaultFont());
                            painter.setBackground((fill ? this.getResources().getColorBlack() : this.getLightColor(this.getResources().getBackgroundColor())));
                            painter.setForeground(this.getResources().getColorBlack());
                        };
                        TGLayout.prototype.setTempoStyle = function (painter, fontStyle) {
                            painter.setFont(this.getResources().getDefaultFont());
                            painter.setForeground(this.getResources().getColorBlack());
                            painter.setBackground((fontStyle ? this.getLightColor(this.getResources().getBackgroundColor()) : this.getResources().getColorBlack()));
                        };
                        TGLayout.prototype.setTripletFeelStyle = function (painter, fontStyle) {
                            painter.setFont(this.getResources().getDefaultFont());
                            painter.setForeground(this.getResources().getColorBlack());
                            painter.setBackground((fontStyle ? this.getLightColor(this.getResources().getBackgroundColor()) : this.getResources().getColorBlack()));
                        };
                        TGLayout.prototype.setMeasurePlayingStyle = function (painter) {
                            painter.setBackground(this.getResources().getBackgroundColor());
                            painter.setForeground(this.getResources().getColorBlack());
                        };
                        TGLayout.prototype.setLyricStyle = function (painter, playMode) {
                            painter.setFont(this.getResources().getLyricFont());
                            painter.setBackground(this.getLightColor(this.getResources().getBackgroundColor()));
                            painter.setForeground((playMode ? this.getResources().getPlayNoteColor() : this.getResources().getColorBlack()));
                        };
                        TGLayout.prototype.setMarkerStyle = function (painter, color) {
                            painter.setFont(this.getResources().getMarkerFont());
                            painter.setBackground(this.getLightColor(this.getResources().getBackgroundColor()));
                            painter.setForeground(this.getDarkColor(color));
                        };
                        TGLayout.prototype.setTextStyle = function (painter) {
                            painter.setFont(this.getResources().getTextFont());
                            painter.setBackground(this.getLightColor(this.getResources().getBackgroundColor()));
                            painter.setForeground(this.getResources().getColorBlack());
                        };
                        TGLayout.prototype.setTimeSignatureStyle = function (painter) {
                            painter.setFont(this.getResources().getTimeSignatureFont());
                            painter.setForeground(this.getResources().getColorBlack());
                            painter.setBackground(this.getLightColor(this.getResources().getBackgroundColor()));
                        };
                        TGLayout.prototype.setKeySignatureStyle = function (painter) {
                            painter.setBackground(this.getResources().getColorBlack());
                        };
                        TGLayout.prototype.setClefStyle = function (painter) {
                            painter.setBackground(this.getResources().getColorBlack());
                        };
                        TGLayout.prototype.setLineStyle = function (painter) {
                            painter.setLineWidth(this.getLineWidth(0));
                            painter.setForeground(this.getDarkColor(this.getResources().getLineColor()));
                        };
                        TGLayout.prototype.setScoreSilenceStyle = function (painter, playMode) {
                            painter.setForeground((playMode ? this.getResources().getPlayNoteColor() : this.getDarkColor(this.getResources().getScoreNoteColor())));
                            painter.setBackground((playMode ? this.getResources().getPlayNoteColor() : this.getDarkColor(this.getResources().getScoreNoteColor())));
                        };
                        TGLayout.prototype.setTabSilenceStyle = function (painter, playMode) {
                            painter.setForeground((playMode ? this.getResources().getPlayNoteColor() : this.getDarkColor(this.getResources().getTabNoteColor())));
                            painter.setBackground((playMode ? this.getResources().getPlayNoteColor() : this.getDarkColor(this.getResources().getTabNoteColor())));
                        };
                        TGLayout.prototype.setScoreNoteStyle = function (painter, playing) {
                            painter.setForeground((playing ? this.getResources().getPlayNoteColor() : this.getDarkColor(this.getResources().getScoreNoteColor())));
                            painter.setBackground((playing ? this.getResources().getPlayNoteColor() : this.getDarkColor(this.getResources().getScoreNoteColor())));
                        };
                        TGLayout.prototype.setScoreNoteFooterStyle = function (painter) {
                            painter.setForeground(this.getDarkColor(this.getResources().getScoreNoteColor()));
                            painter.setBackground(this.getDarkColor(this.getResources().getScoreNoteColor()));
                        };
                        TGLayout.prototype.setScoreEffectStyle = function (painter) {
                            painter.setForeground(this.getDarkColor(this.getResources().getScoreNoteColor()));
                            painter.setBackground(this.getDarkColor(this.getResources().getScoreNoteColor()));
                        };
                        TGLayout.prototype.setTabNoteStyle = function (painter, playMode) {
                            painter.setForeground((playMode ? this.getResources().getPlayNoteColor() : this.getDarkColor(this.getResources().getTabNoteColor())));
                            painter.setBackground(this.getLightColor(this.getResources().getBackgroundColor()));
                            painter.setFont(this.getResources().getNoteFont());
                        };
                        TGLayout.prototype.setTabNoteFooterStyle = function (painter) {
                            painter.setForeground(this.getDarkColor(this.getResources().getTabNoteColor()));
                            painter.setBackground(this.getDarkColor(this.getResources().getTabNoteColor()));
                        };
                        TGLayout.prototype.setTiedStyle = function (painter, playing) {
                            painter.setForeground((playing ? this.getResources().getPlayNoteColor() : this.getDarkColor(this.getResources().getScoreNoteColor())));
                            painter.setBackground((playing ? this.getResources().getPlayNoteColor() : this.getDarkColor(this.getResources().getScoreNoteColor())));
                        };
                        TGLayout.prototype.setTabEffectStyle = function (painter) {
                            painter.setForeground(this.getDarkColor(this.getResources().getTabNoteColor()));
                            painter.setBackground(this.getDarkColor(this.getResources().getTabNoteColor()));
                        };
                        TGLayout.prototype.setTabGraceStyle = function (painter) {
                            painter.setFont(this.getResources().getGraceFont());
                            painter.setForeground(this.getDarkColor(this.getResources().getTabNoteColor()));
                            painter.setBackground(this.getLightColor(this.getResources().getBackgroundColor()));
                        };
                        TGLayout.prototype.setPlayNoteColor = function (painter) {
                            painter.setForeground(this.getResources().getPlayNoteColor());
                            painter.setBackground(this.getResources().getPlayNoteColor());
                        };
                        TGLayout.prototype.setOfflineEffectStyle = function (painter) {
                            painter.setForeground(this.getDarkColor(((this.getStyle() & TGLayout.DISPLAY_SCORE) !== 0 ? this.getResources().getScoreNoteColor() : this.getResources().getTabNoteColor())));
                            painter.setBackground(this.getLightColor(this.getResources().getBackgroundColor()));
                            painter.setFont(this.getResources().getDefaultFont());
                        };
                        TGLayout.prototype.setDotStyle = function (painter) {
                            painter.setForeground(this.getDarkColor(((this.getStyle() & TGLayout.DISPLAY_SCORE) !== 0 ? this.getResources().getScoreNoteColor() : this.getResources().getTabNoteColor())));
                            painter.setBackground(this.getDarkColor(((this.getStyle() & TGLayout.DISPLAY_SCORE) !== 0 ? this.getResources().getScoreNoteColor() : this.getResources().getTabNoteColor())));
                        };
                        TGLayout.prototype.setDivisionTypeStyle = function (painter) {
                            painter.setForeground(this.getDarkColor(((this.getStyle() & TGLayout.DISPLAY_SCORE) !== 0 ? this.getResources().getScoreNoteColor() : this.getResources().getTabNoteColor())));
                            painter.setBackground(this.getLightColor(this.getResources().getBackgroundColor()));
                            painter.setFont(this.getResources().getDefaultFont());
                        };
                        TGLayout.prototype.setRepeatEndingStyle = function (painter) {
                            painter.setForeground(this.getResources().getColorBlack());
                            painter.setBackground(this.getLightColor(this.getResources().getBackgroundColor()));
                            painter.setFont(this.getResources().getDefaultFont());
                        };
                        TGLayout.prototype.setChordStyle = function (chord) {
                            chord.setFont(this.getResources().getChordFont());
                            chord.setForegroundColor(this.getResources().getColorBlack());
                            chord.setBackgroundColor(this.getLightColor(this.getResources().getBackgroundColor()));
                            chord.setColor(this.getDarkColor(this.getResources().getLineColor()));
                            chord.setNoteColor(this.getDarkColor(this.getResources().getTabNoteColor()));
                            chord.setTonicColor(this.getDarkColor(this.getResources().getTabNoteColor()));
                            chord.setStyle(this.style);
                            chord.setFretSpacing(this.getChordFretSpacing());
                            chord.setStringSpacing(this.getChordStringSpacing());
                            chord.setNoteSize(this.getChordNoteSize());
                            chord.setLineWidth(this.getChordLineWidth());
                            chord.setFirstFretSpacing(this.getChordFretIndexSpacing());
                            chord.setFirstFretFont(this.getResources().getChordFretFont());
                        };
                        TGLayout.prototype.setLoopSMarkerStyle = function (painter) {
                            painter.setBackground(this.getResources().getLoopSMarkerColor());
                        };
                        TGLayout.prototype.setLoopEMarkerStyle = function (painter) {
                            painter.setBackground(this.getResources().getLoopEMarkerColor());
                        };
                        TGLayout.prototype.getDarkColor = function (color) {
                            return ((this.getStyle() & TGLayout.DISPLAY_MODE_BLACK_WHITE) !== 0 ? this.getResources().getColorBlack() : color);
                        };
                        TGLayout.prototype.getLightColor = function (color) {
                            return ((this.getStyle() & TGLayout.DISPLAY_MODE_BLACK_WHITE) !== 0 ? this.getResources().getColorWhite() : color);
                        };
                        TGLayout.prototype.getNoteOrientation = function (painter, x, y, note) {
                            var noteAsString = null;
                            if (note.isTiedNote()) {
                                noteAsString = "L";
                                noteAsString = (note.getEffect().isGhostNote()) ? "(" + noteAsString + ")" : noteAsString;
                            }
                            else if (note.getEffect().isDeadNote()) {
                                noteAsString = "X";
                                noteAsString = (note.getEffect().isGhostNote()) ? "(" + noteAsString + ")" : noteAsString;
                            }
                            else {
                                noteAsString = ('' + (note.getValue()));
                                noteAsString = (note.getEffect().isGhostNote()) ? "(" + noteAsString + ")" : noteAsString;
                            }
                            return this.getOrientation(painter, x, y, noteAsString);
                        };
                        TGLayout.prototype.getOrientation = function (painter, x, y, s) {
                            var fmWidth = painter.getFMWidth(s);
                            var fmTopLine = painter.getFMTopLine();
                            var fmMiddleLine = painter.getFMMiddleLine();
                            var fmBaseLine = painter.getFMBaseLine();
                            return new org.herac.tuxguitar.graphics.TGRectangle((x - (fmWidth / 2.0)), (y + fmMiddleLine), fmWidth, (fmBaseLine - fmTopLine));
                        };
                        TGLayout.prototype.getSongManager = function () {
                            return this.getComponent().getSongManager();
                        };
                        TGLayout.prototype.getSong = function () {
                            return this.getComponent().getSong();
                        };
                        TGLayout.prototype.getResourceBuffer = function () {
                            return this.getComponent().getResourceBuffer();
                        };
                        TGLayout.prototype.getComponent = function () {
                            return this.controller;
                        };
                        TGLayout.prototype.getResources = function () {
                            return this.resources;
                        };
                        TGLayout.prototype.getHeight = function () {
                            return this.height;
                        };
                        TGLayout.prototype.setHeight = function (height) {
                            this.height = height;
                        };
                        TGLayout.prototype.getWidth = function () {
                            return this.width;
                        };
                        TGLayout.prototype.setWidth = function (width) {
                            this.width = width;
                        };
                        TGLayout.prototype.getStyle = function () {
                            return this.style;
                        };
                        TGLayout.prototype.setStyle = function (style) {
                            this.style = style;
                        };
                        TGLayout.prototype.getScale = function () {
                            return this.scale;
                        };
                        TGLayout.prototype.getFontScale = function () {
                            return this.fontScale;
                        };
                        TGLayout.prototype.isBufferEnabled = function () {
                            return this.bufferEnabled;
                        };
                        TGLayout.prototype.getFirstMeasureSpacing = function () {
                            return this.firstMeasureSpacing;
                        };
                        TGLayout.prototype.getFirstNoteSpacing = function () {
                            return this.firstNoteSpacing;
                        };
                        TGLayout.prototype.getMeasureLeftSpacing = function () {
                            return this.measureLeftSpacing;
                        };
                        TGLayout.prototype.getMeasureRightSpacing = function () {
                            return this.measureRightSpacing;
                        };
                        TGLayout.prototype.getClefSpacing = function () {
                            return this.clefSpacing;
                        };
                        TGLayout.prototype.getKeySignatureSpacing = function () {
                            return this.keySignatureSpacing;
                        };
                        TGLayout.prototype.getTimeSignatureSpacing = function () {
                            return this.timeSignatureSpacing;
                        };
                        TGLayout.prototype.getMinBufferSeparator = function () {
                            return this.minBufferSeparator;
                        };
                        TGLayout.prototype.getMinTopSpacing = function () {
                            return this.minTopSpacing;
                        };
                        TGLayout.prototype.getMinScoreTabSpacing = function () {
                            return this.minScoreTabSpacing;
                        };
                        TGLayout.prototype.getScoreLineSpacing = function () {
                            return this.scoreLineSpacing;
                        };
                        TGLayout.prototype.getFirstTrackSpacing = function () {
                            return this.firstTrackSpacing;
                        };
                        TGLayout.prototype.getTrackSpacing = function () {
                            return this.trackSpacing;
                        };
                        TGLayout.prototype.getStringSpacing = function () {
                            return this.stringSpacing;
                        };
                        TGLayout.prototype.getChordFretIndexSpacing = function () {
                            return this.chordFretIndexSpacing;
                        };
                        TGLayout.prototype.getChordStringSpacing = function () {
                            return this.chordStringSpacing;
                        };
                        TGLayout.prototype.getChordFretSpacing = function () {
                            return this.chordFretSpacing;
                        };
                        TGLayout.prototype.getChordNoteSize = function () {
                            return this.chordNoteSize;
                        };
                        TGLayout.prototype.getChordLineWidth = function () {
                            return this.chordLineWidth;
                        };
                        TGLayout.prototype.getRepeatEndingSpacing = function () {
                            return this.repeatEndingSpacing;
                        };
                        TGLayout.prototype.getDivisionTypeSpacing = function () {
                            return this.divisionTypeSpacing;
                        };
                        TGLayout.prototype.getTextSpacing = function () {
                            return this.textSpacing;
                        };
                        TGLayout.prototype.getMarkerSpacing = function () {
                            return this.markerSpacing;
                        };
                        TGLayout.prototype.getLoopMarkerSpacing = function () {
                            return this.loopMarkerSpacing;
                        };
                        TGLayout.prototype.getEffectSpacing = function () {
                            return this.effectSpacing;
                        };
                        TGLayout.prototype.getDefaultChordSpacing = function () {
                            var spacing = 0;
                            if ((this.style & TGLayout.DISPLAY_CHORD_DIAGRAM) !== 0) {
                                spacing += ((org.herac.tuxguitar.graphics.control.TGChordImpl.MAX_FRETS * this.getChordFretSpacing()) + this.getChordFretSpacing());
                            }
                            if ((this.style & TGLayout.DISPLAY_CHORD_NAME) !== 0) {
                                spacing += Math.round((15.0 * this.getScale()));
                            }
                            return spacing;
                        };
                        TGLayout.prototype.isFirstMeasure$org_herac_tuxguitar_song_models_TGMeasureHeader = function (mh) {
                            return (mh.getNumber() === 1);
                        };
                        TGLayout.prototype.isFirstMeasure = function (mh) {
                            if (((mh != null && mh instanceof org.herac.tuxguitar.song.models.TGMeasureHeader) || mh === null)) {
                                return this.isFirstMeasure$org_herac_tuxguitar_song_models_TGMeasureHeader(mh);
                            }
                            else if (((mh != null && mh instanceof org.herac.tuxguitar.song.models.TGMeasure) || mh === null)) {
                                return this.isFirstMeasure$org_herac_tuxguitar_song_models_TGMeasure(mh);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGLayout.prototype.isFirstMeasure$org_herac_tuxguitar_song_models_TGMeasure = function (measure) {
                            return (this.isFirstMeasure$org_herac_tuxguitar_song_models_TGMeasureHeader(measure.getHeader()));
                        };
                        TGLayout.prototype.isLastMeasure$org_herac_tuxguitar_song_models_TGMeasureHeader = function (mh) {
                            return (mh.getNumber() === this.getSong().countMeasureHeaders());
                        };
                        TGLayout.prototype.isLastMeasure = function (mh) {
                            if (((mh != null && mh instanceof org.herac.tuxguitar.song.models.TGMeasureHeader) || mh === null)) {
                                return this.isLastMeasure$org_herac_tuxguitar_song_models_TGMeasureHeader(mh);
                            }
                            else if (((mh != null && mh instanceof org.herac.tuxguitar.song.models.TGMeasure) || mh === null)) {
                                return this.isLastMeasure$org_herac_tuxguitar_song_models_TGMeasure(mh);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGLayout.prototype.isLastMeasure$org_herac_tuxguitar_song_models_TGMeasure = function (measure) {
                            return (this.isLastMeasure$org_herac_tuxguitar_song_models_TGMeasureHeader(measure.getHeader()));
                        };
                        TGLayout.prototype.hasLoopMarker$org_herac_tuxguitar_song_models_TGMeasureHeader = function (mh) {
                            return (this.getComponent().isLoopSHeader(mh) || this.getComponent().isLoopEHeader(mh));
                        };
                        TGLayout.prototype.hasLoopMarker = function (mh) {
                            if (((mh != null && mh instanceof org.herac.tuxguitar.song.models.TGMeasureHeader) || mh === null)) {
                                return this.hasLoopMarker$org_herac_tuxguitar_song_models_TGMeasureHeader(mh);
                            }
                            else if (((mh != null && mh instanceof org.herac.tuxguitar.song.models.TGMeasure) || mh === null)) {
                                return this.hasLoopMarker$org_herac_tuxguitar_song_models_TGMeasure(mh);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGLayout.prototype.hasLoopMarker$org_herac_tuxguitar_song_models_TGMeasure = function (measure) {
                            return (this.hasLoopMarker$org_herac_tuxguitar_song_models_TGMeasureHeader(measure.getHeader()));
                        };
                        TGLayout.prototype.clearTrackPositions = function () {
                            this.trackPositions.clear();
                        };
                        TGLayout.prototype.addTrackPosition = function (track, posY, height) {
                            this.trackPositions.add(new TGLayout.TrackPosition(this, track, posY, height));
                        };
                        TGLayout.prototype.getTrackNumberAt = function (y) {
                            var trackPos = this.getTrackPositionAt(y);
                            return ((trackPos != null) ? trackPos.getTrack() : -1);
                        };
                        TGLayout.prototype.getTrackPositionAt = function (y) {
                            var trackPos = null;
                            var minorDistance = 0;
                            var it = this.trackPositions.iterator();
                            while ((it.hasNext())) {
                                var pos = it.next();
                                var distanceY = Math.min(Math.abs(y - (pos.getPosY())), Math.abs(y - (pos.getPosY() + pos.getHeight() - 10)));
                                if (trackPos == null || distanceY < minorDistance) {
                                    trackPos = pos;
                                    minorDistance = distanceY;
                                }
                            }
                            ;
                            return trackPos;
                        };
                        TGLayout.prototype.disposeLayout = function () {
                            this.getResources().dispose();
                        };
                        return TGLayout;
                    }());
                    TGLayout.MODE_VERTICAL = 1;
                    TGLayout.MODE_HORIZONTAL = 2;
                    TGLayout.DISPLAY_COMPACT = 1;
                    TGLayout.DISPLAY_MULTITRACK = 2;
                    TGLayout.DISPLAY_SCORE = 4;
                    TGLayout.DISPLAY_TABLATURE = 8;
                    TGLayout.DISPLAY_CHORD_NAME = 16;
                    TGLayout.DISPLAY_CHORD_DIAGRAM = 32;
                    TGLayout.DISPLAY_MODE_BLACK_WHITE = 64;
                    control.TGLayout = TGLayout;
                    TGLayout["__class"] = "org.herac.tuxguitar.graphics.control.TGLayout";
                    (function (TGLayout) {
                        var TrackPosition = (function () {
                            function TrackPosition(__parent, track, posY, height) {
                                this.__parent = __parent;
                                this.track = 0;
                                this.posY = 0;
                                this.height = 0;
                                this.track = track;
                                this.posY = posY;
                                this.height = height;
                            }
                            TrackPosition.prototype.getPosY = function () {
                                return this.posY;
                            };
                            TrackPosition.prototype.getHeight = function () {
                                return this.height;
                            };
                            TrackPosition.prototype.getTrack = function () {
                                return this.track;
                            };
                            return TrackPosition;
                        }());
                        TGLayout.TrackPosition = TrackPosition;
                        TrackPosition["__class"] = "org.herac.tuxguitar.graphics.control.TGLayout.TrackPosition";
                    })(TGLayout = control.TGLayout || (control.TGLayout = {}));
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGLayoutStyles = (function () {
                        function TGLayoutStyles() {
                            this.bufferEnabled = false;
                            this.minBufferSeparator = 0;
                            this.minTopSpacing = 0;
                            this.minScoreTabSpacing = 0;
                            this.stringSpacing = 0;
                            this.scoreLineSpacing = 0;
                            this.trackSpacing = 0;
                            this.firstTrackSpacing = 0;
                            this.firstMeasureSpacing = 0;
                            this.firstNoteSpacing = 0;
                            this.measureLeftSpacing = 0;
                            this.measureRightSpacing = 0;
                            this.clefSpacing = 0;
                            this.keySignatureSpacing = 0;
                            this.timeSignatureSpacing = 0;
                            this.chordFretIndexSpacing = 0;
                            this.chordStringSpacing = 0;
                            this.chordFretSpacing = 0;
                            this.chordNoteSize = 0;
                            this.chordLineWidth = 0;
                            this.repeatEndingSpacing = 0;
                            this.effectSpacing = 0;
                            this.divisionTypeSpacing = 0;
                            this.textSpacing = 0;
                            this.markerSpacing = 0;
                            this.loopMarkerSpacing = 0;
                            this.lineWidths = null;
                            this.durationWidths = null;
                            this.defaultFont = null;
                            this.noteFont = null;
                            this.timeSignatureFont = null;
                            this.lyricFont = null;
                            this.textFont = null;
                            this.markerFont = null;
                            this.graceFont = null;
                            this.chordFont = null;
                            this.chordFretFont = null;
                            this.backgroundColor = null;
                            this.lineColor = null;
                            this.scoreNoteColor = null;
                            this.tabNoteColor = null;
                            this.playNoteColor = null;
                            this.loopSMarkerColor = null;
                            this.loopEMarkerColor = null;
                        }
                        TGLayoutStyles.prototype.isBufferEnabled = function () {
                            return this.bufferEnabled;
                        };
                        TGLayoutStyles.prototype.setBufferEnabled = function (bufferEnabled) {
                            this.bufferEnabled = bufferEnabled;
                        };
                        TGLayoutStyles.prototype.getMinBufferSeparator = function () {
                            return this.minBufferSeparator;
                        };
                        TGLayoutStyles.prototype.setMinBufferSeparator = function (minBufferSeparator) {
                            this.minBufferSeparator = minBufferSeparator;
                        };
                        TGLayoutStyles.prototype.getMinTopSpacing = function () {
                            return this.minTopSpacing;
                        };
                        TGLayoutStyles.prototype.setMinTopSpacing = function (minTopSpacing) {
                            this.minTopSpacing = minTopSpacing;
                        };
                        TGLayoutStyles.prototype.getMinScoreTabSpacing = function () {
                            return this.minScoreTabSpacing;
                        };
                        TGLayoutStyles.prototype.setMinScoreTabSpacing = function (minScoreTabSpacing) {
                            this.minScoreTabSpacing = minScoreTabSpacing;
                        };
                        TGLayoutStyles.prototype.getStringSpacing = function () {
                            return this.stringSpacing;
                        };
                        TGLayoutStyles.prototype.setStringSpacing = function (stringSpacing) {
                            this.stringSpacing = stringSpacing;
                        };
                        TGLayoutStyles.prototype.getScoreLineSpacing = function () {
                            return this.scoreLineSpacing;
                        };
                        TGLayoutStyles.prototype.setScoreLineSpacing = function (scoreLineSpacing) {
                            this.scoreLineSpacing = scoreLineSpacing;
                        };
                        TGLayoutStyles.prototype.getTrackSpacing = function () {
                            return this.trackSpacing;
                        };
                        TGLayoutStyles.prototype.setTrackSpacing = function (trackSpacing) {
                            this.trackSpacing = trackSpacing;
                        };
                        TGLayoutStyles.prototype.getFirstTrackSpacing = function () {
                            return this.firstTrackSpacing;
                        };
                        TGLayoutStyles.prototype.setFirstTrackSpacing = function (firstTrackSpacing) {
                            this.firstTrackSpacing = firstTrackSpacing;
                        };
                        TGLayoutStyles.prototype.getFirstMeasureSpacing = function () {
                            return this.firstMeasureSpacing;
                        };
                        TGLayoutStyles.prototype.setFirstMeasureSpacing = function (firstMeasureSpacing) {
                            this.firstMeasureSpacing = firstMeasureSpacing;
                        };
                        TGLayoutStyles.prototype.getChordFretIndexSpacing = function () {
                            return this.chordFretIndexSpacing;
                        };
                        TGLayoutStyles.prototype.getFirstNoteSpacing = function () {
                            return this.firstNoteSpacing;
                        };
                        TGLayoutStyles.prototype.setFirstNoteSpacing = function (firstNoteSpacing) {
                            this.firstNoteSpacing = firstNoteSpacing;
                        };
                        TGLayoutStyles.prototype.getMeasureLeftSpacing = function () {
                            return this.measureLeftSpacing;
                        };
                        TGLayoutStyles.prototype.setMeasureLeftSpacing = function (measureLeftSpacing) {
                            this.measureLeftSpacing = measureLeftSpacing;
                        };
                        TGLayoutStyles.prototype.getMeasureRightSpacing = function () {
                            return this.measureRightSpacing;
                        };
                        TGLayoutStyles.prototype.setMeasureRightSpacing = function (measureRightSpacing) {
                            this.measureRightSpacing = measureRightSpacing;
                        };
                        TGLayoutStyles.prototype.getClefSpacing = function () {
                            return this.clefSpacing;
                        };
                        TGLayoutStyles.prototype.setClefSpacing = function (clefSpacing) {
                            this.clefSpacing = clefSpacing;
                        };
                        TGLayoutStyles.prototype.getKeySignatureSpacing = function () {
                            return this.keySignatureSpacing;
                        };
                        TGLayoutStyles.prototype.setKeySignatureSpacing = function (keySignatureSpacing) {
                            this.keySignatureSpacing = keySignatureSpacing;
                        };
                        TGLayoutStyles.prototype.getTimeSignatureSpacing = function () {
                            return this.timeSignatureSpacing;
                        };
                        TGLayoutStyles.prototype.setTimeSignatureSpacing = function (timeSignatureSpacing) {
                            this.timeSignatureSpacing = timeSignatureSpacing;
                        };
                        TGLayoutStyles.prototype.setChordFretIndexSpacing = function (chordFretIndexSpacing) {
                            this.chordFretIndexSpacing = chordFretIndexSpacing;
                        };
                        TGLayoutStyles.prototype.getChordStringSpacing = function () {
                            return this.chordStringSpacing;
                        };
                        TGLayoutStyles.prototype.setChordStringSpacing = function (chordStringSpacing) {
                            this.chordStringSpacing = chordStringSpacing;
                        };
                        TGLayoutStyles.prototype.getChordFretSpacing = function () {
                            return this.chordFretSpacing;
                        };
                        TGLayoutStyles.prototype.setChordFretSpacing = function (chordFretSpacing) {
                            this.chordFretSpacing = chordFretSpacing;
                        };
                        TGLayoutStyles.prototype.getChordNoteSize = function () {
                            return this.chordNoteSize;
                        };
                        TGLayoutStyles.prototype.setChordNoteSize = function (chordNoteSize) {
                            this.chordNoteSize = chordNoteSize;
                        };
                        TGLayoutStyles.prototype.getChordLineWidth = function () {
                            return this.chordLineWidth;
                        };
                        TGLayoutStyles.prototype.setChordLineWidth = function (chordLineWidth) {
                            this.chordLineWidth = chordLineWidth;
                        };
                        TGLayoutStyles.prototype.getRepeatEndingSpacing = function () {
                            return this.repeatEndingSpacing;
                        };
                        TGLayoutStyles.prototype.setRepeatEndingSpacing = function (repeatEndingSpacing) {
                            this.repeatEndingSpacing = repeatEndingSpacing;
                        };
                        TGLayoutStyles.prototype.getEffectSpacing = function () {
                            return this.effectSpacing;
                        };
                        TGLayoutStyles.prototype.setEffectSpacing = function (effectSpacing) {
                            this.effectSpacing = effectSpacing;
                        };
                        TGLayoutStyles.prototype.getDivisionTypeSpacing = function () {
                            return this.divisionTypeSpacing;
                        };
                        TGLayoutStyles.prototype.setDivisionTypeSpacing = function (divisionTypeSpacing) {
                            this.divisionTypeSpacing = divisionTypeSpacing;
                        };
                        TGLayoutStyles.prototype.getTextSpacing = function () {
                            return this.textSpacing;
                        };
                        TGLayoutStyles.prototype.setTextSpacing = function (textSpacing) {
                            this.textSpacing = textSpacing;
                        };
                        TGLayoutStyles.prototype.getMarkerSpacing = function () {
                            return this.markerSpacing;
                        };
                        TGLayoutStyles.prototype.setMarkerSpacing = function (markerSpacing) {
                            this.markerSpacing = markerSpacing;
                        };
                        TGLayoutStyles.prototype.getLoopMarkerSpacing = function () {
                            return this.loopMarkerSpacing;
                        };
                        TGLayoutStyles.prototype.setLoopMarkerSpacing = function (loopMarkerSpacing) {
                            this.loopMarkerSpacing = loopMarkerSpacing;
                        };
                        TGLayoutStyles.prototype.getLineWidths = function () {
                            return this.lineWidths;
                        };
                        TGLayoutStyles.prototype.setLineWidths = function (lineWidths) {
                            this.lineWidths = lineWidths;
                        };
                        TGLayoutStyles.prototype.getDurationWidths = function () {
                            return this.durationWidths;
                        };
                        TGLayoutStyles.prototype.setDurationWidths = function (durationWidths) {
                            this.durationWidths = durationWidths;
                        };
                        TGLayoutStyles.prototype.getDefaultFont = function () {
                            return this.defaultFont;
                        };
                        TGLayoutStyles.prototype.setDefaultFont = function (defaultFont) {
                            this.defaultFont = defaultFont;
                        };
                        TGLayoutStyles.prototype.getNoteFont = function () {
                            return this.noteFont;
                        };
                        TGLayoutStyles.prototype.setNoteFont = function (noteFont) {
                            this.noteFont = noteFont;
                        };
                        TGLayoutStyles.prototype.getTimeSignatureFont = function () {
                            return this.timeSignatureFont;
                        };
                        TGLayoutStyles.prototype.setTimeSignatureFont = function (timeSignatureFont) {
                            this.timeSignatureFont = timeSignatureFont;
                        };
                        TGLayoutStyles.prototype.getLyricFont = function () {
                            return this.lyricFont;
                        };
                        TGLayoutStyles.prototype.setLyricFont = function (lyricFont) {
                            this.lyricFont = lyricFont;
                        };
                        TGLayoutStyles.prototype.getTextFont = function () {
                            return this.textFont;
                        };
                        TGLayoutStyles.prototype.setTextFont = function (textFont) {
                            this.textFont = textFont;
                        };
                        TGLayoutStyles.prototype.getMarkerFont = function () {
                            return this.markerFont;
                        };
                        TGLayoutStyles.prototype.setMarkerFont = function (markerFont) {
                            this.markerFont = markerFont;
                        };
                        TGLayoutStyles.prototype.getGraceFont = function () {
                            return this.graceFont;
                        };
                        TGLayoutStyles.prototype.setGraceFont = function (graceFont) {
                            this.graceFont = graceFont;
                        };
                        TGLayoutStyles.prototype.getChordFont = function () {
                            return this.chordFont;
                        };
                        TGLayoutStyles.prototype.setChordFont = function (chordFont) {
                            this.chordFont = chordFont;
                        };
                        TGLayoutStyles.prototype.getChordFretFont = function () {
                            return this.chordFretFont;
                        };
                        TGLayoutStyles.prototype.setChordFretFont = function (chordFretFont) {
                            this.chordFretFont = chordFretFont;
                        };
                        TGLayoutStyles.prototype.getBackgroundColor = function () {
                            return this.backgroundColor;
                        };
                        TGLayoutStyles.prototype.setBackgroundColor = function (backgroundColor) {
                            this.backgroundColor = backgroundColor;
                        };
                        TGLayoutStyles.prototype.getLineColor = function () {
                            return this.lineColor;
                        };
                        TGLayoutStyles.prototype.setLineColor = function (lineColor) {
                            this.lineColor = lineColor;
                        };
                        TGLayoutStyles.prototype.getScoreNoteColor = function () {
                            return this.scoreNoteColor;
                        };
                        TGLayoutStyles.prototype.setScoreNoteColor = function (scoreNoteColor) {
                            this.scoreNoteColor = scoreNoteColor;
                        };
                        TGLayoutStyles.prototype.getTabNoteColor = function () {
                            return this.tabNoteColor;
                        };
                        TGLayoutStyles.prototype.setTabNoteColor = function (tabNoteColor) {
                            this.tabNoteColor = tabNoteColor;
                        };
                        TGLayoutStyles.prototype.getPlayNoteColor = function () {
                            return this.playNoteColor;
                        };
                        TGLayoutStyles.prototype.setPlayNoteColor = function (playNoteColor) {
                            this.playNoteColor = playNoteColor;
                        };
                        TGLayoutStyles.prototype.getLoopSMarkerColor = function () {
                            return this.loopSMarkerColor;
                        };
                        TGLayoutStyles.prototype.setLoopSMarkerColor = function (loopSMarkerColor) {
                            this.loopSMarkerColor = loopSMarkerColor;
                        };
                        TGLayoutStyles.prototype.getLoopEMarkerColor = function () {
                            return this.loopEMarkerColor;
                        };
                        TGLayoutStyles.prototype.setLoopEMarkerColor = function (loopEMarkerColor) {
                            this.loopEMarkerColor = loopEMarkerColor;
                        };
                        return TGLayoutStyles;
                    }());
                    control.TGLayoutStyles = TGLayoutStyles;
                    TGLayoutStyles["__class"] = "org.herac.tuxguitar.graphics.control.TGLayoutStyles";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGMeasureBuffer = (function () {
                        function TGMeasureBuffer() {
                            this.width = 0;
                            this.height = 0;
                        }
                        TGMeasureBuffer.prototype.getRegistryKey = function () {
                            return this;
                        };
                        TGMeasureBuffer.prototype.register = function (resourceBuffer) {
                            resourceBuffer.register(this.getRegistryKey());
                        };
                        TGMeasureBuffer.prototype.createBuffer = function (resourceBuffer, resourceFactory, width, height, background) {
                            var buffer = resourceFactory.createImage(width, height);
                            this.width = buffer.getWidth();
                            this.height = buffer.getHeight();
                            var bufferedPainter = buffer.createPainter();
                            bufferedPainter.setBackground(background);
                            bufferedPainter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                            bufferedPainter.addRectangle(0, 0, this.width, this.height);
                            bufferedPainter.closePath();
                            resourceBuffer.setResource(this.getRegistryKey(), buffer);
                            return bufferedPainter;
                        };
                        TGMeasureBuffer.prototype.paintBuffer = function (resourceBuffer, painter, x, y) {
                            var buffer = resourceBuffer.getResource(this.getRegistryKey());
                            painter['drawImage$org_herac_tuxguitar_graphics_TGImage$float$float'](buffer, x, y);
                        };
                        TGMeasureBuffer.prototype.isDisposed = function (resourceBuffer) {
                            return resourceBuffer.isResourceDisposed(this.getRegistryKey());
                        };
                        return TGMeasureBuffer;
                    }());
                    control.TGMeasureBuffer = TGMeasureBuffer;
                    TGMeasureBuffer["__class"] = "org.herac.tuxguitar.graphics.control.TGMeasureBuffer";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGResourceBuffer = (function () {
                        function TGResourceBuffer() {
                            this.registry = null;
                            this.buffer = null;
                            this.buffer = (new java.util.HashMap());
                            this.registry = (new java.util.ArrayList());
                        }
                        TGResourceBuffer.prototype.getResource = function (key) {
                            if (this.buffer.containsKey(key)) {
                                return this.buffer.get(key);
                            }
                            return null;
                        };
                        TGResourceBuffer.prototype.setResource = function (key, resource) {
                            if (this.buffer.containsKey(key)) {
                                this.disposeResource(key);
                            }
                            this.buffer.put(key, resource);
                        };
                        TGResourceBuffer.prototype.disposeResource = function (key) {
                            var resource = this.getResource(key);
                            if (resource != null && !resource.isDisposed()) {
                                resource.dispose();
                            }
                            this.buffer.remove(key);
                        };
                        TGResourceBuffer.prototype.disposeAllResources = function () {
                            var keys = (new java.util.ArrayList(this.buffer.keySet()));
                            for (var index125 = keys.iterator(); index125.hasNext();) {
                                var key = index125.next();
                                {
                                    this.disposeResource(key);
                                }
                            }
                        };
                        TGResourceBuffer.prototype.disposeUnregisteredResources = function () {
                            var keys = (new java.util.ArrayList(this.buffer.keySet()));
                            for (var index126 = keys.iterator(); index126.hasNext();) {
                                var key = index126.next();
                                {
                                    if (!this.isRegistered(key)) {
                                        this.disposeResource(key);
                                    }
                                }
                            }
                        };
                        TGResourceBuffer.prototype.clearRegistry = function () {
                            this.registry.clear();
                        };
                        TGResourceBuffer.prototype.register = function (key) {
                            if (!this.isRegistered(key)) {
                                this.registry.add(key);
                            }
                        };
                        TGResourceBuffer.prototype.unregister = function (key) {
                            if (this.isRegistered(key)) {
                                this.registry.remove(key);
                            }
                        };
                        TGResourceBuffer.prototype.isRegistered = function (key) {
                            return this.registry.contains(key);
                        };
                        TGResourceBuffer.prototype.isResourceDisposed = function (key) {
                            var resource = this.getResource(key);
                            return (resource == null || resource.isDisposed());
                        };
                        return TGResourceBuffer;
                    }());
                    control.TGResourceBuffer = TGResourceBuffer;
                    TGResourceBuffer["__class"] = "org.herac.tuxguitar.graphics.control.TGResourceBuffer";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGResources = (function () {
                        function TGResources(layout) {
                            this.resources = null;
                            this.layout = null;
                            this.defaultFont = null;
                            this.noteFont = null;
                            this.timeSignatureFont = null;
                            this.lyricFont = null;
                            this.textFont = null;
                            this.markerFont = null;
                            this.graceFont = null;
                            this.chordFont = null;
                            this.chordFretFont = null;
                            this.backgroundColor = null;
                            this.lineColor = null;
                            this.scoreNoteColor = null;
                            this.tabNoteColor = null;
                            this.playNoteColor = null;
                            this.colorWhite = null;
                            this.colorBlack = null;
                            this.colorRed = null;
                            this.loopSMarkerColor = null;
                            this.loopEMarkerColor = null;
                            this.layout = layout;
                            this.resources = (new java.util.ArrayList());
                        }
                        TGResources.prototype.load = function (styles) {
                            this.dispose();
                            this.initFonts(styles);
                            this.initColors(styles);
                        };
                        TGResources.prototype.getLayout = function () {
                            return this.layout;
                        };
                        TGResources.prototype.getDefaultFont = function () {
                            return this.defaultFont;
                        };
                        TGResources.prototype.getNoteFont = function () {
                            return this.noteFont;
                        };
                        TGResources.prototype.getTimeSignatureFont = function () {
                            return this.timeSignatureFont;
                        };
                        TGResources.prototype.getLyricFont = function () {
                            return this.lyricFont;
                        };
                        TGResources.prototype.getTextFont = function () {
                            return this.textFont;
                        };
                        TGResources.prototype.getMarkerFont = function () {
                            return this.markerFont;
                        };
                        TGResources.prototype.getChordFont = function () {
                            return this.chordFont;
                        };
                        TGResources.prototype.getChordFretFont = function () {
                            return this.chordFretFont;
                        };
                        TGResources.prototype.getGraceFont = function () {
                            return this.graceFont;
                        };
                        TGResources.prototype.getBackgroundColor = function () {
                            return this.backgroundColor;
                        };
                        TGResources.prototype.getLineColor = function () {
                            return this.lineColor;
                        };
                        TGResources.prototype.getPlayNoteColor = function () {
                            return this.playNoteColor;
                        };
                        TGResources.prototype.getScoreNoteColor = function () {
                            return this.scoreNoteColor;
                        };
                        TGResources.prototype.getTabNoteColor = function () {
                            return this.tabNoteColor;
                        };
                        TGResources.prototype.getColorWhite = function () {
                            return this.colorWhite;
                        };
                        TGResources.prototype.getColorBlack = function () {
                            return this.colorBlack;
                        };
                        TGResources.prototype.getColorRed = function () {
                            return this.colorRed;
                        };
                        TGResources.prototype.getLoopSMarkerColor = function () {
                            return this.loopSMarkerColor;
                        };
                        TGResources.prototype.getLoopEMarkerColor = function () {
                            return this.loopEMarkerColor;
                        };
                        TGResources.prototype.initFonts = function (style) {
                            var scale = this.layout.getFontScale();
                            this.defaultFont = this.getFont(style.getDefaultFont(), scale);
                            this.noteFont = this.getFont(style.getNoteFont(), scale);
                            this.timeSignatureFont = this.getFont(style.getTimeSignatureFont(), scale);
                            this.lyricFont = this.getFont(style.getLyricFont(), scale);
                            this.textFont = this.getFont(style.getTextFont(), scale);
                            this.markerFont = this.getFont(style.getMarkerFont(), scale);
                            this.graceFont = this.getFont(style.getGraceFont(), scale);
                            this.chordFont = this.getFont(style.getChordFont(), scale);
                            this.chordFretFont = this.getFont(style.getChordFretFont(), scale);
                        };
                        TGResources.prototype.initColors = function (style) {
                            this.backgroundColor = this.getColor(style.getBackgroundColor());
                            this.lineColor = this.getColor(style.getLineColor());
                            this.scoreNoteColor = this.getColor(style.getScoreNoteColor());
                            this.tabNoteColor = this.getColor(style.getTabNoteColor());
                            this.playNoteColor = this.getColor(style.getPlayNoteColor());
                            this.loopSMarkerColor = this.getColor(style.getLoopSMarkerColor());
                            this.loopEMarkerColor = this.getColor(style.getLoopEMarkerColor());
                            this.colorWhite = this.getColor(new org.herac.tuxguitar.graphics.TGColorModel(255, 255, 255));
                            this.colorBlack = this.getColor(new org.herac.tuxguitar.graphics.TGColorModel(0, 0, 0));
                            this.colorRed = this.getColor(new org.herac.tuxguitar.graphics.TGColorModel(255, 0, 0));
                        };
                        TGResources.prototype.getFont = function (model, scale) {
                            var factory = this.getLayout().getComponent().getResourceFactory();
                            var fm = new org.herac.tuxguitar.graphics.TGFontModel();
                            if (model != null) {
                                var height = (model.getHeight() * scale);
                                fm.setHeight((height > 1 ? Math.round(height) : 1));
                                fm.setName(model.getName());
                                fm.setBold(model.isBold());
                                fm.setItalic(model.isItalic());
                            }
                            return this.addResource(factory['createFont$org_herac_tuxguitar_graphics_TGFontModel'](fm));
                        };
                        TGResources.prototype.getColor = function (model) {
                            var factory = this.getLayout().getComponent().getResourceFactory();
                            var cm = (model != null ? model : new org.herac.tuxguitar.graphics.TGColorModel());
                            return this.addResource(factory['createColor$org_herac_tuxguitar_graphics_TGColorModel'](cm));
                        };
                        TGResources.prototype.addResource = function (resource) {
                            this.resources.add(resource);
                            return resource;
                        };
                        TGResources.prototype.dispose = function () {
                            var it = this.resources.iterator();
                            while ((it.hasNext())) {
                                var resource_1 = it.next();
                                resource_1.dispose();
                            }
                            ;
                            this.resources.clear();
                        };
                        return TGResources;
                    }());
                    control.TGResources = TGResources;
                    TGResources["__class"] = "org.herac.tuxguitar.graphics.control.TGResources";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGSpacing = (function () {
                        function TGSpacing(layout, positions, len) {
                            this.flags = 0;
                            this.spacing = null;
                            this.positions = null;
                            this.flags = 0;
                            this.flags |= ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 ? TGSpacing.SCORE : 0);
                            this.flags |= ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0 ? TGSpacing.TABLATURE : 0);
                            this.positions = positions;
                            this.spacing = (function (s) { var a = []; while (s-- > 0)
                                a.push(0); return a; })(len);
                        }
                        TGSpacing.prototype.clear = function () {
                            for (var i = 0; i < this.spacing.length; i++) {
                                this.spacing[i] = 0;
                            }
                        };
                        TGSpacing.prototype.setSize = function (index, size) {
                            if (size > this.spacing[this.positions[this.flags - 1][index]]) {
                                this.spacing[this.positions[this.flags - 1][index]] = size;
                            }
                        };
                        TGSpacing.prototype.getSize$int = function (index) {
                            return this.spacing[this.positions[this.flags - 1][index]];
                        };
                        TGSpacing.prototype.getSize = function (index) {
                            if (((typeof index === 'number') || index === null)) {
                                return this.getSize$int(index);
                            }
                            else if (index === undefined) {
                                return this.getSize$();
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSpacing.prototype.getSize$ = function () {
                            var spacing = 0;
                            for (var i = 0; i < this.spacing.length; i++) {
                                spacing += this.spacing[i];
                            }
                            return spacing;
                        };
                        TGSpacing.prototype.getPosition = function (index) {
                            var spacing = 0;
                            for (var i = 0; i < this.positions[this.flags - 1][index]; i++) {
                                spacing += this.spacing[i];
                            }
                            return spacing;
                        };
                        return TGSpacing;
                    }());
                    TGSpacing.SCORE = 1;
                    TGSpacing.TABLATURE = 2;
                    control.TGSpacing = TGSpacing;
                    TGSpacing["__class"] = "org.herac.tuxguitar.graphics.control.TGSpacing";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var TGColorModel = (function () {
                    function TGColorModel(red, green, blue) {
                        var _this = this;
                        if (((typeof red === 'number') || red === null) && ((typeof green === 'number') || green === null) && ((typeof blue === 'number') || blue === null)) {
                            var __args = Array.prototype.slice.call(arguments);
                            this.red = 0;
                            this.green = 0;
                            this.blue = 0;
                            this.red = 0;
                            this.green = 0;
                            this.blue = 0;
                            (function () {
                                _this.red = red;
                                _this.green = green;
                                _this.blue = blue;
                            })();
                        }
                        else if (red === undefined && green === undefined && blue === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            {
                                var __args_4 = Array.prototype.slice.call(arguments);
                                var red_1 = 0;
                                var green_1 = 0;
                                var blue_1 = 0;
                                this.red = 0;
                                this.green = 0;
                                this.blue = 0;
                                this.red = 0;
                                this.green = 0;
                                this.blue = 0;
                                (function () {
                                    _this.red = red_1;
                                    _this.green = green_1;
                                    _this.blue = blue_1;
                                })();
                            }
                        }
                        else
                            throw new Error('invalid overload');
                    }
                    TGColorModel.prototype.getRed = function () {
                        return this.red;
                    };
                    TGColorModel.prototype.setRed = function (red) {
                        this.red = red;
                    };
                    TGColorModel.prototype.getGreen = function () {
                        return this.green;
                    };
                    TGColorModel.prototype.setGreen = function (green) {
                        this.green = green;
                    };
                    TGColorModel.prototype.getBlue = function () {
                        return this.blue;
                    };
                    TGColorModel.prototype.setBlue = function (blue) {
                        this.blue = blue;
                    };
                    return TGColorModel;
                }());
                graphics.TGColorModel = TGColorModel;
                TGColorModel["__class"] = "org.herac.tuxguitar.graphics.TGColorModel";
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var TGDimension = (function () {
                    function TGDimension(width, height) {
                        var _this = this;
                        if (((typeof width === 'number') || width === null) && ((typeof height === 'number') || height === null)) {
                            var __args = Array.prototype.slice.call(arguments);
                            this.width = 0;
                            this.height = 0;
                            this.width = 0;
                            this.height = 0;
                            (function () {
                                _this.width = width;
                                _this.height = height;
                            })();
                        }
                        else if (width === undefined && height === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            {
                                var __args_5 = Array.prototype.slice.call(arguments);
                                var width_1 = 0;
                                var height_1 = 0;
                                this.width = 0;
                                this.height = 0;
                                this.width = 0;
                                this.height = 0;
                                (function () {
                                    _this.width = width_1;
                                    _this.height = height_1;
                                })();
                            }
                        }
                        else
                            throw new Error('invalid overload');
                    }
                    TGDimension.prototype.getWidth = function () {
                        return this.width;
                    };
                    TGDimension.prototype.setWidth = function (width) {
                        this.width = width;
                    };
                    TGDimension.prototype.getHeight = function () {
                        return this.height;
                    };
                    TGDimension.prototype.setHeight = function (height) {
                        this.height = height;
                    };
                    return TGDimension;
                }());
                graphics.TGDimension = TGDimension;
                TGDimension["__class"] = "org.herac.tuxguitar.graphics.TGDimension";
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var TGFontModel = (function () {
                    function TGFontModel(name, height, bold, italic) {
                        var _this = this;
                        if (((typeof name === 'string') || name === null) && ((typeof height === 'number') || height === null) && ((typeof bold === 'boolean') || bold === null) && ((typeof italic === 'boolean') || italic === null)) {
                            var __args = Array.prototype.slice.call(arguments);
                            this.name = null;
                            this.height = 0;
                            this.bold = false;
                            this.italic = false;
                            this.name = null;
                            this.height = 0;
                            this.bold = false;
                            this.italic = false;
                            (function () {
                                _this.name = name;
                                _this.height = height;
                                _this.bold = bold;
                                _this.italic = italic;
                            })();
                        }
                        else if (name === undefined && height === undefined && bold === undefined && italic === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            {
                                var __args_6 = Array.prototype.slice.call(arguments);
                                var name_1 = null;
                                var height_2 = 0;
                                var bold_1 = false;
                                var italic_1 = false;
                                this.name = null;
                                this.height = 0;
                                this.bold = false;
                                this.italic = false;
                                this.name = null;
                                this.height = 0;
                                this.bold = false;
                                this.italic = false;
                                (function () {
                                    _this.name = name_1;
                                    _this.height = height_2;
                                    _this.bold = bold_1;
                                    _this.italic = italic_1;
                                })();
                            }
                        }
                        else
                            throw new Error('invalid overload');
                    }
                    TGFontModel.prototype.getName = function () {
                        return this.name;
                    };
                    TGFontModel.prototype.setName = function (name) {
                        this.name = name;
                    };
                    TGFontModel.prototype.getHeight = function () {
                        return this.height;
                    };
                    TGFontModel.prototype.setHeight = function (height) {
                        this.height = height;
                    };
                    TGFontModel.prototype.isBold = function () {
                        return this.bold;
                    };
                    TGFontModel.prototype.setBold = function (bold) {
                        this.bold = bold;
                    };
                    TGFontModel.prototype.isItalic = function () {
                        return this.italic;
                    };
                    TGFontModel.prototype.setItalic = function (italic) {
                        this.italic = italic;
                    };
                    return TGFontModel;
                }());
                TGFontModel.DEFAULT_NAME = "Default";
                graphics.TGFontModel = TGFontModel;
                TGFontModel["__class"] = "org.herac.tuxguitar.graphics.TGFontModel";
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var TGMargins = (function () {
                    function TGMargins(top, left, right, bottom) {
                        var _this = this;
                        if (((typeof top === 'number') || top === null) && ((typeof left === 'number') || left === null) && ((typeof right === 'number') || right === null) && ((typeof bottom === 'number') || bottom === null)) {
                            var __args = Array.prototype.slice.call(arguments);
                            this.top = 0;
                            this.left = 0;
                            this.right = 0;
                            this.bottom = 0;
                            this.top = 0;
                            this.left = 0;
                            this.right = 0;
                            this.bottom = 0;
                            (function () {
                                _this.top = top;
                                _this.left = left;
                                _this.right = right;
                                _this.bottom = bottom;
                            })();
                        }
                        else if (top === undefined && left === undefined && right === undefined && bottom === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            {
                                var __args_7 = Array.prototype.slice.call(arguments);
                                var top_1 = 0;
                                var left_1 = 0;
                                var right_1 = 0;
                                var bottom_1 = 0;
                                this.top = 0;
                                this.left = 0;
                                this.right = 0;
                                this.bottom = 0;
                                this.top = 0;
                                this.left = 0;
                                this.right = 0;
                                this.bottom = 0;
                                (function () {
                                    _this.top = top_1;
                                    _this.left = left_1;
                                    _this.right = right_1;
                                    _this.bottom = bottom_1;
                                })();
                            }
                        }
                        else
                            throw new Error('invalid overload');
                    }
                    TGMargins.prototype.getTop = function () {
                        return this.top;
                    };
                    TGMargins.prototype.setTop = function (top) {
                        this.top = top;
                    };
                    TGMargins.prototype.getLeft = function () {
                        return this.left;
                    };
                    TGMargins.prototype.setLeft = function (left) {
                        this.left = left;
                    };
                    TGMargins.prototype.getRight = function () {
                        return this.right;
                    };
                    TGMargins.prototype.setRight = function (right) {
                        this.right = right;
                    };
                    TGMargins.prototype.getBottom = function () {
                        return this.bottom;
                    };
                    TGMargins.prototype.setBottom = function (bottom) {
                        this.bottom = bottom;
                    };
                    return TGMargins;
                }());
                graphics.TGMargins = TGMargins;
                TGMargins["__class"] = "org.herac.tuxguitar.graphics.TGMargins";
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var TGPainter;
                (function (TGPainter) {
                    TGPainter.PATH_DRAW = 1;
                    TGPainter.PATH_FILL = 2;
                    TGPainter.THINNEST_LINE_WIDTH = 0;
                })(TGPainter = graphics.TGPainter || (graphics.TGPainter = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var TGPoint = (function () {
                    function TGPoint(x, y) {
                        var _this = this;
                        if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null)) {
                            var __args = Array.prototype.slice.call(arguments);
                            this.x = 0;
                            this.y = 0;
                            this.x = 0;
                            this.y = 0;
                            (function () {
                                _this.x = x;
                                _this.y = y;
                            })();
                        }
                        else if (x === undefined && y === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            {
                                var __args_8 = Array.prototype.slice.call(arguments);
                                var x_1 = 0;
                                var y_1 = 0;
                                this.x = 0;
                                this.y = 0;
                                this.x = 0;
                                this.y = 0;
                                (function () {
                                    _this.x = x_1;
                                    _this.y = y_1;
                                })();
                            }
                        }
                        else
                            throw new Error('invalid overload');
                    }
                    TGPoint.prototype.getX = function () {
                        return this.x;
                    };
                    TGPoint.prototype.setX = function (x) {
                        this.x = x;
                    };
                    TGPoint.prototype.getY = function () {
                        return this.y;
                    };
                    TGPoint.prototype.setY = function (y) {
                        this.y = y;
                    };
                    return TGPoint;
                }());
                graphics.TGPoint = TGPoint;
                TGPoint["__class"] = "org.herac.tuxguitar.graphics.TGPoint";
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var TGRectangle = (function () {
                    function TGRectangle(x, y, width, height) {
                        var _this = this;
                        if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof width === 'number') || width === null) && ((typeof height === 'number') || height === null)) {
                            var __args = Array.prototype.slice.call(arguments);
                            this.location = null;
                            this.size = null;
                            this.location = null;
                            this.size = null;
                            (function () {
                                _this.location = new org.herac.tuxguitar.graphics.TGPoint(x, y);
                                _this.size = new org.herac.tuxguitar.graphics.TGDimension(width, height);
                            })();
                        }
                        else if (x === undefined && y === undefined && width === undefined && height === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            {
                                var __args_9 = Array.prototype.slice.call(arguments);
                                var x_2 = 0;
                                var y_2 = 0;
                                var width_2 = 0;
                                var height_3 = 0;
                                this.location = null;
                                this.size = null;
                                this.location = null;
                                this.size = null;
                                (function () {
                                    _this.location = new org.herac.tuxguitar.graphics.TGPoint(x_2, y_2);
                                    _this.size = new org.herac.tuxguitar.graphics.TGDimension(width_2, height_3);
                                })();
                            }
                        }
                        else
                            throw new Error('invalid overload');
                    }
                    TGRectangle.prototype.getX = function () {
                        return this.location.getX();
                    };
                    TGRectangle.prototype.setX = function (x) {
                        this.location.setX(x);
                    };
                    TGRectangle.prototype.getY = function () {
                        return this.location.getY();
                    };
                    TGRectangle.prototype.setY = function (y) {
                        this.location.setY(y);
                    };
                    TGRectangle.prototype.getWidth = function () {
                        return this.size.getWidth();
                    };
                    TGRectangle.prototype.setWidth = function (width) {
                        this.size.setWidth(width);
                    };
                    TGRectangle.prototype.getHeight = function () {
                        return this.size.getHeight();
                    };
                    TGRectangle.prototype.setHeight = function (height) {
                        this.size.setHeight(height);
                    };
                    return TGRectangle;
                }());
                graphics.TGRectangle = TGRectangle;
                TGRectangle["__class"] = "org.herac.tuxguitar.graphics.TGRectangle";
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var base;
                (function (base) {
                    var TGFileFormat = (function () {
                        function TGFileFormat(name, mimeType, supportedFormats) {
                            this.name = null;
                            this.mimeType = null;
                            this.supportedFormats = null;
                            this.name = name;
                            this.mimeType = mimeType;
                            this.supportedFormats = supportedFormats;
                        }
                        TGFileFormat.prototype.getName = function () {
                            return this.name;
                        };
                        TGFileFormat.prototype.getMimeType = function () {
                            return this.mimeType;
                        };
                        TGFileFormat.prototype.getSupportedFormats = function () {
                            return this.supportedFormats;
                        };
                        TGFileFormat.prototype.isSupportedMimeType = function (mimeType) {
                            if (mimeType != null) {
                                return ((function (o1, o2) { if (o1.equals) {
                                    return o1.equals(o2);
                                }
                                else {
                                    return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                } })(mimeType.toLowerCase(), this.mimeType.toLowerCase()));
                            }
                            return false;
                        };
                        TGFileFormat.prototype.isSupportedCode = function (formatCode) {
                            if (formatCode != null) {
                                for (var i = 0; i < this.supportedFormats.length; i++) {
                                    if ((function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(formatCode.toLowerCase(), this.supportedFormats[i].toLowerCase())) {
                                        return true;
                                    }
                                }
                            }
                            return false;
                        };
                        TGFileFormat.prototype.equals = function (obj) {
                            if (obj != null && obj instanceof org.herac.tuxguitar.io.base.TGFileFormat) {
                                return (this.getName() != null && (function (o1, o2) { if (o1.equals) {
                                    return o1.equals(o2);
                                }
                                else {
                                    return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                } })(this.getName(), obj.getName()));
                            }
                            return (function (o1, o2) { if (o1.equals) {
                                return o1.equals(o2);
                            }
                            else {
                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                            } })(this, obj);
                        };
                        return TGFileFormat;
                    }());
                    base.TGFileFormat = TGFileFormat;
                    TGFileFormat["__class"] = "org.herac.tuxguitar.io.base.TGFileFormat";
                })(base = io.base || (io.base = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var base;
                (function (base) {
                    var TGFileFormatManager = (function () {
                        function TGFileFormatManager(context) {
                            this.context = null;
                            this.readers = null;
                            this.writers = null;
                            this.exporters = null;
                            this.importers = null;
                            this.fileFormatDetectors = null;
                            this.commonReadFileFormats = null;
                            this.commonWriteFileFormats = null;
                            this.context = context;
                            this.readers = (new java.util.ArrayList());
                            this.writers = (new java.util.ArrayList());
                            this.exporters = (new java.util.ArrayList());
                            this.importers = (new java.util.ArrayList());
                            this.fileFormatDetectors = (new java.util.ArrayList());
                            this.commonReadFileFormats = (new java.util.ArrayList());
                            this.commonWriteFileFormats = (new java.util.ArrayList());
                            this.addDefaults();
                        }
                        TGFileFormatManager.prototype.addDefaults = function () {
                            this.addReader(new org.herac.tuxguitar.io.tg.TGSongReaderImpl());
                            this.addWriter(new org.herac.tuxguitar.io.tg.TGSongWriterImpl());
                            this.addFileFormatDetector(new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(org.herac.tuxguitar.io.tg.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$()));
                            this.addCommonReadFileFormat(org.herac.tuxguitar.io.tg.TGSongReaderImpl.TG_FORMAT_$LI$());
                            this.addCommonWriteFileFormat(org.herac.tuxguitar.io.tg.TGSongWriterImpl.TG_FORMAT_$LI$());
                        };
                        TGFileFormatManager.prototype.read = function (handle) {
                            var tgSongReaderHelper = new org.herac.tuxguitar.io.base.TGSongReaderHelper(this.context);
                            tgSongReaderHelper.read(handle);
                        };
                        TGFileFormatManager.prototype.write = function (handle) {
                            var tgSongWriterHelper = new org.herac.tuxguitar.io.base.TGSongWriterHelper(this.context);
                            tgSongWriterHelper.write(handle);
                        };
                        TGFileFormatManager.prototype.findSongReaders = function (commonFileFormats) {
                            var readers = (new java.util.ArrayList());
                            for (var index127 = this.readers.iterator(); index127.hasNext();) {
                                var reader = index127.next();
                                {
                                    if (commonFileFormats == null || (function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(commonFileFormats, this.isCommonReadFileFormat(reader.getFileFormat()))) {
                                        readers.add(reader);
                                    }
                                }
                            }
                            return readers;
                        };
                        TGFileFormatManager.prototype.findSongWriters = function (commonFileFormats) {
                            var writers = (new java.util.ArrayList());
                            for (var index128 = this.writers.iterator(); index128.hasNext();) {
                                var writer = index128.next();
                                {
                                    if (commonFileFormats == null || (function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(commonFileFormats, this.isCommonWriteFileFormat(writer.getFileFormat()))) {
                                        writers.add(writer);
                                    }
                                }
                            }
                            return writers;
                        };
                        TGFileFormatManager.prototype.findSongReader = function (fileFormat) {
                            if (fileFormat != null) {
                                for (var index129 = this.readers.iterator(); index129.hasNext();) {
                                    var reader = index129.next();
                                    {
                                        if ((function (o1, o2) { if (o1.equals) {
                                            return o1.equals(o2);
                                        }
                                        else {
                                            return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                        } })(reader.getFileFormat(), fileFormat)) {
                                            return reader;
                                        }
                                    }
                                }
                            }
                            return null;
                        };
                        TGFileFormatManager.prototype.findSongWriter = function (fileFormat) {
                            if (fileFormat != null) {
                                for (var index130 = this.writers.iterator(); index130.hasNext();) {
                                    var writer = index130.next();
                                    {
                                        if ((function (o1, o2) { if (o1.equals) {
                                            return o1.equals(o2);
                                        }
                                        else {
                                            return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                        } })(writer.getFileFormat(), fileFormat)) {
                                            return writer;
                                        }
                                    }
                                }
                            }
                            return null;
                        };
                        TGFileFormatManager.prototype.findReadFileFormats = function (commonFileFormats) {
                            var formats = (new java.util.ArrayList());
                            var readers = this.findSongReaders(commonFileFormats);
                            for (var index131 = readers.iterator(); index131.hasNext();) {
                                var reader = index131.next();
                                {
                                    var format = reader.getFileFormat();
                                    if (!formats.contains(format)) {
                                        formats.add(format);
                                    }
                                }
                            }
                            return formats;
                        };
                        TGFileFormatManager.prototype.findWriteFileFormats = function (commonFileFormats) {
                            var formats = (new java.util.ArrayList());
                            var writers = this.findSongWriters(commonFileFormats);
                            for (var index132 = writers.iterator(); index132.hasNext();) {
                                var writer = index132.next();
                                {
                                    var format = writer.getFileFormat();
                                    if (!formats.contains(format)) {
                                        formats.add(format);
                                    }
                                }
                            }
                            return formats;
                        };
                        TGFileFormatManager.prototype.findReaderFileFormatByCode$java_lang_String$java_lang_Boolean = function (formatCode, commonFileFormats) {
                            if (formatCode != null) {
                                var fileFormats = this.findReadFileFormats(commonFileFormats);
                                for (var index133 = fileFormats.iterator(); index133.hasNext();) {
                                    var fileFormat = index133.next();
                                    {
                                        if (fileFormat.isSupportedCode(formatCode)) {
                                            return fileFormat;
                                        }
                                    }
                                }
                            }
                            return null;
                        };
                        TGFileFormatManager.prototype.findReaderFileFormatByCode = function (formatCode, commonFileFormats) {
                            if (((typeof formatCode === 'string') || formatCode === null) && ((typeof commonFileFormats === 'boolean') || commonFileFormats === null)) {
                                return this.findReaderFileFormatByCode$java_lang_String$java_lang_Boolean(formatCode, commonFileFormats);
                            }
                            else if (((typeof formatCode === 'string') || formatCode === null) && commonFileFormats === undefined) {
                                return this.findReaderFileFormatByCode$java_lang_String(formatCode);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGFileFormatManager.prototype.findReaderFileFormatByCode$java_lang_String = function (formatCode) {
                            var fileFormat = this.findReaderFileFormatByCode$java_lang_String$java_lang_Boolean(formatCode, true);
                            if (fileFormat == null) {
                                fileFormat = this.findReaderFileFormatByCode$java_lang_String$java_lang_Boolean(formatCode, false);
                            }
                            return fileFormat;
                        };
                        TGFileFormatManager.prototype.findReaderFileFormatByMimeType$java_lang_String$java_lang_Boolean = function (mimeType, commonFileFormats) {
                            if (mimeType != null) {
                                var fileFormats = this.findReadFileFormats(commonFileFormats);
                                for (var index134 = fileFormats.iterator(); index134.hasNext();) {
                                    var fileFormat = index134.next();
                                    {
                                        if (fileFormat.isSupportedMimeType(mimeType)) {
                                            return fileFormat;
                                        }
                                    }
                                }
                            }
                            return null;
                        };
                        TGFileFormatManager.prototype.findReaderFileFormatByMimeType = function (mimeType, commonFileFormats) {
                            if (((typeof mimeType === 'string') || mimeType === null) && ((typeof commonFileFormats === 'boolean') || commonFileFormats === null)) {
                                return this.findReaderFileFormatByMimeType$java_lang_String$java_lang_Boolean(mimeType, commonFileFormats);
                            }
                            else if (((typeof mimeType === 'string') || mimeType === null) && commonFileFormats === undefined) {
                                return this.findReaderFileFormatByMimeType$java_lang_String(mimeType);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGFileFormatManager.prototype.findReaderFileFormatByMimeType$java_lang_String = function (mimeType) {
                            var fileFormat = this.findReaderFileFormatByMimeType$java_lang_String$java_lang_Boolean(mimeType, true);
                            if (fileFormat == null) {
                                fileFormat = this.findReaderFileFormatByMimeType$java_lang_String$java_lang_Boolean(mimeType, false);
                            }
                            return fileFormat;
                        };
                        TGFileFormatManager.prototype.findWriterFileFormatByCode$java_lang_String$java_lang_Boolean = function (formatCode, commonFileFormats) {
                            if (formatCode != null) {
                                var fileFormats = this.findWriteFileFormats(commonFileFormats);
                                for (var index135 = fileFormats.iterator(); index135.hasNext();) {
                                    var fileFormat = index135.next();
                                    {
                                        if (fileFormat.isSupportedCode(formatCode)) {
                                            return fileFormat;
                                        }
                                    }
                                }
                            }
                            return null;
                        };
                        TGFileFormatManager.prototype.findWriterFileFormatByCode = function (formatCode, commonFileFormats) {
                            if (((typeof formatCode === 'string') || formatCode === null) && ((typeof commonFileFormats === 'boolean') || commonFileFormats === null)) {
                                return this.findWriterFileFormatByCode$java_lang_String$java_lang_Boolean(formatCode, commonFileFormats);
                            }
                            else if (((typeof formatCode === 'string') || formatCode === null) && commonFileFormats === undefined) {
                                return this.findWriterFileFormatByCode$java_lang_String(formatCode);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGFileFormatManager.prototype.findWriterFileFormatByCode$java_lang_String = function (formatCode) {
                            var fileFormat = this.findWriterFileFormatByCode$java_lang_String$java_lang_Boolean(formatCode, true);
                            if (fileFormat == null) {
                                fileFormat = this.findWriterFileFormatByCode$java_lang_String$java_lang_Boolean(formatCode, false);
                            }
                            return fileFormat;
                        };
                        TGFileFormatManager.prototype.findWriterFileFormatByMimeType$java_lang_String$java_lang_Boolean = function (mimeType, commonFileFormats) {
                            if (mimeType != null) {
                                var fileFormats = this.findReadFileFormats(commonFileFormats);
                                for (var index136 = fileFormats.iterator(); index136.hasNext();) {
                                    var fileFormat = index136.next();
                                    {
                                        if (fileFormat.isSupportedMimeType(mimeType)) {
                                            return fileFormat;
                                        }
                                    }
                                }
                            }
                            return null;
                        };
                        TGFileFormatManager.prototype.findWriterFileFormatByMimeType = function (mimeType, commonFileFormats) {
                            if (((typeof mimeType === 'string') || mimeType === null) && ((typeof commonFileFormats === 'boolean') || commonFileFormats === null)) {
                                return this.findWriterFileFormatByMimeType$java_lang_String$java_lang_Boolean(mimeType, commonFileFormats);
                            }
                            else if (((typeof mimeType === 'string') || mimeType === null) && commonFileFormats === undefined) {
                                return this.findWriterFileFormatByMimeType$java_lang_String(mimeType);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGFileFormatManager.prototype.findWriterFileFormatByMimeType$java_lang_String = function (mimeType) {
                            var fileFormat = this.findWriterFileFormatByMimeType$java_lang_String$java_lang_Boolean(mimeType, true);
                            if (fileFormat == null) {
                                fileFormat = this.findWriterFileFormatByMimeType$java_lang_String$java_lang_Boolean(mimeType, false);
                            }
                            return fileFormat;
                        };
                        TGFileFormatManager.prototype.addReader = function (stream) {
                            if (!this.readers.contains(stream)) {
                                this.readers.add(stream);
                                this.fireFileFormatAvailabilityEvent();
                            }
                        };
                        TGFileFormatManager.prototype.removeReader = function (stream) {
                            if (this.readers.contains(stream)) {
                                this.readers.remove(stream);
                                this.fireFileFormatAvailabilityEvent();
                            }
                        };
                        TGFileFormatManager.prototype.addWriter = function (stream) {
                            if (!this.writers.contains(stream)) {
                                this.writers.add(stream);
                                this.fireFileFormatAvailabilityEvent();
                            }
                        };
                        TGFileFormatManager.prototype.removeWriter = function (stream) {
                            if (this.writers.contains(stream)) {
                                this.writers.remove(stream);
                                this.fireFileFormatAvailabilityEvent();
                            }
                        };
                        TGFileFormatManager.prototype.addImporter = function (importer) {
                            if (!this.importers.contains(importer)) {
                                this.importers.add(importer);
                                this.fireFileFormatAvailabilityEvent();
                            }
                        };
                        TGFileFormatManager.prototype.removeImporter = function (importer) {
                            if (this.importers.contains(importer)) {
                                this.importers.remove(importer);
                                this.fireFileFormatAvailabilityEvent();
                            }
                        };
                        TGFileFormatManager.prototype.getImporters = function () {
                            return (new java.util.ArrayList(this.importers));
                        };
                        TGFileFormatManager.prototype.addExporter = function (exporter) {
                            if (!this.exporters.contains(exporter)) {
                                this.exporters.add(exporter);
                                this.fireFileFormatAvailabilityEvent();
                            }
                        };
                        TGFileFormatManager.prototype.removeExporter = function (exporter) {
                            if (this.exporters.contains(exporter)) {
                                this.exporters.remove(exporter);
                                this.fireFileFormatAvailabilityEvent();
                            }
                        };
                        TGFileFormatManager.prototype.getExporters = function () {
                            return (new java.util.ArrayList(this.exporters));
                        };
                        TGFileFormatManager.prototype.addFileFormatDetector = function (detector) {
                            if (!this.fileFormatDetectors.contains(detector)) {
                                this.fileFormatDetectors.add(detector);
                            }
                        };
                        TGFileFormatManager.prototype.removeFileFormatDetector = function (detector) {
                            if (this.fileFormatDetectors.contains(detector)) {
                                this.fileFormatDetectors.remove(detector);
                            }
                        };
                        TGFileFormatManager.prototype.getFileFormatDetectors = function () {
                            return (new java.util.ArrayList(this.fileFormatDetectors));
                        };
                        TGFileFormatManager.prototype.addCommonReadFileFormat = function (fileFormat) {
                            if (!this.commonReadFileFormats.contains(fileFormat)) {
                                this.commonReadFileFormats.add(fileFormat);
                            }
                        };
                        TGFileFormatManager.prototype.removeCommonReadFileFormat = function (fileFormat) {
                            if (this.commonReadFileFormats.contains(fileFormat)) {
                                this.commonReadFileFormats.remove(fileFormat);
                            }
                        };
                        TGFileFormatManager.prototype.isCommonReadFileFormat = function (fileFormat) {
                            return this.commonReadFileFormats.contains(fileFormat);
                        };
                        TGFileFormatManager.prototype.addCommonWriteFileFormat = function (fileFormat) {
                            if (!this.commonWriteFileFormats.contains(fileFormat)) {
                                this.commonWriteFileFormats.add(fileFormat);
                            }
                        };
                        TGFileFormatManager.prototype.removeCommonWriteFileFormat = function (fileFormat) {
                            if (this.commonWriteFileFormats.contains(fileFormat)) {
                                this.commonWriteFileFormats.remove(fileFormat);
                            }
                        };
                        TGFileFormatManager.prototype.isCommonWriteFileFormat = function (fileFormat) {
                            return this.commonWriteFileFormats.contains(fileFormat);
                        };
                        TGFileFormatManager.prototype.fireFileFormatAvailabilityEvent = function () {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).fireEvent(new org.herac.tuxguitar.io.base.TGFileFormatAvailabilityEvent());
                        };
                        TGFileFormatManager.prototype.addFileFormatAvailabilityListener = function (listener) {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).addListener(org.herac.tuxguitar.io.base.TGFileFormatAvailabilityEvent.EVENT_TYPE, listener);
                        };
                        TGFileFormatManager.prototype.removeFileFormatAvailabilityListener = function (listener) {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).removeListener(org.herac.tuxguitar.io.base.TGFileFormatAvailabilityEvent.EVENT_TYPE, listener);
                        };
                        TGFileFormatManager.getInstance = function (context) {
                            return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGFileFormatManager), new TGFileFormatManager.TGFileFormatManager$0());
                        };
                        return TGFileFormatManager;
                    }());
                    base.TGFileFormatManager = TGFileFormatManager;
                    TGFileFormatManager["__class"] = "org.herac.tuxguitar.io.base.TGFileFormatManager";
                    (function (TGFileFormatManager) {
                        var TGFileFormatManager$0 = (function () {
                            function TGFileFormatManager$0() {
                            }
                            TGFileFormatManager$0.prototype.createInstance = function (context) {
                                return new org.herac.tuxguitar.io.base.TGFileFormatManager(context);
                            };
                            return TGFileFormatManager$0;
                        }());
                        TGFileFormatManager.TGFileFormatManager$0 = TGFileFormatManager$0;
                        TGFileFormatManager$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                    })(TGFileFormatManager = base.TGFileFormatManager || (base.TGFileFormatManager = {}));
                })(base = io.base || (io.base = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var base;
                (function (base) {
                    var TGSongPersistenceHandle = (function () {
                        function TGSongPersistenceHandle() {
                            this.factory = null;
                            this.song = null;
                            this.format = null;
                            this.context = null;
                        }
                        TGSongPersistenceHandle.prototype.getFactory = function () {
                            return this.factory;
                        };
                        TGSongPersistenceHandle.prototype.setFactory = function (factory) {
                            this.factory = factory;
                        };
                        TGSongPersistenceHandle.prototype.getSong = function () {
                            return this.song;
                        };
                        TGSongPersistenceHandle.prototype.setSong = function (song) {
                            this.song = song;
                        };
                        TGSongPersistenceHandle.prototype.getFormat = function () {
                            return this.format;
                        };
                        TGSongPersistenceHandle.prototype.setFormat = function (format) {
                            this.format = format;
                        };
                        TGSongPersistenceHandle.prototype.getContext = function () {
                            return this.context;
                        };
                        TGSongPersistenceHandle.prototype.setContext = function (context) {
                            this.context = context;
                        };
                        return TGSongPersistenceHandle;
                    }());
                    base.TGSongPersistenceHandle = TGSongPersistenceHandle;
                    TGSongPersistenceHandle["__class"] = "org.herac.tuxguitar.io.base.TGSongPersistenceHandle";
                })(base = io.base || (io.base = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var base;
                (function (base) {
                    var TGSongPersistenceHelper = (function () {
                        function TGSongPersistenceHelper(context) {
                            this.context = null;
                            this.context = context;
                        }
                        TGSongPersistenceHelper.prototype.getContext = function () {
                            return this.context;
                        };
                        return TGSongPersistenceHelper;
                    }());
                    TGSongPersistenceHelper.ATTRIBUTE_MIME_TYPE = "mimeType";
                    TGSongPersistenceHelper.ATTRIBUTE_FORMAT_CODE = "formatCode";
                    base.TGSongPersistenceHelper = TGSongPersistenceHelper;
                    TGSongPersistenceHelper["__class"] = "org.herac.tuxguitar.io.base.TGSongPersistenceHelper";
                })(base = io.base || (io.base = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var plugin;
                (function (plugin) {
                    var TGSongExporterPlugin = (function () {
                        function TGSongExporterPlugin() {
                            this.exporter = null;
                        }
                        TGSongExporterPlugin.prototype.connect = function (context) {
                            try {
                                if (this.exporter == null) {
                                    this.exporter = this.createExporter(context);
                                    org.herac.tuxguitar.io.base.TGFileFormatManager.getInstance(context).addExporter(this.exporter);
                                }
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.util.plugin.TGPluginException(throwable.message, throwable);
                            }
                            ;
                        };
                        TGSongExporterPlugin.prototype.disconnect = function (context) {
                            try {
                                if (this.exporter != null) {
                                    org.herac.tuxguitar.io.base.TGFileFormatManager.getInstance(context).removeExporter(this.exporter);
                                    this.exporter = null;
                                }
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.util.plugin.TGPluginException(throwable.message, throwable);
                            }
                            ;
                        };
                        return TGSongExporterPlugin;
                    }());
                    plugin.TGSongExporterPlugin = TGSongExporterPlugin;
                    TGSongExporterPlugin["__class"] = "org.herac.tuxguitar.io.plugin.TGSongExporterPlugin";
                    TGSongExporterPlugin["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                })(plugin = io.plugin || (io.plugin = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var plugin;
                (function (plugin) {
                    var TGSongImporterPlugin = (function () {
                        function TGSongImporterPlugin() {
                            this.importer = null;
                        }
                        TGSongImporterPlugin.prototype.connect = function (context) {
                            try {
                                if (this.importer == null) {
                                    this.importer = this.createImporter(context);
                                    org.herac.tuxguitar.io.base.TGFileFormatManager.getInstance(context).addImporter(this.importer);
                                }
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.util.plugin.TGPluginException(throwable.message, throwable);
                            }
                            ;
                        };
                        TGSongImporterPlugin.prototype.disconnect = function (context) {
                            try {
                                if (this.importer != null) {
                                    org.herac.tuxguitar.io.base.TGFileFormatManager.getInstance(context).removeImporter(this.importer);
                                    this.importer = null;
                                }
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.util.plugin.TGPluginException(throwable.message, throwable);
                            }
                            ;
                        };
                        return TGSongImporterPlugin;
                    }());
                    plugin.TGSongImporterPlugin = TGSongImporterPlugin;
                    TGSongImporterPlugin["__class"] = "org.herac.tuxguitar.io.plugin.TGSongImporterPlugin";
                    TGSongImporterPlugin["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                })(plugin = io.plugin || (io.plugin = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var plugin;
                (function (plugin) {
                    var TGSongReaderPlugin = (function () {
                        function TGSongReaderPlugin(commonFileFormat) {
                            this.commonFileFormat = false;
                            this.stream = null;
                            this.detector = null;
                            this.commonFileFormat = commonFileFormat;
                        }
                        TGSongReaderPlugin.prototype.connect = function (context) {
                            try {
                                var fileFormatManager = org.herac.tuxguitar.io.base.TGFileFormatManager.getInstance(context);
                                if (this.stream == null) {
                                    this.stream = this.createInputStream(context);
                                    fileFormatManager.addReader(this.stream);
                                    if (this.commonFileFormat) {
                                        fileFormatManager.addCommonReadFileFormat(this.stream.getFileFormat());
                                    }
                                }
                                if (this.detector == null) {
                                    this.detector = this.createFileFormatDetector(context);
                                    if (this.detector != null) {
                                        fileFormatManager.addFileFormatDetector(this.detector);
                                    }
                                }
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.util.plugin.TGPluginException(throwable.message, throwable);
                            }
                            ;
                        };
                        TGSongReaderPlugin.prototype.disconnect = function (context) {
                            try {
                                var fileFormatManager = org.herac.tuxguitar.io.base.TGFileFormatManager.getInstance(context);
                                if (this.stream != null) {
                                    if (this.commonFileFormat) {
                                        fileFormatManager.removeCommonReadFileFormat(this.stream.getFileFormat());
                                    }
                                    fileFormatManager.removeReader(this.stream);
                                    this.stream = null;
                                }
                                if (this.detector != null) {
                                    fileFormatManager.removeFileFormatDetector(this.detector);
                                    this.detector = null;
                                }
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.util.plugin.TGPluginException(throwable.message, throwable);
                            }
                            ;
                        };
                        return TGSongReaderPlugin;
                    }());
                    plugin.TGSongReaderPlugin = TGSongReaderPlugin;
                    TGSongReaderPlugin["__class"] = "org.herac.tuxguitar.io.plugin.TGSongReaderPlugin";
                    TGSongReaderPlugin["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                })(plugin = io.plugin || (io.plugin = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var plugin;
                (function (plugin) {
                    var TGSongWriterPlugin = (function () {
                        function TGSongWriterPlugin(commonFileFormat) {
                            this.commonFileFormat = false;
                            this.stream = null;
                            this.commonFileFormat = commonFileFormat;
                        }
                        TGSongWriterPlugin.prototype.connect = function (context) {
                            try {
                                var fileFormatManager = org.herac.tuxguitar.io.base.TGFileFormatManager.getInstance(context);
                                if (this.stream == null) {
                                    this.stream = this.createOutputStream(context);
                                    fileFormatManager.addWriter(this.stream);
                                    if (this.commonFileFormat) {
                                        fileFormatManager.addCommonWriteFileFormat(this.stream.getFileFormat());
                                    }
                                }
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.util.plugin.TGPluginException(throwable.message, throwable);
                            }
                            ;
                        };
                        TGSongWriterPlugin.prototype.disconnect = function (context) {
                            try {
                                var fileFormatManager = org.herac.tuxguitar.io.base.TGFileFormatManager.getInstance(context);
                                if (this.stream != null) {
                                    if (this.commonFileFormat) {
                                        fileFormatManager.removeCommonWriteFileFormat(this.stream.getFileFormat());
                                    }
                                    fileFormatManager.removeWriter(this.stream);
                                    this.stream = null;
                                }
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.util.plugin.TGPluginException(throwable.message, throwable);
                            }
                            ;
                        };
                        return TGSongWriterPlugin;
                    }());
                    plugin.TGSongWriterPlugin = TGSongWriterPlugin;
                    TGSongWriterPlugin["__class"] = "org.herac.tuxguitar.io.plugin.TGSongWriterPlugin";
                    TGSongWriterPlugin["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                })(plugin = io.plugin || (io.plugin = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var TGFileFormatDetectorImpl = (function () {
                        function TGFileFormatDetectorImpl() {
                            var supportedVersions = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                supportedVersions[_i] = arguments[_i];
                            }
                            this.supportedVersions = null;
                            this.supportedVersions = supportedVersions;
                        }
                        TGFileFormatDetectorImpl.prototype.getFileFormat = function (is) {
                            try {
                                var version = this.readVersion(new java.io.DataInputStream(is));
                                if (version != null) {
                                    for (var index137 = 0; index137 < this.supportedVersions.length; index137++) {
                                        var supportedVersion = this.supportedVersions[index137];
                                        {
                                            if ((function (o1, o2) { if (o1.equals) {
                                                return o1.equals(o2);
                                            }
                                            else {
                                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                            } })(version, supportedVersion.getVersion())) {
                                                return supportedVersion.getFileFormat();
                                            }
                                        }
                                    }
                                }
                                return null;
                            }
                            catch (throwable) {
                                return null;
                            }
                            ;
                        };
                        TGFileFormatDetectorImpl.prototype.readVersion = function (is) {
                            var sb = new java.lang.StringBuilder();
                            var length = (is.read() & 255);
                            for (var i = 0; i < length; i++) {
                                sb.append(is.readChar());
                            }
                            return sb.toString();
                        };
                        return TGFileFormatDetectorImpl;
                    }());
                    tg.TGFileFormatDetectorImpl = TGFileFormatDetectorImpl;
                    TGFileFormatDetectorImpl["__class"] = "org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl";
                    TGFileFormatDetectorImpl["__interfaces"] = ["org.herac.tuxguitar.io.base.TGFileFormatDetector"];
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var TGFileFormatVersion = (function () {
                        function TGFileFormatVersion(fileFormat, version) {
                            this.fileFormat = null;
                            this.version = null;
                            this.fileFormat = fileFormat;
                            this.version = version;
                        }
                        TGFileFormatVersion.prototype.getFileFormat = function () {
                            return this.fileFormat;
                        };
                        TGFileFormatVersion.prototype.getVersion = function () {
                            return this.version;
                        };
                        return TGFileFormatVersion;
                    }());
                    tg.TGFileFormatVersion = TGFileFormatVersion;
                    TGFileFormatVersion["__class"] = "org.herac.tuxguitar.io.tg.TGFileFormatVersion";
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var base;
                (function (base) {
                    var MidiChannelRouter = (function () {
                        function MidiChannelRouter() {
                            this.midiChannels = null;
                            this.midiChannels = (new java.util.HashMap());
                        }
                        MidiChannelRouter.prototype.getId = function () {
                            return (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(MidiChannelRouter);
                        };
                        MidiChannelRouter.prototype.sendParameter = function (channelId, key, value) {
                            var midiChannel = this.getMidiChannel(channelId);
                            if (midiChannel != null) {
                                midiChannel.sendParameter(key, value);
                            }
                        };
                        MidiChannelRouter.prototype.sendNoteOn = function (channelId, key, velocity, voice, bendMode) {
                            var midiChannel = this.getMidiChannel(channelId);
                            if (midiChannel != null) {
                                midiChannel.sendNoteOn(key, velocity, voice, bendMode);
                            }
                        };
                        MidiChannelRouter.prototype.sendNoteOff = function (channelId, key, velocity, voice, bendMode) {
                            var midiChannel = this.getMidiChannel(channelId);
                            if (midiChannel != null) {
                                midiChannel.sendNoteOff(key, velocity, voice, bendMode);
                            }
                        };
                        MidiChannelRouter.prototype.sendPitchBend = function (channelId, value, voice, bendMode) {
                            var midiChannel = this.getMidiChannel(channelId);
                            if (midiChannel != null) {
                                midiChannel.sendPitchBend(value, voice, bendMode);
                            }
                        };
                        MidiChannelRouter.prototype.sendProgramChange = function (channelId, value) {
                            var midiChannel = this.getMidiChannel(channelId);
                            if (midiChannel != null) {
                                midiChannel.sendProgramChange(value);
                            }
                        };
                        MidiChannelRouter.prototype.sendControlChange = function (channelId, controller, value) {
                            var midiChannel = this.getMidiChannel(channelId);
                            if (midiChannel != null) {
                                midiChannel.sendControlChange(controller, value);
                            }
                        };
                        MidiChannelRouter.prototype.sendAllNotesOff$int = function (channelId) {
                            var midiChannel = this.getMidiChannel(channelId);
                            if (midiChannel != null) {
                                midiChannel.sendAllNotesOff();
                            }
                        };
                        MidiChannelRouter.prototype.sendAllNotesOff = function (channelId) {
                            if (((typeof channelId === 'number') || channelId === null)) {
                                return this.sendAllNotesOff$int(channelId);
                            }
                            else if (channelId === undefined) {
                                return this.sendAllNotesOff$();
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        MidiChannelRouter.prototype.sendAllNotesOff$ = function () {
                            var midiChannelIds = this.getMidiChannelIds();
                            for (var i = 0; i < midiChannelIds.size(); i++) {
                                this.sendAllNotesOff$int(/* intValue */ (midiChannelIds.get(i) | 0));
                            }
                        };
                        MidiChannelRouter.prototype.sendPitchBendReset = function () {
                            var midiChannelIds = this.getMidiChannelIds();
                            for (var i = 0; i < midiChannelIds.size(); i++) {
                                this.sendPitchBend(/* intValue */ (midiChannelIds.get(i) | 0), 64, -1, false);
                            }
                        };
                        MidiChannelRouter.prototype.getMidiChannel = function (channelId) {
                            var key = new Number(channelId);
                            if (this.midiChannels.containsKey(key)) {
                                return this.midiChannels.get(key);
                            }
                            return null;
                        };
                        MidiChannelRouter.prototype.removeMidiChannel = function (channelId) {
                            var key = new Number(channelId);
                            if (this.midiChannels.containsKey(key)) {
                                this.midiChannels.remove(key);
                            }
                        };
                        MidiChannelRouter.prototype.addMidiChannel = function (channelId, midiChannel) {
                            var key = new Number(channelId);
                            if (this.midiChannels.containsKey(key)) {
                                this.midiChannels.remove(key);
                            }
                            this.midiChannels.put(key, midiChannel);
                        };
                        MidiChannelRouter.prototype.getMidiChannelIds = function () {
                            var midiChannelIds = (new java.util.ArrayList());
                            var iterator = this.midiChannels.keySet().iterator();
                            while ((iterator.hasNext())) {
                                midiChannelIds.add(iterator.next());
                            }
                            ;
                            return midiChannelIds;
                        };
                        return MidiChannelRouter;
                    }());
                    base.MidiChannelRouter = MidiChannelRouter;
                    MidiChannelRouter["__class"] = "org.herac.tuxguitar.player.base.MidiChannelRouter";
                    MidiChannelRouter["__interfaces"] = ["org.herac.tuxguitar.player.base.MidiReceiver"];
                })(base = player.base || (player.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var base;
                (function (base) {
                    var MidiControllers = (function () {
                        function MidiControllers() {
                        }
                        return MidiControllers;
                    }());
                    MidiControllers.BANK_SELECT = 0;
                    MidiControllers.VOLUME = 7;
                    MidiControllers.BALANCE = 10;
                    MidiControllers.EXPRESSION = 11;
                    MidiControllers.REVERB = 91;
                    MidiControllers.TREMOLO = 92;
                    MidiControllers.CHORUS = 93;
                    MidiControllers.PHASER = 95;
                    MidiControllers.DATA_ENTRY_MSB = 6;
                    MidiControllers.DATA_ENTRY_LSB = 38;
                    MidiControllers.RPN_LSB = 100;
                    MidiControllers.RPN_MSB = 101;
                    MidiControllers.ALL_NOTES_OFF = 123;
                    base.MidiControllers = MidiControllers;
                    MidiControllers["__class"] = "org.herac.tuxguitar.player.base.MidiControllers";
                })(base = player.base || (player.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var base;
                (function (base) {
                    var MidiInstrument = (function () {
                        function MidiInstrument(name) {
                            this.name = null;
                            this.name = name;
                        }
                        MidiInstrument.INSTRUMENT_LIST_$LI$ = function () { if (MidiInstrument.INSTRUMENT_LIST == null)
                            MidiInstrument.INSTRUMENT_LIST = MidiInstrument.createDefaultInstruments(); return MidiInstrument.INSTRUMENT_LIST; };
                        ;
                        MidiInstrument.prototype.getName = function () {
                            return this.name;
                        };
                        MidiInstrument.createDefaultInstruments = function () {
                            var instruments = new Array(org.herac.tuxguitar.song.models.TGChannelNames.DEFAULT_NAMES_$LI$().length);
                            for (var i = 0; i < org.herac.tuxguitar.song.models.TGChannelNames.DEFAULT_NAMES_$LI$().length; i++) {
                                instruments[i] = new MidiInstrument(org.herac.tuxguitar.song.models.TGChannelNames.DEFAULT_NAMES_$LI$()[i]);
                            }
                            return instruments;
                        };
                        return MidiInstrument;
                    }());
                    base.MidiInstrument = MidiInstrument;
                    MidiInstrument["__class"] = "org.herac.tuxguitar.player.base.MidiInstrument";
                })(base = player.base || (player.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var base;
                (function (base) {
                    var MidiParameters = (function () {
                        function MidiParameters() {
                        }
                        return MidiParameters;
                    }());
                    MidiParameters.SENDING_PARAMS = "sendingParams";
                    base.MidiParameters = MidiParameters;
                    MidiParameters["__class"] = "org.herac.tuxguitar.player.base.MidiParameters";
                })(base = player.base || (player.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var base;
                (function (base) {
                    var MidiPercussionKey = (function () {
                        function MidiPercussionKey(value, name) {
                            this.value = 0;
                            this.name = null;
                            this.value = value;
                            this.name = name;
                        }
                        MidiPercussionKey.PERCUSSION_KEY_LIST_$LI$ = function () { if (MidiPercussionKey.PERCUSSION_KEY_LIST == null)
                            MidiPercussionKey.PERCUSSION_KEY_LIST = [new MidiPercussionKey(35, "Acoustic Bass Drum"), new MidiPercussionKey(36, "Bass Drum 1"), new MidiPercussionKey(37, "Side Stick"), new MidiPercussionKey(38, "Acoustic Snare"), new MidiPercussionKey(39, "Hand Clap"), new MidiPercussionKey(40, "Electric Snare"), new MidiPercussionKey(41, "Low Floor Tom"), new MidiPercussionKey(42, "Closed Hi Hat"), new MidiPercussionKey(43, "High Floor Tom"), new MidiPercussionKey(44, "Pedal Hi-Hat"), new MidiPercussionKey(45, "Low Tom"), new MidiPercussionKey(46, "Open Hi-Hat"), new MidiPercussionKey(47, "Low-Mid Tom"), new MidiPercussionKey(48, "Hi-Mid Tom"), new MidiPercussionKey(49, "Crash Cymbal 1"), new MidiPercussionKey(50, "High Tom"), new MidiPercussionKey(51, "Ride Cymbal 1"), new MidiPercussionKey(52, "Chinese Cymbal"), new MidiPercussionKey(53, "Ride Bell"), new MidiPercussionKey(54, "Tambourine"), new MidiPercussionKey(55, "Splash Cymbal"), new MidiPercussionKey(56, "Cowbell"), new MidiPercussionKey(57, "Crash Cymbal 2"), new MidiPercussionKey(58, "Vibraslap"), new MidiPercussionKey(59, "Ride Cymbal 2"), new MidiPercussionKey(60, "Hi Bongo"), new MidiPercussionKey(61, "Low Bongo"), new MidiPercussionKey(62, "Mute Hi Conga"), new MidiPercussionKey(63, "Open Hi Conga"), new MidiPercussionKey(64, "Low Conga"), new MidiPercussionKey(65, "High Timbale"), new MidiPercussionKey(66, "Low Timbale"), new MidiPercussionKey(67, "High Agogo"), new MidiPercussionKey(68, "Low Agogo"), new MidiPercussionKey(69, "Cabasa"), new MidiPercussionKey(70, "Maracas"), new MidiPercussionKey(71, "Short Whistle"), new MidiPercussionKey(72, "Long Whistle"), new MidiPercussionKey(73, "Short Guiro"), new MidiPercussionKey(74, "Long Guiro"), new MidiPercussionKey(75, "Claves"), new MidiPercussionKey(76, "Hi Wood Block"), new MidiPercussionKey(77, "Low Wood Block"), new MidiPercussionKey(78, "Mute Cuica"), new MidiPercussionKey(79, "Open Cuica"), new MidiPercussionKey(80, "Mute Triangle"), new MidiPercussionKey(81, "Open Triangle")]; return MidiPercussionKey.PERCUSSION_KEY_LIST; };
                        ;
                        MidiPercussionKey.prototype.getValue = function () {
                            return this.value;
                        };
                        MidiPercussionKey.prototype.getName = function () {
                            return this.name;
                        };
                        return MidiPercussionKey;
                    }());
                    base.MidiPercussionKey = MidiPercussionKey;
                    MidiPercussionKey["__class"] = "org.herac.tuxguitar.player.base.MidiPercussionKey";
                })(base = player.base || (player.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var base;
                (function (base) {
                    var MidiPlayer = (function () {
                        function MidiPlayer(context) {
                            this.context = null;
                            this.documentManager = null;
                            this.sequencer = null;
                            this.synthesizerProxy = null;
                            this.channelRouter = null;
                            this.outputTransmitter = null;
                            this.outputPort = null;
                            this.mode = null;
                            this.countDown = null;
                            this.sequencerKey = null;
                            this.outputPortKey = null;
                            this.outputPortProviders = null;
                            this.sequencerProviders = null;
                            this.volume = 0;
                            this.running = false;
                            this.paused = false;
                            this.__changeTickPosition = false;
                            this.metronomeEnabled = false;
                            this.metronomeTrack = 0;
                            this.infoTrack = 0;
                            this.loopSHeader = 0;
                            this.loopEHeader = 0;
                            this.loopSPosition = 0;
                            this.anySolo = false;
                            this.tickLength = 0;
                            this.tickPosition = 0;
                            this.tryOpenFistDevice = false;
                            this.__lock = null;
                            this.context = context;
                            this.__lock = new org.herac.tuxguitar.util.TGLock(context);
                            this.volume = MidiPlayer.MAX_VOLUME;
                        }
                        MidiPlayer.prototype.lock = function () {
                            this.__lock.lock();
                        };
                        MidiPlayer.prototype.unlock = function () {
                            this.__lock.unlock();
                        };
                        MidiPlayer.prototype.init = function (documentManager) {
                            try {
                                this.lock();
                                this.documentManager = documentManager;
                                this.outputPortProviders = (new java.util.ArrayList());
                                this.sequencerProviders = (new java.util.ArrayList());
                                this.tryOpenFistDevice = false;
                                this.getSequencer();
                                this.getMode();
                                this.reset();
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.reset = function () {
                            try {
                                this.lock();
                                this.stop();
                                this.tickPosition = org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME;
                                this.setChangeTickPosition(false);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.close = function () {
                            try {
                                this.lock();
                                this.closeSequencer();
                                this.closeOutputPort();
                            }
                            catch (e) {
                                console.error(e.message, e);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.stopSequencer = function () {
                            try {
                                this.lock();
                                if (this.getSequencer().isRunning()) {
                                    this.getSequencer().stop();
                                }
                            }
                            catch (e) {
                                console.error(e.message, e);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.stop$boolean = function (paused) {
                            try {
                                this.lock();
                                this.setPaused(paused);
                                this.stopSequencer();
                                this.setRunning(false);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.stop = function (paused) {
                            if (((typeof paused === 'boolean') || paused === null)) {
                                return this.stop$boolean(paused);
                            }
                            else if (paused === undefined) {
                                return this.stop$();
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        MidiPlayer.prototype.stop$ = function () {
                            try {
                                this.lock();
                                this.stop$boolean(false);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.pause = function () {
                            try {
                                this.lock();
                                this.stop$boolean(true);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.play = function () {
                            try {
                                this.lock();
                                var notifyStarted = (!this.isRunning());
                                this.setRunning(true);
                                this.stopSequencer();
                                this.checkDevices();
                                this.updateLoop(true);
                                this.addSequence();
                                this.updateTracks();
                                this.updateChannels();
                                this.setMetronomeEnabled(this.isMetronomeEnabled());
                                this.getCountDown().setTempoPercent(this.getMode().getCurrentPercent());
                                this.changeTickPosition();
                                org.herac.tuxguitar.thread.TGThreadManager.getInstance(this.context).start(new MidiPlayer.MidiPlayer$0(this, notifyStarted));
                            }
                            catch (throwable) {
                                this.reset();
                                throw new org.herac.tuxguitar.player.base.MidiPlayerException(throwable.message, throwable);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.runPlayStartProcess = function (notifyStarted) {
                            try {
                                if (notifyStarted) {
                                    this.notifyStarted();
                                }
                                if (this.getCountDown().isEnabled()) {
                                    this.notifyCountDownStarted();
                                    this.getCountDown().start();
                                    this.notifyCountDownStopped();
                                }
                                try {
                                    this.lock();
                                    if (this.isRunning()) {
                                        if (this.isChangeTickPosition()) {
                                            this.changeTickPosition();
                                        }
                                        this.getSequencer().start();
                                    }
                                    this.tickLength = this.getSequencer().getTickLength();
                                    this.tickPosition = this.getSequencer().getTickPosition();
                                }
                                finally {
                                    this.unlock();
                                }
                                ;
                                this.runPlayLoop();
                            }
                            catch (throwable) {
                                this.reset();
                                console.error(throwable.message, throwable);
                            }
                            ;
                        };
                        MidiPlayer.prototype.runPlayLoop = function () {
                            org.herac.tuxguitar.thread.TGThreadManager.getInstance(this.context).loop(new MidiPlayer.MidiPlayer$1(this));
                        };
                        MidiPlayer.prototype.runPlayLoopProcess = function () {
                            try {
                                if (this.getSequencer().isRunning() && this.isRunning()) {
                                    try {
                                        this.lock();
                                        if (this.isChangeTickPosition()) {
                                            this.changeTickPosition();
                                        }
                                        this.tickPosition = this.getSequencer().getTickPosition();
                                    }
                                    finally {
                                        this.unlock();
                                    }
                                    ;
                                    return true;
                                }
                                else {
                                    this.runPlayEndProcess();
                                }
                            }
                            catch (throwable) {
                                this.reset();
                                console.error(throwable.message, throwable);
                            }
                            ;
                            return false;
                        };
                        MidiPlayer.prototype.runPlayEndProcess = function () {
                            try {
                                try {
                                    this.lock();
                                    if (this.isRunning()) {
                                        if (this.tickPosition >= (this.tickLength - (Math.floor(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME / 2)))) {
                                            this.finish();
                                        }
                                        else {
                                            this.stop$boolean(this.isPaused());
                                        }
                                    }
                                    if (!this.isRunning()) {
                                        this.notifyStopped();
                                    }
                                }
                                finally {
                                    this.unlock();
                                }
                                ;
                            }
                            catch (throwable) {
                                this.reset();
                                console.error(throwable.message, throwable);
                            }
                            ;
                        };
                        MidiPlayer.prototype.finish = function () {
                            try {
                                this.lock();
                                if (this.getMode().isLoop()) {
                                    this.stopSequencer();
                                    this.setTickPosition(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME);
                                    this.getMode().notifyLoop();
                                    this.notifyLoop();
                                    this.play();
                                    return;
                                }
                                this.reset();
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.updateLoop = function (force) {
                            try {
                                this.lock();
                                if (force || !this.isRunning()) {
                                    this.loopSHeader = -1;
                                    this.loopEHeader = -1;
                                    this.loopSPosition = org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME;
                                    if (this.getMode().isLoop()) {
                                        var hCount = this.getSong().countMeasureHeaders();
                                        this.loopSHeader = (this.getMode().getLoopSHeader() <= hCount ? this.getMode().getLoopSHeader() : -1);
                                        this.loopEHeader = (this.getMode().getLoopEHeader() <= hCount ? this.getMode().getLoopEHeader() : -1);
                                        if (this.loopSHeader > 0 && this.loopSHeader <= hCount) {
                                            var header = this.getSongManager().getMeasureHeader(this.getSong(), this.loopSHeader);
                                            if (header != null) {
                                                this.loopSPosition = header.getStart();
                                            }
                                        }
                                    }
                                }
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.checkDevices = function () {
                            try {
                                this.lock();
                                this.getSequencer().check();
                                if (this.getOutputPort() != null) {
                                    this.getOutputPort().check();
                                }
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.getVolume = function () {
                            try {
                                this.lock();
                                return this.volume;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.setVolume = function (volume) {
                            try {
                                this.lock();
                                this.volume = volume;
                                if (this.isRunning()) {
                                    this.updateChannels();
                                }
                            }
                            catch (e) {
                                console.error(e.message, e);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.setRunning = function (running) {
                            try {
                                this.lock();
                                this.running = running;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.isRunning = function () {
                            try {
                                this.lock();
                                return (this.running || this.getSequencer().isRunning());
                            }
                            catch (e) {
                                console.error(e.message, e);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                            return false;
                        };
                        MidiPlayer.prototype.isPaused = function () {
                            try {
                                this.lock();
                                return this.paused;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.setPaused = function (paused) {
                            try {
                                this.lock();
                                this.paused = paused;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.isChangeTickPosition = function () {
                            try {
                                this.lock();
                                return this.__changeTickPosition;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.setChangeTickPosition = function (changeTickPosition) {
                            try {
                                this.lock();
                                this.__changeTickPosition = changeTickPosition;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.setTickPosition = function (position) {
                            try {
                                this.lock();
                                this.tickPosition = position;
                                this.setChangeTickPosition(true);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.getTickPosition = function () {
                            try {
                                this.lock();
                                return this.tickPosition;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.changeTickPosition = function () {
                            try {
                                this.lock();
                                if (this.isRunning()) {
                                    if (this.tickPosition < this.getLoopSPosition()) {
                                        this.tickPosition = this.getLoopSPosition();
                                    }
                                    this.getSequencer().setTickPosition(this.tickPosition);
                                }
                                this.setChangeTickPosition(false);
                            }
                            catch (e) {
                                console.error(e.message, e);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.addSequence = function () {
                            try {
                                this.lock();
                                var midiSequenceParser = new org.herac.tuxguitar.player.base.MidiSequenceParser(this.documentManager.getSong(), this.documentManager.getSongManager(), org.herac.tuxguitar.player.base.MidiSequenceParser.DEFAULT_PLAY_FLAGS_$LI$());
                                midiSequenceParser.setTempoPercent(this.getMode().getCurrentPercent());
                                midiSequenceParser.setSHeader(this.getLoopSHeader());
                                midiSequenceParser.setEHeader(this.getLoopEHeader());
                                midiSequenceParser.setMetronomeChannelId(this.getPercussionChannelId());
                                midiSequenceParser.parse(this.getSequencer().createSequence(this.getSong().countTracks() + 2));
                                this.infoTrack = midiSequenceParser.getInfoTrack();
                                this.metronomeTrack = midiSequenceParser.getMetronomeTrack();
                            }
                            catch (e) {
                                console.error(e.message, e);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.resetChannels = function () {
                            try {
                                this.lock();
                                this.closeChannels();
                                this.updateChannels();
                            }
                            catch (e) {
                                console.error(e.message, e);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.closeChannels = function () {
                            try {
                                this.lock();
                                var iterator = this.getChannelRouter().getMidiChannelIds().iterator();
                                while ((iterator.hasNext())) {
                                    var channelId = (iterator.next() | 0);
                                    this.getSynthesizerProxy().closeChannel(this.getChannelRouter().getMidiChannel(channelId));
                                    this.getChannelRouter().removeMidiChannel(channelId);
                                }
                                ;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.updateChannels = function () {
                            try {
                                this.lock();
                                var oldChannelIds = this.getChannelRouter().getMidiChannelIds();
                                var iterator = oldChannelIds.iterator();
                                while ((iterator.hasNext())) {
                                    var channelId = (iterator.next() | 0);
                                    var removableChannel = (this.getSongManager().getChannel(this.getSong(), channelId) == null);
                                    if (!removableChannel) {
                                        var midiChannel = this.getChannelRouter().getMidiChannel(channelId);
                                        if (midiChannel != null) {
                                            removableChannel = (!this.getSynthesizerProxy().isChannelOpen(midiChannel));
                                        }
                                    }
                                    if (removableChannel) {
                                        this.getSynthesizerProxy().closeChannel(this.getChannelRouter().getMidiChannel(channelId));
                                        this.getChannelRouter().removeMidiChannel(channelId);
                                    }
                                }
                                ;
                                var newChannelIds = this.getChannelRouter().getMidiChannelIds();
                                var tgChannels = this.getSong().getChannels();
                                while ((tgChannels.hasNext())) {
                                    var tgChannel = tgChannels.next();
                                    if (!newChannelIds.contains(new Number(tgChannel.getChannelId()))) {
                                        var midiChannel = this.getSynthesizerProxy().openChannel(tgChannel.getChannelId());
                                        if (midiChannel != null) {
                                            this.getChannelRouter().addMidiChannel(tgChannel.getChannelId(), midiChannel);
                                        }
                                    }
                                }
                                ;
                                tgChannels = this.getSong().getChannels();
                                while ((tgChannels.hasNext())) {
                                    this.updateChannel(tgChannels.next());
                                }
                                ;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.updateChannel = function (channel) {
                            try {
                                this.lock();
                                this.updateParameters(channel);
                                this.updateProgram$org_herac_tuxguitar_song_models_TGChannel(channel);
                                this.updateController$org_herac_tuxguitar_song_models_TGChannel(channel);
                                this.updateDefaultControllers(channel);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.updateParameters = function (tgChannel) {
                            try {
                                this.lock();
                                this.updateParameter(tgChannel, org.herac.tuxguitar.player.base.MidiParameters.SENDING_PARAMS, javaemul.internal.BooleanHelper.TRUE.toString());
                                var parameters = tgChannel.getParameters();
                                while ((parameters.hasNext())) {
                                    var tgChannelParameter = parameters.next();
                                    this.updateParameter(tgChannel, tgChannelParameter.getKey(), tgChannelParameter.getValue());
                                }
                                ;
                                this.updateParameter(tgChannel, org.herac.tuxguitar.player.base.MidiParameters.SENDING_PARAMS, javaemul.internal.BooleanHelper.FALSE.toString());
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.updateParameter = function (tgChannel, key, value) {
                            try {
                                this.lock();
                                this.getOutputTransmitter().sendParameter(tgChannel.getChannelId(), key, value);
                            }
                            catch (e) {
                                console.error(e.message, e);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.updateProgram$org_herac_tuxguitar_song_models_TGChannel = function (channel) {
                            try {
                                this.lock();
                                this.updateProgram$int$int$int(channel.getChannelId(), channel.getBank(), channel.getProgram());
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.updateProgram$int$int$int = function (channelId, bank, program) {
                            try {
                                this.lock();
                                if (bank >= 0 && bank <= 128) {
                                    this.getOutputTransmitter().sendControlChange(channelId, org.herac.tuxguitar.player.base.MidiControllers.BANK_SELECT, bank);
                                }
                                if (program >= 0 && program <= 127) {
                                    this.getOutputTransmitter().sendProgramChange(channelId, program);
                                }
                            }
                            catch (e) {
                                console.error(e.message, e);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.updateProgram = function (channelId, bank, program) {
                            if (((typeof channelId === 'number') || channelId === null) && ((typeof bank === 'number') || bank === null) && ((typeof program === 'number') || program === null)) {
                                return this.updateProgram$int$int$int(channelId, bank, program);
                            }
                            else if (((channelId != null && channelId instanceof org.herac.tuxguitar.song.models.TGChannel) || channelId === null) && bank === undefined && program === undefined) {
                                return this.updateProgram$org_herac_tuxguitar_song_models_TGChannel(channelId);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        MidiPlayer.prototype.updateController$org_herac_tuxguitar_song_models_TGChannel = function (channel) {
                            try {
                                this.lock();
                                var volume = (((this.getVolume() / 10.0) * channel.getVolume()) | 0);
                                var balance = channel.getBalance();
                                var chorus = channel.getChorus();
                                var reverb = channel.getReverb();
                                var phaser = channel.getPhaser();
                                var tremolo = channel.getTremolo();
                                this.updateController$int$int$int$int$int$int$int$int(channel.getChannelId(), volume, balance, chorus, reverb, phaser, tremolo, 127);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.updateController$int$int$int$int$int$int$int$int = function (channelId, volume, balance, chorus, reverb, phaser, tremolo, expression) {
                            try {
                                this.lock();
                                this.getOutputTransmitter().sendControlChange(channelId, org.herac.tuxguitar.player.base.MidiControllers.VOLUME, volume);
                                this.getOutputTransmitter().sendControlChange(channelId, org.herac.tuxguitar.player.base.MidiControllers.BALANCE, balance);
                                this.getOutputTransmitter().sendControlChange(channelId, org.herac.tuxguitar.player.base.MidiControllers.CHORUS, chorus);
                                this.getOutputTransmitter().sendControlChange(channelId, org.herac.tuxguitar.player.base.MidiControllers.REVERB, reverb);
                                this.getOutputTransmitter().sendControlChange(channelId, org.herac.tuxguitar.player.base.MidiControllers.PHASER, phaser);
                                this.getOutputTransmitter().sendControlChange(channelId, org.herac.tuxguitar.player.base.MidiControllers.TREMOLO, tremolo);
                                this.getOutputTransmitter().sendControlChange(channelId, org.herac.tuxguitar.player.base.MidiControllers.EXPRESSION, expression);
                            }
                            catch (e) {
                                console.error(e.message, e);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.updateController = function (channelId, volume, balance, chorus, reverb, phaser, tremolo, expression) {
                            if (((typeof channelId === 'number') || channelId === null) && ((typeof volume === 'number') || volume === null) && ((typeof balance === 'number') || balance === null) && ((typeof chorus === 'number') || chorus === null) && ((typeof reverb === 'number') || reverb === null) && ((typeof phaser === 'number') || phaser === null) && ((typeof tremolo === 'number') || tremolo === null) && ((typeof expression === 'number') || expression === null)) {
                                return this.updateController$int$int$int$int$int$int$int$int(channelId, volume, balance, chorus, reverb, phaser, tremolo, expression);
                            }
                            else if (((channelId != null && channelId instanceof org.herac.tuxguitar.song.models.TGChannel) || channelId === null) && volume === undefined && balance === undefined && chorus === undefined && reverb === undefined && phaser === undefined && tremolo === undefined && expression === undefined) {
                                return this.updateController$org_herac_tuxguitar_song_models_TGChannel(channelId);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        MidiPlayer.prototype.updateDefaultControllers = function (tgChannel) {
                            try {
                                this.lock();
                                this.getOutputTransmitter().sendControlChange(tgChannel.getChannelId(), org.herac.tuxguitar.player.base.MidiControllers.RPN_MSB, 0);
                                this.getOutputTransmitter().sendControlChange(tgChannel.getChannelId(), org.herac.tuxguitar.player.base.MidiControllers.RPN_LSB, 0);
                                this.getOutputTransmitter().sendControlChange(tgChannel.getChannelId(), org.herac.tuxguitar.player.base.MidiControllers.DATA_ENTRY_MSB, 12);
                                this.getOutputTransmitter().sendControlChange(tgChannel.getChannelId(), org.herac.tuxguitar.player.base.MidiControllers.DATA_ENTRY_LSB, 0);
                            }
                            catch (e) {
                                console.error(e.message, e);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.updateTracks = function () {
                            try {
                                this.lock();
                                this.anySolo = false;
                                var tracksIt = this.getSong().getTracks();
                                while ((tracksIt.hasNext())) {
                                    var track = tracksIt.next();
                                    this.updateTrack(track);
                                    this.anySolo = ((!this.anySolo) ? track.isSolo() : this.anySolo);
                                }
                                ;
                                this.afterUpdate();
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.updateTrack = function (track) {
                            try {
                                this.lock();
                                this.getSequencer().setMute(track.getNumber(), track.isMute());
                                this.getSequencer().setSolo(track.getNumber(), track.isSolo());
                            }
                            catch (e) {
                                console.error(e.message, e);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.afterUpdate = function () {
                            try {
                                this.lock();
                                this.getSequencer().setSolo(this.infoTrack, this.anySolo);
                                this.getSequencer().setSolo(this.metronomeTrack, (this.isMetronomeEnabled() && this.anySolo));
                            }
                            catch (e) {
                                console.error(e.message, e);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.isMetronomeEnabled = function () {
                            return this.metronomeEnabled;
                        };
                        MidiPlayer.prototype.setMetronomeEnabled = function (metronomeEnabled) {
                            try {
                                this.lock();
                                this.metronomeEnabled = metronomeEnabled;
                                this.getSequencer().setMute(this.metronomeTrack, !this.isMetronomeEnabled());
                                this.getSequencer().setSolo(this.metronomeTrack, (this.isMetronomeEnabled() && this.anySolo));
                            }
                            catch (e) {
                                console.error(e.message, e);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.playBeat$org_herac_tuxguitar_song_models_TGBeat = function (beat) {
                            try {
                                this.lock();
                                var notes = (new java.util.ArrayList());
                                for (var v = 0; v < beat.countVoices(); v++) {
                                    notes.addAll(beat.getVoice(v).getNotes());
                                }
                                this.playBeat$org_herac_tuxguitar_song_models_TGTrack$java_util_List(beat.getMeasure().getTrack(), notes);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.playBeat$org_herac_tuxguitar_song_models_TGTrack$java_util_List = function (track, notes) {
                            try {
                                this.lock();
                                var tgChannel = this.getSongManager().getChannel(this.getSong(), track.getChannelId());
                                if (tgChannel != null) {
                                    var channelId = tgChannel.getChannelId();
                                    var bank = tgChannel.getBank();
                                    var program = tgChannel.getProgram();
                                    var volume = (((this.getVolume() / 10.0) * tgChannel.getVolume()) | 0);
                                    var balance = tgChannel.getBalance();
                                    var chorus = tgChannel.getChorus();
                                    var reverb = tgChannel.getReverb();
                                    var phaser = tgChannel.getPhaser();
                                    var tremolo = tgChannel.getTremolo();
                                    var size = notes.size();
                                    var beat = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
                                        return 0;
                                    }
                                    else {
                                        var array = [];
                                        for (var i = 0; i < dims[0]; i++) {
                                            array.push(allocate(dims.slice(1)));
                                        }
                                        return array;
                                    } }; return allocate(dims); })([size, 2]);
                                    for (var i = 0; i < size; i++) {
                                        var note = notes.get(i);
                                        beat[i][0] = track.getOffset() + (note.getValue() + track.getStrings().get(note.getString() - 1).getValue());
                                        beat[i][1] = note.getVelocity();
                                    }
                                    org.herac.tuxguitar.thread.TGThreadManager.getInstance(this.context).start(new MidiPlayer.MidiPlayer$2(this, channelId, bank, program, volume, balance, chorus, reverb, phaser, tremolo, beat));
                                }
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.playBeat$int$int$int$int$int$int$int$int$int$int_A_A = function (channelId, bank, program, volume, balance, chorus, reverb, phaser, tremolo, beat) {
                            this.playBeat$int$int$int$int$int$int$int$int$int$int_A_A$long$int(channelId, bank, program, volume, balance, chorus, reverb, phaser, tremolo, beat, 500, 0);
                        };
                        MidiPlayer.prototype.playBeat$int$int$int$int$int$int$int$int$int$int_A_A$long$int = function (channelId, bank, program, volume, balance, chorus, reverb, phaser, tremolo, beat, duration, interval) {
                            try {
                                this.updateChannels();
                                var sync = new Object();
                                for (var i = 0; i < beat.length; i++) {
                                    this.getOutputTransmitter().sendNoteOn(channelId, beat[i][0], beat[i][1], -1, false);
                                    if (interval > 0) {
                                        {
                                            sync.wait(interval);
                                        }
                                        ;
                                    }
                                }
                                {
                                    sync.wait(duration);
                                }
                                ;
                                for (var i = 0; i < beat.length; i++) {
                                    this.getOutputTransmitter().sendNoteOff(channelId, beat[i][0], beat[i][1], -1, false);
                                }
                            }
                            catch (throwable) {
                                console.error(throwable.message, throwable);
                            }
                            ;
                        };
                        MidiPlayer.prototype.playBeat = function (channelId, bank, program, volume, balance, chorus, reverb, phaser, tremolo, beat, duration, interval) {
                            if (((typeof channelId === 'number') || channelId === null) && ((typeof bank === 'number') || bank === null) && ((typeof program === 'number') || program === null) && ((typeof volume === 'number') || volume === null) && ((typeof balance === 'number') || balance === null) && ((typeof chorus === 'number') || chorus === null) && ((typeof reverb === 'number') || reverb === null) && ((typeof phaser === 'number') || phaser === null) && ((typeof tremolo === 'number') || tremolo === null) && ((beat != null && beat instanceof Array && (beat.length == 0 || beat[0] == null || beat[0] instanceof Array)) || beat === null) && ((typeof duration === 'number') || duration === null) && ((typeof interval === 'number') || interval === null)) {
                                return this.playBeat$int$int$int$int$int$int$int$int$int$int_A_A$long$int(channelId, bank, program, volume, balance, chorus, reverb, phaser, tremolo, beat, duration, interval);
                            }
                            else if (((typeof channelId === 'number') || channelId === null) && ((typeof bank === 'number') || bank === null) && ((typeof program === 'number') || program === null) && ((typeof volume === 'number') || volume === null) && ((typeof balance === 'number') || balance === null) && ((typeof chorus === 'number') || chorus === null) && ((typeof reverb === 'number') || reverb === null) && ((typeof phaser === 'number') || phaser === null) && ((typeof tremolo === 'number') || tremolo === null) && ((beat != null && beat instanceof Array && (beat.length == 0 || beat[0] == null || beat[0] instanceof Array)) || beat === null) && duration === undefined && interval === undefined) {
                                return this.playBeat$int$int$int$int$int$int$int$int$int$int_A_A(channelId, bank, program, volume, balance, chorus, reverb, phaser, tremolo, beat);
                            }
                            else if (((channelId != null && channelId instanceof org.herac.tuxguitar.song.models.TGTrack) || channelId === null) && ((bank != null && (bank["__interfaces"] != null && bank["__interfaces"].indexOf("java.util.List") >= 0 || bank.constructor != null && bank.constructor["__interfaces"] != null && bank.constructor["__interfaces"].indexOf("java.util.List") >= 0)) || bank === null) && program === undefined && volume === undefined && balance === undefined && chorus === undefined && reverb === undefined && phaser === undefined && tremolo === undefined && beat === undefined && duration === undefined && interval === undefined) {
                                return this.playBeat$org_herac_tuxguitar_song_models_TGTrack$java_util_List(channelId, bank);
                            }
                            else if (((channelId != null && channelId instanceof org.herac.tuxguitar.song.models.TGBeat) || channelId === null) && bank === undefined && program === undefined && volume === undefined && balance === undefined && chorus === undefined && reverb === undefined && phaser === undefined && tremolo === undefined && beat === undefined && duration === undefined && interval === undefined) {
                                return this.playBeat$org_herac_tuxguitar_song_models_TGBeat(channelId);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        MidiPlayer.prototype.getPercussionChannelId = function () {
                            try {
                                this.lock();
                                var tgChannels = this.getSong().getChannels();
                                while ((tgChannels.hasNext())) {
                                    var tgChannel = tgChannels.next();
                                    if (tgChannel.isPercussionChannel()) {
                                        return tgChannel.getChannelId();
                                    }
                                }
                                ;
                                return -1;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.loadSequencer = function (sequencer) {
                            try {
                                this.lock();
                                this.closeSequencer();
                                this.sequencer = sequencer;
                                this.sequencer.open();
                                this.sequencer.setTransmitter(this.getOutputTransmitter());
                            }
                            catch (throwable) {
                                this.sequencer = null;
                                return false;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                            return true;
                        };
                        MidiPlayer.prototype.loadOutputPort = function (port) {
                            try {
                                this.lock();
                                this.closeOutputPort();
                                this.outputPort = port;
                                this.outputPort.open();
                                this.getSynthesizerProxy().setMidiSynthesizer(this.outputPort.getSynthesizer());
                            }
                            catch (throwable) {
                                this.outputPort = null;
                                return false;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                            return true;
                        };
                        MidiPlayer.prototype.openOutputPort$java_lang_String = function (key) {
                            try {
                                this.lock();
                                this.openOutputPort$java_lang_String$boolean(key, false);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.openOutputPort$java_lang_String$boolean = function (key, tryFirst) {
                            try {
                                this.lock();
                                this.outputPortKey = key;
                                this.openOutputPort$java_util_List$boolean(this.listOutputPorts(), tryFirst);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.openOutputPort = function (key, tryFirst) {
                            if (((typeof key === 'string') || key === null) && ((typeof tryFirst === 'boolean') || tryFirst === null)) {
                                return this.openOutputPort$java_lang_String$boolean(key, tryFirst);
                            }
                            else if (((key != null && (key["__interfaces"] != null && key["__interfaces"].indexOf("java.util.List") >= 0 || key.constructor != null && key.constructor["__interfaces"] != null && key.constructor["__interfaces"].indexOf("java.util.List") >= 0)) || key === null) && ((typeof tryFirst === 'boolean') || tryFirst === null)) {
                                return this.openOutputPort$java_util_List$boolean(key, tryFirst);
                            }
                            else if (((typeof key === 'string') || key === null) && tryFirst === undefined) {
                                return this.openOutputPort$java_lang_String(key);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        MidiPlayer.prototype.openOutputPort$java_util_List$boolean = function (ports, tryFirst) {
                            try {
                                this.lock();
                                if (this.outputPortKey != null && !this.isOutputPortOpen(this.outputPortKey)) {
                                    this.closeOutputPort();
                                    for (var i = 0; i < ports.size(); i++) {
                                        var port = ports.get(i);
                                        if ((function (o1, o2) { if (o1.equals) {
                                            return o1.equals(o2);
                                        }
                                        else {
                                            return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                        } })(port.getKey(), this.outputPortKey)) {
                                            if (this.loadOutputPort(port)) {
                                                return;
                                            }
                                        }
                                    }
                                }
                                if (this.getOutputPort() == null && !ports.isEmpty() && tryFirst) {
                                    this.loadOutputPort(ports.get(0));
                                }
                            }
                            catch (throwable) {
                                console.error(throwable.message, throwable);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.openSequencer$java_lang_String = function (key) {
                            try {
                                this.lock();
                                this.openSequencer$java_lang_String$boolean(key, false);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.openSequencer$java_lang_String$boolean = function (key, tryFirst) {
                            try {
                                this.lock();
                                this.sequencerKey = key;
                                this.openSequencer$java_util_List$boolean(this.listSequencers(), tryFirst);
                            }
                            catch (throwable) {
                                console.error(throwable.message, throwable);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.openSequencer = function (key, tryFirst) {
                            if (((typeof key === 'string') || key === null) && ((typeof tryFirst === 'boolean') || tryFirst === null)) {
                                return this.openSequencer$java_lang_String$boolean(key, tryFirst);
                            }
                            else if (((key != null && (key["__interfaces"] != null && key["__interfaces"].indexOf("java.util.List") >= 0 || key.constructor != null && key.constructor["__interfaces"] != null && key.constructor["__interfaces"].indexOf("java.util.List") >= 0)) || key === null) && ((typeof tryFirst === 'boolean') || tryFirst === null)) {
                                return this.openSequencer$java_util_List$boolean(key, tryFirst);
                            }
                            else if (((typeof key === 'string') || key === null) && tryFirst === undefined) {
                                return this.openSequencer$java_lang_String(key);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        MidiPlayer.prototype.openSequencer$java_util_List$boolean = function (sequencers, tryFirst) {
                            try {
                                this.lock();
                                if (this.sequencerKey != null && !this.isSequencerOpen(this.sequencerKey)) {
                                    this.closeSequencer();
                                    for (var i = 0; i < sequencers.size(); i++) {
                                        var sequencer = sequencers.get(i);
                                        if ((function (o1, o2) { if (o1.equals) {
                                            return o1.equals(o2);
                                        }
                                        else {
                                            return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                        } })(sequencer.getKey(), this.sequencerKey)) {
                                            if (this.loadSequencer(sequencer)) {
                                                return;
                                            }
                                        }
                                    }
                                }
                                if ((this.getSequencer() != null && this.getSequencer() instanceof org.herac.tuxguitar.player.base.MidiSequencerEmpty) && !sequencers.isEmpty() && tryFirst) {
                                    this.loadSequencer(sequencers.get(0));
                                }
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.player.base.MidiPlayerException(throwable.message, throwable);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.listOutputPorts = function () {
                            try {
                                this.lock();
                                var ports = (new java.util.ArrayList());
                                var it = this.outputPortProviders.iterator();
                                while ((it.hasNext())) {
                                    try {
                                        var provider = it.next();
                                        ports.addAll(provider.listPorts());
                                    }
                                    catch (throwable) {
                                        console.error(throwable.message, throwable);
                                    }
                                    ;
                                }
                                ;
                                return ports;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.listSequencers = function () {
                            try {
                                this.lock();
                                var sequencers = (new java.util.ArrayList());
                                var it = this.sequencerProviders.iterator();
                                while ((it.hasNext())) {
                                    try {
                                        var provider = it.next();
                                        sequencers.addAll(provider.listSequencers());
                                    }
                                    catch (throwable) {
                                        console.error(throwable.message, throwable);
                                    }
                                    ;
                                }
                                ;
                                return sequencers;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.closeSequencer = function () {
                            try {
                                this.lock();
                                if (this.isRunning()) {
                                    this.stop();
                                }
                                if (this.sequencer != null) {
                                    this.sequencer.close();
                                    this.sequencer = null;
                                }
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.player.base.MidiPlayerException(throwable.message, throwable);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.closeOutputPort = function () {
                            try {
                                this.lock();
                                if (this.isRunning()) {
                                    this.stop();
                                }
                                if (this.outputPort != null) {
                                    this.closeChannels();
                                    this.getSynthesizerProxy().setMidiSynthesizer(null);
                                    this.outputPort.close();
                                    this.outputPort = null;
                                }
                            }
                            catch (throwable) {
                                console.error(throwable.message, throwable);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.isSequencerOpen = function (key) {
                            try {
                                this.lock();
                                if (key != null) {
                                    var currentKey = this.getSequencer().getKey();
                                    if (currentKey == null) {
                                        return false;
                                    }
                                    return (function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(currentKey, key);
                                }
                                return false;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.isOutputPortOpen = function (key) {
                            try {
                                this.lock();
                                if (key != null && this.getOutputPort() != null) {
                                    var currentKey = this.getOutputPort().getKey();
                                    if (currentKey == null) {
                                        return false;
                                    }
                                    return (function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(currentKey, key);
                                }
                                return false;
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.addOutputPortProvider$org_herac_tuxguitar_player_base_MidiOutputPortProvider = function (provider) {
                            try {
                                this.lock();
                                this.addOutputPortProvider$org_herac_tuxguitar_player_base_MidiOutputPortProvider$boolean(provider, this.isTryOpenFistDevice());
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.addOutputPortProvider$org_herac_tuxguitar_player_base_MidiOutputPortProvider$boolean = function (provider, tryFirst) {
                            try {
                                this.lock();
                                this.outputPortProviders.add(provider);
                                this.openOutputPort$java_util_List$boolean(provider.listPorts(), tryFirst);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.addOutputPortProvider = function (provider, tryFirst) {
                            if (((provider != null && (provider["__interfaces"] != null && provider["__interfaces"].indexOf("org.herac.tuxguitar.player.base.MidiOutputPortProvider") >= 0 || provider.constructor != null && provider.constructor["__interfaces"] != null && provider.constructor["__interfaces"].indexOf("org.herac.tuxguitar.player.base.MidiOutputPortProvider") >= 0)) || provider === null) && ((typeof tryFirst === 'boolean') || tryFirst === null)) {
                                return this.addOutputPortProvider$org_herac_tuxguitar_player_base_MidiOutputPortProvider$boolean(provider, tryFirst);
                            }
                            else if (((provider != null && (provider["__interfaces"] != null && provider["__interfaces"].indexOf("org.herac.tuxguitar.player.base.MidiOutputPortProvider") >= 0 || provider.constructor != null && provider.constructor["__interfaces"] != null && provider.constructor["__interfaces"].indexOf("org.herac.tuxguitar.player.base.MidiOutputPortProvider") >= 0)) || provider === null) && tryFirst === undefined) {
                                return this.addOutputPortProvider$org_herac_tuxguitar_player_base_MidiOutputPortProvider(provider);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        MidiPlayer.prototype.addSequencerProvider$org_herac_tuxguitar_player_base_MidiSequencerProvider = function (provider) {
                            try {
                                this.lock();
                                this.addSequencerProvider$org_herac_tuxguitar_player_base_MidiSequencerProvider$boolean(provider, this.isTryOpenFistDevice());
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.addSequencerProvider$org_herac_tuxguitar_player_base_MidiSequencerProvider$boolean = function (provider, tryFirst) {
                            try {
                                this.lock();
                                this.sequencerProviders.add(provider);
                                this.openSequencer$java_util_List$boolean(provider.listSequencers(), tryFirst);
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.addSequencerProvider = function (provider, tryFirst) {
                            if (((provider != null && (provider["__interfaces"] != null && provider["__interfaces"].indexOf("org.herac.tuxguitar.player.base.MidiSequencerProvider") >= 0 || provider.constructor != null && provider.constructor["__interfaces"] != null && provider.constructor["__interfaces"].indexOf("org.herac.tuxguitar.player.base.MidiSequencerProvider") >= 0)) || provider === null) && ((typeof tryFirst === 'boolean') || tryFirst === null)) {
                                return this.addSequencerProvider$org_herac_tuxguitar_player_base_MidiSequencerProvider$boolean(provider, tryFirst);
                            }
                            else if (((provider != null && (provider["__interfaces"] != null && provider["__interfaces"].indexOf("org.herac.tuxguitar.player.base.MidiSequencerProvider") >= 0 || provider.constructor != null && provider.constructor["__interfaces"] != null && provider.constructor["__interfaces"].indexOf("org.herac.tuxguitar.player.base.MidiSequencerProvider") >= 0)) || provider === null) && tryFirst === undefined) {
                                return this.addSequencerProvider$org_herac_tuxguitar_player_base_MidiSequencerProvider(provider);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        MidiPlayer.prototype.removeOutputPortProvider = function (provider) {
                            try {
                                this.lock();
                                this.outputPortProviders.remove(provider);
                                var current = this.getOutputPort();
                                if (current != null) {
                                    var it = provider.listPorts().iterator();
                                    while ((it.hasNext())) {
                                        var port = it.next();
                                        if ((function (o1, o2) { if (o1.equals) {
                                            return o1.equals(o2);
                                        }
                                        else {
                                            return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                        } })(port.getKey(), current.getKey())) {
                                            this.closeOutputPort();
                                            break;
                                        }
                                    }
                                    ;
                                }
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.removeSequencerProvider = function (provider) {
                            try {
                                this.lock();
                                this.sequencerProviders.remove(provider);
                                var current = this.getSequencer();
                                if (!(current != null && current instanceof org.herac.tuxguitar.player.base.MidiSequencerEmpty) && current != null) {
                                    var it = provider.listSequencers().iterator();
                                    while ((it.hasNext())) {
                                        var sequencer = it.next();
                                        if ((function (o1, o2) { if (o1.equals) {
                                            return o1.equals(o2);
                                        }
                                        else {
                                            return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                        } })(current.getKey(), sequencer.getKey())) {
                                            this.closeSequencer();
                                            break;
                                        }
                                    }
                                    ;
                                }
                            }
                            finally {
                                this.unlock();
                            }
                            ;
                        };
                        MidiPlayer.prototype.addListener = function (listener) {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).addListener(org.herac.tuxguitar.player.base.MidiPlayerEvent.EVENT_TYPE, listener);
                        };
                        MidiPlayer.prototype.removeListener = function (listener) {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).removeListener(org.herac.tuxguitar.player.base.MidiPlayerEvent.EVENT_TYPE, listener);
                        };
                        MidiPlayer.prototype.notifyStarted = function () {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).fireEvent(new org.herac.tuxguitar.player.base.MidiPlayerEvent(org.herac.tuxguitar.player.base.MidiPlayerEvent.NOTIFY_STARTED));
                        };
                        MidiPlayer.prototype.notifyStopped = function () {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).fireEvent(new org.herac.tuxguitar.player.base.MidiPlayerEvent(org.herac.tuxguitar.player.base.MidiPlayerEvent.NOTIFY_STOPPED));
                        };
                        MidiPlayer.prototype.notifyCountDownStarted = function () {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).fireEvent(new org.herac.tuxguitar.player.base.MidiPlayerEvent(org.herac.tuxguitar.player.base.MidiPlayerEvent.NOTIFY_COUNT_DOWN_STARTED));
                        };
                        MidiPlayer.prototype.notifyCountDownStopped = function () {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).fireEvent(new org.herac.tuxguitar.player.base.MidiPlayerEvent(org.herac.tuxguitar.player.base.MidiPlayerEvent.NOTIFY_COUNT_DOWN_STOPPED));
                        };
                        MidiPlayer.prototype.notifyLoop = function () {
                            org.herac.tuxguitar.event.TGEventManager.getInstance(this.context).fireEvent(new org.herac.tuxguitar.player.base.MidiPlayerEvent(org.herac.tuxguitar.player.base.MidiPlayerEvent.NOTIFY_LOOP));
                        };
                        MidiPlayer.prototype.getInstruments = function () {
                            return org.herac.tuxguitar.player.base.MidiInstrument.INSTRUMENT_LIST_$LI$();
                        };
                        MidiPlayer.prototype.getPercussionKeys = function () {
                            return org.herac.tuxguitar.player.base.MidiPercussionKey.PERCUSSION_KEY_LIST_$LI$();
                        };
                        MidiPlayer.prototype.getLoopSHeader = function () {
                            return this.loopSHeader;
                        };
                        MidiPlayer.prototype.getLoopEHeader = function () {
                            return this.loopEHeader;
                        };
                        MidiPlayer.prototype.getLoopSPosition = function () {
                            return this.loopSPosition;
                        };
                        MidiPlayer.prototype.isTryOpenFistDevice = function () {
                            return this.tryOpenFistDevice;
                        };
                        MidiPlayer.prototype.setTryOpenFistDevice = function (tryOpenFistDevice) {
                            this.tryOpenFistDevice = tryOpenFistDevice;
                        };
                        MidiPlayer.prototype.getSongManager = function () {
                            return this.documentManager.getSongManager();
                        };
                        MidiPlayer.prototype.getSong = function () {
                            return this.documentManager.getSong();
                        };
                        MidiPlayer.prototype.getMode = function () {
                            if (this.mode == null) {
                                this.mode = new org.herac.tuxguitar.player.base.MidiPlayerMode();
                            }
                            return this.mode;
                        };
                        MidiPlayer.prototype.getCountDown = function () {
                            if (this.countDown == null) {
                                this.countDown = new org.herac.tuxguitar.player.base.MidiPlayerCountDown(this);
                            }
                            return this.countDown;
                        };
                        MidiPlayer.prototype.getOutputTransmitter = function () {
                            if (this.outputTransmitter == null) {
                                this.outputTransmitter = new org.herac.tuxguitar.player.base.MidiTransmitter();
                                this.outputTransmitter.addReceiver(this.getChannelRouter().getId(), this.getChannelRouter());
                            }
                            return this.outputTransmitter;
                        };
                        MidiPlayer.prototype.getOutputPort = function () {
                            return this.outputPort;
                        };
                        MidiPlayer.prototype.getChannelRouter = function () {
                            if (this.channelRouter == null) {
                                this.channelRouter = new org.herac.tuxguitar.player.base.MidiChannelRouter();
                            }
                            return this.channelRouter;
                        };
                        MidiPlayer.prototype.getSynthesizerProxy = function () {
                            if (this.synthesizerProxy == null) {
                                this.synthesizerProxy = new org.herac.tuxguitar.player.base.MidiSynthesizerProxy();
                            }
                            return this.synthesizerProxy;
                        };
                        MidiPlayer.prototype.getSequencer = function () {
                            if (this.sequencer == null) {
                                this.sequencer = new org.herac.tuxguitar.player.base.MidiSequencerEmpty();
                            }
                            return this.sequencer;
                        };
                        MidiPlayer.getInstance = function (context) {
                            return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(MidiPlayer), new MidiPlayer.MidiPlayer$3());
                        };
                        return MidiPlayer;
                    }());
                    MidiPlayer.MAX_VOLUME = 10;
                    MidiPlayer.TIMER_DELAY = 10;
                    base.MidiPlayer = MidiPlayer;
                    MidiPlayer["__class"] = "org.herac.tuxguitar.player.base.MidiPlayer";
                    (function (MidiPlayer) {
                        var MidiPlayer$0 = (function () {
                            function MidiPlayer$0(__parent, notifyStarted) {
                                this.notifyStarted = notifyStarted;
                                this.__parent = __parent;
                            }
                            MidiPlayer$0.prototype.run = function () {
                                this.__parent.runPlayStartProcess(this.notifyStarted);
                            };
                            return MidiPlayer$0;
                        }());
                        MidiPlayer.MidiPlayer$0 = MidiPlayer$0;
                        MidiPlayer$0["__interfaces"] = ["java.lang.Runnable"];
                        var MidiPlayer$1 = (function () {
                            function MidiPlayer$1(__parent) {
                                this.__parent = __parent;
                            }
                            MidiPlayer$1.prototype.process = function () {
                                return (this.__parent.runPlayLoopProcess() ? org.herac.tuxguitar.player.base.MidiPlayer.TIMER_DELAY : org.herac.tuxguitar.thread.TGThreadLoop.BREAK);
                            };
                            return MidiPlayer$1;
                        }());
                        MidiPlayer.MidiPlayer$1 = MidiPlayer$1;
                        MidiPlayer$1["__interfaces"] = ["org.herac.tuxguitar.thread.TGThreadLoop"];
                        var MidiPlayer$2 = (function () {
                            function MidiPlayer$2(__parent, channelId, bank, program, volume, balance, chorus, reverb, phaser, tremolo, beat) {
                                this.channelId = channelId;
                                this.bank = bank;
                                this.program = program;
                                this.volume = volume;
                                this.balance = balance;
                                this.chorus = chorus;
                                this.reverb = reverb;
                                this.phaser = phaser;
                                this.tremolo = tremolo;
                                this.beat = beat;
                                this.__parent = __parent;
                            }
                            MidiPlayer$2.prototype.run = function () {
                                this.__parent.playBeat$int$int$int$int$int$int$int$int$int$int_A_A(this.channelId, this.bank, this.program, this.volume, this.balance, this.chorus, this.reverb, this.phaser, this.tremolo, this.beat);
                            };
                            return MidiPlayer$2;
                        }());
                        MidiPlayer.MidiPlayer$2 = MidiPlayer$2;
                        MidiPlayer$2["__interfaces"] = ["java.lang.Runnable"];
                        var MidiPlayer$3 = (function () {
                            function MidiPlayer$3() {
                            }
                            MidiPlayer$3.prototype.createInstance = function (context) {
                                return new org.herac.tuxguitar.player.base.MidiPlayer(context);
                            };
                            return MidiPlayer$3;
                        }());
                        MidiPlayer.MidiPlayer$3 = MidiPlayer$3;
                        MidiPlayer$3["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                    })(MidiPlayer = base.MidiPlayer || (base.MidiPlayer = {}));
                })(base = player.base || (player.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player_1) {
                var base;
                (function (base) {
                    var MidiPlayerCountDown = (function () {
                        function MidiPlayerCountDown(player) {
                            this.player = null;
                            this.enabled = false;
                            this.running = false;
                            this.tempoPercent = 0;
                            this.player = player;
                            this.enabled = false;
                            this.tempoPercent = MidiPlayerCountDown.DEFAULT_TEMPO_PERCENT;
                        }
                        MidiPlayerCountDown.prototype.start = function () {
                            try {
                                this.running = true;
                                var channelId = this.player.getPercussionChannelId();
                                if (channelId >= 0) {
                                    var header = this.findMeasureHeader();
                                    if (header != null) {
                                        var timerLock = new Object();
                                        var tgTempo = (((header.getTempo().getValue() * this.getTempoPercent()) / MidiPlayerCountDown.DEFAULT_TEMPO_PERCENT | 0));
                                        var tgLength = header.getTimeSignature().getDenominator().getTime();
                                        var tickLength = Math.floor((1000.0 * (60.0 / tgTempo * tgLength) / org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME));
                                        var tickStart = java.lang.System.currentTimeMillis();
                                        var tickIndex = 0;
                                        var tickCount = header.getTimeSignature().getNumerator();
                                        while ((this.isRunning() && tickIndex <= tickCount)) {
                                            var currentTime = java.lang.System.currentTimeMillis();
                                            if (tickStart <= currentTime) {
                                                tickStart += tickLength;
                                                tickIndex++;
                                                if (tickIndex <= tickCount) {
                                                    this.player.getOutputTransmitter().sendNoteOn(channelId, 37, org.herac.tuxguitar.song.models.TGVelocities.DEFAULT_$LI$(), -1, false);
                                                    {
                                                        timerLock.wait(1);
                                                    }
                                                    ;
                                                    this.player.getOutputTransmitter().sendNoteOff(channelId, 37, org.herac.tuxguitar.song.models.TGVelocities.DEFAULT_$LI$(), -1, false);
                                                }
                                            }
                                            {
                                                timerLock.wait(10);
                                            }
                                            ;
                                        }
                                        ;
                                    }
                                }
                                this.running = false;
                            }
                            catch (throwable) {
                                console.error(throwable.message, throwable);
                            }
                            ;
                        };
                        MidiPlayerCountDown.prototype.findMeasureHeader = function () {
                            var tick = this.player.getTickPosition();
                            var startPoint = this.player.getLoopSPosition();
                            var start = startPoint;
                            var length = 0;
                            var song = this.player.getSong();
                            var controller = new org.herac.tuxguitar.player.base.MidiRepeatController(song, this.player.getLoopSHeader(), this.player.getLoopEHeader());
                            while ((!controller.finished())) {
                                var header = song.getMeasureHeader(controller.getIndex());
                                controller.process();
                                if (controller.shouldPlay()) {
                                    start += length;
                                    length = header.getLength();
                                    if (tick >= start && tick < (start + length)) {
                                        return header;
                                    }
                                }
                            }
                            ;
                            return null;
                        };
                        MidiPlayerCountDown.prototype.isRunning = function () {
                            return (this.enabled && this.running && this.player.isRunning() && !this.player.isChangeTickPosition());
                        };
                        MidiPlayerCountDown.prototype.isEnabled = function () {
                            return this.enabled;
                        };
                        MidiPlayerCountDown.prototype.setEnabled = function (enabled) {
                            this.enabled = enabled;
                        };
                        MidiPlayerCountDown.prototype.getTempoPercent = function () {
                            return this.tempoPercent;
                        };
                        MidiPlayerCountDown.prototype.setTempoPercent = function (tempoPercent) {
                            this.tempoPercent = tempoPercent;
                        };
                        return MidiPlayerCountDown;
                    }());
                    MidiPlayerCountDown.DEFAULT_TEMPO_PERCENT = 100;
                    base.MidiPlayerCountDown = MidiPlayerCountDown;
                    MidiPlayerCountDown["__class"] = "org.herac.tuxguitar.player.base.MidiPlayerCountDown";
                })(base = player_1.base || (player_1.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var base;
                (function (base) {
                    var MidiPlayerException = (function (_super) {
                        __extends(MidiPlayerException, _super);
                        function MidiPlayerException(message, cause) {
                            var _this = this;
                            if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this, message) || this;
                                _this.message = message;
                            }
                            else if (((typeof message === 'string') || message === null) && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this, message) || this;
                                _this.message = message;
                            }
                            else if (((message != null && message instanceof Error) || message === null) && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                var cause_1 = __args[0];
                                _this = _super.call(this, cause_1) || this;
                                _this.message = cause_1;
                            }
                            else
                                throw new Error('invalid overload');
                            return _this;
                        }
                        return MidiPlayerException;
                    }(Error));
                    MidiPlayerException.serialVersionUID = 1;
                    base.MidiPlayerException = MidiPlayerException;
                    MidiPlayerException["__class"] = "org.herac.tuxguitar.player.base.MidiPlayerException";
                    MidiPlayerException["__interfaces"] = ["java.io.Serializable"];
                })(base = player.base || (player.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var base;
                (function (base) {
                    var MidiPlayerMode = (function () {
                        function MidiPlayerMode() {
                            this.type = 0;
                            this.loop = false;
                            this.loopSHeader = 0;
                            this.loopEHeader = 0;
                            this.simplePercent = 0;
                            this.customPercentFrom = 0;
                            this.customPercentTo = 0;
                            this.customPercentIncrement = 0;
                            this.currentPercent = 0;
                            this.clear();
                        }
                        MidiPlayerMode.prototype.clear = function () {
                            this.loop = false;
                            this.type = MidiPlayerMode.TYPE_SIMPLE;
                            this.simplePercent = MidiPlayerMode.DEFAULT_TEMPO_PERCENT;
                            this.customPercentFrom = MidiPlayerMode.DEFAULT_TEMPO_PERCENT;
                            this.customPercentTo = MidiPlayerMode.DEFAULT_TEMPO_PERCENT;
                            this.customPercentIncrement = 0;
                            this.loopSHeader = -1;
                            this.loopEHeader = -1;
                            this.reset();
                        };
                        MidiPlayerMode.prototype.reset = function () {
                            if (this.getType() === MidiPlayerMode.TYPE_SIMPLE) {
                                this.setCurrentPercent(this.getSimplePercent());
                            }
                            else if (this.getType() === MidiPlayerMode.TYPE_CUSTOM) {
                                this.setCurrentPercent(this.getCustomPercentFrom());
                            }
                        };
                        MidiPlayerMode.prototype.notifyLoop = function () {
                            if (this.getType() === MidiPlayerMode.TYPE_SIMPLE) {
                                this.setCurrentPercent(this.getSimplePercent());
                            }
                            else if (this.getType() === MidiPlayerMode.TYPE_CUSTOM) {
                                this.setCurrentPercent(Math.min(this.getCustomPercentTo(), (this.getCurrentPercent() + this.getCustomPercentIncrement())));
                            }
                        };
                        MidiPlayerMode.prototype.getCurrentPercent = function () {
                            return this.currentPercent;
                        };
                        MidiPlayerMode.prototype.setCurrentPercent = function (currentPercent) {
                            this.currentPercent = currentPercent;
                        };
                        MidiPlayerMode.prototype.isLoop = function () {
                            return this.loop;
                        };
                        MidiPlayerMode.prototype.setLoop = function (loop) {
                            this.loop = loop;
                        };
                        MidiPlayerMode.prototype.getType = function () {
                            return this.type;
                        };
                        MidiPlayerMode.prototype.setType = function (type) {
                            this.type = type;
                        };
                        MidiPlayerMode.prototype.getCustomPercentFrom = function () {
                            return this.customPercentFrom;
                        };
                        MidiPlayerMode.prototype.setCustomPercentFrom = function (customPercentFrom) {
                            this.customPercentFrom = customPercentFrom;
                        };
                        MidiPlayerMode.prototype.getCustomPercentIncrement = function () {
                            return this.customPercentIncrement;
                        };
                        MidiPlayerMode.prototype.setCustomPercentIncrement = function (customPercentIncrement) {
                            this.customPercentIncrement = customPercentIncrement;
                        };
                        MidiPlayerMode.prototype.getCustomPercentTo = function () {
                            return this.customPercentTo;
                        };
                        MidiPlayerMode.prototype.setCustomPercentTo = function (customPercentTo) {
                            this.customPercentTo = customPercentTo;
                        };
                        MidiPlayerMode.prototype.getSimplePercent = function () {
                            return this.simplePercent;
                        };
                        MidiPlayerMode.prototype.setSimplePercent = function (simplePercent) {
                            this.simplePercent = simplePercent;
                        };
                        MidiPlayerMode.prototype.getLoopSHeader = function () {
                            return this.loopSHeader;
                        };
                        MidiPlayerMode.prototype.setLoopSHeader = function (loopSHeader) {
                            this.loopSHeader = loopSHeader;
                        };
                        MidiPlayerMode.prototype.getLoopEHeader = function () {
                            return this.loopEHeader;
                        };
                        MidiPlayerMode.prototype.setLoopEHeader = function (loopEHeader) {
                            this.loopEHeader = loopEHeader;
                        };
                        return MidiPlayerMode;
                    }());
                    MidiPlayerMode.DEFAULT_TEMPO_PERCENT = 100;
                    MidiPlayerMode.TYPE_SIMPLE = 1;
                    MidiPlayerMode.TYPE_CUSTOM = 2;
                    base.MidiPlayerMode = MidiPlayerMode;
                    MidiPlayerMode["__class"] = "org.herac.tuxguitar.player.base.MidiPlayerMode";
                })(base = player.base || (player.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var base;
                (function (base) {
                    var MidiRepeatController = (function () {
                        function MidiRepeatController(song, sHeader, eHeader) {
                            this.song = null;
                            this.count = 0;
                            this.index = 0;
                            this.lastIndex = 0;
                            this.__shouldPlay = false;
                            this.repeatOpen = false;
                            this.repeatStart = 0;
                            this.repeatEnd = 0;
                            this.repeatMove = 0;
                            this.repeatStartIndex = 0;
                            this.repeatNumber = 0;
                            this.repeatAlternative = 0;
                            this.sHeader = 0;
                            this.eHeader = 0;
                            this.song = song;
                            this.sHeader = sHeader;
                            this.eHeader = eHeader;
                            this.count = song.countMeasureHeaders();
                            this.index = 0;
                            this.lastIndex = -1;
                            this.__shouldPlay = true;
                            this.repeatOpen = true;
                            this.repeatAlternative = 0;
                            this.repeatStart = org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME;
                            this.repeatEnd = 0;
                            this.repeatMove = 0;
                            this.repeatStartIndex = 0;
                            this.repeatNumber = 0;
                        }
                        MidiRepeatController.prototype.process = function () {
                            var header = this.song.getMeasureHeader(this.index);
                            if ((this.sHeader !== -1 && header.getNumber() < this.sHeader) || (this.eHeader !== -1 && header.getNumber() > this.eHeader)) {
                                this.__shouldPlay = false;
                                this.index++;
                                return;
                            }
                            if ((this.sHeader !== -1 && header.getNumber() === this.sHeader) || header.getNumber() === 1) {
                                this.repeatStartIndex = this.index;
                                this.repeatStart = header.getStart();
                                this.repeatOpen = true;
                            }
                            this.__shouldPlay = true;
                            if (header.isRepeatOpen()) {
                                this.repeatStartIndex = this.index;
                                this.repeatStart = header.getStart();
                                this.repeatOpen = true;
                                if (this.index > this.lastIndex) {
                                    this.repeatNumber = 0;
                                    this.repeatAlternative = 0;
                                }
                            }
                            else {
                                if (this.repeatAlternative === 0) {
                                    this.repeatAlternative = header.getRepeatAlternative();
                                }
                                if (this.repeatOpen && (this.repeatAlternative > 0) && ((this.repeatAlternative & (1 << (this.repeatNumber))) === 0)) {
                                    this.repeatMove -= header.getLength();
                                    if (header.getRepeatClose() > 0) {
                                        this.repeatAlternative = 0;
                                    }
                                    this.__shouldPlay = false;
                                    this.index++;
                                    return;
                                }
                            }
                            this.lastIndex = Math.max(this.lastIndex, this.index);
                            if (this.repeatOpen && header.getRepeatClose() > 0) {
                                if (this.repeatNumber < header.getRepeatClose() || (this.repeatAlternative > 0)) {
                                    this.repeatEnd = header.getStart() + header.getLength();
                                    this.repeatMove += this.repeatEnd - this.repeatStart;
                                    this.index = this.repeatStartIndex - 1;
                                    this.repeatNumber++;
                                }
                                else {
                                    this.repeatStart = 0;
                                    this.repeatNumber = 0;
                                    this.repeatEnd = 0;
                                    this.repeatOpen = false;
                                }
                                this.repeatAlternative = 0;
                            }
                            this.index++;
                        };
                        MidiRepeatController.prototype.finished = function () {
                            return (this.index >= this.count);
                        };
                        MidiRepeatController.prototype.shouldPlay = function () {
                            return this.__shouldPlay;
                        };
                        MidiRepeatController.prototype.getIndex = function () {
                            return this.index;
                        };
                        MidiRepeatController.prototype.getRepeatMove = function () {
                            return this.repeatMove;
                        };
                        return MidiRepeatController;
                    }());
                    base.MidiRepeatController = MidiRepeatController;
                    MidiRepeatController["__class"] = "org.herac.tuxguitar.player.base.MidiRepeatController";
                })(base = player.base || (player.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var base;
                (function (base) {
                    var MidiSequenceHandler = (function () {
                        function MidiSequenceHandler(tracks) {
                            this.tracks = 0;
                            this.tracks = tracks;
                        }
                        MidiSequenceHandler.prototype.getTracks = function () {
                            return this.tracks;
                        };
                        return MidiSequenceHandler;
                    }());
                    base.MidiSequenceHandler = MidiSequenceHandler;
                    MidiSequenceHandler["__class"] = "org.herac.tuxguitar.player.base.MidiSequenceHandler";
                })(base = player.base || (player.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var base;
                (function (base) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to Window - Preferences - Java - Code Style - Code Templates
                     */
                    var MidiSequenceParser = (function () {
                        function MidiSequenceParser(song, songManager, flags) {
                            this.song = null;
                            this.songManager = null;
                            this.flags = 0;
                            this.infoTrack = 0;
                            this.metronomeTrack = 0;
                            this.metronomeChannelId = 0;
                            this.firstTickMove = 0;
                            this.tempoPercent = 0;
                            this.transpose = 0;
                            this.sHeader = 0;
                            this.eHeader = 0;
                            this.song = song;
                            this.songManager = songManager;
                            this.flags = flags;
                            this.tempoPercent = 100;
                            this.transpose = 0;
                            this.sHeader = -1;
                            this.eHeader = -1;
                            this.firstTickMove = ((((flags & MidiSequenceParser.ADD_FIRST_TICK_MOVE) !== 0) ? (-org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME) : 0) | 0);
                        }
                        MidiSequenceParser.DEFAULT_PLAY_FLAGS_$LI$ = function () { if (MidiSequenceParser.DEFAULT_PLAY_FLAGS == null)
                            MidiSequenceParser.DEFAULT_PLAY_FLAGS = (MidiSequenceParser.ADD_METRONOME); return MidiSequenceParser.DEFAULT_PLAY_FLAGS; };
                        ;
                        MidiSequenceParser.DEFAULT_EXPORT_FLAGS_$LI$ = function () { if (MidiSequenceParser.DEFAULT_EXPORT_FLAGS == null)
                            MidiSequenceParser.DEFAULT_EXPORT_FLAGS = (MidiSequenceParser.ADD_FIRST_TICK_MOVE | MidiSequenceParser.ADD_DEFAULT_CONTROLS | MidiSequenceParser.ADD_MIXER_MESSAGES); return MidiSequenceParser.DEFAULT_EXPORT_FLAGS; };
                        ;
                        MidiSequenceParser.prototype.getInfoTrack = function () {
                            return this.infoTrack;
                        };
                        MidiSequenceParser.prototype.getMetronomeTrack = function () {
                            return this.metronomeTrack;
                        };
                        MidiSequenceParser.prototype.getTick = function (tick) {
                            return (tick + this.firstTickMove);
                        };
                        MidiSequenceParser.prototype.setSHeader = function (header) {
                            this.sHeader = header;
                        };
                        MidiSequenceParser.prototype.setEHeader = function (header) {
                            this.eHeader = header;
                        };
                        MidiSequenceParser.prototype.setMetronomeChannelId = function (metronomeChannelId) {
                            this.metronomeChannelId = metronomeChannelId;
                        };
                        MidiSequenceParser.prototype.setTempoPercent = function (tempoPercent) {
                            this.tempoPercent = tempoPercent;
                        };
                        MidiSequenceParser.prototype.setTranspose = function (transpose) {
                            this.transpose = transpose;
                        };
                        MidiSequenceParser.prototype.fix = function (value) {
                            return (value >= 0 ? value <= 127 ? value : 127 : 0);
                        };
                        /**
                         * Crea la cancion
                         * @param {org.herac.tuxguitar.player.base.MidiSequenceHandler} sequence
                         */
                        MidiSequenceParser.prototype.parse = function (sequence) {
                            this.infoTrack = 0;
                            this.metronomeTrack = (sequence.getTracks() - 1);
                            var helper = new MidiSequenceParser.MidiSequenceHelper(this, sequence);
                            var controller = new org.herac.tuxguitar.player.base.MidiRepeatController(this.song, this.sHeader, this.eHeader);
                            while ((!controller.finished())) {
                                var index = controller.getIndex();
                                var move = controller.getRepeatMove();
                                controller.process();
                                if (controller.shouldPlay()) {
                                    helper.addMeasureHelper(new MidiSequenceParser.MidiMeasureHelper(this, index, move));
                                }
                            }
                            ;
                            this.addDefaultMessages(helper, this.song);
                            for (var i = 0; i < this.song.countTracks(); i++) {
                                var songTrack = this.song.getTrack(i);
                                this.createTrack(helper, songTrack);
                            }
                            sequence.notifyFinish();
                        };
                        /**
                         * Crea las pistas de la cancion
                         * @param {org.herac.tuxguitar.player.base.MidiSequenceParser.MidiSequenceHelper} sh
                         * @param {org.herac.tuxguitar.song.models.TGTrack} track
                         * @private
                         */
                        MidiSequenceParser.prototype.createTrack = function (sh, track) {
                            var tgChannel = this.songManager.getChannel(this.song, track.getChannelId());
                            if (tgChannel != null) {
                                var previous = null;
                                this.addBend(sh, track.getNumber(), org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME, MidiSequenceParser.DEFAULT_BEND, tgChannel.getChannelId(), -1, false);
                                this.makeChannel(sh, tgChannel, track.getNumber());
                                var mCount = sh.getMeasureHelpers().size();
                                for (var mIndex = 0; mIndex < mCount; mIndex++) {
                                    var mh = sh.getMeasureHelper(mIndex);
                                    var measure = track.getMeasure(mh.getIndex());
                                    if (track.getNumber() === 1) {
                                        this.addTimeSignature(sh, measure, previous, mh.getMove());
                                        this.addTempo(sh, measure, previous, mh.getMove());
                                        this.addMetronome(sh, measure.getHeader(), mh.getMove());
                                    }
                                    this.makeBeats(sh, tgChannel, track, measure, mIndex, mh.getMove());
                                    previous = measure;
                                }
                            }
                        };
                        MidiSequenceParser.prototype.makeBeats = function (sh, channel, track, measure, mIndex, startMove) {
                            var stroke = (function (s) { var a = []; while (s-- > 0)
                                a.push(0); return a; })(track.stringCount());
                            var previous = null;
                            for (var bIndex = 0; bIndex < measure.countBeats(); bIndex++) {
                                var beat = measure.getBeat(bIndex);
                                this.makeNotes(sh, channel, track, beat, measure.getTempo(), mIndex, bIndex, startMove, this.getStroke(beat, previous, stroke));
                                previous = beat;
                            }
                        };
                        /**
                         * Crea las notas del compas
                         * @param {org.herac.tuxguitar.player.base.MidiSequenceParser.MidiSequenceHelper} sh
                         * @param {org.herac.tuxguitar.song.models.TGChannel} tgChannel
                         * @param {org.herac.tuxguitar.song.models.TGTrack} track
                         * @param {org.herac.tuxguitar.song.models.TGBeat} beat
                         * @param {org.herac.tuxguitar.song.models.TGTempo} tempo
                         * @param {number} mIndex
                         * @param {number} bIndex
                         * @param {number} startMove
                         * @param {Array} stroke
                         * @private
                         */
                        MidiSequenceParser.prototype.makeNotes = function (sh, tgChannel, track, beat, tempo, mIndex, bIndex, startMove, stroke) {
                            for (var vIndex = 0; vIndex < beat.countVoices(); vIndex++) {
                                var voice = beat.getVoice(vIndex);
                                var th = this.checkTripletFeel(voice, bIndex);
                                for (var noteIdx = 0; noteIdx < voice.countNotes(); noteIdx++) {
                                    var note = voice.getNote(noteIdx);
                                    if (!note.isTiedNote()) {
                                        var key = (this.transpose + track.getOffset() + note.getValue() + track.getStrings().get(note.getString() - 1).getValue());
                                        var start = this.applyStrokeStart(note, (th.getStart() + startMove), stroke);
                                        var duration = this.applyStrokeDuration(note, this.getRealNoteDuration(sh, track, note, tempo, th.getDuration(), mIndex, bIndex), stroke);
                                        var velocity = this.getRealVelocity(sh, note, track, tgChannel, mIndex, bIndex);
                                        var channel = tgChannel.getChannelId();
                                        var midiVoice = note.getString();
                                        var bendMode = false;
                                        var percussionChannel = tgChannel.isPercussionChannel();
                                        if (note.getEffect().isFadeIn()) {
                                            this.makeFadeIn(sh, track.getNumber(), start, duration, tgChannel.getVolume(), channel);
                                        }
                                        if (note.getEffect().isGrace() && !percussionChannel) {
                                            bendMode = true;
                                            var graceKey = track.getOffset() + note.getEffect().getGrace().getFret() + track.getStrings().get(note.getString() - 1).getValue();
                                            var graceLength = note.getEffect().getGrace().getDurationTime();
                                            var graceVelocity = note.getEffect().getGrace().getDynamic();
                                            var graceDuration = ((note.getEffect().getGrace().isDead()) ? this.applyStaticDuration(tempo, MidiSequenceParser.DEFAULT_DURATION_DEAD, graceLength) : graceLength);
                                            if (note.getEffect().getGrace().isOnBeat() || (start - graceLength) < org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME) {
                                                start += graceLength;
                                                duration -= graceLength;
                                            }
                                            this.makeNote(sh, track.getNumber(), graceKey, start - graceLength, graceDuration, graceVelocity, channel, midiVoice, bendMode);
                                        }
                                        if (note.getEffect().isTrill() && !percussionChannel) {
                                            var trillKey = track.getOffset() + note.getEffect().getTrill().getFret() + track.getStrings().get(note.getString() - 1).getValue();
                                            var trillLength = note.getEffect().getTrill().getDuration().getTime();
                                            var realKey = true;
                                            var tick = start;
                                            while ((true)) {
                                                if (tick + 10 >= (start + duration)) {
                                                    break;
                                                }
                                                else if ((tick + trillLength) >= (start + duration)) {
                                                    trillLength = (((start + duration) - tick) - 1);
                                                }
                                                this.makeNote(sh, track.getNumber(), ((realKey) ? key : trillKey), tick, trillLength, velocity, channel, midiVoice, bendMode);
                                                realKey = (!realKey);
                                                tick += trillLength;
                                            }
                                            ;
                                            continue;
                                        }
                                        if (note.getEffect().isTremoloPicking()) {
                                            var tpLength = note.getEffect().getTremoloPicking().getDuration().getTime();
                                            var tick = start;
                                            while ((true)) {
                                                if (tick + 10 >= (start + duration)) {
                                                    break;
                                                }
                                                else if ((tick + tpLength) >= (start + duration)) {
                                                    tpLength = (((start + duration) - tick) - 1);
                                                }
                                                this.makeNote(sh, track.getNumber(), key, tick, tpLength, velocity, channel, midiVoice, bendMode);
                                                tick += tpLength;
                                            }
                                            ;
                                            continue;
                                        }
                                        if (note.getEffect().isBend() && !percussionChannel) {
                                            bendMode = true;
                                            this.makeBend(sh, track.getNumber(), start, duration, note.getEffect().getBend(), channel, midiVoice, bendMode);
                                        }
                                        else if (note.getEffect().isTremoloBar() && !percussionChannel) {
                                            bendMode = true;
                                            this.makeTremoloBar(sh, track.getNumber(), start, duration, note.getEffect().getTremoloBar(), channel, midiVoice, bendMode);
                                        }
                                        else if (note.getEffect().isSlide() && !percussionChannel) {
                                            bendMode = true;
                                            this.makeSlide$org_herac_tuxguitar_player_base_MidiSequenceParser_MidiSequenceHelper$org_herac_tuxguitar_song_models_TGNote$org_herac_tuxguitar_song_models_TGTrack$int$int$long$int$int$boolean(sh, note, track, mIndex, bIndex, startMove, channel, midiVoice, bendMode);
                                        }
                                        else if (note.getEffect().isVibrato() && !percussionChannel) {
                                            bendMode = true;
                                            this.makeVibrato(sh, track.getNumber(), start, duration, channel, midiVoice, bendMode);
                                        }
                                        if (note.getEffect().isHarmonic() && !percussionChannel) {
                                            var orig = key;
                                            if (note.getEffect().getHarmonic().isNatural()) {
                                                for (var i = 0; i < org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.NATURAL_FREQUENCIES_$LI$().length; i++) {
                                                    if ((note.getValue() % 12) === (org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.NATURAL_FREQUENCIES_$LI$()[i][0] % 12)) {
                                                        key = ((orig + org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.NATURAL_FREQUENCIES_$LI$()[i][1]) - note.getValue());
                                                        break;
                                                    }
                                                }
                                            }
                                            else {
                                                if (note.getEffect().getHarmonic().isSemi() && !percussionChannel) {
                                                    this.makeNote(sh, track.getNumber(), Math.min(127, orig), start, duration, Math.max(org.herac.tuxguitar.song.models.TGVelocities.MIN_VELOCITY, velocity - (org.herac.tuxguitar.song.models.TGVelocities.VELOCITY_INCREMENT * 3)), channel, midiVoice, bendMode);
                                                }
                                                key = (orig + org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.NATURAL_FREQUENCIES_$LI$()[note.getEffect().getHarmonic().getData()][1]);
                                            }
                                            if ((key - 12) > 0) {
                                                var hVelocity = Math.max(org.herac.tuxguitar.song.models.TGVelocities.MIN_VELOCITY, velocity - (org.herac.tuxguitar.song.models.TGVelocities.VELOCITY_INCREMENT * 4));
                                                this.makeNote(sh, track.getNumber(), (key - 12), start, duration, hVelocity, channel, midiVoice, bendMode);
                                            }
                                        }
                                        this.makeNote(sh, track.getNumber(), Math.min(127, key), start, duration, velocity, channel, midiVoice, bendMode);
                                    }
                                }
                            }
                        };
                        /**
                         * Crea una nota en la posicion start
                         * @param {org.herac.tuxguitar.player.base.MidiSequenceParser.MidiSequenceHelper} sh
                         * @param {number} track
                         * @param {number} key
                         * @param {number} start
                         * @param {number} duration
                         * @param {number} velocity
                         * @param {number} channel
                         * @param {number} midiVoice
                         * @param {boolean} bendMode
                         * @private
                         */
                        MidiSequenceParser.prototype.makeNote = function (sh, track, key, start, duration, velocity, channel, midiVoice, bendMode) {
                            sh.getSequence().addNoteOn(this.getTick(start), track, channel, this.fix(key), this.fix(velocity), midiVoice, bendMode);
                            if (duration > 0) {
                                sh.getSequence().addNoteOff(this.getTick(start + duration), track, channel, this.fix(key), this.fix(velocity), midiVoice, bendMode);
                            }
                        };
                        MidiSequenceParser.prototype.makeChannel = function (sh, channel, track) {
                            if ((this.flags & MidiSequenceParser.ADD_MIXER_MESSAGES) !== 0) {
                                var channelId = channel.getChannelId();
                                var tick = this.getTick(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME);
                                sh.getSequence().addControlChange(tick, track, channelId, org.herac.tuxguitar.player.base.MidiControllers.VOLUME, this.fix(channel.getVolume()));
                                sh.getSequence().addControlChange(tick, track, channelId, org.herac.tuxguitar.player.base.MidiControllers.BALANCE, this.fix(channel.getBalance()));
                                sh.getSequence().addControlChange(tick, track, channelId, org.herac.tuxguitar.player.base.MidiControllers.CHORUS, this.fix(channel.getChorus()));
                                sh.getSequence().addControlChange(tick, track, channelId, org.herac.tuxguitar.player.base.MidiControllers.REVERB, this.fix(channel.getReverb()));
                                sh.getSequence().addControlChange(tick, track, channelId, org.herac.tuxguitar.player.base.MidiControllers.PHASER, this.fix(channel.getPhaser()));
                                sh.getSequence().addControlChange(tick, track, channelId, org.herac.tuxguitar.player.base.MidiControllers.TREMOLO, this.fix(channel.getTremolo()));
                                sh.getSequence().addControlChange(tick, track, channelId, org.herac.tuxguitar.player.base.MidiControllers.EXPRESSION, 127);
                                if (!channel.isPercussionChannel()) {
                                    sh.getSequence().addControlChange(tick, track, channelId, org.herac.tuxguitar.player.base.MidiControllers.BANK_SELECT, this.fix(channel.getBank()));
                                }
                                sh.getSequence().addProgramChange(tick, track, channelId, this.fix(channel.getProgram()));
                            }
                        };
                        /**
                         * Agrega un Time Signature si es distinto al anterior
                         * @param {org.herac.tuxguitar.player.base.MidiSequenceParser.MidiSequenceHelper} sh
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} currMeasure
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} prevMeasure
                         * @param {number} startMove
                         * @private
                         */
                        MidiSequenceParser.prototype.addTimeSignature = function (sh, currMeasure, prevMeasure, startMove) {
                            var addTimeSignature = false;
                            if (prevMeasure == null) {
                                addTimeSignature = true;
                            }
                            else {
                                var currNumerator = currMeasure.getTimeSignature().getNumerator();
                                var currValue = currMeasure.getTimeSignature().getDenominator().getValue();
                                var prevNumerator = prevMeasure.getTimeSignature().getNumerator();
                                var prevValue = prevMeasure.getTimeSignature().getDenominator().getValue();
                                if (currNumerator !== prevNumerator || currValue !== prevValue) {
                                    addTimeSignature = true;
                                }
                            }
                            if (addTimeSignature) {
                                sh.getSequence().addTimeSignature(this.getTick(currMeasure.getStart() + startMove), this.getInfoTrack(), currMeasure.getTimeSignature());
                            }
                        };
                        /**
                         * Agrega un Tempo si es distinto al anterior
                         * @param {org.herac.tuxguitar.player.base.MidiSequenceParser.MidiSequenceHelper} sh
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} currMeasure
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} prevMeasure
                         * @param {number} startMove
                         * @private
                         */
                        MidiSequenceParser.prototype.addTempo = function (sh, currMeasure, prevMeasure, startMove) {
                            var addTempo = false;
                            if (prevMeasure == null) {
                                addTempo = true;
                            }
                            else {
                                if (currMeasure.getTempo().getInUSQ() !== prevMeasure.getTempo().getInUSQ()) {
                                    addTempo = true;
                                }
                            }
                            if (addTempo) {
                                var usq = ((currMeasure.getTempo().getInUSQ() * 100.0 / this.tempoPercent) | 0);
                                sh.getSequence().addTempoInUSQ(this.getTick(currMeasure.getStart() + startMove), this.getInfoTrack(), usq);
                            }
                        };
                        /**
                         * Retorna la Duracion real de una nota, verificando si tiene otras ligadas
                         * @param {org.herac.tuxguitar.player.base.MidiSequenceParser.MidiSequenceHelper} sh
                         * @param {org.herac.tuxguitar.song.models.TGTrack} track
                         * @param {org.herac.tuxguitar.song.models.TGNote} note
                         * @param {org.herac.tuxguitar.song.models.TGTempo} tempo
                         * @param {number} duration
                         * @param {number} mIndex
                         * @param {number} bIndex
                         * @return {number}
                         * @private
                         */
                        MidiSequenceParser.prototype.getRealNoteDuration = function (sh, track, note, tempo, duration, mIndex, bIndex) {
                            var letRing = (note.getEffect().isLetRing());
                            var letRingBeatChanged = false;
                            var lastEnd = (note.getVoice().getBeat().getStart() + note.getVoice().getDuration().getTime() + sh.getMeasureHelper(mIndex).getMove());
                            var realDuration = duration;
                            var nextBIndex = (bIndex + 1);
                            var mCount = sh.getMeasureHelpers().size();
                            for (var m = mIndex; m < mCount; m++) {
                                var mh = sh.getMeasureHelper(m);
                                var measure = track.getMeasure(mh.getIndex());
                                var beatCount = measure.countBeats();
                                for (var b = nextBIndex; b < beatCount; b++) {
                                    var beat = measure.getBeat(b);
                                    var voice = beat.getVoice(note.getVoice().getIndex());
                                    if (!voice.isEmpty()) {
                                        if (voice.isRestVoice()) {
                                            return this.applyDurationEffects(note, tempo, realDuration);
                                        }
                                        var noteCount = voice.countNotes();
                                        for (var n = 0; n < noteCount; n++) {
                                            var nextNote = voice.getNote(n);
                                            if (!(function (o1, o2) { if (o1.equals) {
                                                return o1.equals(o2);
                                            }
                                            else {
                                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                            } })(nextNote, note) || mIndex !== m) {
                                                if (nextNote.getString() === note.getString()) {
                                                    if (nextNote.isTiedNote()) {
                                                        realDuration += (mh.getMove() + beat.getStart() - lastEnd) + (nextNote.getVoice().getDuration().getTime());
                                                        lastEnd = (mh.getMove() + beat.getStart() + voice.getDuration().getTime());
                                                        letRing = (nextNote.getEffect().isLetRing());
                                                        letRingBeatChanged = true;
                                                    }
                                                    else {
                                                        return this.applyDurationEffects(note, tempo, realDuration);
                                                    }
                                                }
                                            }
                                        }
                                        if (letRing && !letRingBeatChanged) {
                                            realDuration += (voice.getDuration().getTime());
                                        }
                                        letRingBeatChanged = false;
                                    }
                                }
                                nextBIndex = 0;
                            }
                            return this.applyDurationEffects(note, tempo, realDuration);
                        };
                        MidiSequenceParser.prototype.applyDurationEffects = function (note, tempo, duration) {
                            if (note.getEffect().isDeadNote()) {
                                return this.applyStaticDuration(tempo, MidiSequenceParser.DEFAULT_DURATION_DEAD, duration);
                            }
                            if (note.getEffect().isPalmMute()) {
                                return this.applyStaticDuration(tempo, MidiSequenceParser.DEFAULT_DURATION_PM, duration);
                            }
                            if (note.getEffect().isStaccato()) {
                                return Math.floor((duration * 50.0 / 100.0));
                            }
                            return duration;
                        };
                        MidiSequenceParser.prototype.applyStaticDuration = function (tempo, duration, maximum) {
                            var value = (Math.floor(tempo.getValue() * duration / 60));
                            return (value < maximum ? value : maximum);
                        };
                        MidiSequenceParser.prototype.getRealVelocity = function (sh, note, tgTrack, tgChannel, mIndex, bIndex) {
                            var velocity = note.getVelocity();
                            if (!tgChannel.isPercussionChannel()) {
                                var previousNote = this.getPreviousNote(sh, note, tgTrack, mIndex, bIndex, false);
                                if (previousNote != null && previousNote.getNote().getEffect().isHammer()) {
                                    velocity = Math.max(org.herac.tuxguitar.song.models.TGVelocities.MIN_VELOCITY, (velocity - 25));
                                }
                            }
                            if (note.getEffect().isGhostNote()) {
                                velocity = Math.max(org.herac.tuxguitar.song.models.TGVelocities.MIN_VELOCITY, (velocity - org.herac.tuxguitar.song.models.TGVelocities.VELOCITY_INCREMENT));
                            }
                            else if (note.getEffect().isAccentuatedNote()) {
                                velocity = Math.max(org.herac.tuxguitar.song.models.TGVelocities.MIN_VELOCITY, (velocity + org.herac.tuxguitar.song.models.TGVelocities.VELOCITY_INCREMENT));
                            }
                            else if (note.getEffect().isHeavyAccentuatedNote()) {
                                velocity = Math.max(org.herac.tuxguitar.song.models.TGVelocities.MIN_VELOCITY, (velocity + (org.herac.tuxguitar.song.models.TGVelocities.VELOCITY_INCREMENT * 2)));
                            }
                            return ((velocity > 127) ? 127 : velocity);
                        };
                        MidiSequenceParser.prototype.addMetronome = function (sh, header, startMove) {
                            if ((this.flags & MidiSequenceParser.ADD_METRONOME) !== 0) {
                                if (this.metronomeChannelId >= 0) {
                                    var start = (startMove + header.getStart());
                                    var length_1 = header.getTimeSignature().getDenominator().getTime();
                                    for (var i = 1; i <= header.getTimeSignature().getNumerator(); i++) {
                                        this.makeNote(sh, this.getMetronomeTrack(), MidiSequenceParser.DEFAULT_METRONOME_KEY, start, length_1, org.herac.tuxguitar.song.models.TGVelocities.DEFAULT_$LI$(), this.metronomeChannelId, -1, false);
                                        start += length_1;
                                    }
                                }
                            }
                        };
                        MidiSequenceParser.prototype.addDefaultMessages = function (sh, tgSong) {
                            if ((this.flags & MidiSequenceParser.ADD_DEFAULT_CONTROLS) !== 0) {
                                var it = tgSong.getChannels();
                                while ((it.hasNext())) {
                                    var channelId = it.next().getChannelId();
                                    sh.getSequence().addControlChange(this.getTick(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME), this.getInfoTrack(), channelId, org.herac.tuxguitar.player.base.MidiControllers.RPN_MSB, 0);
                                    sh.getSequence().addControlChange(this.getTick(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME), this.getInfoTrack(), channelId, org.herac.tuxguitar.player.base.MidiControllers.RPN_LSB, 0);
                                    sh.getSequence().addControlChange(this.getTick(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME), this.getInfoTrack(), channelId, org.herac.tuxguitar.player.base.MidiControllers.DATA_ENTRY_MSB, 12);
                                    sh.getSequence().addControlChange(this.getTick(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME), this.getInfoTrack(), channelId, org.herac.tuxguitar.player.base.MidiControllers.DATA_ENTRY_LSB, 0);
                                }
                                ;
                            }
                        };
                        MidiSequenceParser.prototype.addBend = function (sh, track, tick, bend, channel, midiVoice, bendMode) {
                            sh.getSequence().addPitchBend(this.getTick(tick), track, channel, this.fix(bend), midiVoice, bendMode);
                        };
                        MidiSequenceParser.prototype.makeVibrato = function (sh, track, start, duration, channel, midiVoice, bendMode) {
                            var nextStart = start;
                            var end = nextStart + duration;
                            while ((nextStart < end)) {
                                nextStart = ((nextStart + 160 > end) ? end : nextStart + 160);
                                this.addBend(sh, track, nextStart, MidiSequenceParser.DEFAULT_BEND, channel, midiVoice, bendMode);
                                nextStart = ((nextStart + 160 > end) ? end : nextStart + 160);
                                this.addBend(sh, track, nextStart, MidiSequenceParser.DEFAULT_BEND + ((MidiSequenceParser.DEFAULT_BEND_SEMI_TONE / 2.0) | 0), channel, midiVoice, bendMode);
                            }
                            ;
                            this.addBend(sh, track, nextStart, MidiSequenceParser.DEFAULT_BEND, channel, midiVoice, bendMode);
                        };
                        MidiSequenceParser.prototype.makeBend = function (sh, track, start, duration, bend, channel, midiVoice, bendMode) {
                            var points = bend.getPoints();
                            for (var i = 0; i < points.size(); i++) {
                                var point = points.get(i);
                                var bendStart = start + point.getTime(duration);
                                var value = MidiSequenceParser.DEFAULT_BEND + ((point.getValue() * MidiSequenceParser.DEFAULT_BEND_SEMI_TONE / org.herac.tuxguitar.song.models.effects.TGEffectBend.SEMITONE_LENGTH) | 0);
                                value = ((value <= 127) ? value : 127);
                                value = ((value >= 0) ? value : 0);
                                this.addBend(sh, track, bendStart, value, channel, midiVoice, bendMode);
                                if (points.size() > i + 1) {
                                    var nextPoint = points.get(i + 1);
                                    var nextValue = MidiSequenceParser.DEFAULT_BEND + ((nextPoint.getValue() * MidiSequenceParser.DEFAULT_BEND_SEMI_TONE / org.herac.tuxguitar.song.models.effects.TGEffectBend.SEMITONE_LENGTH) | 0);
                                    var nextBendStart = start + nextPoint.getTime(duration);
                                    if (nextValue !== value) {
                                        var width = (Math.floor((nextBendStart - bendStart) / Math.abs((nextValue - value))));
                                        if (value < nextValue) {
                                            while ((value < nextValue)) {
                                                value++;
                                                bendStart += width;
                                                this.addBend(sh, track, bendStart, ((value <= 127) ? value : 127), channel, midiVoice, bendMode);
                                            }
                                            ;
                                        }
                                        else if (value > nextValue) {
                                            while ((value > nextValue)) {
                                                value--;
                                                bendStart += width;
                                                this.addBend(sh, track, bendStart, ((value >= 0) ? value : 0), channel, midiVoice, bendMode);
                                            }
                                            ;
                                        }
                                    }
                                }
                            }
                            this.addBend(sh, track, start + duration, MidiSequenceParser.DEFAULT_BEND, channel, midiVoice, bendMode);
                        };
                        MidiSequenceParser.prototype.makeTremoloBar = function (sh, track, start, duration, effect, channel, midiVoice, bendMode) {
                            var points = effect.getPoints();
                            for (var i = 0; i < points.size(); i++) {
                                var point = points.get(i);
                                var pointStart = start + point.getTime(duration);
                                var value = MidiSequenceParser.DEFAULT_BEND + ((point.getValue() * (MidiSequenceParser.DEFAULT_BEND_SEMI_TONE * 2)) | 0);
                                value = ((value <= 127) ? value : 127);
                                value = ((value >= 0) ? value : 0);
                                this.addBend(sh, track, pointStart, value, channel, midiVoice, bendMode);
                                if (points.size() > i + 1) {
                                    var nextPoint = points.get(i + 1);
                                    var nextValue = MidiSequenceParser.DEFAULT_BEND + ((nextPoint.getValue() * (MidiSequenceParser.DEFAULT_BEND_SEMI_TONE * 2)) | 0);
                                    var nextPointStart = start + nextPoint.getTime(duration);
                                    if (nextValue !== value) {
                                        var width = (Math.floor((nextPointStart - pointStart) / Math.abs((nextValue - value))));
                                        if (value < nextValue) {
                                            while ((value < nextValue)) {
                                                value++;
                                                pointStart += width;
                                                this.addBend(sh, track, pointStart, ((value <= 127) ? value : 127), channel, midiVoice, bendMode);
                                            }
                                            ;
                                        }
                                        else if (value > nextValue) {
                                            while ((value > nextValue)) {
                                                value--;
                                                pointStart += width;
                                                this.addBend(sh, track, pointStart, ((value >= 0) ? value : 0), channel, midiVoice, bendMode);
                                            }
                                            ;
                                        }
                                    }
                                }
                            }
                            this.addBend(sh, track, start + duration, MidiSequenceParser.DEFAULT_BEND, channel, midiVoice, bendMode);
                        };
                        MidiSequenceParser.prototype.makeSlide$org_herac_tuxguitar_player_base_MidiSequenceParser_MidiSequenceHelper$org_herac_tuxguitar_song_models_TGNote$org_herac_tuxguitar_song_models_TGTrack$int$int$long$int$int$boolean = function (sh, note, track, mIndex, bIndex, startMove, channel, midiVoice, bendMode) {
                            var nextNote = this.getNextNote(sh, note, track, mIndex, bIndex, true);
                            if (nextNote != null) {
                                var value1 = note.getValue();
                                var value2 = nextNote.getNote().getValue();
                                var tick1 = note.getVoice().getBeat().getStart() + startMove;
                                var tick2 = nextNote.getNote().getVoice().getBeat().getStart() + nextNote.getMeasure().getMove();
                                this.makeSlide$org_herac_tuxguitar_player_base_MidiSequenceParser_MidiSequenceHelper$int$long$int$long$int$int$int$boolean(sh, track.getNumber(), tick1, value1, tick2, value2, channel, midiVoice, bendMode);
                                this.addBend(sh, track.getNumber(), tick2, MidiSequenceParser.DEFAULT_BEND, channel, midiVoice, bendMode);
                            }
                        };
                        MidiSequenceParser.prototype.makeSlide = function (sh, note, track, mIndex, bIndex, startMove, channel, midiVoice, bendMode) {
                            if (((sh != null && sh instanceof org.herac.tuxguitar.player.base.MidiSequenceParser.MidiSequenceHelper) || sh === null) && ((note != null && note instanceof org.herac.tuxguitar.song.models.TGNote) || note === null) && ((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null) && ((typeof mIndex === 'number') || mIndex === null) && ((typeof bIndex === 'number') || bIndex === null) && ((typeof startMove === 'number') || startMove === null) && ((typeof channel === 'number') || channel === null) && ((typeof midiVoice === 'number') || midiVoice === null) && ((typeof bendMode === 'boolean') || bendMode === null)) {
                                return this.makeSlide$org_herac_tuxguitar_player_base_MidiSequenceParser_MidiSequenceHelper$org_herac_tuxguitar_song_models_TGNote$org_herac_tuxguitar_song_models_TGTrack$int$int$long$int$int$boolean(sh, note, track, mIndex, bIndex, startMove, channel, midiVoice, bendMode);
                            }
                            else if (((sh != null && sh instanceof org.herac.tuxguitar.player.base.MidiSequenceParser.MidiSequenceHelper) || sh === null) && ((typeof note === 'number') || note === null) && ((typeof track === 'number') || track === null) && ((typeof mIndex === 'number') || mIndex === null) && ((typeof bIndex === 'number') || bIndex === null) && ((typeof startMove === 'number') || startMove === null) && ((typeof channel === 'number') || channel === null) && ((typeof midiVoice === 'number') || midiVoice === null) && ((typeof bendMode === 'boolean') || bendMode === null)) {
                                return this.makeSlide$org_herac_tuxguitar_player_base_MidiSequenceParser_MidiSequenceHelper$int$long$int$long$int$int$int$boolean(sh, note, track, mIndex, bIndex, startMove, channel, midiVoice, bendMode);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        MidiSequenceParser.prototype.makeSlide$org_herac_tuxguitar_player_base_MidiSequenceParser_MidiSequenceHelper$int$long$int$long$int$int$int$boolean = function (sh, track, tick1, value1, tick2, value2, channel, midiVoice, bendMode) {
                            var distance = (value2 - value1);
                            var length = (tick2 - tick1);
                            var points = ((Math.floor(length / (Math.floor(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME / 8)))) | 0);
                            for (var i = 1; i <= points; i++) {
                                var tone = ((((Math.floor(length / points)) * i) * distance) / length);
                                var bend = (MidiSequenceParser.DEFAULT_BEND + ((tone * (MidiSequenceParser.DEFAULT_BEND_SEMI_TONE * 2)) | 0));
                                this.addBend(sh, track, tick1 + ((Math.floor(length / points)) * i), bend, channel, midiVoice, bendMode);
                            }
                        };
                        MidiSequenceParser.prototype.makeFadeIn = function (sh, track, start, duration, volume3, channel) {
                            var expression = 31;
                            var expressionIncrement = 1;
                            var tick = start;
                            var tickIncrement = (Math.floor(duration / (((127 - expression) / expressionIncrement | 0))));
                            while ((tick < (start + duration) && expression < 127)) {
                                sh.getSequence().addControlChange(this.getTick(tick), track, channel, org.herac.tuxguitar.player.base.MidiControllers.EXPRESSION, this.fix(expression));
                                tick += tickIncrement;
                                expression += expressionIncrement;
                            }
                            ;
                            sh.getSequence().addControlChange(this.getTick((start + duration)), track, channel, org.herac.tuxguitar.player.base.MidiControllers.EXPRESSION, 127);
                        };
                        MidiSequenceParser.prototype.getStroke = function (beat, previous, stroke) {
                            var direction = beat.getStroke().getDirection();
                            if (previous == null || !(direction === org.herac.tuxguitar.song.models.TGStroke.STROKE_NONE && previous.getStroke().getDirection() === org.herac.tuxguitar.song.models.TGStroke.STROKE_NONE)) {
                                if (direction === org.herac.tuxguitar.song.models.TGStroke.STROKE_NONE) {
                                    for (var i = 0; i < stroke.length; i++) {
                                        stroke[i] = 0;
                                    }
                                }
                                else {
                                    var stringUseds = 0;
                                    var stringCount = 0;
                                    for (var vIndex = 0; vIndex < beat.countVoices(); vIndex++) {
                                        var voice = beat.getVoice(vIndex);
                                        for (var nIndex = 0; nIndex < voice.countNotes(); nIndex++) {
                                            var note = voice.getNote(nIndex);
                                            if (!note.isTiedNote()) {
                                                stringUseds |= 1 << (note.getString() - 1);
                                                stringCount++;
                                            }
                                        }
                                    }
                                    if (stringCount > 0) {
                                        var strokeMove = 0;
                                        var strokeIncrement = beat.getStroke().getIncrementTime(beat);
                                        for (var i = 0; i < stroke.length; i++) {
                                            var index = (direction === org.herac.tuxguitar.song.models.TGStroke.STROKE_DOWN ? (stroke.length - 1) - i : i);
                                            if ((stringUseds & (1 << index)) !== 0) {
                                                stroke[index] = strokeMove;
                                                strokeMove += strokeIncrement;
                                            }
                                        }
                                    }
                                }
                            }
                            return stroke;
                        };
                        MidiSequenceParser.prototype.applyStrokeStart = function (note, start, stroke) {
                            return (start + stroke[note.getString() - 1]);
                        };
                        MidiSequenceParser.prototype.applyStrokeDuration = function (note, duration, stroke) {
                            return (duration > stroke[note.getString() - 1] ? (duration - stroke[note.getString() - 1]) : duration);
                        };
                        MidiSequenceParser.prototype.checkTripletFeel = function (voice, bIndex) {
                            var bStart = voice.getBeat().getStart();
                            var bDuration = voice.getDuration().getTime();
                            if (voice.getBeat().getMeasure().getTripletFeel() === org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_EIGHTH) {
                                if (voice.getDuration().isEqual(this.newDuration(org.herac.tuxguitar.song.models.TGDuration.EIGHTH))) {
                                    if ((bStart % org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME) === 0) {
                                        var v = this.getNextBeat(voice, bIndex);
                                        if (v == null || (v.getBeat().getStart() > (bStart + voice.getDuration().getTime()) || v.getDuration().isEqual(this.newDuration(org.herac.tuxguitar.song.models.TGDuration.EIGHTH)))) {
                                            var duration = this.newDuration(org.herac.tuxguitar.song.models.TGDuration.EIGHTH);
                                            duration.getDivision().setEnters(3);
                                            duration.getDivision().setTimes(2);
                                            bDuration = (duration.getTime() * 2);
                                        }
                                    }
                                    else if ((bStart % (Math.floor(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME / 2))) === 0) {
                                        var v = this.getPreviousBeat(voice, bIndex);
                                        if (v == null || (v.getBeat().getStart() < (bStart - voice.getDuration().getTime()) || v.getDuration().isEqual(this.newDuration(org.herac.tuxguitar.song.models.TGDuration.EIGHTH)))) {
                                            var duration = this.newDuration(org.herac.tuxguitar.song.models.TGDuration.EIGHTH);
                                            duration.getDivision().setEnters(3);
                                            duration.getDivision().setTimes(2);
                                            bStart = ((bStart - voice.getDuration().getTime()) + (duration.getTime() * 2));
                                            bDuration = duration.getTime();
                                        }
                                    }
                                }
                            }
                            else if (voice.getBeat().getMeasure().getTripletFeel() === org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_SIXTEENTH) {
                                if (voice.getDuration().isEqual(this.newDuration(org.herac.tuxguitar.song.models.TGDuration.SIXTEENTH))) {
                                    if ((bStart % (Math.floor(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME / 2))) === 0) {
                                        var v = this.getNextBeat(voice, bIndex);
                                        if (v == null || (v.getBeat().getStart() > (bStart + voice.getDuration().getTime()) || v.getDuration().isEqual(this.newDuration(org.herac.tuxguitar.song.models.TGDuration.SIXTEENTH)))) {
                                            var duration = this.newDuration(org.herac.tuxguitar.song.models.TGDuration.SIXTEENTH);
                                            duration.getDivision().setEnters(3);
                                            duration.getDivision().setTimes(2);
                                            bDuration = (duration.getTime() * 2);
                                        }
                                    }
                                    else if ((bStart % (Math.floor(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME / 4))) === 0) {
                                        var v = this.getPreviousBeat(voice, bIndex);
                                        if (v == null || (v.getBeat().getStart() < (bStart - voice.getDuration().getTime()) || v.getDuration().isEqual(this.newDuration(org.herac.tuxguitar.song.models.TGDuration.SIXTEENTH)))) {
                                            var duration = this.newDuration(org.herac.tuxguitar.song.models.TGDuration.SIXTEENTH);
                                            duration.getDivision().setEnters(3);
                                            duration.getDivision().setTimes(2);
                                            bStart = ((bStart - voice.getDuration().getTime()) + (duration.getTime() * 2));
                                            bDuration = duration.getTime();
                                        }
                                    }
                                }
                            }
                            return new MidiSequenceParser.MidiTickHelper(this, bStart, bDuration);
                        };
                        MidiSequenceParser.prototype.newDuration = function (value) {
                            var duration = this.songManager.getFactory().newDuration();
                            duration.setValue(value);
                            return duration;
                        };
                        MidiSequenceParser.prototype.getPreviousBeat = function (beat, bIndex) {
                            var previous = null;
                            for (var b = bIndex - 1; b >= 0; b--) {
                                var current = beat.getBeat().getMeasure().getBeat(b);
                                if (current.getStart() < beat.getBeat().getStart() && !current.getVoice(beat.getIndex()).isEmpty()) {
                                    if (previous == null || current.getStart() > previous.getBeat().getStart()) {
                                        previous = current.getVoice(beat.getIndex());
                                    }
                                }
                            }
                            return previous;
                        };
                        MidiSequenceParser.prototype.getNextBeat = function (beat, bIndex) {
                            var next = null;
                            for (var b = bIndex + 1; b < beat.getBeat().getMeasure().countBeats(); b++) {
                                var current = beat.getBeat().getMeasure().getBeat(b);
                                if (current.getStart() > beat.getBeat().getStart() && !current.getVoice(beat.getIndex()).isEmpty()) {
                                    if (next == null || current.getStart() < next.getBeat().getStart()) {
                                        next = current.getVoice(beat.getIndex());
                                    }
                                }
                            }
                            return next;
                        };
                        MidiSequenceParser.prototype.getNextNote = function (sh, note, track, mIndex, bIndex, breakAtRest) {
                            var nextBIndex = (bIndex + 1);
                            var measureCount = sh.getMeasureHelpers().size();
                            for (var m = mIndex; m < measureCount; m++) {
                                var mh = sh.getMeasureHelper(m);
                                var measure = track.getMeasure(mh.getIndex());
                                var beatCount = measure.countBeats();
                                for (var b = nextBIndex; b < beatCount; b++) {
                                    var beat = measure.getBeat(b);
                                    var voice = beat.getVoice(note.getVoice().getIndex());
                                    if (!voice.isEmpty()) {
                                        var noteCount = voice.countNotes();
                                        for (var n = 0; n < noteCount; n++) {
                                            var nextNote = voice.getNote(n);
                                            if (nextNote.getString() === note.getString()) {
                                                return new MidiSequenceParser.MidiNoteHelper(this, mh, nextNote);
                                            }
                                        }
                                        if (breakAtRest) {
                                            return null;
                                        }
                                    }
                                }
                                nextBIndex = 0;
                            }
                            return null;
                        };
                        MidiSequenceParser.prototype.getPreviousNote = function (pHelper, note, track, mIndex, bIndex, breakAtRest) {
                            var nextBIndex = bIndex;
                            for (var m = mIndex; m >= 0; m--) {
                                var mh = pHelper.getMeasureHelper(m);
                                var measure = track.getMeasure(mh.getIndex());
                                if (this.sHeader === -1 || this.sHeader <= measure.getNumber()) {
                                    nextBIndex = (nextBIndex < 0 ? measure.countBeats() : nextBIndex);
                                    for (var b = (nextBIndex - 1); b >= 0; b--) {
                                        var beat = measure.getBeat(b);
                                        var voice = beat.getVoice(note.getVoice().getIndex());
                                        if (!voice.isEmpty()) {
                                            var noteCount = voice.countNotes();
                                            for (var n = 0; n < noteCount; n++) {
                                                var current = voice.getNote(n);
                                                if (current.getString() === note.getString()) {
                                                    return new MidiSequenceParser.MidiNoteHelper(this, mh, current);
                                                }
                                            }
                                            if (breakAtRest) {
                                                return null;
                                            }
                                        }
                                    }
                                }
                                nextBIndex = -1;
                            }
                            return null;
                        };
                        return MidiSequenceParser;
                    }());
                    MidiSequenceParser.DEFAULT_METRONOME_KEY = 37;
                    MidiSequenceParser.DEFAULT_DURATION_PM = 60;
                    MidiSequenceParser.DEFAULT_DURATION_DEAD = 30;
                    MidiSequenceParser.DEFAULT_BEND = 64;
                    MidiSequenceParser.DEFAULT_BEND_SEMI_TONE = 2.75;
                    /**
                     * flag para agregar los controles por defecto,
                     * no se recomienda usar este flag si el reproductor asigna estos controles en tiempo real.
                     */
                    MidiSequenceParser.ADD_DEFAULT_CONTROLS = 1;
                    /**
                     * flag para agregar los valores del mixer (volumen, balance, instrumento),
                     * no se recomienda usar este flag si el reproductor asigna estos valores en tiempo real.
                     */
                    MidiSequenceParser.ADD_MIXER_MESSAGES = 2;
                    /**
                     * flag para agregar la pista del metronomo,
                     * en casos como la exportacion de midi, este flag no sera necesario
                     */
                    MidiSequenceParser.ADD_METRONOME = 4;
                    /**
                     * tuxguitar usa como primer tick el valor de la constante Duration.QUARTER_TIME
                     * asignando este flag, es posible crear el primer tick en cero.
                     */
                    MidiSequenceParser.ADD_FIRST_TICK_MOVE = 8;
                    base.MidiSequenceParser = MidiSequenceParser;
                    MidiSequenceParser["__class"] = "org.herac.tuxguitar.player.base.MidiSequenceParser";
                    (function (MidiSequenceParser) {
                        var MidiTickHelper = (function () {
                            function MidiTickHelper(__parent, start, duration) {
                                this.__parent = __parent;
                                this.start = 0;
                                this.duration = 0;
                                this.start = start;
                                this.duration = duration;
                            }
                            MidiTickHelper.prototype.getDuration = function () {
                                return this.duration;
                            };
                            MidiTickHelper.prototype.getStart = function () {
                                return this.start;
                            };
                            return MidiTickHelper;
                        }());
                        MidiSequenceParser.MidiTickHelper = MidiTickHelper;
                        MidiTickHelper["__class"] = "org.herac.tuxguitar.player.base.MidiSequenceParser.MidiTickHelper";
                        var MidiNoteHelper = (function () {
                            function MidiNoteHelper(__parent, measure, note) {
                                this.__parent = __parent;
                                this.measure = null;
                                this.note = null;
                                this.measure = measure;
                                this.note = note;
                            }
                            MidiNoteHelper.prototype.getMeasure = function () {
                                return this.measure;
                            };
                            MidiNoteHelper.prototype.getNote = function () {
                                return this.note;
                            };
                            return MidiNoteHelper;
                        }());
                        MidiSequenceParser.MidiNoteHelper = MidiNoteHelper;
                        MidiNoteHelper["__class"] = "org.herac.tuxguitar.player.base.MidiSequenceParser.MidiNoteHelper";
                        var MidiMeasureHelper = (function () {
                            function MidiMeasureHelper(__parent, index, move) {
                                this.__parent = __parent;
                                this.index = 0;
                                this.move = 0;
                                this.index = index;
                                this.move = move;
                            }
                            MidiMeasureHelper.prototype.getIndex = function () {
                                return this.index;
                            };
                            MidiMeasureHelper.prototype.getMove = function () {
                                return this.move;
                            };
                            return MidiMeasureHelper;
                        }());
                        MidiSequenceParser.MidiMeasureHelper = MidiMeasureHelper;
                        MidiMeasureHelper["__class"] = "org.herac.tuxguitar.player.base.MidiSequenceParser.MidiMeasureHelper";
                        var MidiSequenceHelper = (function () {
                            function MidiSequenceHelper(__parent, sequence) {
                                this.__parent = __parent;
                                this.measureHeaderHelpers = null;
                                this.sequence = null;
                                this.sequence = sequence;
                                this.measureHeaderHelpers = (new java.util.ArrayList());
                            }
                            MidiSequenceHelper.prototype.getSequence = function () {
                                return this.sequence;
                            };
                            MidiSequenceHelper.prototype.addMeasureHelper = function (helper) {
                                this.measureHeaderHelpers.add(helper);
                            };
                            MidiSequenceHelper.prototype.getMeasureHelpers = function () {
                                return this.measureHeaderHelpers;
                            };
                            MidiSequenceHelper.prototype.getMeasureHelper = function (index) {
                                return this.measureHeaderHelpers.get(index);
                            };
                            return MidiSequenceHelper;
                        }());
                        MidiSequenceParser.MidiSequenceHelper = MidiSequenceHelper;
                        MidiSequenceHelper["__class"] = "org.herac.tuxguitar.player.base.MidiSequenceParser.MidiSequenceHelper";
                    })(MidiSequenceParser = base.MidiSequenceParser || (base.MidiSequenceParser = {}));
                })(base = player.base || (player.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var base;
                (function (base) {
                    var MidiSynthesizerProxy = (function () {
                        function MidiSynthesizerProxy() {
                            this.midiSynthesizer = null;
                        }
                        MidiSynthesizerProxy.prototype.openChannel = function (channelId) {
                            if (this.midiSynthesizer != null) {
                                return this.midiSynthesizer.openChannel(channelId);
                            }
                            return null;
                        };
                        MidiSynthesizerProxy.prototype.closeChannel = function (midiChannel) {
                            if (this.midiSynthesizer != null) {
                                this.midiSynthesizer.closeChannel(midiChannel);
                            }
                        };
                        MidiSynthesizerProxy.prototype.isChannelOpen = function (midiChannel) {
                            if (this.midiSynthesizer != null) {
                                return this.midiSynthesizer.isChannelOpen(midiChannel);
                            }
                            return false;
                        };
                        MidiSynthesizerProxy.prototype.getMidiSynthesizer = function () {
                            return this.midiSynthesizer;
                        };
                        MidiSynthesizerProxy.prototype.setMidiSynthesizer = function (midiSynthesizer) {
                            this.midiSynthesizer = midiSynthesizer;
                        };
                        return MidiSynthesizerProxy;
                    }());
                    base.MidiSynthesizerProxy = MidiSynthesizerProxy;
                    MidiSynthesizerProxy["__class"] = "org.herac.tuxguitar.player.base.MidiSynthesizerProxy";
                    MidiSynthesizerProxy["__interfaces"] = ["org.herac.tuxguitar.player.base.MidiSynthesizer"];
                })(base = player.base || (player.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var base;
                (function (base) {
                    var MidiTransmitter = (function () {
                        function MidiTransmitter() {
                            this.receivers = null;
                            this.receivers = (new java.util.ArrayList());
                        }
                        MidiTransmitter.prototype.sendNoteOn = function (channel, key, velocity, voice, bendMode) {
                            for (var i = 0; i < this.receivers.size(); i++) {
                                var receiver = this.receivers.get(i);
                                receiver.getReceiver().sendNoteOn(channel, key, velocity, voice, bendMode);
                            }
                        };
                        MidiTransmitter.prototype.sendNoteOff = function (channel, key, velocity, voice, bendMode) {
                            for (var i = 0; i < this.receivers.size(); i++) {
                                var receiver = this.receivers.get(i);
                                receiver.getReceiver().sendNoteOff(channel, key, velocity, voice, bendMode);
                            }
                        };
                        MidiTransmitter.prototype.sendPitchBend = function (channel, value, voice, bendMode) {
                            for (var i = 0; i < this.receivers.size(); i++) {
                                var receiver = this.receivers.get(i);
                                receiver.getReceiver().sendPitchBend(channel, value, voice, bendMode);
                            }
                        };
                        MidiTransmitter.prototype.sendProgramChange = function (channel, value) {
                            for (var i = 0; i < this.receivers.size(); i++) {
                                var receiver = this.receivers.get(i);
                                receiver.getReceiver().sendProgramChange(channel, value);
                            }
                        };
                        MidiTransmitter.prototype.sendControlChange = function (channel, controller, value) {
                            for (var i = 0; i < this.receivers.size(); i++) {
                                var receiver = this.receivers.get(i);
                                receiver.getReceiver().sendControlChange(channel, controller, value);
                            }
                        };
                        MidiTransmitter.prototype.sendParameter = function (channel, key, value) {
                            for (var i = 0; i < this.receivers.size(); i++) {
                                var receiver = this.receivers.get(i);
                                receiver.getReceiver().sendParameter(channel, key, value);
                            }
                        };
                        MidiTransmitter.prototype.sendAllNotesOff = function () {
                            for (var i = 0; i < this.receivers.size(); i++) {
                                var receiver = this.receivers.get(i);
                                receiver.getReceiver().sendAllNotesOff();
                            }
                        };
                        MidiTransmitter.prototype.sendPitchBendReset = function () {
                            for (var i = 0; i < this.receivers.size(); i++) {
                                var receiver = this.receivers.get(i);
                                receiver.getReceiver().sendPitchBendReset();
                            }
                        };
                        MidiTransmitter.prototype.addReceiver = function (id, receiver) {
                            var item = this.getReceiver(id);
                            if (item == null) {
                                this.receivers.add(new MidiTransmitter.MidiReceiverItem(this, id, receiver));
                            }
                        };
                        MidiTransmitter.prototype.removeReceiver = function (id) {
                            var item = this.getReceiver(id);
                            if (item != null) {
                                this.receivers.remove(item);
                            }
                        };
                        MidiTransmitter.prototype.getReceiver = function (id) {
                            if (id != null) {
                                for (var i = 0; i < this.receivers.size(); i++) {
                                    var receiver = this.receivers.get(i);
                                    if (receiver.getId() != null && (function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(receiver.getId(), id)) {
                                        return receiver;
                                    }
                                }
                            }
                            return null;
                        };
                        return MidiTransmitter;
                    }());
                    base.MidiTransmitter = MidiTransmitter;
                    MidiTransmitter["__class"] = "org.herac.tuxguitar.player.base.MidiTransmitter";
                    (function (MidiTransmitter) {
                        var MidiReceiverItem = (function () {
                            function MidiReceiverItem(__parent, id, receiver) {
                                this.__parent = __parent;
                                this.id = null;
                                this.receiver = null;
                                this.id = id;
                                this.receiver = receiver;
                            }
                            MidiReceiverItem.prototype.getId = function () {
                                return this.id;
                            };
                            MidiReceiverItem.prototype.getReceiver = function () {
                                return this.receiver;
                            };
                            return MidiReceiverItem;
                        }());
                        MidiTransmitter.MidiReceiverItem = MidiReceiverItem;
                        MidiReceiverItem["__class"] = "org.herac.tuxguitar.player.base.MidiTransmitter.MidiReceiverItem";
                    })(MidiTransmitter = base.MidiTransmitter || (base.MidiTransmitter = {}));
                })(base = player.base || (player.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var impl;
                (function (impl) {
                    var sequencer;
                    (function (sequencer) {
                        var MidiEvent = (function () {
                            function MidiEvent(tick, type, track, data) {
                                var _this = this;
                                if (((typeof tick === 'number') || tick === null) && ((typeof type === 'number') || type === null) && ((typeof track === 'number') || track === null) && ((data != null && data instanceof Array && (data.length == 0 || data[0] == null || (typeof data[0] === 'number'))) || data === null)) {
                                    var __args = Array.prototype.slice.call(arguments);
                                    this.tick = 0;
                                    this.type = 0;
                                    this.track = 0;
                                    this.data = null;
                                    this.tick = 0;
                                    this.type = 0;
                                    this.track = 0;
                                    this.data = null;
                                    (function () {
                                        _this.tick = tick;
                                        _this.type = type;
                                        _this.track = track;
                                        _this.data = data;
                                    })();
                                }
                                else if (((typeof tick === 'number') || tick === null) && ((typeof type === 'number') || type === null) && ((track != null && track instanceof Array && (track.length == 0 || track[0] == null || (typeof track[0] === 'number'))) || track === null) && data === undefined) {
                                    var __args = Array.prototype.slice.call(arguments);
                                    var data_1 = __args[2];
                                    {
                                        var __args_10 = Array.prototype.slice.call(arguments);
                                        var track_1 = MidiEvent.ALL_TRACKS;
                                        this.tick = 0;
                                        this.type = 0;
                                        this.track = 0;
                                        this.data = null;
                                        this.tick = 0;
                                        this.type = 0;
                                        this.track = 0;
                                        this.data = null;
                                        (function () {
                                            _this.tick = tick;
                                            _this.type = type;
                                            _this.track = track_1;
                                            _this.data = data_1;
                                        })();
                                    }
                                }
                                else
                                    throw new Error('invalid overload');
                            }
                            MidiEvent.prototype.getTick = function () {
                                return this.tick;
                            };
                            MidiEvent.prototype.getType = function () {
                                return this.type;
                            };
                            MidiEvent.prototype.getTrack = function () {
                                return this.track;
                            };
                            MidiEvent.prototype.getData = function () {
                                return this.data;
                            };
                            MidiEvent.systemReset = function (tick) {
                                return new MidiEvent(tick, MidiEvent.MIDI_SYSTEM_EVENT, MidiEvent.ALL_TRACKS, null);
                            };
                            MidiEvent.noteOn = function (tick, track, channel, key, velocity, voice, bendMode) {
                                return new MidiEvent(tick, MidiEvent.MIDI_EVENT_NOTEON, track, [(channel | 0), (key | 0), (velocity | 0), (voice | 0), ((bendMode ? 1 : 0) | 0)]);
                            };
                            MidiEvent.noteOff = function (tick, track, channel, key, velocity, voice, bendMode) {
                                return new MidiEvent(tick, MidiEvent.MIDI_EVENT_NOTEOFF, track, [(channel | 0), (key | 0), (velocity | 0), (voice | 0), ((bendMode ? 1 : 0) | 0)]);
                            };
                            MidiEvent.pitchBend = function (tick, track, channel, value, voice, bendMode) {
                                return new MidiEvent(tick, MidiEvent.MIDI_EVENT_PITCH_BEND, track, [(channel | 0), (value | 0), (voice | 0), ((bendMode ? 1 : 0) | 0)]);
                            };
                            MidiEvent.controlChange = function (tick, track, channel, controller, value) {
                                return new MidiEvent(tick, MidiEvent.MIDI_EVENT_CONTROL_CHANGE, track, [(channel | 0), (controller | 0), (value | 0)]);
                            };
                            MidiEvent.programChange = function (tick, track, channel, value) {
                                return new MidiEvent(tick, MidiEvent.MIDI_EVENT_PROGRAM_CHANGE, track, [(channel | 0), (value | 0)]);
                            };
                            MidiEvent.tempoInUSQ = function (tick, usq) {
                                return new MidiEvent(tick, MidiEvent.MIDI_SYSTEM_EVENT, [81, ((usq & 255) | 0), (((usq >> 8) & 255) | 0), (((usq >> 16) & 255) | 0)]);
                            };
                            return MidiEvent;
                        }());
                        MidiEvent.ALL_TRACKS = -1;
                        MidiEvent.MIDI_SYSTEM_EVENT = 1;
                        MidiEvent.MIDI_EVENT_NOTEON = 2;
                        MidiEvent.MIDI_EVENT_NOTEOFF = 3;
                        MidiEvent.MIDI_EVENT_PROGRAM_CHANGE = 4;
                        MidiEvent.MIDI_EVENT_CONTROL_CHANGE = 5;
                        MidiEvent.MIDI_EVENT_PITCH_BEND = 6;
                        sequencer.MidiEvent = MidiEvent;
                        MidiEvent["__class"] = "org.herac.tuxguitar.player.impl.sequencer.MidiEvent";
                    })(sequencer = impl.sequencer || (impl.sequencer = {}));
                })(impl = player.impl || (player.impl = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var impl;
                (function (impl) {
                    var sequencer;
                    (function (sequencer_1) {
                        var MidiEventDispacher = (function () {
                            function MidiEventDispacher(sequencer) {
                                this.sequencer = null;
                                this.sequencer = sequencer;
                            }
                            MidiEventDispacher.prototype.dispatch = function (event) {
                                if (event.getType() === org.herac.tuxguitar.player.impl.sequencer.MidiEvent.MIDI_EVENT_NOTEON) {
                                    this.sequencer.getTransmitter().sendNoteOn(event.getData()[0], event.getData()[1], event.getData()[2], event.getData()[3], (event.getData()[4] === 1));
                                }
                                else if (event.getType() === org.herac.tuxguitar.player.impl.sequencer.MidiEvent.MIDI_EVENT_NOTEOFF) {
                                    this.sequencer.getTransmitter().sendNoteOff(event.getData()[0], event.getData()[1], event.getData()[2], event.getData()[3], (event.getData()[4] === 1));
                                }
                                else if (event.getType() === org.herac.tuxguitar.player.impl.sequencer.MidiEvent.MIDI_EVENT_PITCH_BEND) {
                                    this.sequencer.getTransmitter().sendPitchBend(event.getData()[0], event.getData()[1], event.getData()[2], (event.getData()[3] === 1));
                                }
                                else if (event.getType() === org.herac.tuxguitar.player.impl.sequencer.MidiEvent.MIDI_EVENT_CONTROL_CHANGE) {
                                    this.sequencer.getTransmitter().sendControlChange(event.getData()[0], event.getData()[1], event.getData()[2]);
                                }
                                else if (event.getType() === org.herac.tuxguitar.player.impl.sequencer.MidiEvent.MIDI_EVENT_PROGRAM_CHANGE) {
                                    this.sequencer.getTransmitter().sendProgramChange(event.getData()[0], event.getData()[1]);
                                }
                                else if (event.getType() === org.herac.tuxguitar.player.impl.sequencer.MidiEvent.MIDI_SYSTEM_EVENT) {
                                    if (event.getData()[0] === 81) {
                                        var usq = ((event.getData()[1] & 255) | ((event.getData()[2] & 255) << 8) | ((event.getData()[3] & 255) << 16));
                                        this.sequencer.setTempo((((60.0 * 1000.0) / (usq / 1000.0)) | 0));
                                    }
                                }
                            };
                            return MidiEventDispacher;
                        }());
                        sequencer_1.MidiEventDispacher = MidiEventDispacher;
                        MidiEventDispacher["__class"] = "org.herac.tuxguitar.player.impl.sequencer.MidiEventDispacher";
                    })(sequencer = impl.sequencer || (impl.sequencer = {}));
                })(impl = player.impl || (player.impl = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var impl;
                (function (impl) {
                    var sequencer;
                    (function (sequencer_2) {
                        var MidiEventPlayer = (function () {
                            function MidiEventPlayer(sequencer) {
                                this.sequencer = null;
                                this.events = null;
                                this.tick = 0;
                                this.lastTick = 0;
                                this.__reset = false;
                                this.sequencer = sequencer;
                                this.events = (new java.util.ArrayList());
                                this.reset();
                            }
                            MidiEventPlayer.prototype.process = function () {
                                this.lastTick = this.tick;
                                this.tick = this.sequencer.getTickPosition();
                                for (var i = 0; i < this.events.size(); i++) {
                                    var event_3 = this.events.get(i);
                                    if (this.shouldSend(event_3, this.tick, this.lastTick)) {
                                        this.sequencer.sendEvent(event_3);
                                    }
                                }
                                this.__reset = false;
                            };
                            MidiEventPlayer.prototype.shouldSend = function (event, tick, lastTick) {
                                if (event.getTick() > tick) {
                                    return false;
                                }
                                if (event.getTrack() !== org.herac.tuxguitar.player.impl.sequencer.MidiEvent.ALL_TRACKS) {
                                    if (this.sequencer.getMidiTrackController().isMute(event.getTrack())) {
                                        return false;
                                    }
                                    if (this.sequencer.getMidiTrackController().isAnySolo() && !this.sequencer.getMidiTrackController().isSolo(event.getTrack())) {
                                        return false;
                                    }
                                }
                                if (this.__reset) {
                                    if (event.getType() === org.herac.tuxguitar.player.impl.sequencer.MidiEvent.MIDI_SYSTEM_EVENT) {
                                        return true;
                                    }
                                    if (event.getType() === org.herac.tuxguitar.player.impl.sequencer.MidiEvent.MIDI_EVENT_CONTROL_CHANGE) {
                                        return true;
                                    }
                                    if (event.getType() === org.herac.tuxguitar.player.impl.sequencer.MidiEvent.MIDI_EVENT_PROGRAM_CHANGE) {
                                        return true;
                                    }
                                }
                                return (event.getTick() > lastTick);
                            };
                            MidiEventPlayer.prototype.addEvent = function (event) {
                                this.events.add(event);
                            };
                            MidiEventPlayer.prototype.clearEvents = function () {
                                this.events.clear();
                            };
                            MidiEventPlayer.prototype.reset = function () {
                                this.tick = (this.sequencer.getTickPosition() - 1);
                                this.__reset = true;
                            };
                            return MidiEventPlayer;
                        }());
                        sequencer_2.MidiEventPlayer = MidiEventPlayer;
                        MidiEventPlayer["__class"] = "org.herac.tuxguitar.player.impl.sequencer.MidiEventPlayer";
                    })(sequencer = impl.sequencer || (impl.sequencer = {}));
                })(impl = player.impl || (player.impl = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var impl;
                (function (impl) {
                    var sequencer;
                    (function (sequencer_3) {
                        var MidiSequencerImpl = (function () {
                            function MidiSequencerImpl(context) {
                                this.__reset = false;
                                this.running = false;
                                this.stopped = false;
                                this.context = null;
                                this.transmitter = null;
                                this.midiTickPlayer = null;
                                this.midiEventPlayer = null;
                                this.midiEventDispacher = null;
                                this.midiTrackController = null;
                                this.running = false;
                                this.stopped = true;
                                this.context = context;
                                this.midiTickPlayer = new org.herac.tuxguitar.player.impl.sequencer.MidiTickPlayer();
                                this.midiEventPlayer = new org.herac.tuxguitar.player.impl.sequencer.MidiEventPlayer(this);
                                this.midiEventDispacher = new org.herac.tuxguitar.player.impl.sequencer.MidiEventDispacher(this);
                                this.midiTrackController = new org.herac.tuxguitar.player.impl.sequencer.MidiTrackController(this);
                            }
                            MidiSequencerImpl.prototype.getMidiTrackController = function () {
                                return this.midiTrackController;
                            };
                            MidiSequencerImpl.prototype.setTempo = function (tempo) {
                                this.midiTickPlayer.setTempo(tempo);
                            };
                            MidiSequencerImpl.prototype.getTickPosition = function () {
                                return this.midiTickPlayer.getTick();
                            };
                            MidiSequencerImpl.prototype.setTickPosition = function (tickPosition) {
                                this.__reset = true;
                                this.midiTickPlayer.setTick(tickPosition);
                            };
                            MidiSequencerImpl.prototype.getTickLength = function () {
                                return this.midiTickPlayer.getTickLength();
                            };
                            MidiSequencerImpl.prototype.sendEvent = function (event) {
                                if (!this.__reset) {
                                    this.midiEventDispacher.dispatch(event);
                                }
                            };
                            MidiSequencerImpl.prototype.addEvent = function (event) {
                                this.midiEventPlayer.addEvent(event);
                                this.midiTickPlayer.notifyTick(event.getTick());
                            };
                            MidiSequencerImpl.prototype.isRunning = function () {
                                return this.running;
                            };
                            MidiSequencerImpl.prototype.setRunning = function (running) {
                                this.running = running;
                                if (this.running) {
                                    this.setTempo(120);
                                    this.setTickPosition(this.getTickPosition());
                                    new MidiSequencerImpl.MidiTimer(this, this).start();
                                }
                                else {
                                    this.process();
                                }
                            };
                            MidiSequencerImpl.prototype.stop = function () {
                                this.setRunning(false);
                            };
                            MidiSequencerImpl.prototype.start = function () {
                                this.setRunning(true);
                            };
                            MidiSequencerImpl.prototype.reset = function () {
                                this.getTransmitter().sendAllNotesOff();
                                this.getTransmitter().sendPitchBendReset();
                            };
                            MidiSequencerImpl.prototype.process = function () {
                                var running = this.isRunning();
                                if (running) {
                                    if (this.__reset) {
                                        this.reset();
                                        this.__reset = false;
                                        this.midiEventPlayer.reset();
                                    }
                                    this.stopped = false;
                                    this.midiTickPlayer.process();
                                    this.midiEventPlayer.process();
                                    if (this.getTickPosition() > this.getTickLength()) {
                                        this.stop();
                                    }
                                }
                                else if (!this.stopped) {
                                    this.stopped = true;
                                    this.midiEventPlayer.clearEvents();
                                    this.midiTickPlayer.clearTick();
                                    this.reset();
                                }
                                return running;
                            };
                            MidiSequencerImpl.prototype.getTransmitter = function () {
                                return this.transmitter;
                            };
                            MidiSequencerImpl.prototype.setTransmitter = function (transmitter) {
                                this.transmitter = transmitter;
                            };
                            MidiSequencerImpl.prototype.check = function () {
                            };
                            MidiSequencerImpl.prototype.open = function () {
                            };
                            MidiSequencerImpl.prototype.close = function () {
                                if (this.isRunning()) {
                                    this.stop();
                                }
                            };
                            MidiSequencerImpl.prototype.createSequence = function (tracks) {
                                return new org.herac.tuxguitar.player.impl.sequencer.MidiSequenceHandlerImpl(this, tracks);
                            };
                            MidiSequencerImpl.prototype.setSolo = function (index, solo) {
                                this.getMidiTrackController().setSolo(index, solo);
                            };
                            MidiSequencerImpl.prototype.setMute = function (index, mute) {
                                this.getMidiTrackController().setMute(index, mute);
                            };
                            MidiSequencerImpl.prototype.getKey = function () {
                                return "tuxguitar.sequencer";
                            };
                            MidiSequencerImpl.prototype.getName = function () {
                                return "TuxGuitar Sequencer";
                            };
                            MidiSequencerImpl.prototype.getContext = function () {
                                return this.context;
                            };
                            return MidiSequencerImpl;
                        }());
                        sequencer_3.MidiSequencerImpl = MidiSequencerImpl;
                        MidiSequencerImpl["__class"] = "org.herac.tuxguitar.player.impl.sequencer.MidiSequencerImpl";
                        MidiSequencerImpl["__interfaces"] = ["org.herac.tuxguitar.player.base.MidiDevice", "org.herac.tuxguitar.player.base.MidiSequencer"];
                        (function (MidiSequencerImpl) {
                            var MidiTimer = (function () {
                                function MidiTimer(__parent, sequencer) {
                                    this.__parent = __parent;
                                    this.sequencer = null;
                                    this.sequencer = sequencer;
                                }
                                MidiTimer.prototype.run = function () {
                                    org.herac.tuxguitar.thread.TGThreadManager.getInstance(this.sequencer.getContext()).loop(new MidiTimer.MidiTimer$0(this));
                                };
                                MidiTimer.prototype.processLoop = function () {
                                    var running = false;
                                    try {
                                        {
                                            running = this.sequencer.process();
                                        }
                                        ;
                                    }
                                    catch (throwable) {
                                        console.error(throwable.message, throwable);
                                    }
                                    ;
                                    return running;
                                };
                                MidiTimer.prototype.start = function () {
                                    org.herac.tuxguitar.thread.TGThreadManager.getInstance(this.sequencer.getContext()).start(this);
                                };
                                return MidiTimer;
                            }());
                            MidiSequencerImpl.MidiTimer = MidiTimer;
                            MidiTimer["__class"] = "org.herac.tuxguitar.player.impl.sequencer.MidiSequencerImpl.MidiTimer";
                            MidiTimer["__interfaces"] = ["java.lang.Runnable"];
                            (function (MidiTimer) {
                                var MidiTimer$0 = (function () {
                                    function MidiTimer$0(__parent) {
                                        this.__parent = __parent;
                                    }
                                    MidiTimer$0.prototype.process = function () {
                                        return (this.__parent.processLoop() ? org.herac.tuxguitar.player.impl.sequencer.MidiSequencerImpl.MidiTimer.TIMER_DELAY : org.herac.tuxguitar.thread.TGThreadLoop.BREAK);
                                    };
                                    return MidiTimer$0;
                                }());
                                MidiTimer.MidiTimer$0 = MidiTimer$0;
                                MidiTimer$0["__interfaces"] = ["org.herac.tuxguitar.thread.TGThreadLoop"];
                            })(MidiTimer = MidiSequencerImpl.MidiTimer || (MidiSequencerImpl.MidiTimer = {}));
                        })(MidiSequencerImpl = sequencer_3.MidiSequencerImpl || (sequencer_3.MidiSequencerImpl = {}));
                    })(sequencer = impl.sequencer || (impl.sequencer = {}));
                })(impl = player.impl || (player.impl = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var impl;
                (function (impl) {
                    var sequencer;
                    (function (sequencer_4) {
                        var MidiSequencerProviderImpl = (function () {
                            function MidiSequencerProviderImpl(context) {
                                this.context = null;
                                this.sequencers = null;
                                this.context = context;
                            }
                            MidiSequencerProviderImpl.prototype.listSequencers = function () {
                                if (this.sequencers == null) {
                                    this.sequencers = (new java.util.ArrayList());
                                    this.sequencers.add(new org.herac.tuxguitar.player.impl.sequencer.MidiSequencerImpl(this.context));
                                }
                                return this.sequencers;
                            };
                            MidiSequencerProviderImpl.prototype.closeAll = function () {
                                var it = this.listSequencers().iterator();
                                while ((it.hasNext())) {
                                    var sequencer_5 = it.next();
                                    sequencer_5.close();
                                }
                                ;
                            };
                            return MidiSequencerProviderImpl;
                        }());
                        sequencer_4.MidiSequencerProviderImpl = MidiSequencerProviderImpl;
                        MidiSequencerProviderImpl["__class"] = "org.herac.tuxguitar.player.impl.sequencer.MidiSequencerProviderImpl";
                        MidiSequencerProviderImpl["__interfaces"] = ["org.herac.tuxguitar.player.base.MidiSequencerProvider"];
                    })(sequencer = impl.sequencer || (impl.sequencer = {}));
                })(impl = player.impl || (player.impl = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var impl;
                (function (impl) {
                    var sequencer;
                    (function (sequencer) {
                        var MidiTickPlayer = (function () {
                            function MidiTickPlayer() {
                                this.tempo = 0;
                                this.tick = 0;
                                this.time = 0;
                                this.lastTime = 0;
                                this.tickLength = 0;
                                this.tickChanged = false;
                            }
                            MidiTickPlayer.prototype.process = function () {
                                this.lastTime = this.time;
                                this.time = java.lang.System.currentTimeMillis();
                                if (!this.tickChanged) {
                                    this.tick += (org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME * (this.getTempo() * (this.time - this.lastTime) / 60.0) / MidiTickPlayer.SECOND_IN_MILLIS);
                                }
                                this.tickChanged = false;
                            };
                            MidiTickPlayer.prototype.clearTick = function () {
                                this.tickLength = 0;
                            };
                            MidiTickPlayer.prototype.getTempo = function () {
                                return this.tempo;
                            };
                            MidiTickPlayer.prototype.setTempo = function (tempo) {
                                this.tempo = tempo;
                            };
                            MidiTickPlayer.prototype.getTick = function () {
                                return this.tick;
                            };
                            MidiTickPlayer.prototype.setTick = function (tick) {
                                this.tick = tick;
                                this.tickChanged = true;
                            };
                            MidiTickPlayer.prototype.getTickLength = function () {
                                return this.tickLength;
                            };
                            MidiTickPlayer.prototype.notifyTick = function (tick) {
                                this.tickLength = Math.max(this.tickLength, tick);
                            };
                            return MidiTickPlayer;
                        }());
                        MidiTickPlayer.SECOND_IN_MILLIS = 1000;
                        sequencer.MidiTickPlayer = MidiTickPlayer;
                        MidiTickPlayer["__class"] = "org.herac.tuxguitar.player.impl.sequencer.MidiTickPlayer";
                    })(sequencer = impl.sequencer || (impl.sequencer = {}));
                })(impl = player.impl || (player.impl = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var impl;
                (function (impl) {
                    var sequencer;
                    (function (sequencer) {
                        var MidiTrack = (function () {
                            function MidiTrack() {
                                this.solo = false;
                                this.mute = false;
                                this.solo = false;
                                this.mute = false;
                            }
                            MidiTrack.prototype.isMute = function () {
                                return this.mute;
                            };
                            MidiTrack.prototype.setMute = function (mute) {
                                this.mute = mute;
                            };
                            MidiTrack.prototype.isSolo = function () {
                                return this.solo;
                            };
                            MidiTrack.prototype.setSolo = function (solo) {
                                this.solo = solo;
                            };
                            return MidiTrack;
                        }());
                        sequencer.MidiTrack = MidiTrack;
                        MidiTrack["__class"] = "org.herac.tuxguitar.player.impl.sequencer.MidiTrack";
                    })(sequencer = impl.sequencer || (impl.sequencer = {}));
                })(impl = player.impl || (player.impl = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var impl;
                (function (impl) {
                    var sequencer;
                    (function (sequencer_6) {
                        var MidiTrackController = (function () {
                            function MidiTrackController(sequencer) {
                                this.tracks = null;
                                this.sequencer = null;
                                this.anySolo = false;
                                this.sequencer = sequencer;
                                this.tracks = (new java.util.ArrayList());
                                this.anySolo = false;
                            }
                            MidiTrackController.prototype.init = function (count) {
                                this.tracks.clear();
                                for (var i = 0; i < count; i++) {
                                    this.tracks.add(new org.herac.tuxguitar.player.impl.sequencer.MidiTrack());
                                }
                            };
                            MidiTrackController.prototype.clearTracks = function () {
                                this.tracks.clear();
                            };
                            MidiTrackController.prototype.checkAnySolo = function () {
                                this.anySolo = false;
                                for (var i = 0; i < this.tracks.size(); i++) {
                                    var track = this.tracks.get(i);
                                    if (track.isSolo()) {
                                        this.anySolo = true;
                                        break;
                                    }
                                }
                            };
                            MidiTrackController.prototype.setSolo = function (index, solo) {
                                if (index >= 0 && index < this.tracks.size()) {
                                    var track = this.tracks.get(index);
                                    track.setSolo(solo);
                                    this.checkAnySolo();
                                    if (track.isSolo()) {
                                        this.setMute(index, false);
                                        this.sequencer.getTransmitter().sendAllNotesOff();
                                    }
                                }
                            };
                            MidiTrackController.prototype.setMute = function (index, mute) {
                                if (index >= 0 && index < this.tracks.size()) {
                                    var track = this.tracks.get(index);
                                    track.setMute(mute);
                                    if (track.isMute()) {
                                        this.setSolo(index, false);
                                        this.sequencer.getTransmitter().sendAllNotesOff();
                                    }
                                }
                            };
                            MidiTrackController.prototype.isSolo = function (index) {
                                if (index >= 0 && index < this.tracks.size()) {
                                    var track = this.tracks.get(index);
                                    return track.isSolo();
                                }
                                return false;
                            };
                            MidiTrackController.prototype.isMute = function (index) {
                                if (index >= 0 && index < this.tracks.size()) {
                                    var track = this.tracks.get(index);
                                    return track.isMute();
                                }
                                return false;
                            };
                            MidiTrackController.prototype.isAnySolo = function () {
                                return this.anySolo;
                            };
                            return MidiTrackController;
                        }());
                        sequencer_6.MidiTrackController = MidiTrackController;
                        MidiTrackController["__class"] = "org.herac.tuxguitar.player.impl.sequencer.MidiTrackController";
                    })(sequencer = impl.sequencer || (impl.sequencer = {}));
                })(impl = player.impl || (player.impl = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var plugin;
                (function (plugin) {
                    var TGMidiOutputPortProviderPlugin = (function () {
                        function TGMidiOutputPortProviderPlugin() {
                            this.provider = null;
                        }
                        TGMidiOutputPortProviderPlugin.prototype.connect = function (context) {
                            try {
                                if (this.provider == null) {
                                    this.provider = this.createProvider(context);
                                    org.herac.tuxguitar.player.base.MidiPlayer.getInstance(context).addOutputPortProvider$org_herac_tuxguitar_player_base_MidiOutputPortProvider(this.provider);
                                }
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.util.plugin.TGPluginException(throwable.message, throwable);
                            }
                            ;
                        };
                        TGMidiOutputPortProviderPlugin.prototype.disconnect = function (context) {
                            try {
                                if (this.provider != null) {
                                    org.herac.tuxguitar.player.base.MidiPlayer.getInstance(context).removeOutputPortProvider(this.provider);
                                    this.provider.closeAll();
                                    this.provider = null;
                                }
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.util.plugin.TGPluginException(throwable.message, throwable);
                            }
                            ;
                        };
                        return TGMidiOutputPortProviderPlugin;
                    }());
                    plugin.TGMidiOutputPortProviderPlugin = TGMidiOutputPortProviderPlugin;
                    TGMidiOutputPortProviderPlugin["__class"] = "org.herac.tuxguitar.player.plugin.TGMidiOutputPortProviderPlugin";
                    TGMidiOutputPortProviderPlugin["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                })(plugin = player.plugin || (player.plugin = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var plugin;
                (function (plugin) {
                    var TGMidiSequencerProviderPlugin = (function () {
                        function TGMidiSequencerProviderPlugin() {
                            this.provider = null;
                        }
                        TGMidiSequencerProviderPlugin.prototype.connect = function (context) {
                            try {
                                if (this.provider == null) {
                                    this.provider = this.createProvider(context);
                                    org.herac.tuxguitar.player.base.MidiPlayer.getInstance(context).addSequencerProvider$org_herac_tuxguitar_player_base_MidiSequencerProvider(this.provider);
                                }
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.util.plugin.TGPluginException(throwable.message, throwable);
                            }
                            ;
                        };
                        TGMidiSequencerProviderPlugin.prototype.disconnect = function (context) {
                            try {
                                if (this.provider != null) {
                                    org.herac.tuxguitar.player.base.MidiPlayer.getInstance(context).removeSequencerProvider(this.provider);
                                    this.provider.closeAll();
                                    this.provider = null;
                                }
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.util.plugin.TGPluginException(throwable.message, throwable);
                            }
                            ;
                        };
                        return TGMidiSequencerProviderPlugin;
                    }());
                    plugin.TGMidiSequencerProviderPlugin = TGMidiSequencerProviderPlugin;
                    TGMidiSequencerProviderPlugin["__class"] = "org.herac.tuxguitar.player.plugin.TGMidiSequencerProviderPlugin";
                    TGMidiSequencerProviderPlugin["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                })(plugin = player.plugin || (player.plugin = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var resource;
            (function (resource) {
                var TGResourceManager = (function () {
                    function TGResourceManager() {
                        this.resourceLoader = null;
                    }
                    TGResourceManager.prototype.loadClass = function (name) {
                        if (this.resourceLoader != null) {
                            return this.resourceLoader.loadClass(name);
                        }
                        return null;
                    };
                    TGResourceManager.prototype.getResourceAsStream = function (name) {
                        if (this.resourceLoader != null) {
                            return this.resourceLoader.getResourceAsStream(name);
                        }
                        return null;
                    };
                    TGResourceManager.prototype.getResource = function (name) {
                        if (this.resourceLoader != null) {
                            return this.resourceLoader.getResource(name);
                        }
                        return null;
                    };
                    TGResourceManager.prototype.getResources = function (name) {
                        if (this.resourceLoader != null) {
                            return this.resourceLoader.getResources(name);
                        }
                        return null;
                    };
                    TGResourceManager.prototype.getResourceLoader = function () {
                        return this.resourceLoader;
                    };
                    TGResourceManager.prototype.setResourceLoader = function (resourceLoader) {
                        this.resourceLoader = resourceLoader;
                    };
                    TGResourceManager.getInstance = function (context) {
                        return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGResourceManager), new TGResourceManager.TGResourceManager$0());
                    };
                    return TGResourceManager;
                }());
                resource.TGResourceManager = TGResourceManager;
                TGResourceManager["__class"] = "org.herac.tuxguitar.resource.TGResourceManager";
                TGResourceManager["__interfaces"] = ["org.herac.tuxguitar.resource.TGResourceLoader"];
                (function (TGResourceManager) {
                    var TGResourceManager$0 = (function () {
                        function TGResourceManager$0() {
                        }
                        TGResourceManager$0.prototype.createInstance = function (context) {
                            return new org.herac.tuxguitar.resource.TGResourceManager();
                        };
                        return TGResourceManager$0;
                    }());
                    TGResourceManager.TGResourceManager$0 = TGResourceManager$0;
                    TGResourceManager$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                })(TGResourceManager = resource.TGResourceManager || (resource.TGResourceManager = {}));
            })(resource = tuxguitar.resource || (tuxguitar.resource = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var helpers;
                (function (helpers) {
                    var TGSongSegment = (function () {
                        function TGSongSegment() {
                            this.headers = null;
                            this.tracks = null;
                            this.headers = (new java.util.ArrayList());
                            this.tracks = (new java.util.ArrayList());
                        }
                        TGSongSegment.prototype.getHeaders = function () {
                            return this.headers;
                        };
                        TGSongSegment.prototype.getTracks = function () {
                            return this.tracks;
                        };
                        TGSongSegment.prototype.addTrack = function (track, measures) {
                            this.tracks.add(new org.herac.tuxguitar.song.helpers.TGTrackSegment(track, measures));
                        };
                        TGSongSegment.prototype.isEmpty = function () {
                            return (this.headers.isEmpty() || this.tracks.isEmpty());
                        };
                        TGSongSegment.prototype.clone = function (factory) {
                            var segment = new TGSongSegment();
                            for (var i = 0; i < this.getHeaders().size(); i++) {
                                var header = this.getHeaders().get(i);
                                segment.getHeaders().add(header.clone(factory));
                            }
                            for (var i = 0; i < this.getTracks().size(); i++) {
                                var trackMeasure = this.getTracks().get(i);
                                segment.getTracks().add(trackMeasure.clone(factory, segment.getHeaders()));
                            }
                            return segment;
                        };
                        return TGSongSegment;
                    }());
                    helpers.TGSongSegment = TGSongSegment;
                    TGSongSegment["__class"] = "org.herac.tuxguitar.song.helpers.TGSongSegment";
                })(helpers = song.helpers || (song.helpers = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song_1) {
                var helpers;
                (function (helpers) {
                    var TGSongSegmentHelper = (function () {
                        function TGSongSegmentHelper(sm) {
                            this.sm = null;
                            this.sm = sm;
                        }
                        TGSongSegmentHelper.prototype.copyMeasures$org_herac_tuxguitar_song_models_TGSong$int$int = function (song, m1, m2) {
                            var segment = new org.herac.tuxguitar.song.helpers.TGSongSegment();
                            var number1 = Math.max(1, m1);
                            var number2 = Math.min(song.countMeasureHeaders(), m2);
                            for (var number = number1; number <= number2; number++) {
                                segment.getHeaders().add(this.sm.getMeasureHeader(song, number));
                            }
                            var it = song.getTracks();
                            while ((it.hasNext())) {
                                var track = it.next();
                                var measures = (new java.util.ArrayList());
                                for (var number = number1; number <= number2; number++) {
                                    measures.add(this.sm.getTrackManager().getMeasure(track, number));
                                }
                                segment.addTrack(track.getNumber(), measures);
                            }
                            ;
                            return segment.clone(this.sm.getFactory());
                        };
                        TGSongSegmentHelper.prototype.copyMeasures$org_herac_tuxguitar_song_models_TGSong$int$int$org_herac_tuxguitar_song_models_TGTrack = function (song, m1, m2, track) {
                            var segment = new org.herac.tuxguitar.song.helpers.TGSongSegment();
                            var measures = (new java.util.ArrayList());
                            var number1 = Math.max(1, m1);
                            var number2 = Math.min(song.countMeasureHeaders(), m2);
                            for (var number = number1; number <= number2; number++) {
                                segment.getHeaders().add(this.sm.getMeasureHeader(song, number));
                                measures.add(this.sm.getTrackManager().getMeasure(track, number));
                            }
                            segment.addTrack(track.getNumber(), measures);
                            return segment.clone(this.sm.getFactory());
                        };
                        TGSongSegmentHelper.prototype.copyMeasures = function (song, m1, m2, track) {
                            if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((typeof m1 === 'number') || m1 === null) && ((typeof m2 === 'number') || m2 === null) && ((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null)) {
                                return this.copyMeasures$org_herac_tuxguitar_song_models_TGSong$int$int$org_herac_tuxguitar_song_models_TGTrack(song, m1, m2, track);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((typeof m1 === 'number') || m1 === null) && ((typeof m2 === 'number') || m2 === null) && track === undefined) {
                                return this.copyMeasures$org_herac_tuxguitar_song_models_TGSong$int$int(song, m1, m2);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongSegmentHelper.prototype.insertMeasures$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_helpers_TGSongSegment$int$long$int = function (song, segment, fromNumber, move, track) {
                            var headers = (new java.util.ArrayList());
                            this.sm.moveMeasureHeaders(song, segment.getHeaders(), move, 0, false);
                            var headerNumber = fromNumber;
                            var headersIt = segment.getHeaders().iterator();
                            while ((headersIt.hasNext())) {
                                var header = headersIt.next();
                                header.setNumber(headerNumber);
                                headers.add(header);
                                headerNumber++;
                            }
                            ;
                            var start = headers.get(0).getStart();
                            var end = headers.get(headers.size() - 1).getStart() + headers.get(headers.size() - 1).getLength();
                            var headersBeforeEnd = this.sm.getMeasureHeadersBeforeEnd(song, start);
                            this.sm.moveMeasureHeaders(song, headersBeforeEnd, end - start, headers.size(), true);
                            headersIt = segment.getHeaders().iterator();
                            while ((headersIt.hasNext())) {
                                var header = headersIt.next();
                                this.sm.addMeasureHeader$org_herac_tuxguitar_song_models_TGSong$int$org_herac_tuxguitar_song_models_TGMeasureHeader(song, header.getNumber() - 1, header);
                            }
                            ;
                            var tracksIt = song.getTracks();
                            while ((tracksIt.hasNext())) {
                                var currTrack = tracksIt.next();
                                var measures = null;
                                var tracks = segment.getTracks().iterator();
                                while ((tracks.hasNext())) {
                                    var tSegment = tracks.next();
                                    if (((track > 0 && segment.getTracks().size() === 1) ? track : tSegment.getTrack()) === currTrack.getNumber()) {
                                        measures = tSegment.getMeasures();
                                        break;
                                    }
                                }
                                ;
                                if (measures == null) {
                                    var tm = this.sm.getTrackManager();
                                    var measure = (fromNumber > 1 ? tm.getMeasure(currTrack, (fromNumber - 1)) : tm.getMeasure(currTrack, headerNumber));
                                    var clef = (measure != null ? measure.getClef() : org.herac.tuxguitar.song.models.TGMeasure.DEFAULT_CLEF_$LI$());
                                    var keySignature = (measure != null ? measure.getKeySignature() : org.herac.tuxguitar.song.models.TGMeasure.DEFAULT_KEY_SIGNATURE);
                                    measures = this.getEmptyMeasures(segment.getHeaders().size(), clef, keySignature);
                                }
                                for (var i = 0; i < measures.size(); i++) {
                                    var measure = measures.get(i);
                                    measure.setHeader(headers.get(i));
                                    this.sm.getMeasureManager().moveAllBeats(measure, move);
                                }
                                this.insertMeasures$org_herac_tuxguitar_song_models_TGTrack$java_util_List(currTrack, measures);
                            }
                            ;
                        };
                        TGSongSegmentHelper.prototype.insertMeasures = function (song, segment, fromNumber, move, track) {
                            if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((segment != null && segment instanceof org.herac.tuxguitar.song.helpers.TGSongSegment) || segment === null) && ((typeof fromNumber === 'number') || fromNumber === null) && ((typeof move === 'number') || move === null) && ((typeof track === 'number') || track === null)) {
                                return this.insertMeasures$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_helpers_TGSongSegment$int$long$int(song, segment, fromNumber, move, track);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGTrack) || song === null) && ((segment != null && (segment["__interfaces"] != null && segment["__interfaces"].indexOf("java.util.List") >= 0 || segment.constructor != null && segment.constructor["__interfaces"] != null && segment.constructor["__interfaces"].indexOf("java.util.List") >= 0)) || segment === null) && fromNumber === undefined && move === undefined && track === undefined) {
                                return this.insertMeasures$org_herac_tuxguitar_song_models_TGTrack$java_util_List(song, segment);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongSegmentHelper.prototype.insertMeasures$org_herac_tuxguitar_song_models_TGTrack$java_util_List = function (track, measures) {
                            if (!measures.isEmpty()) {
                                var it = measures.iterator();
                                while ((it.hasNext())) {
                                    var measure = it.next();
                                    this.sm.getMeasureManager().removeNotesAfterString(measure, track.stringCount());
                                    this.sm.getTrackManager().addMeasure$org_herac_tuxguitar_song_models_TGTrack$int$org_herac_tuxguitar_song_models_TGMeasure(track, (measure.getNumber() - 1), measure);
                                }
                                ;
                            }
                        };
                        TGSongSegmentHelper.prototype.replaceMeasures = function (song, segment, move, track) {
                            var replaceHeader = (track === 0 || song.countTracks() === 1);
                            var measureHeaders = (new java.util.ArrayList());
                            this.sm.moveMeasureHeaders(song, segment.getHeaders(), move, 0, false);
                            var sHeaders = segment.getHeaders().iterator();
                            while ((sHeaders.hasNext())) {
                                var header = sHeaders.next();
                                var replace = (replaceHeader ? this.sm.replaceMeasureHeader(song, header) : this.sm.getMeasureHeaderAt(song, header.getStart()));
                                var nextHeaders = this.sm.getMeasureHeadersAfter(song, replace.getNumber()).iterator();
                                var nextStart = (replace.getStart() + replace.getLength());
                                while ((nextHeaders.hasNext())) {
                                    var next = nextHeaders.next();
                                    this.sm.moveMeasureComponents(song, next, (nextStart - next.getStart()));
                                    this.sm.moveMeasureHeader(next, (nextStart - next.getStart()), 0);
                                    nextStart = (next.getStart() + next.getLength());
                                }
                                ;
                                measureHeaders.add(replace);
                            }
                            ;
                            var sTracks = segment.getTracks().iterator();
                            while ((sTracks.hasNext())) {
                                var tSegment = sTracks.next();
                                var currTrack = this.sm.getTrack(song, (track > 0 && segment.getTracks().size() === 1) ? track : tSegment.getTrack());
                                if (currTrack != null) {
                                    for (var i = 0; i < tSegment.getMeasures().size(); i++) {
                                        var measure = tSegment.getMeasures().get(i);
                                        measure.setHeader(measureHeaders.get(i));
                                        this.sm.getMeasureManager().moveAllBeats(measure, move);
                                        this.sm.getMeasureManager().removeVoicesOutOfTime(measure);
                                        this.sm.getMeasureManager().removeNotesAfterString(measure, currTrack.stringCount());
                                        this.sm.getTrackManager().replaceMeasure(currTrack, measure);
                                    }
                                }
                            }
                            ;
                        };
                        TGSongSegmentHelper.prototype.getEmptyMeasures = function (count, clef, keySignature) {
                            var measures = (new java.util.ArrayList());
                            for (var i = 0; i < count; i++) {
                                var measure = this.sm.getFactory().newMeasure(null);
                                measure.setClef(clef);
                                measure.setKeySignature(keySignature);
                                measures.add(measure);
                            }
                            return measures;
                        };
                        TGSongSegmentHelper.prototype.createSegmentCopies = function (srcSegment, count) {
                            var segment = srcSegment.clone(this.sm.getFactory());
                            var mCount = segment.getHeaders().size();
                            var tCount = segment.getTracks().size();
                            var fMeasure = segment.getHeaders().get(0);
                            var lMeasure = segment.getHeaders().get(mCount - 1);
                            var mMove = ((lMeasure.getStart() + lMeasure.getLength()) - fMeasure.getStart());
                            for (var i = 1; i < count; i++) {
                                for (var m = 0; m < mCount; m++) {
                                    var header = segment.getHeaders().get(m).clone(this.sm.getFactory());
                                    segment.getHeaders().add(header);
                                    this.sm.moveMeasureHeader(header, (mMove * i), (mCount * i));
                                    for (var t = 0; t < tCount; t++) {
                                        var track = segment.getTracks().get(t);
                                        var measure = track.getMeasures().get(m).clone(this.sm.getFactory(), header);
                                        track.getMeasures().add(measure);
                                        this.sm.getMeasureManager().moveAllBeats(measure, (mMove * i));
                                    }
                                }
                            }
                            return segment;
                        };
                        return TGSongSegmentHelper;
                    }());
                    helpers.TGSongSegmentHelper = TGSongSegmentHelper;
                    TGSongSegmentHelper["__class"] = "org.herac.tuxguitar.song.helpers.TGSongSegmentHelper";
                })(helpers = song_1.helpers || (song_1.helpers = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var helpers;
                (function (helpers) {
                    var TGTrackSegment = (function () {
                        function TGTrackSegment(track, measures) {
                            this.track = 0;
                            this.measures = null;
                            this.track = track;
                            this.measures = measures;
                        }
                        TGTrackSegment.prototype.getMeasures = function () {
                            return this.measures;
                        };
                        TGTrackSegment.prototype.getTrack = function () {
                            return this.track;
                        };
                        TGTrackSegment.prototype.clone = function (factory, headers) {
                            var measures = (new java.util.ArrayList());
                            for (var i = 0; i < this.getMeasures().size(); i++) {
                                var measure = this.getMeasures().get(i);
                                measures.add(measure.clone(factory, headers.get(i)));
                            }
                            return new TGTrackSegment(this.getTrack(), measures);
                        };
                        return TGTrackSegment;
                    }());
                    helpers.TGTrackSegment = TGTrackSegment;
                    TGTrackSegment["__class"] = "org.herac.tuxguitar.song.helpers.TGTrackSegment";
                })(helpers = song.helpers || (song.helpers = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var managers;
                (function (managers) {
                    var TGMeasureManager = (function () {
                        function TGMeasureManager(songManager) {
                            this.songManager = null;
                            this.songManager = songManager;
                        }
                        TGMeasureManager.prototype.getSongManager = function () {
                            return this.songManager;
                        };
                        TGMeasureManager.prototype.orderBeats = function (measure) {
                            for (var i = 0; i < measure.countBeats(); i++) {
                                var minBeat = null;
                                for (var j = i; j < measure.countBeats(); j++) {
                                    var beat = measure.getBeat(j);
                                    if (minBeat == null || beat.getStart() < minBeat.getStart()) {
                                        minBeat = beat;
                                    }
                                }
                                measure.moveBeat(i, minBeat);
                            }
                        };
                        /**
                         * Agrega un beat al compas
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {org.herac.tuxguitar.song.models.TGBeat} beat
                         */
                        TGMeasureManager.prototype.addBeat = function (measure, beat) {
                            measure.addBeat(beat);
                        };
                        TGMeasureManager.prototype.removeBeat$org_herac_tuxguitar_song_models_TGBeat = function (beat) {
                            beat.getMeasure().removeBeat(beat);
                        };
                        TGMeasureManager.prototype.removeBeat$org_herac_tuxguitar_song_models_TGMeasure$long$boolean = function (measure, start, moveNextComponents) {
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                this.removeBeat$org_herac_tuxguitar_song_models_TGBeat$boolean(beat, moveNextComponents);
                            }
                        };
                        TGMeasureManager.prototype.removeBeat = function (measure, start, moveNextComponents) {
                            if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof start === 'number') || start === null) && ((typeof moveNextComponents === 'boolean') || moveNextComponents === null)) {
                                return this.removeBeat$org_herac_tuxguitar_song_models_TGMeasure$long$boolean(measure, start, moveNextComponents);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGBeat) || measure === null) && ((typeof start === 'boolean') || start === null) && moveNextComponents === undefined) {
                                return this.removeBeat$org_herac_tuxguitar_song_models_TGBeat$boolean(measure, start);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGBeat) || measure === null) && start === undefined && moveNextComponents === undefined) {
                                return this.removeBeat$org_herac_tuxguitar_song_models_TGBeat(measure);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        /**
                         * Elimina un silencio del compas.
                         * si se asigna moveNextComponents = true. los componentes que le siguen
                         * se moveran para completar el espacio vacio que dejo el silencio
                         * @param {org.herac.tuxguitar.song.models.TGBeat} beat
                         * @param {boolean} moveNextBeats
                         */
                        TGMeasureManager.prototype.removeBeat$org_herac_tuxguitar_song_models_TGBeat$boolean = function (beat, moveNextBeats) {
                            var measure = beat.getMeasure();
                            this.removeBeat$org_herac_tuxguitar_song_models_TGBeat(beat);
                            if (moveNextBeats) {
                                var minimumDuration = this.getMinimumDuration(beat);
                                var start = beat.getStart();
                                var length_2 = (minimumDuration != null ? minimumDuration.getTime() : 0);
                                var next = this.getNextBeat(measure.getBeats(), beat);
                                if (next != null) {
                                    length_2 = next.getStart() - start;
                                }
                                this.moveBeatsInMeasure(beat.getMeasure(), start + length_2, -length_2, minimumDuration);
                            }
                        };
                        TGMeasureManager.prototype.removeEmptyBeats = function (measure) {
                            var beats = (new java.util.ArrayList());
                            var it = measure.getBeats().iterator();
                            while ((it.hasNext())) {
                                var beat = it.next();
                                var emptyBeat = true;
                                for (var v = 0; v < beat.countVoices(); v++) {
                                    var voice = beat.getVoice(v);
                                    if (!voice.isEmpty()) {
                                        emptyBeat = false;
                                    }
                                }
                                if (emptyBeat) {
                                    beats.add(beat);
                                }
                            }
                            ;
                            it = beats.iterator();
                            while ((it.hasNext())) {
                                var beat = it.next();
                                this.removeBeat$org_herac_tuxguitar_song_models_TGBeat(beat);
                            }
                            ;
                        };
                        TGMeasureManager.prototype.removeBeatsBeforeEnd = function (measure, fromStart) {
                            var beats = this.getBeatsBeforeEnd(measure.getBeats(), fromStart);
                            var it = beats.iterator();
                            while ((it.hasNext())) {
                                var beat = it.next();
                                this.removeBeat$org_herac_tuxguitar_song_models_TGBeat(beat);
                            }
                            ;
                        };
                        TGMeasureManager.prototype.removeBeatsBetween = function (measure, p1, p2) {
                            var beats = this.getBeatsBeetween(measure.getBeats(), p1, p2);
                            var it = beats.iterator();
                            while ((it.hasNext())) {
                                var beat = it.next();
                                this.removeBeat$org_herac_tuxguitar_song_models_TGBeat(beat);
                            }
                            ;
                        };
                        TGMeasureManager.prototype.addNote$org_herac_tuxguitar_song_models_TGMeasure$long$org_herac_tuxguitar_song_models_TGNote$org_herac_tuxguitar_song_models_TGDuration$int = function (measure, start, note, duration, voice) {
                            var beat = this.getBeatIn(measure, start);
                            if (beat != null) {
                                this.addNote$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGNote$org_herac_tuxguitar_song_models_TGDuration$long$int(beat, note, duration, start, voice);
                            }
                        };
                        TGMeasureManager.prototype.addNote$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGNote$org_herac_tuxguitar_song_models_TGDuration$int = function (beat, note, duration, voice) {
                            this.addNote$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGNote$org_herac_tuxguitar_song_models_TGDuration$long$int(beat, note, duration, beat.getStart(), voice);
                        };
                        TGMeasureManager.prototype.addNote$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGNote$org_herac_tuxguitar_song_models_TGDuration$long$int = function (beat, note, duration, start, voice) {
                            var emptyVoice = beat.getVoice(voice).isEmpty();
                            if (emptyVoice) {
                                beat.getVoice(voice).setEmpty(false);
                            }
                            if (this.validateDuration(beat.getMeasure(), beat, voice, duration, true, true)) {
                                for (var v = 0; v < beat.countVoices(); v++) {
                                    this.removeNote$org_herac_tuxguitar_song_models_TGMeasure$long$int$int$boolean(beat.getMeasure(), beat.getStart(), v, note.getString(), false);
                                }
                                beat.getVoice(voice).getDuration().copyFrom(duration);
                                this.tryChangeSilenceAfter(beat.getMeasure(), beat.getVoice(voice));
                                var realVoice = beat.getVoice(voice);
                                if (realVoice.getBeat().getStart() !== start) {
                                    var beatIn = this.getVoiceIn(realVoice.getBeat().getMeasure(), start, voice);
                                    if (beatIn != null) {
                                        realVoice = beatIn;
                                    }
                                }
                                realVoice.addNote(note);
                            }
                            else {
                                beat.getVoice(voice).setEmpty(emptyVoice);
                            }
                        };
                        TGMeasureManager.prototype.addNote = function (beat, note, duration, start, voice) {
                            if (((beat != null && beat instanceof org.herac.tuxguitar.song.models.TGBeat) || beat === null) && ((note != null && note instanceof org.herac.tuxguitar.song.models.TGNote) || note === null) && ((duration != null && duration instanceof org.herac.tuxguitar.song.models.TGDuration) || duration === null) && ((typeof start === 'number') || start === null) && ((typeof voice === 'number') || voice === null)) {
                                return this.addNote$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGNote$org_herac_tuxguitar_song_models_TGDuration$long$int(beat, note, duration, start, voice);
                            }
                            else if (((beat != null && beat instanceof org.herac.tuxguitar.song.models.TGMeasure) || beat === null) && ((typeof note === 'number') || note === null) && ((duration != null && duration instanceof org.herac.tuxguitar.song.models.TGNote) || duration === null) && ((start != null && start instanceof org.herac.tuxguitar.song.models.TGDuration) || start === null) && ((typeof voice === 'number') || voice === null)) {
                                return this.addNote$org_herac_tuxguitar_song_models_TGMeasure$long$org_herac_tuxguitar_song_models_TGNote$org_herac_tuxguitar_song_models_TGDuration$int(beat, note, duration, start, voice);
                            }
                            else if (((beat != null && beat instanceof org.herac.tuxguitar.song.models.TGBeat) || beat === null) && ((note != null && note instanceof org.herac.tuxguitar.song.models.TGNote) || note === null) && ((duration != null && duration instanceof org.herac.tuxguitar.song.models.TGDuration) || duration === null) && ((typeof start === 'number') || start === null) && voice === undefined) {
                                return this.addNote$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGNote$org_herac_tuxguitar_song_models_TGDuration$int(beat, note, duration, start);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGMeasureManager.prototype.removeNote$org_herac_tuxguitar_song_models_TGNote$boolean = function (note, checkRestBeat) {
                            var voice = note.getVoice();
                            if (voice != null) {
                                voice.removeNote(note);
                                var beat = voice.getBeat();
                                if (checkRestBeat && beat.isRestBeat()) {
                                    beat.getStroke().setDirection(org.herac.tuxguitar.song.models.TGStroke.STROKE_NONE);
                                    if (beat.getMeasure() != null) {
                                        this.removeChord(beat.getMeasure(), beat.getStart());
                                    }
                                }
                            }
                        };
                        TGMeasureManager.prototype.removeNote$org_herac_tuxguitar_song_models_TGNote = function (note) {
                            this.removeNote$org_herac_tuxguitar_song_models_TGNote$boolean(note, true);
                        };
                        TGMeasureManager.prototype.removeNote$org_herac_tuxguitar_song_models_TGMeasure$long$int$int = function (measure, start, voiceIndex, string) {
                            this.removeNote$org_herac_tuxguitar_song_models_TGMeasure$long$int$int$boolean(measure, start, voiceIndex, string, true);
                        };
                        /**
                         * Elimina los Componentes que empiecen en Start y esten en la misma cuerda
                         * Si hay un Silencio lo borra sin importar la cuerda
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} voiceIndex
                         * @param {number} string
                         * @param {boolean} checkRestBeat
                         */
                        TGMeasureManager.prototype.removeNote$org_herac_tuxguitar_song_models_TGMeasure$long$int$int$boolean = function (measure, start, voiceIndex, string, checkRestBeat) {
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                var voice = beat.getVoice(voiceIndex);
                                for (var i = 0; i < voice.countNotes(); i++) {
                                    var note = voice.getNote(i);
                                    if (note.getString() === string) {
                                        this.removeNote$org_herac_tuxguitar_song_models_TGNote$boolean(note, checkRestBeat);
                                        return;
                                    }
                                }
                            }
                        };
                        /**
                         * Elimina los Componentes que empiecen en Start y esten en la misma cuerda
                         * Si hay un Silencio lo borra sin importar la cuerda
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} voiceIndex
                         * @param {number} string
                         * @param {boolean} checkRestBeat
                         */
                        TGMeasureManager.prototype.removeNote = function (measure, start, voiceIndex, string, checkRestBeat) {
                            if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof start === 'number') || start === null) && ((typeof voiceIndex === 'number') || voiceIndex === null) && ((typeof string === 'number') || string === null) && ((typeof checkRestBeat === 'boolean') || checkRestBeat === null)) {
                                return this.removeNote$org_herac_tuxguitar_song_models_TGMeasure$long$int$int$boolean(measure, start, voiceIndex, string, checkRestBeat);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof start === 'number') || start === null) && ((typeof voiceIndex === 'number') || voiceIndex === null) && ((typeof string === 'number') || string === null) && checkRestBeat === undefined) {
                                return this.removeNote$org_herac_tuxguitar_song_models_TGMeasure$long$int$int(measure, start, voiceIndex, string);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGNote) || measure === null) && ((typeof start === 'boolean') || start === null) && voiceIndex === undefined && string === undefined && checkRestBeat === undefined) {
                                return this.removeNote$org_herac_tuxguitar_song_models_TGNote$boolean(measure, start);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGNote) || measure === null) && start === undefined && voiceIndex === undefined && string === undefined && checkRestBeat === undefined) {
                                return this.removeNote$org_herac_tuxguitar_song_models_TGNote(measure);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGMeasureManager.prototype.removeNotesAfterString = function (measure, string) {
                            var notesToRemove = (new java.util.ArrayList());
                            var beats = measure.getBeats().iterator();
                            while ((beats.hasNext())) {
                                var beat = beats.next();
                                for (var v = 0; v < beat.countVoices(); v++) {
                                    var voice = beat.getVoice(v);
                                    var notes = voice.getNotes().iterator();
                                    while ((notes.hasNext())) {
                                        var note = notes.next();
                                        if (note.getString() > string) {
                                            notesToRemove.add(note);
                                        }
                                    }
                                    ;
                                }
                            }
                            ;
                            var it = notesToRemove.iterator();
                            while ((it.hasNext())) {
                                var note = it.next();
                                this.removeNote$org_herac_tuxguitar_song_models_TGNote(note);
                            }
                            ;
                        };
                        /**
                         * Retorna Todas las Notas en la posicion Start
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @return {java.util.List}
                         */
                        TGMeasureManager.prototype.getNotes$org_herac_tuxguitar_song_models_TGMeasure$long = function (measure, start) {
                            var notes = (new java.util.ArrayList());
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                for (var v = 0; v < beat.countVoices(); v++) {
                                    var voice = beat.getVoice(v);
                                    var it = voice.getNotes().iterator();
                                    while ((it.hasNext())) {
                                        var note = it.next();
                                        notes.add(note);
                                    }
                                    ;
                                }
                            }
                            return notes;
                        };
                        /**
                         * Retorna Todas las Notas en la posicion Start
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @return {java.util.List}
                         */
                        TGMeasureManager.prototype.getNotes = function (measure, start) {
                            if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof start === 'number') || start === null)) {
                                return this.getNotes$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGBeat) || measure === null) && start === undefined) {
                                return this.getNotes$org_herac_tuxguitar_song_models_TGBeat(measure);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        /**
                         * Retorna Todas las Notas en el pulso
                         * @param {org.herac.tuxguitar.song.models.TGBeat} beat
                         * @return {java.util.List}
                         */
                        TGMeasureManager.prototype.getNotes$org_herac_tuxguitar_song_models_TGBeat = function (beat) {
                            var notes = (new java.util.ArrayList());
                            if (beat != null) {
                                for (var v = 0; v < beat.countVoices(); v++) {
                                    var voice = beat.getVoice(v);
                                    if (!voice.isEmpty() && !voice.isRestVoice()) {
                                        var it = voice.getNotes().iterator();
                                        while ((it.hasNext())) {
                                            var note = it.next();
                                            notes.add(note);
                                        }
                                        ;
                                    }
                                }
                            }
                            return notes;
                        };
                        /**
                         * Retorna la Nota en la posicion y cuerda
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         * @return {org.herac.tuxguitar.song.models.TGNote}
                         */
                        TGMeasureManager.prototype.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int = function (measure, start, string) {
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                return this.getNote$org_herac_tuxguitar_song_models_TGBeat$int(beat, string);
                            }
                            return null;
                        };
                        /**
                         * Retorna la Nota en la posicion y cuerda
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         * @return {org.herac.tuxguitar.song.models.TGNote}
                         */
                        TGMeasureManager.prototype.getNote = function (measure, start, string) {
                            if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof start === 'number') || start === null) && ((typeof string === 'number') || string === null)) {
                                return this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGBeat) || measure === null) && ((typeof start === 'number') || start === null) && string === undefined) {
                                return this.getNote$org_herac_tuxguitar_song_models_TGBeat$int(measure, start);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGVoice) || measure === null) && ((typeof start === 'number') || start === null) && string === undefined) {
                                return this.getNote$org_herac_tuxguitar_song_models_TGVoice$int(measure, start);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        /**
                         * Retorna la Nota en la cuerda
                         * @param {org.herac.tuxguitar.song.models.TGBeat} beat
                         * @param {number} string
                         * @return {org.herac.tuxguitar.song.models.TGNote}
                         */
                        TGMeasureManager.prototype.getNote$org_herac_tuxguitar_song_models_TGBeat$int = function (beat, string) {
                            for (var v = 0; v < beat.countVoices(); v++) {
                                var voice = beat.getVoice(v);
                                if (!voice.isEmpty()) {
                                    var note = this.getNote$org_herac_tuxguitar_song_models_TGVoice$int(voice, string);
                                    if (note != null) {
                                        return note;
                                    }
                                }
                            }
                            return null;
                        };
                        TGMeasureManager.prototype.getNote$org_herac_tuxguitar_song_models_TGVoice$int = function (voice, string) {
                            var it = voice.getNotes().iterator();
                            while ((it.hasNext())) {
                                var note = it.next();
                                if (note.getString() === string) {
                                    return note;
                                }
                            }
                            ;
                            return null;
                        };
                        TGMeasureManager.prototype.getPreviousNote = function (measure, start, voiceIndex, string) {
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                var previous = this.getPreviousBeat(measure.getBeats(), beat);
                                while ((previous != null)) {
                                    var voice = previous.getVoice(voiceIndex);
                                    if (!voice.isEmpty()) {
                                        for (var i = 0; i < voice.countNotes(); i++) {
                                            var current = voice.getNote(i);
                                            if (current.getString() === string) {
                                                return current;
                                            }
                                        }
                                    }
                                    previous = this.getPreviousBeat(measure.getBeats(), previous);
                                }
                                ;
                            }
                            return null;
                        };
                        TGMeasureManager.prototype.getNextNote = function (measure, start, voiceIndex, string) {
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                var next = this.getNextBeat(measure.getBeats(), beat);
                                while ((next != null)) {
                                    var voice = next.getVoice(voiceIndex);
                                    if (!voice.isEmpty()) {
                                        for (var i = 0; i < voice.countNotes(); i++) {
                                            var current = voice.getNote(i);
                                            if (current.getString() === string) {
                                                return current;
                                            }
                                        }
                                    }
                                    next = this.getNextBeat(measure.getBeats(), next);
                                }
                                ;
                            }
                            return null;
                        };
                        TGMeasureManager.prototype.getMinimumDuration = function (beat) {
                            var minimumDuration = null;
                            for (var v = 0; v < beat.countVoices(); v++) {
                                var voice = beat.getVoice(v);
                                if (!voice.isEmpty()) {
                                    if (minimumDuration == null || voice.getDuration().getTime() < minimumDuration.getTime()) {
                                        minimumDuration = voice.getDuration();
                                    }
                                }
                            }
                            return minimumDuration;
                        };
                        TGMeasureManager.prototype.getBeat$org_herac_tuxguitar_song_models_TGTrack$long = function (track, start) {
                            var measures = track.getMeasures();
                            while ((measures.hasNext())) {
                                var measure = measures.next();
                                var beats = measure.getBeats().iterator();
                                while ((beats.hasNext())) {
                                    var beat = beats.next();
                                    if (beat.getStart() === start) {
                                        return beat;
                                    }
                                }
                                ;
                            }
                            ;
                            return null;
                        };
                        TGMeasureManager.prototype.getBeat = function (track, start) {
                            if (((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null) && ((typeof start === 'number') || start === null)) {
                                return this.getBeat$org_herac_tuxguitar_song_models_TGTrack$long(track, start);
                            }
                            else if (((track != null && track instanceof org.herac.tuxguitar.song.models.TGMeasure) || track === null) && ((typeof start === 'number') || start === null)) {
                                return this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(track, start);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        /**
                         * Retorna las Nota en la posicion y cuerda
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @return {org.herac.tuxguitar.song.models.TGBeat}
                         */
                        TGMeasureManager.prototype.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long = function (measure, start) {
                            var it = measure.getBeats().iterator();
                            while ((it.hasNext())) {
                                var beat = it.next();
                                if (beat.getStart() === start) {
                                    return beat;
                                }
                            }
                            ;
                            return null;
                        };
                        /**
                         * Retorna las Nota en la posicion y cuerda
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @return {org.herac.tuxguitar.song.models.TGBeat}
                         */
                        TGMeasureManager.prototype.getBeatIn = function (measure, start) {
                            var beatIn = null;
                            var it = measure.getBeats().iterator();
                            while ((it.hasNext())) {
                                var beat = it.next();
                                var duration = this.getMinimumDuration(beat);
                                if (beat.getStart() <= start && (beat.getStart() + duration.getTime() > start)) {
                                    if (beatIn == null || beat.getStart() > beatIn.getStart()) {
                                        beatIn = beat;
                                    }
                                }
                            }
                            ;
                            return beatIn;
                        };
                        /**
                         * Retorna las Nota en la posicion y cuerda
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} voiceIndex
                         * @return {org.herac.tuxguitar.song.models.TGVoice}
                         */
                        TGMeasureManager.prototype.getVoiceIn = function (measure, start, voiceIndex) {
                            var it = measure.getBeats().iterator();
                            while ((it.hasNext())) {
                                var beat = it.next();
                                var voice = beat.getVoice(voiceIndex);
                                if (!voice.isEmpty() && beat.getStart() <= start && (beat.getStart() + voice.getDuration().getTime() > start)) {
                                    return voice;
                                }
                            }
                            ;
                            return null;
                        };
                        /**
                         * Retorna el Siguiente Componente
                         * @param {java.util.List} beats
                         * @param {org.herac.tuxguitar.song.models.TGBeat} beat
                         * @return {org.herac.tuxguitar.song.models.TGBeat}
                         */
                        TGMeasureManager.prototype.getNextBeat = function (beats, beat) {
                            var next = null;
                            for (var i = 0; i < beats.size(); i++) {
                                var current = beats.get(i);
                                if (current.getStart() > beat.getStart()) {
                                    if (next == null) {
                                        next = current;
                                    }
                                    else if (current.getStart() < next.getStart()) {
                                        next = current;
                                    }
                                }
                            }
                            return next;
                        };
                        /**
                         * Retorna el Componente Anterior
                         * @param {java.util.List} beats
                         * @param {org.herac.tuxguitar.song.models.TGBeat} beat
                         * @return {org.herac.tuxguitar.song.models.TGBeat}
                         */
                        TGMeasureManager.prototype.getPreviousBeat = function (beats, beat) {
                            var previous = null;
                            for (var i = 0; i < beats.size(); i++) {
                                var current = beats.get(i);
                                if (current.getStart() < beat.getStart()) {
                                    if (previous == null) {
                                        previous = current;
                                    }
                                    else if (current.getStart() > previous.getStart()) {
                                        previous = current;
                                    }
                                }
                            }
                            return previous;
                        };
                        /**
                         * Retorna el Primer Componente
                         * @param {java.util.List} components
                         * @return {org.herac.tuxguitar.song.models.TGBeat}
                         */
                        TGMeasureManager.prototype.getFirstBeat = function (components) {
                            var first = null;
                            for (var i = 0; i < components.size(); i++) {
                                var component = components.get(i);
                                if (first == null || component.getStart() < first.getStart()) {
                                    first = component;
                                }
                            }
                            return first;
                        };
                        /**
                         * Retorna el Ultimo Componente
                         * @param {java.util.List} components
                         * @return {org.herac.tuxguitar.song.models.TGBeat}
                         */
                        TGMeasureManager.prototype.getLastBeat = function (components) {
                            var last = null;
                            for (var i = 0; i < components.size(); i++) {
                                var component = components.get(i);
                                if (last == null || last.getStart() < component.getStart()) {
                                    last = component;
                                }
                            }
                            return last;
                        };
                        /**
                         * Retorna Todos los desde Start hasta el final del compas
                         * @param {java.util.List} beats
                         * @param {number} fromStart
                         * @return {java.util.List}
                         */
                        TGMeasureManager.prototype.getBeatsBeforeEnd = function (beats, fromStart) {
                            var list = (new java.util.ArrayList());
                            var it = beats.iterator();
                            while ((it.hasNext())) {
                                var current = it.next();
                                if (current.getStart() >= fromStart) {
                                    list.add(current);
                                }
                            }
                            ;
                            return list;
                        };
                        TGMeasureManager.prototype.getBeatsBeetween = function (beats, p1, p2) {
                            var list = (new java.util.ArrayList());
                            var it = beats.iterator();
                            while ((it.hasNext())) {
                                var current = it.next();
                                if (current.getStart() >= p1 && current.getStart() < p2) {
                                    list.add(current);
                                }
                            }
                            ;
                            return list;
                        };
                        TGMeasureManager.prototype.locateBeat = function (beat, track, newMeasureAlsoForRestBeats) {
                            if (beat.getMeasure() != null) {
                                beat.getMeasure().removeBeat(beat);
                                beat.setMeasure(null);
                            }
                            var newMeasure = this.getSongManager().getTrackManager().getMeasureAt(track, beat.getStart());
                            if (newMeasure == null) {
                                var createNewMeasure = newMeasureAlsoForRestBeats;
                                if (!createNewMeasure) {
                                    createNewMeasure = (!beat.isRestBeat() || beat.isTextBeat());
                                }
                                if (createNewMeasure) {
                                    while ((newMeasure == null && beat.getStart() >= org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME)) {
                                        this.getSongManager().addNewMeasureBeforeEnd(track.getSong());
                                        newMeasure = this.getSongManager().getTrackManager().getMeasureAt(track, beat.getStart());
                                    }
                                    ;
                                }
                            }
                            if (newMeasure != null) {
                                var mStart = newMeasure.getStart();
                                var mLength = newMeasure.getLength();
                                var bStart = beat.getStart();
                                for (var v = 0; v < beat.countVoices(); v++) {
                                    var voice = beat.getVoice(v);
                                    var vDuration = voice.getDuration().getTime();
                                    if (!voice.isEmpty() && (bStart + vDuration) > (mStart + mLength)) {
                                        var vTiedDuration = ((bStart + vDuration) - (mStart + mLength));
                                        vDuration -= vTiedDuration;
                                        if (vDuration > 0) {
                                            var duration = org.herac.tuxguitar.song.models.TGDuration.fromTime$org_herac_tuxguitar_song_factory_TGFactory$long(this.getSongManager().getFactory(), vDuration);
                                            if (duration != null) {
                                                voice.getDuration().copyFrom(duration);
                                            }
                                        }
                                        if (vTiedDuration > 0) {
                                            var newVoiceDuration = org.herac.tuxguitar.song.models.TGDuration.fromTime$org_herac_tuxguitar_song_factory_TGFactory$long(this.getSongManager().getFactory(), vTiedDuration);
                                            if (newVoiceDuration != null) {
                                                var newBeatStart = (bStart + vDuration);
                                                var newBeat = this.getBeat$org_herac_tuxguitar_song_models_TGTrack$long(track, newBeatStart);
                                                if (newBeat == null) {
                                                    newBeat = this.getSongManager().getFactory().newBeat();
                                                    newBeat.setStart((bStart + vDuration));
                                                }
                                                var newVoice = newBeat.getVoice(v);
                                                for (var n = 0; n < voice.countNotes(); n++) {
                                                    var note = voice.getNote(n);
                                                    var newNote = this.getSongManager().getFactory().newNote();
                                                    newNote.setTiedNote(true);
                                                    newNote.setValue(note.getValue());
                                                    newNote.setString(note.getString());
                                                    newNote.setVelocity(note.getVelocity());
                                                    newVoice.addNote(newNote);
                                                }
                                                newVoice.setEmpty(false);
                                                newVoice.getDuration().copyFrom(newVoiceDuration);
                                                this.locateBeat(newBeat, track, newMeasureAlsoForRestBeats);
                                            }
                                        }
                                    }
                                }
                                newMeasure.addBeat(beat);
                            }
                        };
                        TGMeasureManager.prototype.moveOutOfBoundsBeatsToNewMeasure$org_herac_tuxguitar_song_models_TGMeasure = function (measure) {
                            this.moveOutOfBoundsBeatsToNewMeasure$org_herac_tuxguitar_song_models_TGMeasure$boolean(measure, true);
                        };
                        TGMeasureManager.prototype.moveOutOfBoundsBeatsToNewMeasure$org_herac_tuxguitar_song_models_TGMeasure$boolean = function (measure, newMeasureAlsoForRestBeats) {
                            var beats = (new java.util.ArrayList());
                            var mStart = measure.getStart();
                            var mLength = measure.getLength();
                            for (var i = 0; i < measure.countBeats(); i++) {
                                var beat = measure.getBeat(i);
                                if (beat.getStart() < mStart || beat.getStart() >= mStart + mLength) {
                                    beats.add(beat);
                                }
                                else {
                                    var bStart = beat.getStart();
                                    for (var v = 0; v < beat.countVoices(); v++) {
                                        var voice = beat.getVoice(v);
                                        var vDuration = voice.getDuration().getTime();
                                        if (!voice.isEmpty() && (bStart + vDuration) > (mStart + mLength)) {
                                            beats.add(beat);
                                        }
                                    }
                                }
                            }
                            while ((!beats.isEmpty())) {
                                var beat = beats.get(0);
                                if (beat.getMeasure() != null) {
                                    beat.getMeasure().removeBeat(beat);
                                    beat.setMeasure(null);
                                }
                                this.locateBeat(beat, measure.getTrack(), newMeasureAlsoForRestBeats);
                                beats.remove(0);
                            }
                            ;
                        };
                        TGMeasureManager.prototype.moveOutOfBoundsBeatsToNewMeasure = function (measure, newMeasureAlsoForRestBeats) {
                            if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof newMeasureAlsoForRestBeats === 'boolean') || newMeasureAlsoForRestBeats === null)) {
                                return this.moveOutOfBoundsBeatsToNewMeasure$org_herac_tuxguitar_song_models_TGMeasure$boolean(measure, newMeasureAlsoForRestBeats);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && newMeasureAlsoForRestBeats === undefined) {
                                return this.moveOutOfBoundsBeatsToNewMeasure$org_herac_tuxguitar_song_models_TGMeasure(measure);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGMeasureManager.prototype.moveBeatsInMeasure = function (measure, start, theMove, fillDuration) {
                            if (theMove === 0) {
                                return false;
                            }
                            var success = true;
                            var measureStart = measure.getStart();
                            var measureEnd = (measureStart + measure.getLength());
                            var beatsToMove = this.getBeatsBeforeEnd(measure.getBeats(), start);
                            this.moveBeats$java_util_List$long(beatsToMove, theMove);
                            if (success) {
                                var beatsToRemove = (new java.util.ArrayList());
                                var beats = (new java.util.ArrayList(measure.getBeats()));
                                var first = this.getFirstBeat(beats);
                                while ((first != null && first.isRestBeat() && !first.isTextBeat() && first.getStart() < measureStart)) {
                                    beats.remove(first);
                                    beatsToRemove.add(first);
                                    first = this.getNextBeat(beats, first);
                                }
                                ;
                                var last = this.getLastBeat(beats);
                                var lastDuration = (last != null ? this.getMinimumDuration(last) : null);
                                while ((last != null && lastDuration != null && last.isRestBeat() && !last.isTextBeat() && (last.getStart() + lastDuration.getTime()) > measureEnd)) {
                                    beats.remove(last);
                                    beatsToRemove.add(last);
                                    last = this.getPreviousBeat(beats, last);
                                    lastDuration = (last != null ? this.getMinimumDuration(last) : null);
                                }
                                ;
                                if (first != null && last != null && lastDuration != null) {
                                    if (first.getStart() < measureStart || (last.getStart() + lastDuration.getTime()) > measureEnd) {
                                        success = false;
                                    }
                                }
                                if (success) {
                                    var it = beatsToRemove.iterator();
                                    while ((it.hasNext())) {
                                        var beat = it.next();
                                        this.removeBeat$org_herac_tuxguitar_song_models_TGBeat(beat);
                                    }
                                    ;
                                    if (fillDuration != null) {
                                        if (theMove < 0) {
                                            last = this.getLastBeat(measure.getBeats());
                                            lastDuration = (last != null ? this.getMinimumDuration(last) : null);
                                            var beat = this.getSongManager().getFactory().newBeat();
                                            beat.setStart((last != null && lastDuration != null ? last.getStart() + lastDuration.getTime() : start));
                                            if ((beat.getStart() + fillDuration.getTime()) <= measureEnd) {
                                                for (var v = 0; v < beat.countVoices(); v++) {
                                                    var voice = beat.getVoice(v);
                                                    voice.setEmpty(false);
                                                    voice.getDuration().copyFrom(fillDuration);
                                                }
                                                this.addBeat(measure, beat);
                                            }
                                        }
                                        else {
                                            first = this.getFirstBeat(this.getBeatsBeforeEnd(measure.getBeats(), start));
                                            var beat = this.getSongManager().getFactory().newBeat();
                                            beat.setStart(start);
                                            if ((beat.getStart() + fillDuration.getTime()) <= (first != null ? first.getStart() : measureEnd)) {
                                                for (var v = 0; v < beat.countVoices(); v++) {
                                                    var voice = beat.getVoice(v);
                                                    voice.setEmpty(false);
                                                    voice.getDuration().copyFrom(fillDuration);
                                                }
                                                this.addBeat(measure, beat);
                                            }
                                        }
                                    }
                                }
                            }
                            if (!success) {
                                this.moveBeats$java_util_List$long(beatsToMove, -theMove);
                            }
                            return success;
                        };
                        TGMeasureManager.prototype.moveAllBeats = function (measure, theMove) {
                            this.moveBeats$java_util_List$long(measure.getBeats(), theMove);
                        };
                        TGMeasureManager.prototype.moveBeats$org_herac_tuxguitar_song_models_TGMeasure$long$long = function (measure, start, theMove) {
                            this.moveBeats$java_util_List$long(this.getBeatsBeforeEnd(measure.getBeats(), start), theMove);
                        };
                        TGMeasureManager.prototype.moveBeats = function (measure, start, theMove) {
                            if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof start === 'number') || start === null) && ((typeof theMove === 'number') || theMove === null)) {
                                return this.moveBeats$org_herac_tuxguitar_song_models_TGMeasure$long$long(measure, start, theMove);
                            }
                            else if (((measure != null && (measure["__interfaces"] != null && measure["__interfaces"].indexOf("java.util.List") >= 0 || measure.constructor != null && measure.constructor["__interfaces"] != null && measure.constructor["__interfaces"].indexOf("java.util.List") >= 0)) || measure === null) && ((typeof start === 'number') || start === null) && theMove === undefined) {
                                return this.moveBeats$java_util_List$long(measure, start);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        /**
                         * Mueve los componentes
                         * @param {java.util.List} beats
                         * @param {number} theMove
                         * @private
                         */
                        TGMeasureManager.prototype.moveBeats$java_util_List$long = function (beats, theMove) {
                            var it = beats.iterator();
                            while ((it.hasNext())) {
                                var beat = it.next();
                                this.moveBeat(beat, theMove);
                            }
                            ;
                        };
                        /**
                         * Mueve el componente
                         * @param {org.herac.tuxguitar.song.models.TGBeat} beat
                         * @param {number} theMove
                         * @private
                         */
                        TGMeasureManager.prototype.moveBeat = function (beat, theMove) {
                            var start = beat.getStart();
                            beat.setStart(start + theMove);
                        };
                        TGMeasureManager.prototype.cleanBeat = function (beat) {
                            beat.getStroke().setDirection(org.herac.tuxguitar.song.models.TGStroke.STROKE_NONE);
                            if (beat.getText() != null) {
                                beat.removeText();
                            }
                            if (beat.getChord() != null) {
                                beat.removeChord();
                            }
                            this.cleanBeatNotes$org_herac_tuxguitar_song_models_TGBeat(beat);
                        };
                        TGMeasureManager.prototype.cleanBeatNotes$org_herac_tuxguitar_song_models_TGBeat = function (beat) {
                            for (var v = 0; v < beat.countVoices(); v++) {
                                this.cleanVoiceNotes(beat.getVoice(v));
                            }
                        };
                        TGMeasureManager.prototype.cleanBeatNotes$org_herac_tuxguitar_song_models_TGMeasure$long = function (measure, start) {
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                this.cleanBeatNotes$org_herac_tuxguitar_song_models_TGBeat(beat);
                            }
                        };
                        TGMeasureManager.prototype.cleanBeatNotes = function (measure, start) {
                            if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof start === 'number') || start === null)) {
                                return this.cleanBeatNotes$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGBeat) || measure === null) && start === undefined) {
                                return this.cleanBeatNotes$org_herac_tuxguitar_song_models_TGBeat(measure);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGMeasureManager.prototype.cleanVoiceNotes = function (voice) {
                            if (!voice.isEmpty()) {
                                while ((voice.countNotes() > 0)) {
                                    var note = voice.getNote(0);
                                    this.removeNote$org_herac_tuxguitar_song_models_TGNote(note);
                                }
                                ;
                            }
                        };
                        /**
                         * Agrega el acorde al compas
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {org.herac.tuxguitar.song.models.TGChord} chord
                         */
                        TGMeasureManager.prototype.addChord$org_herac_tuxguitar_song_models_TGMeasure$long$org_herac_tuxguitar_song_models_TGChord = function (measure, start, chord) {
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                this.addChord$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGChord(beat, chord);
                            }
                        };
                        /**
                         * Agrega el acorde al compas
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {org.herac.tuxguitar.song.models.TGChord} chord
                         */
                        TGMeasureManager.prototype.addChord = function (measure, start, chord) {
                            if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof start === 'number') || start === null) && ((chord != null && chord instanceof org.herac.tuxguitar.song.models.TGChord) || chord === null)) {
                                return this.addChord$org_herac_tuxguitar_song_models_TGMeasure$long$org_herac_tuxguitar_song_models_TGChord(measure, start, chord);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGBeat) || measure === null) && ((start != null && start instanceof org.herac.tuxguitar.song.models.TGChord) || start === null) && chord === undefined) {
                                return this.addChord$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGChord(measure, start);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        /**
                         * Agrega el acorde al compas
                         * @param {org.herac.tuxguitar.song.models.TGBeat} beat
                         * @param {org.herac.tuxguitar.song.models.TGChord} chord
                         */
                        TGMeasureManager.prototype.addChord$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGChord = function (beat, chord) {
                            beat.removeChord();
                            beat.setChord(chord);
                        };
                        /**
                         * Retorna el acorde en la position
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @return {org.herac.tuxguitar.song.models.TGChord}
                         */
                        TGMeasureManager.prototype.getChord = function (measure, start) {
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                return beat.getChord();
                            }
                            return null;
                        };
                        /**
                         * Borra el acorde en la position
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         */
                        TGMeasureManager.prototype.removeChord = function (measure, start) {
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                beat.removeChord();
                            }
                        };
                        /**
                         * Agrega el texto al compas
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {org.herac.tuxguitar.song.models.TGText} text
                         */
                        TGMeasureManager.prototype.addText$org_herac_tuxguitar_song_models_TGMeasure$long$org_herac_tuxguitar_song_models_TGText = function (measure, start, text) {
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                this.addText$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGText(beat, text);
                            }
                        };
                        /**
                         * Agrega el texto al compas
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {org.herac.tuxguitar.song.models.TGText} text
                         */
                        TGMeasureManager.prototype.addText = function (measure, start, text) {
                            if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof start === 'number') || start === null) && ((text != null && text instanceof org.herac.tuxguitar.song.models.TGText) || text === null)) {
                                return this.addText$org_herac_tuxguitar_song_models_TGMeasure$long$org_herac_tuxguitar_song_models_TGText(measure, start, text);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGBeat) || measure === null) && ((start != null && start instanceof org.herac.tuxguitar.song.models.TGText) || start === null) && text === undefined) {
                                return this.addText$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGText(measure, start);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        /**
                         * Agrega el texto al compas
                         * @param {org.herac.tuxguitar.song.models.TGBeat} beat
                         * @param {org.herac.tuxguitar.song.models.TGText} text
                         */
                        TGMeasureManager.prototype.addText$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGText = function (beat, text) {
                            beat.removeText();
                            if (!text.isEmpty()) {
                                beat.setText(text);
                            }
                        };
                        /**
                         * Retorna el texto en la position
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @return {org.herac.tuxguitar.song.models.TGText}
                         */
                        TGMeasureManager.prototype.getText = function (measure, start) {
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                return beat.getText();
                            }
                            return null;
                        };
                        /**
                         * Borra el texto en el pulso
                         * @param {org.herac.tuxguitar.song.models.TGBeat} beat
                         */
                        TGMeasureManager.prototype.removeText$org_herac_tuxguitar_song_models_TGBeat = function (beat) {
                            beat.removeText();
                        };
                        /**
                         * Borra el texto en la position
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @return {boolean}
                         */
                        TGMeasureManager.prototype.removeText$org_herac_tuxguitar_song_models_TGMeasure$long = function (measure, start) {
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                this.removeText$org_herac_tuxguitar_song_models_TGBeat(beat);
                                return true;
                            }
                            return false;
                        };
                        /**
                         * Borra el texto en la position
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @return {boolean}
                         */
                        TGMeasureManager.prototype.removeText = function (measure, start) {
                            if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof start === 'number') || start === null)) {
                                return this.removeText$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGBeat) || measure === null) && start === undefined) {
                                return this.removeText$org_herac_tuxguitar_song_models_TGBeat(measure);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGMeasureManager.prototype.cleanMeasure = function (measure) {
                            while ((measure.countBeats() > 0)) {
                                this.removeBeat$org_herac_tuxguitar_song_models_TGBeat(measure.getBeat(0));
                            }
                            ;
                        };
                        /**
                         * Mueve la nota a la cuerda de arriba
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         * @return {number}
                         */
                        TGMeasureManager.prototype.shiftNoteUp = function (measure, start, string) {
                            return this.shiftNote(measure, start, string, -1);
                        };
                        /**
                         * Mueve la nota a la cuerda de abajo
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         * @return {number}
                         */
                        TGMeasureManager.prototype.shiftNoteDown = function (measure, start, string) {
                            return this.shiftNote(measure, start, string, 1);
                        };
                        /**
                         * Mueve la nota a la siguiente cuerda
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         * @param {number} move
                         * @return {number}
                         * @private
                         */
                        TGMeasureManager.prototype.shiftNote = function (measure, start, string, move) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                var nextStringNumber = (note.getString() + move);
                                while ((this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, nextStringNumber) != null)) {
                                    nextStringNumber += move;
                                }
                                ;
                                if (nextStringNumber >= 1 && nextStringNumber <= measure.getTrack().stringCount()) {
                                    var currentString = measure.getTrack().getString(note.getString());
                                    var nextString = measure.getTrack().getString(nextStringNumber);
                                    var noteValue = (note.getValue() + currentString.getValue());
                                    var percussionChannel = this.getSongManager().isPercussionChannel(measure.getTrack().getSong(), measure.getTrack().getChannelId());
                                    if (noteValue >= nextString.getValue() && ((nextString.getValue() + 30 > noteValue) || percussionChannel)) {
                                        note.setValue(noteValue - nextString.getValue());
                                        note.setString(nextString.getNumber());
                                        return note.getString();
                                    }
                                }
                            }
                            return 0;
                        };
                        /**
                         * Mueve la nota 1 semitono arriba
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         * @return {boolean}
                         */
                        TGMeasureManager.prototype.moveSemitoneUp = function (measure, start, string) {
                            return this.moveSemitone(measure, start, string, 1);
                        };
                        /**
                         * Mueve la nota 1 semitono abajo
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         * @return {boolean}
                         */
                        TGMeasureManager.prototype.moveSemitoneDown = function (measure, start, string) {
                            return this.moveSemitone(measure, start, string, -1);
                        };
                        /**
                         * Mueve la nota los semitonos indicados
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         * @param {number} semitones
                         * @return {boolean}
                         * @private
                         */
                        TGMeasureManager.prototype.moveSemitone = function (measure, start, string, semitones) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                var newValue = (note.getValue() + semitones);
                                if (newValue >= 0 && (newValue < 30 || this.getSongManager().isPercussionChannel(measure.getTrack().getSong(), measure.getTrack().getChannelId()))) {
                                    note.setValue(newValue);
                                    return true;
                                }
                            }
                            return false;
                        };
                        /**
                         * Set the beat stroke
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} value
                         * @param {number} direction
                         * @return {boolean}
                         */
                        TGMeasureManager.prototype.setStroke = function (measure, start, value, direction) {
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                beat.getStroke().setValue(value);
                                beat.getStroke().setDirection(direction);
                                return true;
                            }
                            return false;
                        };
                        TGMeasureManager.prototype.autoCompleteSilences = function (measure) {
                            var beat = this.getFirstBeat(measure.getBeats());
                            if (beat == null) {
                                this.createSilences(measure, measure.getStart(), measure.getLength(), 0);
                                return;
                            }
                            for (var v = 0; v < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; v++) {
                                var voice = this.getFirstVoice(measure.getBeats(), v);
                                if (voice != null && voice.getBeat().getStart() > measure.getStart()) {
                                    this.createSilences(measure, measure.getStart(), (voice.getBeat().getStart() - measure.getStart()), v);
                                }
                            }
                            var start = (function (s) { var a = []; while (s-- > 0)
                                a.push(0); return a; })(beat.countVoices());
                            var uncompletedLength = (function (s) { var a = []; while (s-- > 0)
                                a.push(0); return a; })(beat.countVoices());
                            for (var v = 0; v < uncompletedLength.length; v++) {
                                start[v] = 0;
                                uncompletedLength[v] = 0;
                            }
                            while ((beat != null)) {
                                for (var v = 0; v < beat.countVoices(); v++) {
                                    var voice = beat.getVoice(v);
                                    if (!voice.isEmpty()) {
                                        var voiceEnd = (beat.getStart() + voice.getDuration().getTime());
                                        var nextPosition = (measure.getStart() + measure.getLength());
                                        var nextVoice = this.getNextVoice(measure.getBeats(), beat, voice.getIndex());
                                        if (nextVoice != null) {
                                            nextPosition = nextVoice.getBeat().getStart();
                                        }
                                        if (voiceEnd < nextPosition) {
                                            start[v] = voiceEnd;
                                            uncompletedLength[v] = (nextPosition - voiceEnd);
                                        }
                                    }
                                }
                                for (var v = 0; v < uncompletedLength.length; v++) {
                                    if (uncompletedLength[v] > 0) {
                                        this.createSilences(measure, start[v], uncompletedLength[v], v);
                                    }
                                    start[v] = 0;
                                    uncompletedLength[v] = 0;
                                }
                                beat = this.getNextBeat(measure.getBeats(), beat);
                            }
                            ;
                        };
                        /**
                         * Crea Silencios temporarios en base a length
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} length
                         * @param {number} voiceIndex
                         * @private
                         */
                        TGMeasureManager.prototype.createSilences = function (measure, start, length, voiceIndex) {
                            var nextStart = start;
                            var durations = TGMeasureManager.createDurations(this.getSongManager().getFactory(), length);
                            var it = durations.iterator();
                            while ((it.hasNext())) {
                                var duration = it.next();
                                var isNew = false;
                                var beatStart = this.getRealStart(measure, nextStart);
                                var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, beatStart);
                                if (beat == null) {
                                    beat = this.getSongManager().getFactory().newBeat();
                                    beat.setStart(this.getRealStart(measure, nextStart));
                                    isNew = true;
                                }
                                var voice = beat.getVoice(voiceIndex);
                                voice.setEmpty(false);
                                voice.getDuration().copyFrom(duration);
                                if (isNew) {
                                    this.addBeat(measure, beat);
                                }
                                nextStart += duration.getTime();
                            }
                            ;
                        };
                        TGMeasureManager.prototype.getRealStart = function (measure, currStart) {
                            var beatLength = org.herac.tuxguitar.song.managers.TGSongManager.getDivisionLength(measure.getHeader());
                            var start = currStart;
                            var startBeat = (start % beatLength === 0);
                            if (!startBeat) {
                                var minDuration = this.getSongManager().getFactory().newDuration();
                                minDuration.setValue(org.herac.tuxguitar.song.models.TGDuration.SIXTY_FOURTH);
                                minDuration.getDivision().setEnters(3);
                                minDuration.getDivision().setTimes(2);
                                for (var i = 0; i < minDuration.getTime(); i++) {
                                    start++;
                                    startBeat = (start % beatLength === 0);
                                    if (startBeat) {
                                        break;
                                    }
                                }
                                if (!startBeat) {
                                    start = currStart;
                                }
                            }
                            return start;
                        };
                        /**
                         *
                         * Liga la nota
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changeTieNote$org_herac_tuxguitar_song_models_TGMeasure$long$int = function (measure, start, string) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                this.changeTieNote$org_herac_tuxguitar_song_models_TGNote(note);
                            }
                        };
                        /**
                         *
                         * Liga la nota
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changeTieNote = function (measure, start, string) {
                            if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof start === 'number') || start === null) && ((typeof string === 'number') || string === null)) {
                                return this.changeTieNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGNote) || measure === null) && start === undefined && string === undefined) {
                                return this.changeTieNote$org_herac_tuxguitar_song_models_TGNote(measure);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        /**
                         *
                         * Liga la nota
                         * @param {org.herac.tuxguitar.song.models.TGNote} note
                         */
                        TGMeasureManager.prototype.changeTieNote$org_herac_tuxguitar_song_models_TGNote = function (note) {
                            note.setTiedNote(!note.isTiedNote());
                            note.getEffect().setDeadNote(false);
                        };
                        /**
                         *
                         * Agrega un vibrato
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changeVibratoNote = function (measure, start, string) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setVibrato(!note.getEffect().isVibrato());
                            }
                        };
                        /**
                         *
                         * Agrega una nota muerta
                         * @param {org.herac.tuxguitar.song.models.TGNote} note
                         */
                        TGMeasureManager.prototype.changeDeadNote = function (note) {
                            note.getEffect().setDeadNote(!note.getEffect().isDeadNote());
                            note.setTiedNote(false);
                        };
                        /**
                         *
                         * Agrega un slide
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changeSlideNote = function (measure, start, string) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setSlide(!note.getEffect().isSlide());
                            }
                        };
                        /**
                         *
                         * Agrega un hammer
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changeHammerNote = function (measure, start, string) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setHammer(!note.getEffect().isHammer());
                            }
                        };
                        /**
                         *
                         * Agrega un palm-mute
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changePalmMute = function (measure, start, string) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setPalmMute(!note.getEffect().isPalmMute());
                            }
                        };
                        /**
                         *
                         * Agrega un staccato
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changeStaccato = function (measure, start, string) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setStaccato(!note.getEffect().isStaccato());
                            }
                        };
                        /**
                         *
                         * Agrega un let-ring
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changeLetRing = function (measure, start, string) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setLetRing(!note.getEffect().isLetRing());
                            }
                        };
                        /**
                         *
                         * Agrega un tapping
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changeTapping = function (measure, start, string) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setTapping(!note.getEffect().isTapping());
                            }
                        };
                        /**
                         *
                         * Agrega un slapping
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changeSlapping = function (measure, start, string) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setSlapping(!note.getEffect().isSlapping());
                            }
                        };
                        /**
                         *
                         * Agrega un popping
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changePopping = function (measure, start, string) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setPopping(!note.getEffect().isPopping());
                            }
                        };
                        /**
                         *
                         * Agrega un bend
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         * @param {org.herac.tuxguitar.song.models.effects.TGEffectBend} bend
                         */
                        TGMeasureManager.prototype.changeBendNote = function (measure, start, string, bend) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setBend(bend);
                            }
                        };
                        /**
                         *
                         * Agrega un tremoloBar
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         * @param {org.herac.tuxguitar.song.models.effects.TGEffectTremoloBar} tremoloBar
                         */
                        TGMeasureManager.prototype.changeTremoloBar = function (measure, start, string, tremoloBar) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setTremoloBar(tremoloBar);
                            }
                        };
                        /**
                         *
                         * Agrega un GhostNote
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changeGhostNote = function (measure, start, string) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setGhostNote(!note.getEffect().isGhostNote());
                            }
                        };
                        /**
                         *
                         * Agrega un AccentuatedNote
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changeAccentuatedNote = function (measure, start, string) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setAccentuatedNote(!note.getEffect().isAccentuatedNote());
                            }
                        };
                        /**
                         *
                         * Agrega un GhostNote
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changeHeavyAccentuatedNote = function (measure, start, string) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setHeavyAccentuatedNote(!note.getEffect().isHeavyAccentuatedNote());
                            }
                        };
                        /**
                         *
                         * Agrega un harmonic
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         * @param {org.herac.tuxguitar.song.models.effects.TGEffectHarmonic} harmonic
                         */
                        TGMeasureManager.prototype.changeHarmonicNote = function (measure, start, string, harmonic) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setHarmonic(harmonic);
                            }
                        };
                        /**
                         *
                         * Agrega un grace
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         * @param {org.herac.tuxguitar.song.models.effects.TGEffectGrace} grace
                         */
                        TGMeasureManager.prototype.changeGraceNote = function (measure, start, string, grace) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setGrace(grace);
                            }
                        };
                        /**
                         *
                         * Agrega un trill
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         * @param {org.herac.tuxguitar.song.models.effects.TGEffectTrill} trill
                         */
                        TGMeasureManager.prototype.changeTrillNote = function (measure, start, string, trill) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setTrill(trill);
                            }
                        };
                        /**
                         *
                         * Agrega un tremolo picking
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         * @param {org.herac.tuxguitar.song.models.effects.TGEffectTremoloPicking} tremoloPicking
                         */
                        TGMeasureManager.prototype.changeTremoloPicking = function (measure, start, string, tremoloPicking) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setTremoloPicking(tremoloPicking);
                            }
                        };
                        /**
                         *
                         * Agrega un fadeIn
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changeFadeIn = function (measure, start, string) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.getEffect().setFadeIn(!note.getEffect().isFadeIn());
                            }
                        };
                        /**
                         *
                         * Cambia el Velocity
                         * @param {number} velocity
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} start
                         * @param {number} string
                         */
                        TGMeasureManager.prototype.changeVelocity = function (velocity, measure, start, string) {
                            var note = this.getNote$org_herac_tuxguitar_song_models_TGMeasure$long$int(measure, start, string);
                            if (note != null) {
                                note.setVelocity(velocity);
                            }
                        };
                        TGMeasureManager.createDurations = function (factory, time) {
                            var durations = (new java.util.ArrayList());
                            var minimum = factory.newDuration();
                            minimum.setValue(org.herac.tuxguitar.song.models.TGDuration.SIXTY_FOURTH);
                            minimum.setDotted(false);
                            minimum.setDoubleDotted(false);
                            minimum.getDivision().setEnters(3);
                            minimum.getDivision().setTimes(2);
                            var missingTime = time;
                            while ((missingTime > minimum.getTime())) {
                                var duration = org.herac.tuxguitar.song.models.TGDuration.fromTime$org_herac_tuxguitar_song_factory_TGFactory$long$org_herac_tuxguitar_song_models_TGDuration$int(factory, missingTime, minimum, 10);
                                durations.add(duration.clone(factory));
                                missingTime -= duration.getTime();
                            }
                            ;
                            return durations;
                        };
                        /**
                         * Retorna el Siguiente Componente
                         * @param {java.util.List} beats
                         * @param {org.herac.tuxguitar.song.models.TGBeat} beat
                         * @param {number} index
                         * @return {org.herac.tuxguitar.song.models.TGVoice}
                         */
                        TGMeasureManager.prototype.getNextVoice = function (beats, beat, index) {
                            var next = null;
                            for (var i = 0; i < beats.size(); i++) {
                                var current = beats.get(i);
                                if (current.getStart() > beat.getStart() && !current.getVoice(index).isEmpty()) {
                                    if (next == null) {
                                        next = current.getVoice(index);
                                    }
                                    else if (current.getStart() < next.getBeat().getStart()) {
                                        next = current.getVoice(index);
                                    }
                                }
                            }
                            return next;
                        };
                        /**
                         * Retorna el Componente Anterior
                         * @param {java.util.List} beats
                         * @param {org.herac.tuxguitar.song.models.TGBeat} beat
                         * @param {number} index
                         * @return {org.herac.tuxguitar.song.models.TGVoice}
                         */
                        TGMeasureManager.prototype.getPreviousVoice = function (beats, beat, index) {
                            var previous = null;
                            for (var i = 0; i < beats.size(); i++) {
                                var current = beats.get(i);
                                if (current.getStart() < beat.getStart() && !current.getVoice(index).isEmpty()) {
                                    if (previous == null) {
                                        previous = current.getVoice(index);
                                    }
                                    else if (current.getStart() > previous.getBeat().getStart()) {
                                        previous = current.getVoice(index);
                                    }
                                }
                            }
                            return previous;
                        };
                        /**
                         * Retorna el Primer Componente
                         * @param {java.util.List} beats
                         * @param {number} index
                         * @return {org.herac.tuxguitar.song.models.TGVoice}
                         */
                        TGMeasureManager.prototype.getFirstVoice = function (beats, index) {
                            var first = null;
                            for (var i = 0; i < beats.size(); i++) {
                                var current = beats.get(i);
                                if ((first == null || current.getStart() < first.getBeat().getStart()) && !current.getVoice(index).isEmpty()) {
                                    first = current.getVoice(index);
                                }
                            }
                            return first;
                        };
                        /**
                         * Retorna el Ultimo Componente
                         * @param {java.util.List} beats
                         * @param {number} index
                         * @return {org.herac.tuxguitar.song.models.TGVoice}
                         */
                        TGMeasureManager.prototype.getLastVoice = function (beats, index) {
                            var last = null;
                            for (var i = 0; i < beats.size(); i++) {
                                var current = beats.get(i);
                                if ((last == null || last.getBeat().getStart() < current.getStart()) && !current.getVoice(index).isEmpty()) {
                                    last = current.getVoice(index);
                                }
                            }
                            return last;
                        };
                        /**
                         * Retorna el Siguiente Componente
                         * @param {java.util.List} beats
                         * @param {org.herac.tuxguitar.song.models.TGVoice} voice
                         * @return {org.herac.tuxguitar.song.models.TGVoice}
                         */
                        TGMeasureManager.prototype.getNextRestVoice = function (beats, voice) {
                            var next = this.getNextVoice(beats, voice.getBeat(), voice.getIndex());
                            while ((next != null && !next.isRestVoice())) {
                                next = this.getNextVoice(beats, next.getBeat(), next.getIndex());
                            }
                            ;
                            return next;
                        };
                        TGMeasureManager.prototype.getVoicesBeforeEnd = function (beats, fromStart, index) {
                            var list = (new java.util.ArrayList());
                            var it = beats.iterator();
                            while ((it.hasNext())) {
                                var beat = it.next();
                                if (beat.getStart() >= fromStart) {
                                    var voice = beat.getVoice(index);
                                    if (!voice.isEmpty()) {
                                        list.add(voice);
                                    }
                                }
                            }
                            ;
                            return list;
                        };
                        TGMeasureManager.prototype.addSilence$org_herac_tuxguitar_song_models_TGMeasure$long$org_herac_tuxguitar_song_models_TGDuration$int = function (measure, start, duration, voice) {
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                this.addSilence$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGDuration$int(beat, duration, voice);
                            }
                        };
                        TGMeasureManager.prototype.addSilence$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGDuration$int = function (beat, duration, voice) {
                            this.addSilence$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGDuration$long$int(beat, duration, beat.getStart(), voice);
                        };
                        TGMeasureManager.prototype.addSilence$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGDuration$long$int = function (beat, duration, start, voice) {
                            var emptyVoice = beat.getVoice(voice).isEmpty();
                            if (emptyVoice) {
                                beat.getVoice(voice).setEmpty(false);
                            }
                            if (this.validateDuration(beat.getMeasure(), beat, voice, duration, true, true)) {
                                beat.getVoice(voice).getDuration().copyFrom(duration);
                                this.tryChangeSilenceAfter(beat.getMeasure(), beat.getVoice(voice));
                                var realVoice = beat.getVoice(voice);
                                if (realVoice.getBeat().getStart() !== start) {
                                    var beatIn = this.getVoiceIn(realVoice.getBeat().getMeasure(), start, voice);
                                    if (beatIn != null) {
                                        realVoice = beatIn;
                                    }
                                }
                                realVoice.setEmpty(false);
                            }
                            else {
                                beat.getVoice(voice).setEmpty(emptyVoice);
                            }
                        };
                        TGMeasureManager.prototype.addSilence = function (beat, duration, start, voice) {
                            if (((beat != null && beat instanceof org.herac.tuxguitar.song.models.TGBeat) || beat === null) && ((duration != null && duration instanceof org.herac.tuxguitar.song.models.TGDuration) || duration === null) && ((typeof start === 'number') || start === null) && ((typeof voice === 'number') || voice === null)) {
                                return this.addSilence$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGDuration$long$int(beat, duration, start, voice);
                            }
                            else if (((beat != null && beat instanceof org.herac.tuxguitar.song.models.TGMeasure) || beat === null) && ((typeof duration === 'number') || duration === null) && ((start != null && start instanceof org.herac.tuxguitar.song.models.TGDuration) || start === null) && ((typeof voice === 'number') || voice === null)) {
                                return this.addSilence$org_herac_tuxguitar_song_models_TGMeasure$long$org_herac_tuxguitar_song_models_TGDuration$int(beat, duration, start, voice);
                            }
                            else if (((beat != null && beat instanceof org.herac.tuxguitar.song.models.TGBeat) || beat === null) && ((duration != null && duration instanceof org.herac.tuxguitar.song.models.TGDuration) || duration === null) && ((typeof start === 'number') || start === null) && voice === undefined) {
                                return this.addSilence$org_herac_tuxguitar_song_models_TGBeat$org_herac_tuxguitar_song_models_TGDuration$int(beat, duration, start);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGMeasureManager.prototype.removeVoice$org_herac_tuxguitar_song_models_TGVoice = function (voice) {
                            voice.setEmpty(true);
                            var beat = voice.getBeat();
                            for (var i = 0; i < beat.countVoices(); i++) {
                                if (!beat.getVoice(i).isEmpty()) {
                                    return;
                                }
                            }
                            this.removeBeat$org_herac_tuxguitar_song_models_TGBeat(beat);
                        };
                        TGMeasureManager.prototype.removeVoice$org_herac_tuxguitar_song_models_TGVoice$boolean = function (voice, moveNextVoices) {
                            this.removeVoice$org_herac_tuxguitar_song_models_TGVoice(voice);
                            if (moveNextVoices) {
                                var start = voice.getBeat().getStart();
                                var length_3 = voice.getDuration().getTime();
                                var next = this.getNextVoice(voice.getBeat().getMeasure().getBeats(), voice.getBeat(), voice.getIndex());
                                if (next != null) {
                                    length_3 = next.getBeat().getStart() - start;
                                }
                                this.moveVoices$org_herac_tuxguitar_song_models_TGMeasure$long$long$int$org_herac_tuxguitar_song_models_TGDuration(voice.getBeat().getMeasure(), start + length_3, -length_3, voice.getIndex(), voice.getDuration());
                            }
                        };
                        TGMeasureManager.prototype.removeVoice$org_herac_tuxguitar_song_models_TGMeasure$long$int$boolean = function (measure, start, index, moveNextComponents) {
                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                            if (beat != null) {
                                this.removeVoice$org_herac_tuxguitar_song_models_TGVoice$boolean(beat.getVoice(index), moveNextComponents);
                            }
                        };
                        TGMeasureManager.prototype.removeVoice = function (measure, start, index, moveNextComponents) {
                            if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof start === 'number') || start === null) && ((typeof index === 'number') || index === null) && ((typeof moveNextComponents === 'boolean') || moveNextComponents === null)) {
                                return this.removeVoice$org_herac_tuxguitar_song_models_TGMeasure$long$int$boolean(measure, start, index, moveNextComponents);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGVoice) || measure === null) && ((typeof start === 'boolean') || start === null) && index === undefined && moveNextComponents === undefined) {
                                return this.removeVoice$org_herac_tuxguitar_song_models_TGVoice$boolean(measure, start);
                            }
                            else if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGVoice) || measure === null) && start === undefined && index === undefined && moveNextComponents === undefined) {
                                return this.removeVoice$org_herac_tuxguitar_song_models_TGVoice(measure);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGMeasureManager.prototype.removeVoicesOutOfTime = function (measure) {
                            var voicesToRemove = (new java.util.ArrayList());
                            var mStart = measure.getStart();
                            var mEnd = mStart + measure.getLength();
                            var beats = measure.getBeats().iterator();
                            while ((beats.hasNext())) {
                                var beat = beats.next();
                                for (var v = 0; v < beat.countVoices(); v++) {
                                    var voice = beat.getVoice(v);
                                    if (!voice.isEmpty()) {
                                        if (beat.getStart() < mStart || (beat.getStart() + voice.getDuration().getTime()) > mEnd) {
                                            voicesToRemove.add(voice);
                                        }
                                    }
                                }
                            }
                            ;
                            var it = voicesToRemove.iterator();
                            while ((it.hasNext())) {
                                var voice = it.next();
                                this.removeVoice$org_herac_tuxguitar_song_models_TGVoice(voice);
                            }
                            ;
                        };
                        TGMeasureManager.prototype.removeMeasureVoices = function (measure, index) {
                            var hasNotes = false;
                            var voices = (new java.util.ArrayList());
                            var beatsIt = measure.getBeats().iterator();
                            while ((beatsIt.hasNext())) {
                                var beat = beatsIt.next();
                                var voice = beat.getVoice(index);
                                if (voice.isRestVoice()) {
                                    voices.add(voice);
                                }
                                else if (!voice.isEmpty()) {
                                    hasNotes = true;
                                    break;
                                }
                            }
                            ;
                            if (!hasNotes) {
                                var voicesIt = voices.iterator();
                                while ((voicesIt.hasNext())) {
                                    var voice = voicesIt.next();
                                    this.removeVoice$org_herac_tuxguitar_song_models_TGVoice(voice);
                                }
                                ;
                            }
                        };
                        TGMeasureManager.prototype.changeVoiceDirection = function (voice, direction) {
                            voice.setDirection(direction);
                        };
                        TGMeasureManager.prototype.changeDuration = function (measure, beat, duration, voice, tryMove) {
                            var oldDuration = beat.getVoice(voice).getDuration().clone(this.getSongManager().getFactory());
                            if (this.validateDuration(measure, beat, voice, duration, tryMove, false)) {
                                beat.getVoice(voice).setDuration(duration.clone(this.getSongManager().getFactory()));
                                this.tryChangeSilenceAfter(measure, beat.getVoice(voice));
                            }
                            else {
                                beat.getVoice(voice).getDuration().copyFrom(oldDuration);
                            }
                        };
                        TGMeasureManager.prototype.tryChangeSilenceAfter = function (measure, voice) {
                            this.autoCompleteSilences(measure);
                            var nextVoice = this.getNextVoice(measure.getBeats(), voice.getBeat(), voice.getIndex());
                            var beatEnd = (voice.getBeat().getStart() + voice.getDuration().getTime());
                            var measureEnd = (measure.getStart() + measure.getLength());
                            if (nextVoice != null && !nextVoice.isEmpty() && nextVoice.isRestVoice() && beatEnd <= measureEnd) {
                                var theMove = (this.getRealStart(measure, beatEnd)) - this.getRealStart(measure, nextVoice.getBeat().getStart());
                                if ((nextVoice.getBeat().getStart() + theMove) < measureEnd && (nextVoice.getBeat().getStart() + nextVoice.getDuration().getTime() + theMove) <= measureEnd) {
                                    this.moveVoice$org_herac_tuxguitar_song_models_TGVoice$long(nextVoice, theMove);
                                    this.changeDuration(measure, nextVoice.getBeat(), voice.getDuration().clone(this.getSongManager().getFactory()), nextVoice.getIndex(), false);
                                }
                            }
                        };
                        TGMeasureManager.prototype.moveVoices$java_util_List$long = function (voices, theMove) {
                            var count = voices.size();
                            for (var i = 0; i < count; i++) {
                                var voice = voices.get((theMove < 0 ? i : ((count - 1) - i)));
                                this.moveVoice$org_herac_tuxguitar_song_models_TGVoice$long(voice, theMove);
                            }
                        };
                        TGMeasureManager.prototype.moveVoice$org_herac_tuxguitar_song_models_TGVoice$long = function (voice, theMove) {
                            var newStart = (voice.getBeat().getStart() + theMove);
                            var newBeat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(voice.getBeat().getMeasure(), newStart);
                            if (newBeat == null) {
                                newBeat = this.getSongManager().getFactory().newBeat();
                                newBeat.setStart(newStart);
                                this.addBeat(voice.getBeat().getMeasure(), newBeat);
                            }
                            this.moveVoice$org_herac_tuxguitar_song_models_TGVoice$org_herac_tuxguitar_song_models_TGBeat(voice, newBeat);
                        };
                        TGMeasureManager.prototype.moveVoice$org_herac_tuxguitar_song_models_TGVoice$org_herac_tuxguitar_song_models_TGBeat = function (voice, beat) {
                            var currentBeat = voice.getBeat();
                            if (!(function (o1, o2) { if (o1.equals) {
                                return o1.equals(o2);
                            }
                            else {
                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                            } })(currentBeat, beat)) {
                                if ((function (o1, o2) { if (o1.equals) {
                                    return o1.equals(o2);
                                }
                                else {
                                    return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                } })(currentBeat.getVoice(voice.getIndex()), voice)) {
                                    if (currentBeat.isTextBeat() && this.isUniqueVoice(voice, false)) {
                                        beat.setText(currentBeat.getText());
                                        currentBeat.removeText();
                                    }
                                    if (this.isUniqueVoice(voice, true)) {
                                        if (currentBeat.isChordBeat()) {
                                            beat.setChord(currentBeat.getChord());
                                            currentBeat.removeChord();
                                        }
                                        if (currentBeat.getStroke().getDirection() !== org.herac.tuxguitar.song.models.TGStroke.STROKE_NONE) {
                                            beat.getStroke().copyFrom(currentBeat.getStroke());
                                            currentBeat.getStroke().setDirection(org.herac.tuxguitar.song.models.TGStroke.STROKE_NONE);
                                        }
                                    }
                                    var newVoice = this.getSongManager().getFactory().newVoice(voice.getIndex());
                                    currentBeat.setVoice(voice.getIndex(), newVoice);
                                    this.removeVoice$org_herac_tuxguitar_song_models_TGVoice(newVoice);
                                }
                                beat.setVoice(voice.getIndex(), voice);
                            }
                        };
                        TGMeasureManager.prototype.moveVoice = function (voice, beat) {
                            if (((voice != null && voice instanceof org.herac.tuxguitar.song.models.TGVoice) || voice === null) && ((beat != null && beat instanceof org.herac.tuxguitar.song.models.TGBeat) || beat === null)) {
                                return this.moveVoice$org_herac_tuxguitar_song_models_TGVoice$org_herac_tuxguitar_song_models_TGBeat(voice, beat);
                            }
                            else if (((voice != null && voice instanceof org.herac.tuxguitar.song.models.TGVoice) || voice === null) && ((typeof beat === 'number') || beat === null)) {
                                return this.moveVoice$org_herac_tuxguitar_song_models_TGVoice$long(voice, beat);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGMeasureManager.prototype.validateDuration = function (measure, beat, voice, duration, moveNextBeats, setCurrentDuration) {
                            var errorMargin = 10;
                            this.orderBeats(measure);
                            var measureStart = measure.getStart();
                            var measureEnd = (measureStart + measure.getLength());
                            var beatStart = beat.getStart();
                            var beatLength = duration.getTime();
                            var beatEnd = (beatStart + beatLength);
                            var beats = measure.getBeats();
                            var currentBeat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, beatStart);
                            var currentVoice = null;
                            if (currentBeat != null) {
                                currentVoice = currentBeat.getVoice(voice);
                                if (!currentVoice.isEmpty() && beatLength <= currentVoice.getDuration().getTime()) {
                                    return true;
                                }
                            }
                            var nextVoice = this.getNextVoice(beats, beat, voice);
                            if (currentVoice == null || currentVoice.isEmpty()) {
                                if ((nextVoice == null || nextVoice.isEmpty()) && beatEnd < (measureEnd + errorMargin)) {
                                    return true;
                                }
                                if ((nextVoice != null && !nextVoice.isEmpty()) && beatEnd < (nextVoice.getBeat().getStart() + errorMargin)) {
                                    return true;
                                }
                            }
                            if (nextVoice != null && !nextVoice.isEmpty() && nextVoice.isRestVoice()) {
                                var nextBeatEnd = 0;
                                var nextBeats = (new java.util.ArrayList());
                                while ((nextVoice != null && !nextVoice.isEmpty() && nextVoice.isRestVoice() && !nextVoice.getBeat().isTextBeat())) {
                                    nextBeats.add(nextVoice);
                                    nextBeatEnd = nextVoice.getBeat().getStart() + nextVoice.getDuration().getTime();
                                    nextVoice = this.getNextVoice(beats, nextVoice.getBeat(), voice);
                                }
                                ;
                                if (nextVoice == null || nextVoice.isEmpty()) {
                                    nextBeatEnd = measureEnd;
                                }
                                else if (!nextVoice.isRestVoice() || nextVoice.getBeat().isTextBeat()) {
                                    nextBeatEnd = nextVoice.getBeat().getStart();
                                }
                                if (beatEnd <= (nextBeatEnd + errorMargin)) {
                                    while ((!nextBeats.isEmpty())) {
                                        var currVoice = nextBeats.get(0);
                                        nextBeats.remove(currVoice);
                                        this.removeVoice$org_herac_tuxguitar_song_models_TGVoice$boolean(currVoice, false);
                                    }
                                    ;
                                    return true;
                                }
                            }
                            if (moveNextBeats) {
                                nextVoice = this.getNextVoice(beats, beat, voice);
                                if (nextVoice != null) {
                                    var requiredLength = (beatLength - (nextVoice.getBeat().getStart() - beatStart));
                                    var nextSilenceLength = 0;
                                    var nextRestBeat = this.getNextRestVoice(beats, beat.getVoice(voice));
                                    while ((nextRestBeat != null)) {
                                        nextSilenceLength += nextRestBeat.getDuration().getTime();
                                        nextRestBeat = this.getNextRestVoice(beats, nextRestBeat);
                                    }
                                    ;
                                    if (requiredLength <= (nextSilenceLength + errorMargin)) {
                                        var voices = this.getVoicesBeforeEnd(measure.getBeats(), nextVoice.getBeat().getStart(), voice);
                                        while ((!voices.isEmpty())) {
                                            var currVoice = voices.get(0);
                                            if (currVoice.isRestVoice()) {
                                                requiredLength -= currVoice.getDuration().getTime();
                                                this.removeVoice$org_herac_tuxguitar_song_models_TGVoice$boolean(currVoice, false);
                                            }
                                            else if (requiredLength > 0) {
                                                this.moveVoice$org_herac_tuxguitar_song_models_TGVoice$long(currVoice, requiredLength);
                                            }
                                            voices.remove(0);
                                        }
                                        ;
                                        return true;
                                    }
                                }
                            }
                            if (setCurrentDuration && currentVoice != null && !currentVoice.isEmpty()) {
                                duration.copyFrom(currentVoice.getDuration());
                                return true;
                            }
                            return false;
                        };
                        TGMeasureManager.prototype.moveVoices$org_herac_tuxguitar_song_models_TGMeasure$long$long$int$org_herac_tuxguitar_song_models_TGDuration = function (measure, start, theMove, voiceIndex, fillDuration) {
                            if (theMove === 0) {
                                return false;
                            }
                            var success = true;
                            var measureStart = measure.getStart();
                            var measureEnd = (measureStart + measure.getLength());
                            var voicesToMove = this.getVoicesBeforeEnd(measure.getBeats(), start, voiceIndex);
                            var voicesToRemove = (new java.util.ArrayList());
                            var currentBeats = this.getBeatsBeforeEnd(measure.getBeats(), start);
                            var first = this.getFirstVoice(currentBeats, voiceIndex);
                            while ((first != null && first.isRestVoice() && (!first.getBeat().isTextBeat() || !this.isUniqueVoice(first, false)) && (first.getBeat().getStart() + theMove) < measureStart)) {
                                currentBeats.remove(first.getBeat());
                                voicesToRemove.add(first);
                                first = this.getNextVoice(currentBeats, first.getBeat(), voiceIndex);
                            }
                            ;
                            var last = this.getLastVoice(currentBeats, voiceIndex);
                            var lastDuration = (last != null ? last.getDuration() : null);
                            while ((last != null && lastDuration != null && last.isRestVoice() && (!last.getBeat().isTextBeat() || !this.isUniqueVoice(last, false)) && (last.getBeat().getStart() + lastDuration.getTime() + theMove) > measureEnd)) {
                                currentBeats.remove(last.getBeat());
                                voicesToRemove.add(last);
                                last = this.getPreviousVoice(currentBeats, last.getBeat(), voiceIndex);
                                lastDuration = (last != null ? last.getDuration() : null);
                            }
                            ;
                            if (first != null && last != null && lastDuration != null) {
                                if ((first.getBeat().getStart() + theMove) < measureStart || (last.getBeat().getStart() + lastDuration.getTime() + theMove) > measureEnd) {
                                    success = false;
                                }
                            }
                            if (success) {
                                this.moveVoices$java_util_List$long(voicesToMove, theMove);
                                var it = voicesToRemove.iterator();
                                while ((it.hasNext())) {
                                    var beat = it.next();
                                    this.removeVoice$org_herac_tuxguitar_song_models_TGVoice(beat);
                                }
                                ;
                                if (fillDuration != null) {
                                    if (theMove < 0) {
                                        last = this.getLastVoice(measure.getBeats(), voiceIndex);
                                        lastDuration = (last != null ? last.getDuration() : null);
                                        var beatStart = ((last != null && lastDuration != null ? last.getBeat().getStart() + lastDuration.getTime() : start));
                                        if ((beatStart + fillDuration.getTime()) <= measureEnd) {
                                            var beatNew = false;
                                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, beatStart);
                                            if (beat == null) {
                                                beat = this.getSongManager().getFactory().newBeat();
                                                beat.setStart(beatStart);
                                                beatNew = true;
                                            }
                                            var voice = beat.getVoice(voiceIndex);
                                            voice.setEmpty(false);
                                            voice.getDuration().copyFrom(fillDuration);
                                            if (beatNew) {
                                                this.addBeat(measure, beat);
                                            }
                                        }
                                    }
                                    else {
                                        first = this.getFirstVoice(this.getBeatsBeforeEnd(measure.getBeats(), start), voiceIndex);
                                        if ((start + fillDuration.getTime()) <= (first != null ? first.getBeat().getStart() : measureEnd)) {
                                            var beatNew = false;
                                            var beat = this.getBeat$org_herac_tuxguitar_song_models_TGMeasure$long(measure, start);
                                            if (beat == null) {
                                                beat = this.getSongManager().getFactory().newBeat();
                                                beat.setStart(start);
                                                beatNew = true;
                                            }
                                            var voice = beat.getVoice(voiceIndex);
                                            voice.setEmpty(false);
                                            voice.getDuration().copyFrom(fillDuration);
                                            if (beatNew) {
                                                this.addBeat(measure, beat);
                                            }
                                        }
                                    }
                                }
                                this.removeEmptyBeats(measure);
                            }
                            return success;
                        };
                        TGMeasureManager.prototype.moveVoices = function (measure, start, theMove, voiceIndex, fillDuration) {
                            if (((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof start === 'number') || start === null) && ((typeof theMove === 'number') || theMove === null) && ((typeof voiceIndex === 'number') || voiceIndex === null) && ((fillDuration != null && fillDuration instanceof org.herac.tuxguitar.song.models.TGDuration) || fillDuration === null)) {
                                return this.moveVoices$org_herac_tuxguitar_song_models_TGMeasure$long$long$int$org_herac_tuxguitar_song_models_TGDuration(measure, start, theMove, voiceIndex, fillDuration);
                            }
                            else if (((measure != null && (measure["__interfaces"] != null && measure["__interfaces"].indexOf("java.util.List") >= 0 || measure.constructor != null && measure.constructor["__interfaces"] != null && measure.constructor["__interfaces"].indexOf("java.util.List") >= 0)) || measure === null) && ((typeof start === 'number') || start === null) && theMove === undefined && voiceIndex === undefined && fillDuration === undefined) {
                                return this.moveVoices$java_util_List$long(measure, start);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGMeasureManager.prototype.isUniqueVoice = function (voice, ignoreRests) {
                            var beat = voice.getBeat();
                            for (var v = 0; v < beat.countVoices(); v++) {
                                if (v !== voice.getIndex()) {
                                    var currentVoice = beat.getVoice(v);
                                    if (!currentVoice.isEmpty() && (!ignoreRests || !currentVoice.isRestVoice())) {
                                        return false;
                                    }
                                }
                            }
                            return true;
                        };
                        TGMeasureManager.prototype.transposeNotes$org_herac_tuxguitar_song_models_TGMeasure$int$boolean$boolean$int = function (measure, transposition, tryKeepString, applyToChords, applyToString) {
                            if (transposition !== 0) {
                                if (measure != null) {
                                    var track = measure.getTrack();
                                    if (track != null) {
                                        var strings = this.getSortedStringsByValue(track, (transposition > 0 ? 1 : -1));
                                        for (var i = 0; i < measure.countBeats(); i++) {
                                            var beat = measure.getBeat(i);
                                            this.transposeNotes$org_herac_tuxguitar_song_models_TGBeat$java_util_List$int$boolean$boolean$int(beat, strings, transposition, tryKeepString, applyToChords, applyToString);
                                        }
                                    }
                                }
                            }
                        };
                        TGMeasureManager.prototype.transposeNotes$org_herac_tuxguitar_song_models_TGMeasure$int_A$boolean$boolean = function (measure, transpositionStrings, tryKeepString, applyToChords) {
                            if (transpositionStrings != null && transpositionStrings.length > 0) {
                                if (measure != null) {
                                    var track = measure.getTrack();
                                    if (track != null) {
                                        var notes = new Array(transpositionStrings.length);
                                        for (var b = 0; b < measure.countBeats(); b++) {
                                            var beat = measure.getBeat(b);
                                            for (var n = 0; n < notes.length; n++) {
                                                notes[n] = this.getNote$org_herac_tuxguitar_song_models_TGBeat$int(beat, (n + 1));
                                            }
                                            for (var i = 0; i < notes.length; i++) {
                                                if (notes[i] != null) {
                                                    var transposition = transpositionStrings[i];
                                                    if (transposition !== 0) {
                                                        var applyToString = notes[i].getString();
                                                        var strings = this.getSortedStringsByValue(track, (transposition > 0 ? 1 : -1));
                                                        this.transposeNotes$org_herac_tuxguitar_song_models_TGBeat$java_util_List$int$boolean$boolean$int(beat, strings, transposition, tryKeepString, applyToChords, applyToString);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        TGMeasureManager.prototype.transposeNotes$org_herac_tuxguitar_song_models_TGBeat$java_util_List$int$boolean$boolean$int = function (beat, strings, transposition, tryKeepString, applyToChord, applyToString) {
                            if (transposition !== 0) {
                                var notes = this.getNotes$org_herac_tuxguitar_song_models_TGBeat(beat);
                                var stringCount = strings.size();
                                for (var i = 0; i < stringCount; i++) {
                                    var string = strings.get((stringCount - i) - 1);
                                    if (applyToString === -1 || string.getNumber() === applyToString) {
                                        var note = null;
                                        for (var n = 0; n < notes.size(); n++) {
                                            var current = notes.get(n);
                                            if (current.getString() === string.getNumber()) {
                                                note = current;
                                            }
                                        }
                                        if (note != null) {
                                            this.transposeNote(note, notes, strings, transposition, tryKeepString, false);
                                        }
                                        if (applyToChord && beat.isChordBeat()) {
                                            var chord = beat.getChord();
                                            var chordString = (string.getNumber() - 1);
                                            if (chord.getFretValue(chordString) >= 0) {
                                                this.transposeChordNote(chord, chordString, strings, transposition, tryKeepString, false);
                                            }
                                            chord.setFirstFret(-1);
                                        }
                                    }
                                }
                            }
                        };
                        TGMeasureManager.prototype.transposeNotes = function (beat, strings, transposition, tryKeepString, applyToChord, applyToString) {
                            if (((beat != null && beat instanceof org.herac.tuxguitar.song.models.TGBeat) || beat === null) && ((strings != null && (strings["__interfaces"] != null && strings["__interfaces"].indexOf("java.util.List") >= 0 || strings.constructor != null && strings.constructor["__interfaces"] != null && strings.constructor["__interfaces"].indexOf("java.util.List") >= 0)) || strings === null) && ((typeof transposition === 'number') || transposition === null) && ((typeof tryKeepString === 'boolean') || tryKeepString === null) && ((typeof applyToChord === 'boolean') || applyToChord === null) && ((typeof applyToString === 'number') || applyToString === null)) {
                                return this.transposeNotes$org_herac_tuxguitar_song_models_TGBeat$java_util_List$int$boolean$boolean$int(beat, strings, transposition, tryKeepString, applyToChord, applyToString);
                            }
                            else if (((beat != null && beat instanceof org.herac.tuxguitar.song.models.TGMeasure) || beat === null) && ((typeof strings === 'number') || strings === null) && ((typeof transposition === 'boolean') || transposition === null) && ((typeof tryKeepString === 'boolean') || tryKeepString === null) && ((typeof applyToChord === 'number') || applyToChord === null) && applyToString === undefined) {
                                return this.transposeNotes$org_herac_tuxguitar_song_models_TGMeasure$int$boolean$boolean$int(beat, strings, transposition, tryKeepString, applyToChord);
                            }
                            else if (((beat != null && beat instanceof org.herac.tuxguitar.song.models.TGMeasure) || beat === null) && ((strings != null && strings instanceof Array && (strings.length == 0 || strings[0] == null || (typeof strings[0] === 'number'))) || strings === null) && ((typeof transposition === 'boolean') || transposition === null) && ((typeof tryKeepString === 'boolean') || tryKeepString === null) && applyToChord === undefined && applyToString === undefined) {
                                return this.transposeNotes$org_herac_tuxguitar_song_models_TGMeasure$int_A$boolean$boolean(beat, strings, transposition, tryKeepString);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGMeasureManager.prototype.transposeNote = function (note, notes, strings, transposition, tryKeepString, forceChangeString) {
                            var canTransposeFret = false;
                            var maximumFret = 29;
                            var transposedFret = (note.getValue() + transposition);
                            if (transposedFret >= 0 && transposedFret <= maximumFret) {
                                if (!forceChangeString && tryKeepString) {
                                    note.setValue(transposedFret);
                                    return true;
                                }
                                canTransposeFret = true;
                            }
                            var stringIndex = -1;
                            for (var i = 0; i < strings.size(); i++) {
                                var string_1 = strings.get(i);
                                if (string_1.getNumber() === note.getString()) {
                                    stringIndex = i;
                                    break;
                                }
                            }
                            var string = strings.get(stringIndex);
                            var transposedValue = (string.getValue() + note.getValue() + transposition);
                            var nextStringIndex = (stringIndex + 1);
                            while ((nextStringIndex >= 0 && nextStringIndex < strings.size())) {
                                var nextString = strings.get(nextStringIndex);
                                var nextOwner = null;
                                for (var i = 0; i < notes.size(); i++) {
                                    var nextNote = notes.get(i);
                                    if (nextNote.getString() === nextString.getNumber()) {
                                        nextOwner = nextNote;
                                    }
                                }
                                var transposedStringFret = (transposedValue - nextString.getValue());
                                if (transposedStringFret >= 0 && transposedStringFret <= maximumFret) {
                                    if (nextOwner != null) {
                                        if (!this.transposeNote(nextOwner, notes, strings, 0, tryKeepString, !canTransposeFret)) {
                                            nextOwner = null;
                                        }
                                    }
                                    if (nextOwner == null || nextOwner.getString() !== nextString.getNumber()) {
                                        note.setValue(transposedStringFret);
                                        note.setString(nextString.getNumber());
                                        return true;
                                    }
                                }
                                nextStringIndex++;
                            }
                            ;
                            if (!forceChangeString && canTransposeFret) {
                                note.setValue(transposedFret);
                                return true;
                            }
                            notes.remove(note);
                            this.removeNote$org_herac_tuxguitar_song_models_TGNote(note);
                            return false;
                        };
                        TGMeasureManager.prototype.transposeChordNote = function (chord, chordString, strings, transposition, tryKeepString, forceChangeString) {
                            var canTransposeFret = false;
                            var maximumFret = 24;
                            var noteValue = chord.getFretValue(chordString);
                            var noteString = (chordString + 1);
                            var transposedFret = (noteValue + transposition);
                            if (transposedFret >= 0 && transposedFret <= maximumFret) {
                                if (!forceChangeString && tryKeepString) {
                                    chord.addFretValue(chordString, transposedFret);
                                    return true;
                                }
                                canTransposeFret = true;
                            }
                            var stringIndex = -1;
                            for (var i = 0; i < strings.size(); i++) {
                                var string_2 = strings.get(i);
                                if (string_2.getNumber() === noteString) {
                                    stringIndex = i;
                                    break;
                                }
                            }
                            var string = strings.get(stringIndex);
                            var transposedValue = (string.getValue() + noteValue + transposition);
                            var nextStringIndex = (stringIndex + 1);
                            while ((nextStringIndex >= 0 && nextStringIndex < strings.size())) {
                                var nextString = strings.get(nextStringIndex);
                                var nextChordString = -1;
                                for (var i = 0; i < chord.countStrings(); i++) {
                                    if ((i + 1) === nextString.getNumber()) {
                                        if (chord.getFretValue(i) >= 0) {
                                            nextChordString = i;
                                        }
                                    }
                                }
                                var transposedStringFret = (transposedValue - nextString.getValue());
                                if (transposedStringFret >= 0 && transposedStringFret <= maximumFret) {
                                    if (nextChordString >= 0) {
                                        this.transposeChordNote(chord, nextChordString, strings, 0, tryKeepString, !canTransposeFret);
                                    }
                                    if (nextChordString < 0 || chord.getFretValue(nextChordString) < 0) {
                                        chord.addFretValue(chordString, -1);
                                        chord.addFretValue((nextString.getNumber() - 1), transposedStringFret);
                                        return true;
                                    }
                                }
                                nextStringIndex++;
                            }
                            ;
                            if (!forceChangeString && canTransposeFret) {
                                chord.addFretValue(chordString, transposedFret);
                                return true;
                            }
                            chord.addFretValue(chordString, -1);
                            return false;
                        };
                        TGMeasureManager.prototype.getSortedStringsByValue = function (track, direction) {
                            var strings = (new java.util.ArrayList());
                            for (var number = 1; number <= track.stringCount(); number++) {
                                strings.add(track.getString(number));
                            }
                            java.util.Collections.sort(strings, new TGMeasureManager.TGMeasureManager$0(this, direction));
                            return strings;
                        };
                        return TGMeasureManager;
                    }());
                    managers.TGMeasureManager = TGMeasureManager;
                    TGMeasureManager["__class"] = "org.herac.tuxguitar.song.managers.TGMeasureManager";
                    (function (TGMeasureManager) {
                        var TGMeasureManager$0 = (function () {
                            function TGMeasureManager$0(__parent, direction) {
                                this.direction = direction;
                                this.__parent = __parent;
                            }
                            TGMeasureManager$0.prototype.compare = function (s1, s2) {
                                if (s1 != null && s2 != null) {
                                    var status_1 = (s1.getValue() - s2.getValue());
                                    if (status_1 === 0) {
                                        return 0;
                                    }
                                    return ((status_1 * this.direction) > 0 ? 1 : -1);
                                }
                                return 0;
                            };
                            return TGMeasureManager$0;
                        }());
                        TGMeasureManager.TGMeasureManager$0 = TGMeasureManager$0;
                        TGMeasureManager$0["__interfaces"] = ["java.util.Comparator"];
                    })(TGMeasureManager = managers.TGMeasureManager || (managers.TGMeasureManager = {}));
                })(managers = song.managers || (song.managers = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song_2) {
                var managers;
                (function (managers) {
                    var TGSongManager = (function () {
                        function TGSongManager(factory) {
                            var _this = this;
                            if (((factory != null && factory instanceof org.herac.tuxguitar.song.factory.TGFactory) || factory === null)) {
                                var __args = Array.prototype.slice.call(arguments);
                                this.factory = null;
                                this.trackManager = null;
                                this.measureManager = null;
                                this.factory = null;
                                this.trackManager = null;
                                this.measureManager = null;
                                (function () {
                                    _this.factory = factory;
                                })();
                            }
                            else if (factory === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                {
                                    var __args_11 = Array.prototype.slice.call(arguments);
                                    var factory_1 = new org.herac.tuxguitar.song.factory.TGFactory();
                                    this.factory = null;
                                    this.trackManager = null;
                                    this.measureManager = null;
                                    this.factory = null;
                                    this.trackManager = null;
                                    this.measureManager = null;
                                    (function () {
                                        _this.factory = factory_1;
                                    })();
                                }
                            }
                            else
                                throw new Error('invalid overload');
                        }
                        TGSongManager.DEFAULT_TUNING_VALUES_$LI$ = function () { if (TGSongManager.DEFAULT_TUNING_VALUES == null)
                            TGSongManager.DEFAULT_TUNING_VALUES = [[43, 38, 33, 28], [43, 38, 33, 28, 23], [64, 59, 55, 50, 45, 40], [64, 59, 55, 50, 45, 40, 35]]; return TGSongManager.DEFAULT_TUNING_VALUES; };
                        ;
                        TGSongManager.prototype.getFactory = function () {
                            return this.factory;
                        };
                        TGSongManager.prototype.setFactory = function (factory) {
                            this.factory = factory;
                        };
                        TGSongManager.prototype.getTrackManager = function () {
                            if (this.trackManager == null) {
                                this.trackManager = new org.herac.tuxguitar.song.managers.TGTrackManager(this);
                            }
                            return this.trackManager;
                        };
                        TGSongManager.prototype.getMeasureManager = function () {
                            if (this.measureManager == null) {
                                this.measureManager = new org.herac.tuxguitar.song.managers.TGMeasureManager(this);
                            }
                            return this.measureManager;
                        };
                        TGSongManager.prototype.setSongName = function (song, name) {
                            song.setName(name);
                        };
                        TGSongManager.prototype.setProperties = function (song, name, artist, album, author, date, copyright, writer, transcriber, comments) {
                            song.setName(name);
                            song.setArtist(artist);
                            song.setAlbum(album);
                            song.setAuthor(author);
                            song.setDate(date);
                            song.setCopyright(copyright);
                            song.setWriter(writer);
                            song.setTranscriber(transcriber);
                            song.setComments(comments);
                        };
                        TGSongManager.prototype.clearSong = function (song) {
                            song.clear();
                        };
                        TGSongManager.prototype.fillSong = function (song) {
                            var channel = this.getFactory().newChannel();
                            channel.setChannelId(1);
                            channel.setName(this.createDefaultChannelName(song, channel));
                            var header = this.getFactory().newHeader();
                            header.setNumber(1);
                            header.setStart(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME);
                            header.getTimeSignature().setNumerator(4);
                            header.getTimeSignature().getDenominator().setValue(org.herac.tuxguitar.song.models.TGDuration.QUARTER);
                            var track = this.getFactory().newTrack();
                            track.setNumber(1);
                            track.setName(this.getDefaultTrackName(track));
                            track.setChannelId(channel.getChannelId());
                            track.setStrings(this.createDefaultInstrumentStrings());
                            track.addMeasure$org_herac_tuxguitar_song_models_TGMeasure(this.getFactory().newMeasure(header));
                            track.getColor().copyFrom(org.herac.tuxguitar.song.models.TGColor.RED_$LI$());
                            song.addChannel$org_herac_tuxguitar_song_models_TGChannel(channel);
                            song.addMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader(header);
                            song.addTrack$org_herac_tuxguitar_song_models_TGTrack(track);
                        };
                        TGSongManager.prototype.newSong = function () {
                            var song = this.getFactory().newSong();
                            this.fillSong(song);
                            return song;
                        };
                        TGSongManager.prototype.copySongFrom = function (song, from) {
                            song.copyFrom(this.getFactory(), from);
                        };
                        TGSongManager.prototype.createChannel = function () {
                            return this.getFactory().newChannel();
                        };
                        TGSongManager.prototype.addChannel$org_herac_tuxguitar_song_models_TGSong = function (tgSong) {
                            var tgChannel = this.addChannel$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGChannel(tgSong, this.createChannel());
                            tgChannel.setName(this.createDefaultChannelName(tgSong, tgChannel));
                            return tgChannel;
                        };
                        TGSongManager.prototype.addChannel$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGChannel = function (song, tgChannel) {
                            if (tgChannel != null) {
                                if (tgChannel.getChannelId() <= 0) {
                                    tgChannel.setChannelId(this.getNextChannelId(song));
                                }
                                song.addChannel$org_herac_tuxguitar_song_models_TGChannel(tgChannel);
                            }
                            return tgChannel;
                        };
                        TGSongManager.prototype.addChannel = function (song, tgChannel) {
                            if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((tgChannel != null && tgChannel instanceof org.herac.tuxguitar.song.models.TGChannel) || tgChannel === null)) {
                                return this.addChannel$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGChannel(song, tgChannel);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && tgChannel === undefined) {
                                return this.addChannel$org_herac_tuxguitar_song_models_TGSong(song);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongManager.prototype.removeChannel$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGChannel = function (song, channel) {
                            if (channel != null) {
                                song.removeChannel(channel);
                            }
                        };
                        TGSongManager.prototype.removeChannel = function (song, channel) {
                            if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((channel != null && channel instanceof org.herac.tuxguitar.song.models.TGChannel) || channel === null)) {
                                return this.removeChannel$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGChannel(song, channel);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((typeof channel === 'number') || channel === null)) {
                                return this.removeChannel$org_herac_tuxguitar_song_models_TGSong$int(song, channel);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongManager.prototype.removeChannel$org_herac_tuxguitar_song_models_TGSong$int = function (song, channelId) {
                            var channel = this.getChannel(song, channelId);
                            if (channel != null) {
                                this.removeChannel$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGChannel(song, channel);
                            }
                        };
                        TGSongManager.prototype.removeAllChannels = function (song) {
                            while ((song.countChannels() > 0)) {
                                this.removeChannel$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGChannel(song, song.getChannel(0));
                            }
                            ;
                        };
                        TGSongManager.prototype.getChannel = function (song, channelId) {
                            var it = song.getChannels();
                            while ((it.hasNext())) {
                                var channel = it.next();
                                if (channel.getChannelId() === channelId) {
                                    return channel;
                                }
                            }
                            ;
                            return null;
                        };
                        TGSongManager.prototype.getChannels = function (song) {
                            var channels = (new java.util.ArrayList());
                            var it = song.getChannels();
                            while ((it.hasNext())) {
                                channels.add(it.next());
                            }
                            ;
                            return channels;
                        };
                        TGSongManager.prototype.findChannelsByName = function (song, name) {
                            var channels = (new java.util.ArrayList());
                            var it = song.getChannels();
                            while ((it.hasNext())) {
                                var channel = it.next();
                                if ((function (o1, o2) { if (o1.equals) {
                                    return o1.equals(o2);
                                }
                                else {
                                    return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                } })(channel.getName(), name)) {
                                    channels.add(channel);
                                }
                            }
                            ;
                            return channels;
                        };
                        TGSongManager.prototype.getNextChannelId = function (song) {
                            var maximumId = 0;
                            var it = song.getChannels();
                            while ((it.hasNext())) {
                                var channel = it.next();
                                if (maximumId < channel.getChannelId()) {
                                    maximumId = channel.getChannelId();
                                }
                            }
                            ;
                            return (maximumId + 1);
                        };
                        TGSongManager.prototype.updateChannel = function (song, source) {
                            var channel = this.getChannel(song, source.getChannelId());
                            if (channel != null) {
                                channel.copyFrom(this.getFactory(), source);
                            }
                            return channel;
                        };
                        TGSongManager.prototype.isPercussionChannel = function (song, channelId) {
                            var channel = this.getChannel(song, channelId);
                            if (channel != null) {
                                return channel.isPercussionChannel();
                            }
                            return false;
                        };
                        TGSongManager.prototype.isAnyPercussionChannel = function (song) {
                            var it = song.getChannels();
                            while ((it.hasNext())) {
                                var channel = it.next();
                                if (channel.isPercussionChannel()) {
                                    return true;
                                }
                            }
                            ;
                            return false;
                        };
                        TGSongManager.prototype.isAnyTrackConnectedToChannel = function (song, channelId) {
                            var it = song.getTracks();
                            while ((it.hasNext())) {
                                var track = it.next();
                                if (track.getChannelId() === channelId) {
                                    return true;
                                }
                            }
                            ;
                            return false;
                        };
                        TGSongManager.prototype.createChannelName = function (song, channel, prefix) {
                            var number = 0;
                            var unusedName = null;
                            while ((unusedName == null)) {
                                number++;
                                var name_2 = (prefix + " " + number);
                                if (this.findChannelsByName(song, name_2).isEmpty()) {
                                    unusedName = name_2;
                                }
                            }
                            ;
                            return unusedName;
                        };
                        TGSongManager.prototype.createDefaultChannelName = function (song, channel) {
                            return this.createChannelName(song, channel, "Unnamed");
                        };
                        TGSongManager.prototype.createChannelNameFromProgram = function (song, channel) {
                            if (channel.getProgram() >= 0 && channel.getProgram() < org.herac.tuxguitar.song.models.TGChannelNames.DEFAULT_NAMES_$LI$().length) {
                                return this.createChannelName(song, channel, org.herac.tuxguitar.song.models.TGChannelNames.DEFAULT_NAMES_$LI$()[channel.getProgram()]);
                            }
                            return this.createDefaultChannelName(song, channel);
                        };
                        TGSongManager.prototype.createTrack = function (song) {
                            var tgTrack = this.getFactory().newTrack();
                            tgTrack.setNumber(this.getNextTrackNumber(song));
                            tgTrack.setName(this.getDefaultTrackName(tgTrack));
                            var it = song.getMeasureHeaders();
                            while ((it.hasNext())) {
                                var header = it.next();
                                var measure = this.getFactory().newMeasure(header);
                                tgTrack.addMeasure$org_herac_tuxguitar_song_models_TGMeasure(measure);
                            }
                            ;
                            tgTrack.setStrings(this.createDefaultInstrumentStrings());
                            tgTrack.getColor().copyFrom(org.herac.tuxguitar.song.models.TGColor.RED_$LI$());
                            return tgTrack;
                        };
                        TGSongManager.prototype.addTrack$org_herac_tuxguitar_song_models_TGSong = function (song) {
                            if (song.isEmpty()) {
                                this.fillSong(song);
                                return this.getLastTrack(song);
                            }
                            var tgChannel = this.addChannel$org_herac_tuxguitar_song_models_TGSong(song);
                            tgChannel.setName(this.createChannelNameFromProgram(song, tgChannel));
                            var tgTrack = this.createTrack(song);
                            tgTrack.setChannelId(tgChannel.getChannelId());
                            this.addTrack$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGTrack(song, tgTrack);
                            return tgTrack;
                        };
                        TGSongManager.prototype.addTrack$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGTrack = function (song, trackToAdd) {
                            this.orderTracks(song);
                            var addIndex = -1;
                            for (var i = 0; i < song.countTracks(); i++) {
                                var track = song.getTrack(i);
                                if (addIndex === -1 && track.getNumber() === trackToAdd.getNumber()) {
                                    addIndex = i;
                                }
                                if (addIndex >= 0) {
                                    track.setNumber(track.getNumber() + 1);
                                }
                            }
                            if (addIndex < 0) {
                                addIndex = song.countTracks();
                            }
                            song.addTrack$int$org_herac_tuxguitar_song_models_TGTrack(addIndex, trackToAdd);
                        };
                        TGSongManager.prototype.addTrack = function (song, trackToAdd) {
                            if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((trackToAdd != null && trackToAdd instanceof org.herac.tuxguitar.song.models.TGTrack) || trackToAdd === null)) {
                                return this.addTrack$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGTrack(song, trackToAdd);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && trackToAdd === undefined) {
                                return this.addTrack$org_herac_tuxguitar_song_models_TGSong(song);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongManager.prototype.removeTrack$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGTrack = function (song, track) {
                            this.removeTrack$org_herac_tuxguitar_song_models_TGSong$int(song, track.getNumber());
                        };
                        TGSongManager.prototype.removeTrack = function (song, track) {
                            if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null)) {
                                return this.removeTrack$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGTrack(song, track);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((typeof track === 'number') || track === null)) {
                                return this.removeTrack$org_herac_tuxguitar_song_models_TGSong$int(song, track);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongManager.prototype.removeTrack$org_herac_tuxguitar_song_models_TGSong$int = function (song, number) {
                            var nextNumber = number;
                            var trackToRemove = null;
                            this.orderTracks(song);
                            var it = song.getTracks();
                            while ((it.hasNext())) {
                                var currTrack = it.next();
                                if (trackToRemove == null && currTrack.getNumber() === nextNumber) {
                                    trackToRemove = currTrack;
                                }
                                else if (currTrack.getNumber() === (nextNumber + 1)) {
                                    currTrack.setNumber(nextNumber);
                                    nextNumber++;
                                }
                            }
                            ;
                            song.removeTrack(trackToRemove);
                        };
                        TGSongManager.prototype.orderTracks = function (song) {
                            for (var i = 0; i < song.countTracks(); i++) {
                                var minTrack = null;
                                for (var trackIdx = i; trackIdx < song.countTracks(); trackIdx++) {
                                    var track = song.getTrack(trackIdx);
                                    if (minTrack == null || track.getNumber() < minTrack.getNumber()) {
                                        minTrack = track;
                                    }
                                }
                                song.moveTrack(i, minTrack);
                            }
                        };
                        TGSongManager.prototype.getTrack = function (song, number) {
                            var track = null;
                            for (var i = 0; i < song.countTracks(); i++) {
                                var currTrack = song.getTrack(i);
                                if (currTrack.getNumber() === number) {
                                    track = currTrack;
                                    break;
                                }
                            }
                            return track;
                        };
                        TGSongManager.prototype.getFirstTrack = function (song) {
                            var track = null;
                            if (!song.isEmpty()) {
                                track = song.getTrack(0);
                            }
                            return track;
                        };
                        TGSongManager.prototype.getLastTrack = function (song) {
                            var track = null;
                            if (!song.isEmpty()) {
                                track = song.getTrack(song.countTracks() - 1);
                            }
                            return track;
                        };
                        TGSongManager.prototype.getNextTrackNumber = function (song) {
                            return (song.countTracks() + 1);
                        };
                        TGSongManager.prototype.getDefaultTrackName = function (tgTrack) {
                            if (tgTrack != null && tgTrack.getNumber() > 0) {
                                return new String("Track " + tgTrack.getNumber());
                            }
                            return new String();
                        };
                        TGSongManager.prototype.cloneTrack = function (song, track) {
                            var clone = track.clone(this.getFactory(), song);
                            clone.setNumber(this.getNextTrackNumber(song));
                            this.addTrack$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGTrack(song, clone);
                            return clone;
                        };
                        TGSongManager.prototype.moveTrackUp = function (song, track) {
                            if (track.getNumber() > 1) {
                                var prevTrack = this.getTrack(song, track.getNumber() - 1);
                                prevTrack.setNumber(prevTrack.getNumber() + 1);
                                track.setNumber(track.getNumber() - 1);
                                this.orderTracks(song);
                                return true;
                            }
                            return false;
                        };
                        TGSongManager.prototype.moveTrackDown = function (song, track) {
                            if (track.getNumber() < song.countTracks()) {
                                var nextTrack = this.getTrack(song, track.getNumber() + 1);
                                nextTrack.setNumber(nextTrack.getNumber() - 1);
                                track.setNumber(track.getNumber() + 1);
                                this.orderTracks(song);
                                return true;
                            }
                            return false;
                        };
                        TGSongManager.prototype.changeTimeSignature$org_herac_tuxguitar_song_models_TGSong$long$org_herac_tuxguitar_song_models_TGTimeSignature$boolean = function (song, start, timeSignature, toEnd) {
                            this.changeTimeSignature$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader$org_herac_tuxguitar_song_models_TGTimeSignature$boolean(song, this.getMeasureHeaderAt(song, start), timeSignature, toEnd);
                        };
                        TGSongManager.prototype.changeTimeSignature$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader$org_herac_tuxguitar_song_models_TGTimeSignature$boolean = function (song, header, timeSignature, toEnd) {
                            header.getTimeSignature().copyFrom(timeSignature);
                            var nextStart = header.getStart() + header.getLength();
                            var measures = this.getMeasureHeadersBeforeEnd(song, header.getStart() + 1);
                            var it = measures.iterator();
                            while ((it.hasNext())) {
                                var nextHeader = it.next();
                                var theMove = nextStart - nextHeader.getStart();
                                this.moveMeasureHeader(nextHeader, theMove, 0);
                                if (toEnd) {
                                    nextHeader.getTimeSignature().copyFrom(timeSignature);
                                }
                                nextStart = nextHeader.getStart() + nextHeader.getLength();
                            }
                            ;
                            this.moveOutOfBoundsBeatsToNewMeasure(song, header.getStart());
                        };
                        TGSongManager.prototype.changeTimeSignature = function (song, header, timeSignature, toEnd) {
                            if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((header != null && header instanceof org.herac.tuxguitar.song.models.TGMeasureHeader) || header === null) && ((timeSignature != null && timeSignature instanceof org.herac.tuxguitar.song.models.TGTimeSignature) || timeSignature === null) && ((typeof toEnd === 'boolean') || toEnd === null)) {
                                return this.changeTimeSignature$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader$org_herac_tuxguitar_song_models_TGTimeSignature$boolean(song, header, timeSignature, toEnd);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((typeof header === 'number') || header === null) && ((timeSignature != null && timeSignature instanceof org.herac.tuxguitar.song.models.TGTimeSignature) || timeSignature === null) && ((typeof toEnd === 'boolean') || toEnd === null)) {
                                return this.changeTimeSignature$org_herac_tuxguitar_song_models_TGSong$long$org_herac_tuxguitar_song_models_TGTimeSignature$boolean(song, header, timeSignature, toEnd);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongManager.prototype.moveOutOfBoundsBeatsToNewMeasure = function (song, start) {
                            var it = song.getTracks();
                            while ((it.hasNext())) {
                                var track = it.next();
                                this.getTrackManager().moveOutOfBoundsBeatsToNewMeasure(track, start);
                            }
                            ;
                        };
                        TGSongManager.prototype.changeTripletFeel$org_herac_tuxguitar_song_models_TGSong$long$int$boolean = function (song, start, tripletFeel, toEnd) {
                            this.changeTripletFeel$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader$int$boolean(song, this.getMeasureHeaderAt(song, start), tripletFeel, toEnd);
                        };
                        TGSongManager.prototype.changeTripletFeel$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader$int$boolean = function (song, header, tripletFeel, toEnd) {
                            header.setTripletFeel(tripletFeel);
                            if (toEnd) {
                                var measures = this.getMeasureHeadersBeforeEnd(song, header.getStart() + 1);
                                var it = measures.iterator();
                                while ((it.hasNext())) {
                                    var nextHeader = it.next();
                                    nextHeader.setTripletFeel(tripletFeel);
                                }
                                ;
                            }
                        };
                        TGSongManager.prototype.changeTripletFeel = function (song, header, tripletFeel, toEnd) {
                            if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((header != null && header instanceof org.herac.tuxguitar.song.models.TGMeasureHeader) || header === null) && ((typeof tripletFeel === 'number') || tripletFeel === null) && ((typeof toEnd === 'boolean') || toEnd === null)) {
                                return this.changeTripletFeel$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader$int$boolean(song, header, tripletFeel, toEnd);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((typeof header === 'number') || header === null) && ((typeof tripletFeel === 'number') || tripletFeel === null) && ((typeof toEnd === 'boolean') || toEnd === null)) {
                                return this.changeTripletFeel$org_herac_tuxguitar_song_models_TGSong$long$int$boolean(song, header, tripletFeel, toEnd);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongManager.prototype.changeTempos$org_herac_tuxguitar_song_models_TGSong$long$org_herac_tuxguitar_song_models_TGTempo$boolean = function (song, start, tempo, toEnd) {
                            this.changeTempos$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader$org_herac_tuxguitar_song_models_TGTempo$boolean(song, this.getMeasureHeaderAt(song, start), tempo, toEnd);
                        };
                        TGSongManager.prototype.changeTempos$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader$org_herac_tuxguitar_song_models_TGTempo$boolean = function (song, header, tempo, toEnd) {
                            var oldValue = header.getTempo().getValue();
                            var it = this.getMeasureHeadersAfter(song, header.getNumber() - 1).iterator();
                            while ((it.hasNext())) {
                                var nextHeader = it.next();
                                if (toEnd || nextHeader.getTempo().getValue() === oldValue) {
                                    this.changeTempo(nextHeader, tempo);
                                }
                                else {
                                    break;
                                }
                            }
                            ;
                        };
                        TGSongManager.prototype.changeTempos = function (song, header, tempo, toEnd) {
                            if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((header != null && header instanceof org.herac.tuxguitar.song.models.TGMeasureHeader) || header === null) && ((tempo != null && tempo instanceof org.herac.tuxguitar.song.models.TGTempo) || tempo === null) && ((typeof toEnd === 'boolean') || toEnd === null)) {
                                return this.changeTempos$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader$org_herac_tuxguitar_song_models_TGTempo$boolean(song, header, tempo, toEnd);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((typeof header === 'number') || header === null) && ((tempo != null && tempo instanceof org.herac.tuxguitar.song.models.TGTempo) || tempo === null) && ((typeof toEnd === 'boolean') || toEnd === null)) {
                                return this.changeTempos$org_herac_tuxguitar_song_models_TGSong$long$org_herac_tuxguitar_song_models_TGTempo$boolean(song, header, tempo, toEnd);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((header != null && (header["__interfaces"] != null && header["__interfaces"].indexOf("java.util.List") >= 0 || header.constructor != null && header.constructor["__interfaces"] != null && header.constructor["__interfaces"].indexOf("java.util.List") >= 0)) || header === null) && tempo === undefined && toEnd === undefined) {
                                return this.changeTempos$org_herac_tuxguitar_song_models_TGSong$java_util_List(song, header);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongManager.prototype.changeTempos$org_herac_tuxguitar_song_models_TGSong$java_util_List = function (song, tempos) {
                            var length = tempos.size();
                            if (length !== song.countMeasureHeaders()) {
                                return;
                            }
                            for (var i = 0; i < length; i++) {
                                var tempo = tempos.get(i);
                                var header = this.getMeasureHeader(song, i + 1);
                                this.changeTempo(header, tempo);
                            }
                        };
                        TGSongManager.prototype.changeTempo = function (header, tempo) {
                            header.getTempo().copyFrom(tempo);
                        };
                        TGSongManager.prototype.changeOpenRepeat = function (song, start) {
                            var header = this.getMeasureHeaderAt(song, start);
                            header.setRepeatOpen(!header.isRepeatOpen());
                        };
                        TGSongManager.prototype.changeCloseRepeat = function (song, start, repeatClose) {
                            var header = this.getMeasureHeaderAt(song, start);
                            header.setRepeatClose(repeatClose);
                        };
                        TGSongManager.prototype.changeAlternativeRepeat = function (song, start, repeatAlternative) {
                            var header = this.getMeasureHeaderAt(song, start);
                            header.setRepeatAlternative(repeatAlternative);
                        };
                        TGSongManager.prototype.addNewMeasureBeforeEnd = function (song) {
                            var lastHeader = this.getLastMeasureHeader(song);
                            var header = this.getFactory().newHeader();
                            header.setNumber((lastHeader.getNumber() + 1));
                            header.setStart((lastHeader.getStart() + lastHeader.getLength()));
                            header.setRepeatOpen(false);
                            header.setRepeatClose(0);
                            header.setTripletFeel(lastHeader.getTripletFeel());
                            header.getTimeSignature().copyFrom(lastHeader.getTimeSignature());
                            header.getTempo().copyFrom(lastHeader.getTempo());
                            song.addMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader(header);
                            var it = song.getTracks();
                            while ((it.hasNext())) {
                                var track = it.next();
                                this.getTrackManager().addNewMeasureBeforeEnd(track, header);
                            }
                            ;
                            return header;
                        };
                        TGSongManager.prototype.addNewMeasure = function (song, number) {
                            var header = null;
                            if (number === 1) {
                                header = this.getMeasureHeader(song, number).clone(this.getFactory());
                            }
                            else {
                                header = this.getMeasureHeader(song, (number - 1)).clone(this.getFactory());
                                header.setStart(header.getStart() + header.getLength());
                                header.setNumber(header.getNumber() + 1);
                            }
                            header.setMarker(null);
                            header.setRepeatOpen(false);
                            header.setRepeatAlternative(0);
                            header.setRepeatClose(0);
                            var nextHeader = this.getMeasureHeader(song, number);
                            if (nextHeader != null) {
                                this.moveMeasureHeaders(song, this.getMeasureHeadersBeforeEnd(song, nextHeader.getStart()), header.getLength(), 1, true);
                            }
                            this.addMeasureHeader$org_herac_tuxguitar_song_models_TGSong$int$org_herac_tuxguitar_song_models_TGMeasureHeader(song, (header.getNumber() - 1), header);
                            var it = song.getTracks();
                            while ((it.hasNext())) {
                                var track = it.next();
                                this.getTrackManager().addNewMeasure(track, header);
                            }
                            ;
                        };
                        TGSongManager.prototype.getMeasures = function (song, start) {
                            var measures = (new java.util.ArrayList());
                            var it = song.getTracks();
                            while ((it.hasNext())) {
                                var track = it.next();
                                var measure = this.getTrackManager().getMeasureAt(track, start);
                                if (measure != null) {
                                    measures.add(measure);
                                }
                            }
                            ;
                            return measures;
                        };
                        TGSongManager.prototype.copyTrackFrom = function (song, track, from) {
                            while ((song.countMeasureHeaders() < from.countMeasures())) {
                                this.addNewMeasureBeforeEnd(song);
                            }
                            ;
                            while ((song.countMeasureHeaders() > from.countMeasures())) {
                                this.removeLastMeasureHeader(song);
                            }
                            ;
                            track.copyFrom(this.getFactory(), song, from);
                        };
                        TGSongManager.prototype.replaceTrack = function (song, track) {
                            var current = this.getTrack(song, track.getNumber());
                            if (current != null) {
                                this.copyTrackFrom(song, current, track);
                            }
                            return current;
                        };
                        TGSongManager.prototype.getFirstMeasureHeader = function (song) {
                            var firstHeader = null;
                            for (var i = 0; i < song.countMeasureHeaders(); i++) {
                                var currHeader = song.getMeasureHeader(i);
                                if (firstHeader == null || (currHeader.getStart() < firstHeader.getStart())) {
                                    firstHeader = currHeader;
                                }
                            }
                            return firstHeader;
                        };
                        TGSongManager.prototype.getLastMeasureHeader = function (song) {
                            var lastIndex = song.countMeasureHeaders() - 1;
                            return song.getMeasureHeader(lastIndex);
                        };
                        TGSongManager.prototype.getPrevMeasureHeader = function (song, header) {
                            var prevIndex = header.getNumber() - 1;
                            if (prevIndex > 0) {
                                return song.getMeasureHeader(prevIndex - 1);
                            }
                            return null;
                        };
                        TGSongManager.prototype.getNextMeasureHeader = function (song, header) {
                            var nextIndex = header.getNumber();
                            if (nextIndex < song.countMeasureHeaders()) {
                                return song.getMeasureHeader(nextIndex);
                            }
                            return null;
                        };
                        TGSongManager.prototype.getMeasureHeaderAt = function (song, start) {
                            var it = song.getMeasureHeaders();
                            while ((it.hasNext())) {
                                var header = it.next();
                                var measureStart = header.getStart();
                                var measureLength = header.getLength();
                                if (start >= measureStart && start < measureStart + measureLength) {
                                    return header;
                                }
                            }
                            ;
                            return null;
                        };
                        TGSongManager.prototype.getMeasureHeader = function (song, number) {
                            for (var i = 0; i < song.countMeasureHeaders(); i++) {
                                var header = song.getMeasureHeader(i);
                                if (header.getNumber() === number) {
                                    return header;
                                }
                            }
                            return null;
                        };
                        TGSongManager.prototype.getMeasureHeaderIndex = function (song, mh) {
                            for (var i = 0; i < song.countMeasureHeaders(); i++) {
                                var header = song.getMeasureHeader(i);
                                if (header.getNumber() === mh.getNumber()) {
                                    return i;
                                }
                            }
                            return -1;
                        };
                        /**
                         * Retorna Todos los desde Start hasta el final del compas
                         * @param {org.herac.tuxguitar.song.models.TGSong} song
                         * @param {number} fromStart
                         * @return {java.util.List}
                         */
                        TGSongManager.prototype.getMeasureHeadersBeforeEnd = function (song, fromStart) {
                            var headers = (new java.util.ArrayList());
                            var it = song.getMeasureHeaders();
                            while ((it.hasNext())) {
                                var header = it.next();
                                if (header.getStart() >= fromStart) {
                                    headers.add(header);
                                }
                            }
                            ;
                            return headers;
                        };
                        /**
                         * Retorna Todos los desde Start hasta el final del compas
                         * @param {org.herac.tuxguitar.song.models.TGSong} song
                         * @param {number} number
                         * @return {java.util.List}
                         */
                        TGSongManager.prototype.getMeasureHeadersAfter = function (song, number) {
                            var headers = (new java.util.ArrayList());
                            var it = song.getMeasureHeaders();
                            while ((it.hasNext())) {
                                var header = it.next();
                                if (header.getNumber() > number) {
                                    headers.add(header);
                                }
                            }
                            ;
                            return headers;
                        };
                        /**
                         * Retorna Todos los desde Start hasta el final del compas
                         * @param {org.herac.tuxguitar.song.models.TGSong} song
                         * @param {number} p1
                         * @param {number} p2
                         * @return {java.util.List}
                         */
                        TGSongManager.prototype.getMeasureHeadersBetween = function (song, p1, p2) {
                            var headers = (new java.util.ArrayList());
                            var it = song.getMeasureHeaders();
                            while ((it.hasNext())) {
                                var header = it.next();
                                if ((header.getStart() + header.getLength()) > p1 && header.getStart() < p2) {
                                    headers.add(header);
                                }
                            }
                            ;
                            return headers;
                        };
                        TGSongManager.prototype.removeLastMeasure = function (song) {
                            this.removeLastMeasureHeader(song);
                        };
                        TGSongManager.prototype.removeMeasure$org_herac_tuxguitar_song_models_TGSong$long = function (song, start) {
                            this.removeMeasureHeader$org_herac_tuxguitar_song_models_TGSong$long(song, start);
                        };
                        TGSongManager.prototype.removeMeasure$org_herac_tuxguitar_song_models_TGSong$int = function (song, number) {
                            this.removeMeasureHeader$org_herac_tuxguitar_song_models_TGSong$long(song, number);
                        };
                        TGSongManager.prototype.removeMeasure = function (song, number) {
                            if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((typeof number === 'number') || number === null)) {
                                return this.removeMeasure$org_herac_tuxguitar_song_models_TGSong$int(song, number);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((typeof number === 'number') || number === null)) {
                                return this.removeMeasure$org_herac_tuxguitar_song_models_TGSong$long(song, number);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        /**
                         * Agrega un Compas
                         * @param {org.herac.tuxguitar.song.models.TGSong} song
                         * @param {org.herac.tuxguitar.song.models.TGMeasureHeader} measure
                         */
                        TGSongManager.prototype.addMeasureHeader$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader = function (song, measure) {
                            song.addMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader(measure);
                        };
                        /**
                         * Agrega un Compas
                         * @param {org.herac.tuxguitar.song.models.TGSong} song
                         * @param {number} index
                         * @param {org.herac.tuxguitar.song.models.TGMeasureHeader} measure
                         */
                        TGSongManager.prototype.addMeasureHeader$org_herac_tuxguitar_song_models_TGSong$int$org_herac_tuxguitar_song_models_TGMeasureHeader = function (song, index, measure) {
                            song.addMeasureHeader$int$org_herac_tuxguitar_song_models_TGMeasureHeader(index, measure);
                        };
                        /**
                         * Agrega un Compas
                         * @param {org.herac.tuxguitar.song.models.TGSong} song
                         * @param {number} index
                         * @param {org.herac.tuxguitar.song.models.TGMeasureHeader} measure
                         */
                        TGSongManager.prototype.addMeasureHeader = function (song, index, measure) {
                            if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((typeof index === 'number') || index === null) && ((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasureHeader) || measure === null)) {
                                return this.addMeasureHeader$org_herac_tuxguitar_song_models_TGSong$int$org_herac_tuxguitar_song_models_TGMeasureHeader(song, index, measure);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((index != null && index instanceof org.herac.tuxguitar.song.models.TGMeasureHeader) || index === null) && measure === undefined) {
                                return this.addMeasureHeader$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader(song, index);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongManager.prototype.removeMeasureHeaders = function (song, n1, n2) {
                            for (var i = n1; i <= n2; i++) {
                                var measure = this.getMeasureHeader(song, n1);
                                this.removeMeasureHeader$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader(song, measure);
                            }
                        };
                        TGSongManager.prototype.removeLastMeasureHeader = function (song) {
                            this.removeMeasureHeader$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader(song, this.getLastMeasureHeader(song));
                        };
                        TGSongManager.prototype.removeMeasureHeader$org_herac_tuxguitar_song_models_TGSong$long = function (song, start) {
                            this.removeMeasureHeader$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader(song, this.getMeasureHeaderAt(song, start));
                        };
                        TGSongManager.prototype.removeMeasureHeader$org_herac_tuxguitar_song_models_TGSong$int = function (song, number) {
                            this.removeMeasureHeader$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader(song, this.getMeasureHeader(song, number));
                        };
                        TGSongManager.prototype.removeMeasureHeader$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader = function (song, header) {
                            var start = header.getStart();
                            var length = header.getLength();
                            var it = song.getTracks();
                            while ((it.hasNext())) {
                                var track = it.next();
                                this.getTrackManager().removeMeasure$org_herac_tuxguitar_song_models_TGTrack$long(track, start);
                            }
                            ;
                            this.moveMeasureHeaders(song, this.getMeasureHeadersBeforeEnd(song, start + 1), -length, -1, true);
                            song.removeMeasureHeader$int(header.getNumber() - 1);
                        };
                        TGSongManager.prototype.removeMeasureHeader = function (song, header) {
                            if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((header != null && header instanceof org.herac.tuxguitar.song.models.TGMeasureHeader) || header === null)) {
                                return this.removeMeasureHeader$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMeasureHeader(song, header);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((typeof header === 'number') || header === null)) {
                                return this.removeMeasureHeader$org_herac_tuxguitar_song_models_TGSong$int(song, header);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((typeof header === 'number') || header === null)) {
                                return this.removeMeasureHeader$org_herac_tuxguitar_song_models_TGSong$long(song, header);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongManager.prototype.replaceMeasureHeader = function (song, newHeader) {
                            var header = this.getMeasureHeaderAt(song, newHeader.getStart());
                            var number = header.getNumber();
                            this.copyMeasureHeaderFrom(song, header, newHeader);
                            header.setNumber(number);
                            return header;
                        };
                        TGSongManager.prototype.copyMeasureHeaderFrom = function (song, header, from) {
                            header.copyFrom(this.getFactory(), from);
                        };
                        TGSongManager.prototype.moveMeasureHeaders = function (song, headers, theMove, numberMove, moveComponents) {
                            if (moveComponents) {
                                var it_1 = headers.iterator();
                                while ((it_1.hasNext())) {
                                    var header = it_1.next();
                                    this.moveMeasureComponents(song, header, theMove);
                                }
                                ;
                            }
                            var it = headers.iterator();
                            while ((it.hasNext())) {
                                var header = it.next();
                                this.moveMeasureHeader(header, theMove, numberMove);
                            }
                            ;
                        };
                        /**
                         * Mueve el compas
                         * @param {org.herac.tuxguitar.song.models.TGMeasureHeader} header
                         * @param {number} theMove
                         * @param {number} numberMove
                         */
                        TGSongManager.prototype.moveMeasureHeader = function (header, theMove, numberMove) {
                            header.setNumber(header.getNumber() + numberMove);
                            header.setStart(header.getStart() + theMove);
                        };
                        /**
                         * Mueve el compas
                         * @param {org.herac.tuxguitar.song.models.TGSong} song
                         * @param {org.herac.tuxguitar.song.models.TGMeasureHeader} header
                         * @param {number} theMove
                         */
                        TGSongManager.prototype.moveMeasureComponents = function (song, header, theMove) {
                            var it = song.getTracks();
                            while ((it.hasNext())) {
                                var track = it.next();
                                this.getTrackManager().moveMeasure(this.getTrackManager().getMeasure(track, header.getNumber()), theMove);
                            }
                            ;
                        };
                        /**
                         *
                         * Retorna true si el start esta en el rango del compas
                         * @param {org.herac.tuxguitar.song.models.TGMeasureHeader} header
                         * @param {number} start
                         * @return {boolean}
                         */
                        TGSongManager.prototype.isAtPosition = function (header, start) {
                            return (start >= header.getStart() && start < header.getStart() + header.getLength());
                        };
                        TGSongManager.prototype.updateMarker$org_herac_tuxguitar_song_models_TGSong$int$java_lang_String$org_herac_tuxguitar_song_models_TGColor = function (song, measure, title, color) {
                            var header = this.getMeasureHeader(song, measure);
                            if (header != null) {
                                if (!header.hasMarker()) {
                                    header.setMarker(this.getFactory().newMarker());
                                }
                                header.getMarker().setMeasure(measure);
                                header.getMarker().setTitle(title);
                                header.getMarker().getColor().setR(color.getR());
                                header.getMarker().getColor().setG(color.getG());
                                header.getMarker().getColor().setB(color.getB());
                                return header.getMarker();
                            }
                            return null;
                        };
                        TGSongManager.prototype.updateMarker = function (song, measure, title, color) {
                            if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((typeof measure === 'number') || measure === null) && ((typeof title === 'string') || title === null) && ((color != null && color instanceof org.herac.tuxguitar.song.models.TGColor) || color === null)) {
                                return this.updateMarker$org_herac_tuxguitar_song_models_TGSong$int$java_lang_String$org_herac_tuxguitar_song_models_TGColor(song, measure, title, color);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMarker) || measure === null) && title === undefined && color === undefined) {
                                return this.updateMarker$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMarker(song, measure);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongManager.prototype.updateMarker$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMarker = function (song, marker) {
                            return this.updateMarker$org_herac_tuxguitar_song_models_TGSong$int$java_lang_String$org_herac_tuxguitar_song_models_TGColor(song, marker.getMeasure(), marker.getTitle(), marker.getColor());
                        };
                        TGSongManager.prototype.removeMarker$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMarker = function (song, marker) {
                            if (marker != null) {
                                this.removeMarker$org_herac_tuxguitar_song_models_TGSong$int(song, marker.getMeasure());
                            }
                        };
                        TGSongManager.prototype.removeMarker = function (song, marker) {
                            if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((marker != null && marker instanceof org.herac.tuxguitar.song.models.TGMarker) || marker === null)) {
                                return this.removeMarker$org_herac_tuxguitar_song_models_TGSong$org_herac_tuxguitar_song_models_TGMarker(song, marker);
                            }
                            else if (((song != null && song instanceof org.herac.tuxguitar.song.models.TGSong) || song === null) && ((typeof marker === 'number') || marker === null)) {
                                return this.removeMarker$org_herac_tuxguitar_song_models_TGSong$int(song, marker);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongManager.prototype.removeMarker$org_herac_tuxguitar_song_models_TGSong$int = function (song, number) {
                            var header = this.getMeasureHeader(song, number);
                            if (header != null && header.hasMarker()) {
                                header.setMarker(null);
                            }
                        };
                        TGSongManager.prototype.removeAllMarkers = function (song) {
                            var it = song.getMeasureHeaders();
                            while ((it.hasNext())) {
                                var header = it.next();
                                if (header.hasMarker()) {
                                    header.setMarker(null);
                                }
                            }
                            ;
                        };
                        TGSongManager.prototype.getMarkers = function (song) {
                            var markers = (new java.util.ArrayList());
                            var it = song.getMeasureHeaders();
                            while ((it.hasNext())) {
                                var header = it.next();
                                if (header.hasMarker()) {
                                    markers.add(header.getMarker());
                                }
                            }
                            ;
                            return markers;
                        };
                        TGSongManager.prototype.getMarker = function (song, number) {
                            var header = this.getMeasureHeader(song, number);
                            if (header != null && header.hasMarker()) {
                                return header.getMarker();
                            }
                            return null;
                        };
                        TGSongManager.prototype.getPreviousMarker = function (song, from) {
                            var previous = null;
                            var it = song.getMeasureHeaders();
                            while ((it.hasNext())) {
                                var header = it.next();
                                if (header.hasMarker() && header.getNumber() < from) {
                                    if (previous == null || previous.getNumber() < header.getNumber()) {
                                        previous = header;
                                    }
                                }
                            }
                            ;
                            return (previous != null) ? previous.getMarker() : null;
                        };
                        TGSongManager.prototype.getNextMarker = function (song, from) {
                            var next = null;
                            var it = song.getMeasureHeaders();
                            while ((it.hasNext())) {
                                var header = it.next();
                                if (header.hasMarker() && header.getNumber() > from) {
                                    if (next == null || next.getNumber() > header.getNumber()) {
                                        next = header;
                                    }
                                }
                            }
                            ;
                            return (next != null) ? next.getMarker() : null;
                        };
                        TGSongManager.prototype.getFirstMarker = function (song) {
                            var first = null;
                            var it = song.getMeasureHeaders();
                            while ((it.hasNext())) {
                                var header = it.next();
                                if (header.hasMarker()) {
                                    if (first == null || header.getNumber() < first.getNumber()) {
                                        first = header;
                                    }
                                }
                            }
                            ;
                            return (first != null) ? first.getMarker() : null;
                        };
                        TGSongManager.prototype.getLastMarker = function (song) {
                            var next = null;
                            var it = song.getMeasureHeaders();
                            while ((it.hasNext())) {
                                var header = it.next();
                                if (header.hasMarker()) {
                                    if (next == null || header.getNumber() > next.getNumber()) {
                                        next = header;
                                    }
                                }
                            }
                            ;
                            return (next != null) ? next.getMarker() : null;
                        };
                        TGSongManager.prototype.autoCompleteSilences = function (song) {
                            var it = song.getTracks();
                            while ((it.hasNext())) {
                                var track = it.next();
                                this.getTrackManager().autoCompleteSilences(track);
                            }
                            ;
                        };
                        TGSongManager.prototype.orderBeats = function (song) {
                            var it = song.getTracks();
                            while ((it.hasNext())) {
                                var track = it.next();
                                this.getTrackManager().orderBeats(track);
                            }
                            ;
                        };
                        TGSongManager.prototype.createDefaultInstrumentStrings = function (stringCount) {
                            if (stringCount === void 0) { stringCount = 6; }
                            return this.createStrings(stringCount, TGSongManager.DEFAULT_TUNING_VALUES_$LI$());
                        };
                        TGSongManager.prototype.createPercussionStrings = function (stringCount) {
                            return this.createStrings(stringCount, null);
                        };
                        TGSongManager.prototype.createStrings = function (stringCount, defaultTunings) {
                            var strings = (new java.util.ArrayList());
                            if (defaultTunings != null) {
                                for (var i = 0; i < defaultTunings.length; i++) {
                                    if (stringCount === defaultTunings[i].length) {
                                        for (var n = 0; n < defaultTunings[i].length; n++) {
                                            strings.add(TGSongManager.newString(this.getFactory(), (n + 1), defaultTunings[i][n]));
                                        }
                                        break;
                                    }
                                }
                            }
                            if (strings.isEmpty()) {
                                for (var i = 1; i <= stringCount; i++) {
                                    strings.add(TGSongManager.newString(this.getFactory(), i, 0));
                                }
                            }
                            return strings;
                        };
                        TGSongManager.newString = function (factory, number, value) {
                            var string = factory.newString();
                            string.setNumber(number);
                            string.setValue(value);
                            return string;
                        };
                        TGSongManager.getDivisionLength = function (header) {
                            var defaultLength = org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME;
                            var denominator = header.getTimeSignature().getDenominator().getValue();
                            switch ((denominator)) {
                                case org.herac.tuxguitar.song.models.TGDuration.EIGHTH:
                                    if (header.getTimeSignature().getNumerator() % 3 === 0) {
                                        defaultLength += Math.floor(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME / 2);
                                    }
                                    break;
                            }
                            return defaultLength;
                        };
                        return TGSongManager;
                    }());
                    TGSongManager.MAX_CHANNELS = 16;
                    managers.TGSongManager = TGSongManager;
                    TGSongManager["__class"] = "org.herac.tuxguitar.song.managers.TGSongManager";
                })(managers = song_2.managers || (song_2.managers = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var managers;
                (function (managers) {
                    var TGTrackManager = (function () {
                        function TGTrackManager(songManager) {
                            this.songManager = null;
                            this.songManager = songManager;
                        }
                        TGTrackManager.prototype.getSongManager = function () {
                            return this.songManager;
                        };
                        TGTrackManager.prototype.getFirstMeasure = function (track) {
                            var firstMeasure = null;
                            var measures = track.getMeasures();
                            while ((measures.hasNext())) {
                                var currMeasure = measures.next();
                                if (firstMeasure == null || (currMeasure.getStart() < firstMeasure.getStart())) {
                                    firstMeasure = currMeasure;
                                }
                            }
                            ;
                            return firstMeasure;
                        };
                        TGTrackManager.prototype.getLastMeasure = function (track) {
                            return track.getMeasure(track.countMeasures() - 1);
                        };
                        TGTrackManager.prototype.getPrevMeasure = function (measure) {
                            return measure.getTrack().getMeasure(measure.getNumber() - 2);
                        };
                        TGTrackManager.prototype.getNextMeasure = function (measure) {
                            return measure.getTrack().getMeasure(measure.getNumber());
                        };
                        TGTrackManager.prototype.getMeasureAt = function (track, start) {
                            var it = track.getMeasures();
                            while ((it.hasNext())) {
                                var measure = it.next();
                                var measureStart = measure.getStart();
                                var measureLength = measure.getLength();
                                if (start >= measureStart && start < measureStart + measureLength) {
                                    return measure;
                                }
                            }
                            ;
                            return null;
                        };
                        TGTrackManager.prototype.getMeasure = function (track, number) {
                            var it = track.getMeasures();
                            while ((it.hasNext())) {
                                var measure = it.next();
                                if (measure.getNumber() === number) {
                                    return measure;
                                }
                            }
                            ;
                            return null;
                        };
                        /**
                         * Retorna Todos los desde Start hasta el final del compas
                         * @param {org.herac.tuxguitar.song.models.TGTrack} track
                         * @param {number} fromStart
                         * @return {java.util.List}
                         */
                        TGTrackManager.prototype.getMeasuresBeforeEnd = function (track, fromStart) {
                            var measures = (new java.util.ArrayList());
                            var it = track.getMeasures();
                            while ((it.hasNext())) {
                                var currMeasure = it.next();
                                if (currMeasure.getStart() >= fromStart) {
                                    measures.add(currMeasure);
                                }
                            }
                            ;
                            return measures;
                        };
                        /**
                         * Retorna Todos los desde Start hasta el final del compas
                         * @param {org.herac.tuxguitar.song.models.TGTrack} track
                         * @param {number} p1
                         * @param {number} p2
                         * @return {java.util.List}
                         */
                        TGTrackManager.prototype.getMeasuresBetween = function (track, p1, p2) {
                            var measures = (new java.util.ArrayList());
                            var it = track.getMeasures();
                            while ((it.hasNext())) {
                                var measure = it.next();
                                if ((measure.getStart() + measure.getLength()) > p1 && measure.getStart() < p2) {
                                    measures.add(measure);
                                }
                            }
                            ;
                            return measures;
                        };
                        TGTrackManager.prototype.addNewMeasureBeforeEnd = function (track, header) {
                            this.addNewMeasureAfter(track, header, this.getLastMeasure(track));
                        };
                        /**
                         * Agrega un Compas
                         * @param {org.herac.tuxguitar.song.models.TGTrack} track
                         * @param {org.herac.tuxguitar.song.models.TGMeasureHeader} header
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         */
                        TGTrackManager.prototype.addNewMeasureAfter = function (track, header, measure) {
                            var newMeasure = this.getSongManager().getFactory().newMeasure(header);
                            newMeasure.setClef(measure.getClef());
                            newMeasure.setKeySignature(measure.getKeySignature());
                            this.addMeasure$org_herac_tuxguitar_song_models_TGTrack$org_herac_tuxguitar_song_models_TGMeasure(track, newMeasure);
                        };
                        TGTrackManager.prototype.addNewMeasure = function (track, header) {
                            var previous = this.getMeasure(track, (header.getNumber() === 1) ? (header.getNumber() + 1) : header.getNumber() - 1);
                            var newMeasure = this.getSongManager().getFactory().newMeasure(header);
                            newMeasure.setTrack(track);
                            newMeasure.setClef(previous.getClef());
                            newMeasure.setKeySignature(previous.getKeySignature());
                            this.addMeasure$org_herac_tuxguitar_song_models_TGTrack$int$org_herac_tuxguitar_song_models_TGMeasure(track, header.getNumber() - 1, newMeasure);
                        };
                        /**
                         * Agrega un Compas
                         * @param {org.herac.tuxguitar.song.models.TGTrack} track
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         */
                        TGTrackManager.prototype.addMeasure$org_herac_tuxguitar_song_models_TGTrack$org_herac_tuxguitar_song_models_TGMeasure = function (track, measure) {
                            track.addMeasure$org_herac_tuxguitar_song_models_TGMeasure(measure);
                        };
                        /**
                         * Agrega un Compas
                         * @param {org.herac.tuxguitar.song.models.TGTrack} track
                         * @param {number} index
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         */
                        TGTrackManager.prototype.addMeasure$org_herac_tuxguitar_song_models_TGTrack$int$org_herac_tuxguitar_song_models_TGMeasure = function (track, index, measure) {
                            track.addMeasure$int$org_herac_tuxguitar_song_models_TGMeasure(index, measure);
                        };
                        /**
                         * Agrega un Compas
                         * @param {org.herac.tuxguitar.song.models.TGTrack} track
                         * @param {number} index
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         */
                        TGTrackManager.prototype.addMeasure = function (track, index, measure) {
                            if (((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null) && ((typeof index === 'number') || index === null) && ((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null)) {
                                return this.addMeasure$org_herac_tuxguitar_song_models_TGTrack$int$org_herac_tuxguitar_song_models_TGMeasure(track, index, measure);
                            }
                            else if (((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null) && ((index != null && index instanceof org.herac.tuxguitar.song.models.TGMeasure) || index === null) && measure === undefined) {
                                return this.addMeasure$org_herac_tuxguitar_song_models_TGTrack$org_herac_tuxguitar_song_models_TGMeasure(track, index);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGTrackManager.prototype.removeLastMeasure = function (track) {
                            this.removeMeasure$org_herac_tuxguitar_song_models_TGMeasure(this.getLastMeasure(track));
                        };
                        TGTrackManager.prototype.removeMeasure$org_herac_tuxguitar_song_models_TGTrack$long = function (track, start) {
                            this.removeMeasure$org_herac_tuxguitar_song_models_TGMeasure(this.getMeasureAt(track, start));
                        };
                        TGTrackManager.prototype.removeMeasure = function (track, start) {
                            if (((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null) && ((typeof start === 'number') || start === null)) {
                                return this.removeMeasure$org_herac_tuxguitar_song_models_TGTrack$long(track, start);
                            }
                            else if (((track != null && track instanceof org.herac.tuxguitar.song.models.TGMeasure) || track === null) && start === undefined) {
                                return this.removeMeasure$org_herac_tuxguitar_song_models_TGMeasure(track);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGTrackManager.prototype.removeMeasure$org_herac_tuxguitar_song_models_TGMeasure = function (measure) {
                            measure.getTrack().removeMeasure(measure.getNumber() - 1);
                        };
                        TGTrackManager.prototype.copyMeasureFrom = function (measure, from) {
                            measure.copyFrom(this.getSongManager().getFactory(), from);
                        };
                        TGTrackManager.prototype.replaceMeasure = function (track, newMeasure) {
                            var tgMeasure = this.getMeasureAt(track, newMeasure.getStart());
                            this.copyMeasureFrom(tgMeasure, newMeasure);
                            return tgMeasure;
                        };
                        /**
                         * Mueve el compas
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} theMove
                         */
                        TGTrackManager.prototype.moveMeasure = function (measure, theMove) {
                            this.getSongManager().getMeasureManager().moveAllBeats(measure, theMove);
                        };
                        TGTrackManager.prototype.moveOutOfBoundsBeatsToNewMeasure = function (track, start) {
                            var it = this.getMeasuresBeforeEnd(track, start).iterator();
                            while ((it.hasNext())) {
                                var measure = it.next();
                                this.getSongManager().getMeasureManager().moveOutOfBoundsBeatsToNewMeasure$org_herac_tuxguitar_song_models_TGMeasure(measure);
                            }
                            ;
                        };
                        TGTrackManager.prototype.moveTrackBeats = function (track, measureStart, moveStart, theMove) {
                            var measures = this.getMeasuresBeforeEnd(track, measureStart);
                            for (var i = 0; i < measures.size(); i++) {
                                var measure = measures.get(i);
                                if (moveStart + theMove < moveStart) {
                                    this.getSongManager().getMeasureManager().removeBeatsBetween(measure, moveStart, (moveStart + Math.abs(theMove)));
                                }
                                this.getSongManager().getMeasureManager().moveBeats$org_herac_tuxguitar_song_models_TGMeasure$long$long(measure, moveStart, theMove);
                            }
                            for (var i = 0; i < measures.size(); i++) {
                                var measure = measures.get(i);
                                this.getSongManager().getMeasureManager().moveOutOfBoundsBeatsToNewMeasure$org_herac_tuxguitar_song_models_TGMeasure$boolean(measure, false);
                            }
                        };
                        TGTrackManager.prototype.changeKeySignature$org_herac_tuxguitar_song_models_TGTrack$long$int$boolean = function (track, start, keySignature, toEnd) {
                            this.changeKeySignature$org_herac_tuxguitar_song_models_TGTrack$org_herac_tuxguitar_song_models_TGMeasure$int$boolean(track, this.getMeasureAt(track, start), keySignature, toEnd);
                        };
                        /**
                         * Cambia el Key Signature
                         * @param {org.herac.tuxguitar.song.models.TGTrack} track
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} keySignature
                         * @param {boolean} toEnd
                         */
                        TGTrackManager.prototype.changeKeySignature$org_herac_tuxguitar_song_models_TGTrack$org_herac_tuxguitar_song_models_TGMeasure$int$boolean = function (track, measure, keySignature, toEnd) {
                            measure.setKeySignature(keySignature);
                            if (toEnd) {
                                var measures = this.getMeasuresBeforeEnd(track, measure.getStart() + 1);
                                var it = measures.iterator();
                                while ((it.hasNext())) {
                                    var nextMeasure = it.next();
                                    nextMeasure.setKeySignature(keySignature);
                                }
                                ;
                            }
                        };
                        /**
                         * Cambia el Key Signature
                         * @param {org.herac.tuxguitar.song.models.TGTrack} track
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} keySignature
                         * @param {boolean} toEnd
                         */
                        TGTrackManager.prototype.changeKeySignature = function (track, measure, keySignature, toEnd) {
                            if (((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null) && ((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof keySignature === 'number') || keySignature === null) && ((typeof toEnd === 'boolean') || toEnd === null)) {
                                return this.changeKeySignature$org_herac_tuxguitar_song_models_TGTrack$org_herac_tuxguitar_song_models_TGMeasure$int$boolean(track, measure, keySignature, toEnd);
                            }
                            else if (((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null) && ((typeof measure === 'number') || measure === null) && ((typeof keySignature === 'number') || keySignature === null) && ((typeof toEnd === 'boolean') || toEnd === null)) {
                                return this.changeKeySignature$org_herac_tuxguitar_song_models_TGTrack$long$int$boolean(track, measure, keySignature, toEnd);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGTrackManager.prototype.changeClef$org_herac_tuxguitar_song_models_TGTrack$long$int$boolean = function (track, start, clef, toEnd) {
                            this.changeClef$org_herac_tuxguitar_song_models_TGTrack$org_herac_tuxguitar_song_models_TGMeasure$int$boolean(track, this.getMeasureAt(track, start), clef, toEnd);
                        };
                        /**
                         * Cambia el Clef
                         * @param {org.herac.tuxguitar.song.models.TGTrack} track
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} clef
                         * @param {boolean} toEnd
                         */
                        TGTrackManager.prototype.changeClef$org_herac_tuxguitar_song_models_TGTrack$org_herac_tuxguitar_song_models_TGMeasure$int$boolean = function (track, measure, clef, toEnd) {
                            measure.setClef(clef);
                            if (toEnd) {
                                var measures = this.getMeasuresBeforeEnd(track, measure.getStart() + 1);
                                var it = measures.iterator();
                                while ((it.hasNext())) {
                                    var nextMeasure = it.next();
                                    nextMeasure.setClef(clef);
                                }
                                ;
                            }
                        };
                        /**
                         * Cambia el Clef
                         * @param {org.herac.tuxguitar.song.models.TGTrack} track
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @param {number} clef
                         * @param {boolean} toEnd
                         */
                        TGTrackManager.prototype.changeClef = function (track, measure, clef, toEnd) {
                            if (((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null) && ((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null) && ((typeof clef === 'number') || clef === null) && ((typeof toEnd === 'boolean') || toEnd === null)) {
                                return this.changeClef$org_herac_tuxguitar_song_models_TGTrack$org_herac_tuxguitar_song_models_TGMeasure$int$boolean(track, measure, clef, toEnd);
                            }
                            else if (((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null) && ((typeof measure === 'number') || measure === null) && ((typeof clef === 'number') || clef === null) && ((typeof toEnd === 'boolean') || toEnd === null)) {
                                return this.changeClef$org_herac_tuxguitar_song_models_TGTrack$long$int$boolean(track, measure, clef, toEnd);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGTrackManager.prototype.changeSolo = function (track, solo) {
                            track.setSolo(solo);
                            track.setMute(track.isSolo() ? false : track.isMute());
                        };
                        TGTrackManager.prototype.changeMute = function (track, mute) {
                            track.setMute(mute);
                            track.setSolo(track.isMute() ? false : track.isSolo());
                        };
                        TGTrackManager.prototype.changeInfo = function (track, name, color, offset) {
                            track.setName(name);
                            track.setOffset(offset);
                            track.getColor().copyFrom(color);
                        };
                        TGTrackManager.prototype.changeInstrumentStrings = function (track, strings) {
                            if (strings.size() < track.getStrings().size()) {
                                this.removeNotesAfterString(track, strings.size());
                            }
                            track.setStrings(strings);
                        };
                        TGTrackManager.prototype.removeNotesAfterString = function (track, string) {
                            var it = track.getMeasures();
                            while ((it.hasNext())) {
                                var measure = it.next();
                                this.getSongManager().getMeasureManager().removeNotesAfterString(measure, string);
                            }
                            ;
                        };
                        TGTrackManager.prototype.changeChannel$org_herac_tuxguitar_song_models_TGTrack$int = function (track, channelId) {
                            this.changeChannel$org_herac_tuxguitar_song_models_TGTrack$org_herac_tuxguitar_song_models_TGChannel(track, this.getSongManager().getChannel(track.getSong(), channelId));
                        };
                        TGTrackManager.prototype.changeChannel$org_herac_tuxguitar_song_models_TGTrack$org_herac_tuxguitar_song_models_TGChannel = function (track, channel) {
                            track.setChannelId((channel != null ? channel.getChannelId() : -1));
                            if (channel != null && channel.isPercussionChannel()) {
                                track.setStrings(this.getSongManager().createPercussionStrings(track.getStrings().size()));
                            }
                        };
                        TGTrackManager.prototype.changeChannel = function (track, channel) {
                            if (((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null) && ((channel != null && channel instanceof org.herac.tuxguitar.song.models.TGChannel) || channel === null)) {
                                return this.changeChannel$org_herac_tuxguitar_song_models_TGTrack$org_herac_tuxguitar_song_models_TGChannel(track, channel);
                            }
                            else if (((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null) && ((typeof channel === 'number') || channel === null)) {
                                return this.changeChannel$org_herac_tuxguitar_song_models_TGTrack$int(track, channel);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGTrackManager.prototype.autoCompleteSilences = function (track) {
                            var it = track.getMeasures();
                            while ((it.hasNext())) {
                                var measure = it.next();
                                this.songManager.getMeasureManager().autoCompleteSilences(measure);
                            }
                            ;
                        };
                        TGTrackManager.prototype.orderBeats = function (track) {
                            var it = track.getMeasures();
                            while ((it.hasNext())) {
                                var measure = it.next();
                                this.songManager.getMeasureManager().orderBeats(measure);
                            }
                            ;
                        };
                        TGTrackManager.prototype.transposeNotes$org_herac_tuxguitar_song_models_TGTrack$int$boolean$boolean$int = function (track, transposition, tryKeepString, applyToChords, applyToString) {
                            var it = track.getMeasures();
                            while ((it.hasNext())) {
                                var measure = it.next();
                                this.songManager.getMeasureManager().transposeNotes$org_herac_tuxguitar_song_models_TGMeasure$int$boolean$boolean$int(measure, transposition, tryKeepString, applyToChords, applyToString);
                            }
                            ;
                        };
                        TGTrackManager.prototype.transposeNotes = function (track, transposition, tryKeepString, applyToChords, applyToString) {
                            if (((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null) && ((typeof transposition === 'number') || transposition === null) && ((typeof tryKeepString === 'boolean') || tryKeepString === null) && ((typeof applyToChords === 'boolean') || applyToChords === null) && ((typeof applyToString === 'number') || applyToString === null)) {
                                return this.transposeNotes$org_herac_tuxguitar_song_models_TGTrack$int$boolean$boolean$int(track, transposition, tryKeepString, applyToChords, applyToString);
                            }
                            else if (((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null) && ((transposition != null && transposition instanceof Array && (transposition.length == 0 || transposition[0] == null || (typeof transposition[0] === 'number'))) || transposition === null) && ((typeof tryKeepString === 'boolean') || tryKeepString === null) && ((typeof applyToChords === 'boolean') || applyToChords === null) && applyToString === undefined) {
                                return this.transposeNotes$org_herac_tuxguitar_song_models_TGTrack$int_A$boolean$boolean(track, transposition, tryKeepString, applyToChords);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGTrackManager.prototype.transposeNotes$org_herac_tuxguitar_song_models_TGTrack$int_A$boolean$boolean = function (track, transpositionStrings, tryKeepString, applyToChords) {
                            var it = track.getMeasures();
                            while ((it.hasNext())) {
                                var measure = it.next();
                                this.songManager.getMeasureManager().transposeNotes$org_herac_tuxguitar_song_models_TGMeasure$int_A$boolean$boolean(measure, transpositionStrings, tryKeepString, applyToChords);
                            }
                            ;
                        };
                        /**
                         * Retorna true si es el primer compas
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @return {boolean}
                         */
                        TGTrackManager.prototype.isFirstMeasure = function (measure) {
                            return (measure.getNumber() === 1);
                        };
                        /**
                         * Retorna true si es el ultimo compas
                         * @param {org.herac.tuxguitar.song.models.TGMeasure} measure
                         * @return {boolean}
                         */
                        TGTrackManager.prototype.isLastMeasure = function (measure) {
                            return (measure.getTrack().getSong().countMeasureHeaders() === measure.getNumber());
                        };
                        return TGTrackManager;
                    }());
                    managers.TGTrackManager = TGTrackManager;
                    TGTrackManager["__class"] = "org.herac.tuxguitar.song.managers.TGTrackManager";
                })(managers = song.managers || (song.managers = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var effects;
                    (function (effects) {
                        /**
                         * @author julian
                         *
                         * TODO To change the template for this generated type comment go to
                         * Window - Preferences - Java - Code Style - Code Templates
                         */
                        var TGEffectBend = (function () {
                            function TGEffectBend() {
                                this.points = null;
                                this.points = (new java.util.ArrayList());
                            }
                            TGEffectBend.MAX_VALUE_LENGTH_$LI$ = function () { if (TGEffectBend.MAX_VALUE_LENGTH == null)
                                TGEffectBend.MAX_VALUE_LENGTH = (TGEffectBend.SEMITONE_LENGTH * 12); return TGEffectBend.MAX_VALUE_LENGTH; };
                            ;
                            TGEffectBend.prototype.addPoint = function (position, value) {
                                this.points.add(new TGEffectBend.BendPoint(this, position, value));
                            };
                            TGEffectBend.prototype.getPoints = function () {
                                return this.points;
                            };
                            TGEffectBend.prototype.clone = function (factory) {
                                var effect = factory.newEffectBend();
                                var it = this.getPoints().iterator();
                                while ((it.hasNext())) {
                                    var point = it.next();
                                    effect.addPoint(point.getPosition(), point.getValue());
                                }
                                ;
                                return effect;
                            };
                            return TGEffectBend;
                        }());
                        TGEffectBend.SEMITONE_LENGTH = 1;
                        TGEffectBend.MAX_POSITION_LENGTH = 12;
                        effects.TGEffectBend = TGEffectBend;
                        TGEffectBend["__class"] = "org.herac.tuxguitar.song.models.effects.TGEffectBend";
                        (function (TGEffectBend) {
                            var BendPoint = (function () {
                                function BendPoint(__parent, position, value) {
                                    this.__parent = __parent;
                                    this.position = 0;
                                    this.value = 0;
                                    this.position = position;
                                    this.value = value;
                                }
                                BendPoint.prototype.getPosition = function () {
                                    return this.position;
                                };
                                BendPoint.prototype.getValue = function () {
                                    return this.value;
                                };
                                BendPoint.prototype.getTime = function (duration) {
                                    return (Math.floor(duration * this.getPosition() / org.herac.tuxguitar.song.models.effects.TGEffectBend.MAX_POSITION_LENGTH));
                                };
                                BendPoint.prototype.clone = function () {
                                    return new TGEffectBend.BendPoint(this.__parent, this.getPosition(), this.getValue());
                                };
                                return BendPoint;
                            }());
                            TGEffectBend.BendPoint = BendPoint;
                            BendPoint["__class"] = "org.herac.tuxguitar.song.models.effects.TGEffectBend.BendPoint";
                        })(TGEffectBend = effects.TGEffectBend || (effects.TGEffectBend = {}));
                    })(effects = models.effects || (models.effects = {}));
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var effects;
                    (function (effects) {
                        var TGEffectGrace = (function () {
                            function TGEffectGrace() {
                                this.fret = 0;
                                this.duration = 0;
                                this.dynamic = 0;
                                this.transition = 0;
                                this.onBeat = false;
                                this.dead = false;
                                this.fret = 0;
                                this.duration = 1;
                                this.dynamic = org.herac.tuxguitar.song.models.TGVelocities.DEFAULT_$LI$();
                                this.transition = TGEffectGrace.TRANSITION_NONE;
                                this.onBeat = false;
                                this.dead = false;
                            }
                            TGEffectGrace.prototype.isDead = function () {
                                return this.dead;
                            };
                            TGEffectGrace.prototype.setDead = function (dead) {
                                this.dead = dead;
                            };
                            TGEffectGrace.prototype.getDuration = function () {
                                return this.duration;
                            };
                            TGEffectGrace.prototype.setDuration = function (duration) {
                                this.duration = duration;
                            };
                            TGEffectGrace.prototype.getDynamic = function () {
                                return this.dynamic;
                            };
                            TGEffectGrace.prototype.setDynamic = function (dynamic) {
                                this.dynamic = dynamic;
                            };
                            TGEffectGrace.prototype.getFret = function () {
                                return this.fret;
                            };
                            TGEffectGrace.prototype.setFret = function (fret) {
                                this.fret = fret;
                            };
                            TGEffectGrace.prototype.isOnBeat = function () {
                                return this.onBeat;
                            };
                            TGEffectGrace.prototype.setOnBeat = function (onBeat) {
                                this.onBeat = onBeat;
                            };
                            TGEffectGrace.prototype.getTransition = function () {
                                return this.transition;
                            };
                            TGEffectGrace.prototype.setTransition = function (transition) {
                                this.transition = transition;
                            };
                            TGEffectGrace.prototype.getDurationTime = function () {
                                return (((org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME / 16.0) * this.getDuration()) | 0);
                            };
                            TGEffectGrace.prototype.clone = function (factory) {
                                var effect = factory.newEffectGrace();
                                effect.setFret(this.getFret());
                                effect.setDuration(this.getDuration());
                                effect.setDynamic(this.getDynamic());
                                effect.setTransition(this.getTransition());
                                effect.setOnBeat(this.isOnBeat());
                                effect.setDead(this.isDead());
                                return effect;
                            };
                            return TGEffectGrace;
                        }());
                        TGEffectGrace.TRANSITION_NONE = 0;
                        TGEffectGrace.TRANSITION_SLIDE = 1;
                        TGEffectGrace.TRANSITION_BEND = 2;
                        TGEffectGrace.TRANSITION_HAMMER = 3;
                        effects.TGEffectGrace = TGEffectGrace;
                        TGEffectGrace["__class"] = "org.herac.tuxguitar.song.models.effects.TGEffectGrace";
                    })(effects = models.effects || (models.effects = {}));
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var effects;
                    (function (effects) {
                        var TGEffectHarmonic = (function () {
                            function TGEffectHarmonic() {
                                this.type = 0;
                                this.data = 0;
                                this.type = 0;
                                this.data = 0;
                            }
                            TGEffectHarmonic.NATURAL_FREQUENCIES_$LI$ = function () { if (TGEffectHarmonic.NATURAL_FREQUENCIES == null)
                                TGEffectHarmonic.NATURAL_FREQUENCIES = [[12, 12], [9, 28], [5, 24], [7, 19], [4, 28], [3, 31]]; return TGEffectHarmonic.NATURAL_FREQUENCIES; };
                            ;
                            TGEffectHarmonic.prototype.getData = function () {
                                return this.data;
                            };
                            TGEffectHarmonic.prototype.setData = function (data) {
                                this.data = data;
                            };
                            TGEffectHarmonic.prototype.getType = function () {
                                return this.type;
                            };
                            TGEffectHarmonic.prototype.setType = function (type) {
                                this.type = type;
                            };
                            TGEffectHarmonic.prototype.isNatural = function () {
                                return (this.type === TGEffectHarmonic.TYPE_NATURAL);
                            };
                            TGEffectHarmonic.prototype.isArtificial = function () {
                                return (this.type === TGEffectHarmonic.TYPE_ARTIFICIAL);
                            };
                            TGEffectHarmonic.prototype.isTapped = function () {
                                return (this.type === TGEffectHarmonic.TYPE_TAPPED);
                            };
                            TGEffectHarmonic.prototype.isPinch = function () {
                                return (this.type === TGEffectHarmonic.TYPE_PINCH);
                            };
                            TGEffectHarmonic.prototype.isSemi = function () {
                                return (this.type === TGEffectHarmonic.TYPE_SEMI);
                            };
                            TGEffectHarmonic.prototype.clone = function (factory) {
                                var effect = factory.newEffectHarmonic();
                                effect.setType(this.getType());
                                effect.setData(this.getData());
                                return effect;
                            };
                            return TGEffectHarmonic;
                        }());
                        TGEffectHarmonic.KEY_NATURAL = "N.H";
                        TGEffectHarmonic.KEY_ARTIFICIAL = "A.H";
                        TGEffectHarmonic.KEY_TAPPED = "T.H";
                        TGEffectHarmonic.KEY_PINCH = "P.H";
                        TGEffectHarmonic.KEY_SEMI = "S.H";
                        TGEffectHarmonic.TYPE_NATURAL = 1;
                        TGEffectHarmonic.TYPE_ARTIFICIAL = 2;
                        TGEffectHarmonic.TYPE_TAPPED = 3;
                        TGEffectHarmonic.TYPE_PINCH = 4;
                        TGEffectHarmonic.TYPE_SEMI = 5;
                        TGEffectHarmonic.MIN_ARTIFICIAL_OFFSET = -24;
                        TGEffectHarmonic.MAX_ARTIFICIAL_OFFSET = 24;
                        TGEffectHarmonic.MAX_TAPPED_OFFSET = 24;
                        effects.TGEffectHarmonic = TGEffectHarmonic;
                        TGEffectHarmonic["__class"] = "org.herac.tuxguitar.song.models.effects.TGEffectHarmonic";
                    })(effects = models.effects || (models.effects = {}));
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var effects;
                    (function (effects) {
                        /**
                         * @author julian
                         *
                         * TODO To change the template for this generated type comment go to
                         * Window - Preferences - Java - Code Style - Code Templates
                         */
                        var TGEffectTremoloBar = (function () {
                            function TGEffectTremoloBar() {
                                this.points = null;
                                this.points = (new java.util.ArrayList());
                            }
                            TGEffectTremoloBar.prototype.addPoint = function (position, value) {
                                this.points.add(new TGEffectTremoloBar.TremoloBarPoint(this, position, value));
                            };
                            TGEffectTremoloBar.prototype.getPoints = function () {
                                return this.points;
                            };
                            TGEffectTremoloBar.prototype.clone = function (factory) {
                                var effect = factory.newEffectTremoloBar();
                                var it = this.getPoints().iterator();
                                while ((it.hasNext())) {
                                    var point = it.next();
                                    effect.addPoint(point.getPosition(), point.getValue());
                                }
                                ;
                                return effect;
                            };
                            return TGEffectTremoloBar;
                        }());
                        TGEffectTremoloBar.MAX_POSITION_LENGTH = 12;
                        TGEffectTremoloBar.MAX_VALUE_LENGTH = 12;
                        effects.TGEffectTremoloBar = TGEffectTremoloBar;
                        TGEffectTremoloBar["__class"] = "org.herac.tuxguitar.song.models.effects.TGEffectTremoloBar";
                        (function (TGEffectTremoloBar) {
                            var TremoloBarPoint = (function () {
                                function TremoloBarPoint(__parent, position, value) {
                                    this.__parent = __parent;
                                    this.position = 0;
                                    this.value = 0;
                                    this.position = position;
                                    this.value = value;
                                }
                                TremoloBarPoint.prototype.getPosition = function () {
                                    return this.position;
                                };
                                TremoloBarPoint.prototype.getValue = function () {
                                    return this.value;
                                };
                                TremoloBarPoint.prototype.getTime = function (duration) {
                                    return (Math.floor(duration * this.getPosition() / org.herac.tuxguitar.song.models.effects.TGEffectTremoloBar.MAX_POSITION_LENGTH));
                                };
                                TremoloBarPoint.prototype.clone = function () {
                                    return new TGEffectTremoloBar.TremoloBarPoint(this.__parent, this.getPosition(), this.getValue());
                                };
                                return TremoloBarPoint;
                            }());
                            TGEffectTremoloBar.TremoloBarPoint = TremoloBarPoint;
                            TremoloBarPoint["__class"] = "org.herac.tuxguitar.song.models.effects.TGEffectTremoloBar.TremoloBarPoint";
                        })(TGEffectTremoloBar = effects.TGEffectTremoloBar || (effects.TGEffectTremoloBar = {}));
                    })(effects = models.effects || (models.effects = {}));
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var effects;
                    (function (effects) {
                        var TGEffectTremoloPicking = (function () {
                            function TGEffectTremoloPicking(factory) {
                                this.duration = null;
                                this.duration = factory.newDuration();
                            }
                            TGEffectTremoloPicking.prototype.getDuration = function () {
                                return this.duration;
                            };
                            TGEffectTremoloPicking.prototype.setDuration = function (duration) {
                                this.duration = duration;
                            };
                            TGEffectTremoloPicking.prototype.clone = function (factory) {
                                var effect = factory.newEffectTremoloPicking();
                                effect.getDuration().setValue(this.getDuration().getValue());
                                effect.getDuration().setDotted(this.getDuration().isDotted());
                                effect.getDuration().setDoubleDotted(this.getDuration().isDoubleDotted());
                                effect.getDuration().getDivision().setEnters(this.getDuration().getDivision().getEnters());
                                effect.getDuration().getDivision().setTimes(this.getDuration().getDivision().getTimes());
                                return effect;
                            };
                            return TGEffectTremoloPicking;
                        }());
                        effects.TGEffectTremoloPicking = TGEffectTremoloPicking;
                        TGEffectTremoloPicking["__class"] = "org.herac.tuxguitar.song.models.effects.TGEffectTremoloPicking";
                    })(effects = models.effects || (models.effects = {}));
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var effects;
                    (function (effects) {
                        var TGEffectTrill = (function () {
                            function TGEffectTrill(factory) {
                                this.fret = 0;
                                this.duration = null;
                                this.fret = 0;
                                this.duration = factory.newDuration();
                            }
                            TGEffectTrill.prototype.getFret = function () {
                                return this.fret;
                            };
                            TGEffectTrill.prototype.setFret = function (fret) {
                                this.fret = fret;
                            };
                            TGEffectTrill.prototype.getDuration = function () {
                                return this.duration;
                            };
                            TGEffectTrill.prototype.setDuration = function (duration) {
                                this.duration = duration;
                            };
                            TGEffectTrill.prototype.clone = function (factory) {
                                var effect = factory.newEffectTrill();
                                effect.setFret(this.getFret());
                                effect.getDuration().setValue(this.getDuration().getValue());
                                effect.getDuration().setDotted(this.getDuration().isDotted());
                                effect.getDuration().setDoubleDotted(this.getDuration().isDoubleDotted());
                                effect.getDuration().getDivision().setEnters(this.getDuration().getDivision().getEnters());
                                effect.getDuration().getDivision().setTimes(this.getDuration().getDivision().getTimes());
                                return effect;
                            };
                            return TGEffectTrill;
                        }());
                        effects.TGEffectTrill = TGEffectTrill;
                        TGEffectTrill["__class"] = "org.herac.tuxguitar.song.models.effects.TGEffectTrill";
                    })(effects = models.effects || (models.effects = {}));
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to Window - Preferences - Java - Code Style - Code Templates
                     */
                    var TGBeat = (function () {
                        function TGBeat(factory) {
                            this.start = 0;
                            this.measure = null;
                            this.chord = null;
                            this.text = null;
                            this.voices = null;
                            this.stroke = null;
                            this.start = org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME;
                            this.stroke = factory.newStroke();
                            this.voices = new Array(TGBeat.MAX_VOICES);
                            for (var i = 0; i < TGBeat.MAX_VOICES; i++) {
                                this.setVoice(i, factory.newVoice(i));
                            }
                        }
                        TGBeat.prototype.getMeasure = function () {
                            return this.measure;
                        };
                        TGBeat.prototype.setMeasure = function (measure) {
                            this.measure = measure;
                        };
                        TGBeat.prototype.getStart = function () {
                            return this.start;
                        };
                        TGBeat.prototype.setStart = function (start) {
                            this.start = start;
                        };
                        TGBeat.prototype.setVoice = function (index, voice) {
                            if (index >= 0 && index < this.voices.length) {
                                this.voices[index] = voice;
                                this.voices[index].setBeat(this);
                            }
                        };
                        TGBeat.prototype.getVoice = function (index) {
                            if (index >= 0 && index < this.voices.length) {
                                return this.voices[index];
                            }
                            return null;
                        };
                        TGBeat.prototype.countVoices = function () {
                            return this.voices.length;
                        };
                        TGBeat.prototype.setChord = function (chord) {
                            this.chord = chord;
                            this.chord.setBeat(this);
                        };
                        TGBeat.prototype.getChord = function () {
                            return this.chord;
                        };
                        TGBeat.prototype.removeChord = function () {
                            this.chord = null;
                        };
                        TGBeat.prototype.getText = function () {
                            return this.text;
                        };
                        TGBeat.prototype.setText = function (text) {
                            this.text = text;
                            this.text.setBeat(this);
                        };
                        TGBeat.prototype.removeText = function () {
                            this.text = null;
                        };
                        TGBeat.prototype.isChordBeat = function () {
                            return (this.chord != null);
                        };
                        TGBeat.prototype.isTextBeat = function () {
                            return (this.text != null);
                        };
                        TGBeat.prototype.getStroke = function () {
                            return this.stroke;
                        };
                        TGBeat.prototype.isRestBeat = function () {
                            for (var v = 0; v < this.countVoices(); v++) {
                                var voice = this.getVoice(v);
                                if (!voice.isEmpty() && !voice.isRestVoice()) {
                                    return false;
                                }
                            }
                            return true;
                        };
                        TGBeat.prototype.clone = function (factory) {
                            var beat = factory.newBeat();
                            beat.setStart(this.getStart());
                            beat.getStroke().copyFrom(this.getStroke());
                            for (var i = 0; i < this.voices.length; i++) {
                                beat.setVoice(i, this.voices[i].clone(factory));
                            }
                            if (this.chord != null) {
                                beat.setChord(this.chord.clone(factory));
                            }
                            if (this.text != null) {
                                beat.setText(this.text.clone(factory));
                            }
                            return beat;
                        };
                        return TGBeat;
                    }());
                    TGBeat.MAX_VOICES = 2;
                    models.TGBeat = TGBeat;
                    TGBeat["__class"] = "org.herac.tuxguitar.song.models.TGBeat";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var TGChannel = (function () {
                        function TGChannel() {
                            this.channelId = 0;
                            this.bank = 0;
                            this.program = 0;
                            this.volume = 0;
                            this.balance = 0;
                            this.chorus = 0;
                            this.reverb = 0;
                            this.phaser = 0;
                            this.tremolo = 0;
                            this.name = null;
                            this.parameters = null;
                            this.channelId = 0;
                            this.bank = TGChannel.DEFAULT_BANK;
                            this.program = TGChannel.DEFAULT_PROGRAM;
                            this.volume = TGChannel.DEFAULT_VOLUME;
                            this.balance = TGChannel.DEFAULT_BALANCE;
                            this.chorus = TGChannel.DEFAULT_CHORUS;
                            this.reverb = TGChannel.DEFAULT_REVERB;
                            this.phaser = TGChannel.DEFAULT_PHASER;
                            this.tremolo = TGChannel.DEFAULT_TREMOLO;
                            this.name = new String();
                            this.parameters = (new java.util.ArrayList());
                        }
                        TGChannel.prototype.getChannelId = function () {
                            return this.channelId;
                        };
                        TGChannel.prototype.setChannelId = function (channelId) {
                            this.channelId = channelId;
                        };
                        TGChannel.prototype.getBalance = function () {
                            return this.balance;
                        };
                        TGChannel.prototype.setBalance = function (balance) {
                            this.balance = balance;
                        };
                        TGChannel.prototype.getChorus = function () {
                            return this.chorus;
                        };
                        TGChannel.prototype.setChorus = function (chorus) {
                            this.chorus = chorus;
                        };
                        TGChannel.prototype.getBank = function () {
                            return this.bank;
                        };
                        TGChannel.prototype.setBank = function (bank) {
                            this.bank = bank;
                        };
                        TGChannel.prototype.getProgram = function () {
                            return this.program;
                        };
                        TGChannel.prototype.setProgram = function (program) {
                            this.program = program;
                        };
                        TGChannel.prototype.getPhaser = function () {
                            return this.phaser;
                        };
                        TGChannel.prototype.setPhaser = function (phaser) {
                            this.phaser = phaser;
                        };
                        TGChannel.prototype.getReverb = function () {
                            return this.reverb;
                        };
                        TGChannel.prototype.setReverb = function (reverb) {
                            this.reverb = reverb;
                        };
                        TGChannel.prototype.getTremolo = function () {
                            return this.tremolo;
                        };
                        TGChannel.prototype.setTremolo = function (tremolo) {
                            this.tremolo = tremolo;
                        };
                        TGChannel.prototype.getVolume = function () {
                            return this.volume;
                        };
                        TGChannel.prototype.setVolume = function (volume) {
                            this.volume = volume;
                        };
                        TGChannel.prototype.getName = function () {
                            return this.name;
                        };
                        TGChannel.prototype.setName = function (name) {
                            this.name = name;
                        };
                        TGChannel.prototype.getParameters = function () {
                            return this.parameters.iterator();
                        };
                        TGChannel.prototype.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter = function (parameter) {
                            this.parameters.add(parameter);
                        };
                        TGChannel.prototype.addParameter$int$org_herac_tuxguitar_song_models_TGChannelParameter = function (index, parameter) {
                            this.parameters.add(index, parameter);
                        };
                        TGChannel.prototype.addParameter = function (index, parameter) {
                            if (((typeof index === 'number') || index === null) && ((parameter != null && parameter instanceof org.herac.tuxguitar.song.models.TGChannelParameter) || parameter === null)) {
                                return this.addParameter$int$org_herac_tuxguitar_song_models_TGChannelParameter(index, parameter);
                            }
                            else if (((index != null && index instanceof org.herac.tuxguitar.song.models.TGChannelParameter) || index === null) && parameter === undefined) {
                                return this.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(index);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGChannel.prototype.getParameter = function (index) {
                            if (index >= 0 && index < this.countParameters()) {
                                return this.parameters.get(index);
                            }
                            return null;
                        };
                        TGChannel.prototype.removeParameter = function (index) {
                            this.parameters.remove(index);
                        };
                        TGChannel.prototype.removeParameters = function () {
                            this.parameters.clear();
                        };
                        TGChannel.prototype.countParameters = function () {
                            return this.parameters.size();
                        };
                        TGChannel.prototype.isPercussionChannel = function () {
                            return (this.getBank() === TGChannel.DEFAULT_PERCUSSION_BANK);
                        };
                        TGChannel.prototype.clone = function (factory) {
                            var tgChannel = factory.newChannel();
                            tgChannel.copyFrom(factory, this);
                            return tgChannel;
                        };
                        TGChannel.prototype.copyFrom = function (factory, channel) {
                            this.setChannelId(channel.getChannelId());
                            this.setBank(channel.getBank());
                            this.setProgram(channel.getProgram());
                            this.setVolume(channel.getVolume());
                            this.setBalance(channel.getBalance());
                            this.setChorus(channel.getChorus());
                            this.setReverb(channel.getReverb());
                            this.setPhaser(channel.getPhaser());
                            this.setTremolo(channel.getTremolo());
                            this.setName(channel.getName());
                            this.removeParameters();
                            for (var i = 0; i < channel.countParameters(); i++) {
                                this.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(channel.getParameter(i).clone(factory));
                            }
                        };
                        return TGChannel;
                    }());
                    TGChannel.DEFAULT_PERCUSSION_CHANNEL = 9;
                    TGChannel.DEFAULT_PERCUSSION_PROGRAM = 0;
                    TGChannel.DEFAULT_PERCUSSION_BANK = 128;
                    TGChannel.DEFAULT_BANK = 0;
                    TGChannel.DEFAULT_PROGRAM = 25;
                    TGChannel.DEFAULT_VOLUME = 127;
                    TGChannel.DEFAULT_BALANCE = 64;
                    TGChannel.DEFAULT_CHORUS = 0;
                    TGChannel.DEFAULT_REVERB = 0;
                    TGChannel.DEFAULT_PHASER = 0;
                    TGChannel.DEFAULT_TREMOLO = 0;
                    models.TGChannel = TGChannel;
                    TGChannel["__class"] = "org.herac.tuxguitar.song.models.TGChannel";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var TGChannelNames = (function () {
                        function TGChannelNames() {
                        }
                        TGChannelNames.DEFAULT_NAMES_$LI$ = function () { if (TGChannelNames.DEFAULT_NAMES == null)
                            TGChannelNames.DEFAULT_NAMES = [("Piano"), ("Bright Piano"), ("Electric Grand"), ("Honky Tonk Piano"), ("Electric Piano 1"), ("Electric Piano 2"), ("Harpsichord"), ("Clavinet"), ("Celesta"), ("Glockenspiel"), ("Music Box"), ("Vibraphone"), ("Marimba"), ("Xylophone"), ("Tubular Bell"), ("Dulcimer"), ("Hammond Organ"), ("Perc Organ"), ("Rock Organ"), ("Church Organ"), ("Reed Organ"), ("Accordion"), ("Harmonica"), ("Tango Accordion"), ("Nylon Str Guitar"), ("Steel String Guitar"), ("Jazz Electric Gtr"), ("Clean Guitar"), ("Muted Guitar"), ("Overdrive Guitar"), ("Distortion Guitar"), ("Guitar Harmonics"), ("Acoustic Bass"), ("Fingered Bass"), ("Picked Bass"), ("Fretless Bass"), ("Slap Bass 1"), ("Slap Bass 2"), ("Syn Bass 1"), ("Syn Bass 2"), ("Violin"), ("Viola"), ("Cello"), ("Contrabass"), ("Tremolo Strings"), ("Pizzicato Strings"), ("Orchestral Harp"), ("Timpani"), ("Ensemble Strings"), ("Slow Strings"), ("Synth Strings 1"), ("Synth Strings 2"), ("Choir Aahs"), ("Voice Oohs"), ("Syn Choir"), ("Orchestra Hit"), ("Trumpet"), ("Trombone"), ("Tuba"), ("Muted Trumpet"), ("French Horn"), ("Brass Ensemble"), ("Syn Brass 1"), ("Syn Brass 2"), ("Soprano Sax"), ("Alto Sax"), ("Tenor Sax"), ("Baritone Sax"), ("Oboe"), ("English Horn"), ("Bassoon"), ("Clarinet"), ("Piccolo"), ("Flute"), ("Recorder"), ("Pan Flute"), ("Bottle Blow"), ("Shakuhachi"), ("Whistle"), ("Ocarina"), ("Syn Square Wave"), ("Syn Saw Wave"), ("Syn Calliope"), ("Syn Chiff"), ("Syn Charang"), ("Syn Voice"), ("Syn Fifths Saw"), ("Syn Brass and Lead"), ("Fantasia"), ("Warm Pad"), ("Polysynth"), ("Space Vox"), ("Bowed Glass"), ("Metal Pad"), ("Halo Pad"), ("Sweep Pad"), ("Ice Rain"), ("Soundtrack"), ("Crystal"), ("Atmosphere"), ("Brightness"), ("Goblins"), ("Echo Drops"), ("Sci Fi"), ("Sitar"), ("Banjo"), ("Shamisen"), ("Koto"), ("Kalimba"), ("Bag Pipe"), ("Fiddle"), ("Shanai"), ("Tinkle Bell"), ("Agogo"), ("Steel Drums"), ("Woodblock"), ("Taiko Drum"), ("Melodic Tom"), ("Syn Drum"), ("Reverse Cymbal"), ("Guitar Fret Noise"), ("Breath Noise"), ("Seashore"), ("Bird"), ("Telephone"), ("Helicopter"), ("Applause"), ("Gunshot")]; return TGChannelNames.DEFAULT_NAMES; };
                        ;
                        return TGChannelNames;
                    }());
                    models.TGChannelNames = TGChannelNames;
                    TGChannelNames["__class"] = "org.herac.tuxguitar.song.models.TGChannelNames";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var TGChannelParameter = (function () {
                        function TGChannelParameter() {
                            this.key = null;
                            this.value = null;
                        }
                        TGChannelParameter.prototype.getKey = function () {
                            return this.key;
                        };
                        TGChannelParameter.prototype.setKey = function (key) {
                            this.key = key;
                        };
                        TGChannelParameter.prototype.getValue = function () {
                            return this.value;
                        };
                        TGChannelParameter.prototype.setValue = function (value) {
                            this.value = value;
                        };
                        TGChannelParameter.prototype.copyFrom = function (channelParameter) {
                            this.setKey(channelParameter.getKey());
                            this.setValue(channelParameter.getValue());
                        };
                        TGChannelParameter.prototype.clone = function (factory) {
                            var tgChannelParameter = factory.newChannelParameter();
                            tgChannelParameter.copyFrom(this);
                            return tgChannelParameter;
                        };
                        return TGChannelParameter;
                    }());
                    models.TGChannelParameter = TGChannelParameter;
                    TGChannelParameter["__class"] = "org.herac.tuxguitar.song.models.TGChannelParameter";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to
                     * Window - Preferences - Java - Code Style - Code Templates
                     */
                    var TGChord = (function () {
                        function TGChord(length) {
                            this.firstFret = 0;
                            this.strings = null;
                            this.name = null;
                            this.beat = null;
                            this.strings = (function (s) { var a = []; while (s-- > 0)
                                a.push(0); return a; })(length);
                            for (var i = 0; i < this.strings.length; i++) {
                                this.strings[i] = -1;
                            }
                        }
                        TGChord.prototype.getBeat = function () {
                            return this.beat;
                        };
                        TGChord.prototype.setBeat = function (beat) {
                            this.beat = beat;
                        };
                        TGChord.prototype.addFretValue = function (string, fret) {
                            if (string >= 0 && string < this.strings.length) {
                                this.strings[string] = fret;
                            }
                        };
                        TGChord.prototype.getFretValue = function (string) {
                            if (string >= 0 && string < this.strings.length) {
                                return this.strings[string];
                            }
                            return -1;
                        };
                        TGChord.prototype.getFirstFret = function () {
                            return this.firstFret;
                        };
                        TGChord.prototype.setFirstFret = function (firstFret) {
                            this.firstFret = firstFret;
                        };
                        TGChord.prototype.getStrings = function () {
                            return this.strings;
                        };
                        TGChord.prototype.countStrings = function () {
                            return this.strings.length;
                        };
                        TGChord.prototype.countNotes = function () {
                            var count = 0;
                            for (var i = 0; i < this.strings.length; i++) {
                                if (this.strings[i] >= 0) {
                                    count++;
                                }
                            }
                            return count;
                        };
                        TGChord.prototype.getName = function () {
                            return this.name;
                        };
                        TGChord.prototype.setName = function (name) {
                            this.name = name;
                        };
                        TGChord.prototype.clone = function (factory) {
                            var chord = factory.newChord(this.strings.length);
                            chord.setName(this.getName());
                            chord.setFirstFret(this.getFirstFret());
                            for (var i = 0; i < chord.strings.length; i++) {
                                chord.strings[i] = this.strings[i];
                            }
                            return chord;
                        };
                        return TGChord;
                    }());
                    models.TGChord = TGChord;
                    TGChord["__class"] = "org.herac.tuxguitar.song.models.TGChord";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var TGColor = (function () {
                        function TGColor() {
                            this.r = 0;
                            this.g = 0;
                            this.b = 0;
                            this.r = 0;
                            this.g = 0;
                            this.b = 0;
                        }
                        TGColor.RED_$LI$ = function () { if (TGColor.RED == null)
                            TGColor.RED = TGColor.newColor(255, 0, 0); return TGColor.RED; };
                        ;
                        TGColor.GREEN_$LI$ = function () { if (TGColor.GREEN == null)
                            TGColor.GREEN = TGColor.newColor(0, 255, 0); return TGColor.GREEN; };
                        ;
                        TGColor.BLUE_$LI$ = function () { if (TGColor.BLUE == null)
                            TGColor.BLUE = TGColor.newColor(0, 0, 255); return TGColor.BLUE; };
                        ;
                        TGColor.WHITE_$LI$ = function () { if (TGColor.WHITE == null)
                            TGColor.WHITE = TGColor.newColor(255, 255, 255); return TGColor.WHITE; };
                        ;
                        TGColor.BLACK_$LI$ = function () { if (TGColor.BLACK == null)
                            TGColor.BLACK = TGColor.newColor(0, 0, 0); return TGColor.BLACK; };
                        ;
                        TGColor.prototype.getB = function () {
                            return this.b;
                        };
                        TGColor.prototype.setB = function (b) {
                            this.b = b;
                        };
                        TGColor.prototype.getG = function () {
                            return this.g;
                        };
                        TGColor.prototype.setG = function (g) {
                            this.g = g;
                        };
                        TGColor.prototype.getR = function () {
                            return this.r;
                        };
                        TGColor.prototype.setR = function (r) {
                            this.r = r;
                        };
                        TGColor.prototype.isEqual = function (color) {
                            return (this.getR() === color.getR() && this.getG() === color.getG() && this.getB() === color.getB());
                        };
                        TGColor.prototype.clone = function (factory) {
                            var tgColor = factory.newColor();
                            tgColor.copyFrom(this);
                            return tgColor;
                        };
                        TGColor.prototype.copyFrom = function (color) {
                            this.setR(color.getR());
                            this.setG(color.getG());
                            this.setB(color.getB());
                        };
                        TGColor.newColor = function (r, g, b) {
                            var color = new org.herac.tuxguitar.song.factory.TGFactory().newColor();
                            color.setR(r);
                            color.setG(g);
                            color.setB(b);
                            return color;
                        };
                        return TGColor;
                    }());
                    models.TGColor = TGColor;
                    TGColor["__class"] = "org.herac.tuxguitar.song.models.TGColor";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to
                     * Window - Preferences - Java - Code Style - Code Templates
                     */
                    var TGDivisionType = (function () {
                        function TGDivisionType() {
                            this.enters = 0;
                            this.times = 0;
                            this.enters = 1;
                            this.times = 1;
                        }
                        TGDivisionType.NORMAL_$LI$ = function () { if (TGDivisionType.NORMAL == null)
                            TGDivisionType.NORMAL = TGDivisionType.newDivisionType(1, 1); return TGDivisionType.NORMAL; };
                        ;
                        TGDivisionType.TRIPLET_$LI$ = function () { if (TGDivisionType.TRIPLET == null)
                            TGDivisionType.TRIPLET = TGDivisionType.newDivisionType(3, 2); return TGDivisionType.TRIPLET; };
                        ;
                        TGDivisionType.ALTERED_DIVISION_TYPES_$LI$ = function () { if (TGDivisionType.ALTERED_DIVISION_TYPES == null)
                            TGDivisionType.ALTERED_DIVISION_TYPES = [TGDivisionType.newDivisionType(3, 2), TGDivisionType.newDivisionType(5, 4), TGDivisionType.newDivisionType(6, 4), TGDivisionType.newDivisionType(7, 4), TGDivisionType.newDivisionType(9, 8), TGDivisionType.newDivisionType(10, 8), TGDivisionType.newDivisionType(11, 8), TGDivisionType.newDivisionType(12, 8), TGDivisionType.newDivisionType(13, 8)]; return TGDivisionType.ALTERED_DIVISION_TYPES; };
                        ;
                        TGDivisionType.prototype.getEnters = function () {
                            return this.enters;
                        };
                        TGDivisionType.prototype.setEnters = function (enters) {
                            this.enters = enters;
                        };
                        TGDivisionType.prototype.getTimes = function () {
                            return this.times;
                        };
                        TGDivisionType.prototype.setTimes = function (times) {
                            this.times = times;
                        };
                        TGDivisionType.prototype.convertTime = function (time) {
                            return Math.floor(time * this.times / this.enters);
                        };
                        TGDivisionType.prototype.isEqual = function (divisionType) {
                            return (divisionType.getEnters() === this.getEnters() && divisionType.getTimes() === this.getTimes());
                        };
                        TGDivisionType.prototype.clone = function (factory) {
                            var tgDivisionType = factory.newDivisionType();
                            tgDivisionType.copyFrom(this);
                            return tgDivisionType;
                        };
                        TGDivisionType.prototype.copyFrom = function (divisionType) {
                            this.setEnters(divisionType.getEnters());
                            this.setTimes(divisionType.getTimes());
                        };
                        TGDivisionType.newDivisionType = function (enters, times) {
                            var divisionType = new org.herac.tuxguitar.song.factory.TGFactory().newDivisionType();
                            divisionType.setEnters(enters);
                            divisionType.setTimes(times);
                            return divisionType;
                        };
                        return TGDivisionType;
                    }());
                    models.TGDivisionType = TGDivisionType;
                    TGDivisionType["__class"] = "org.herac.tuxguitar.song.models.TGDivisionType";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to
                     * Window - Preferences - Java - Code Style - Code Templates
                     */
                    var TGDuration = (function () {
                        function TGDuration(factory) {
                            this.value = 0;
                            this.dotted = false;
                            this.doubleDotted = false;
                            this.divisionType = null;
                            this.value = TGDuration.QUARTER;
                            this.dotted = false;
                            this.doubleDotted = false;
                            this.divisionType = factory.newDivisionType();
                        }
                        TGDuration.prototype.getValue = function () {
                            return this.value;
                        };
                        TGDuration.prototype.setValue = function (value) {
                            this.value = value;
                        };
                        TGDuration.prototype.isDotted = function () {
                            return this.dotted;
                        };
                        TGDuration.prototype.setDotted = function (dotted) {
                            this.dotted = dotted;
                        };
                        TGDuration.prototype.isDoubleDotted = function () {
                            return this.doubleDotted;
                        };
                        TGDuration.prototype.setDoubleDotted = function (doubleDotted) {
                            this.doubleDotted = doubleDotted;
                        };
                        TGDuration.prototype.getDivision = function () {
                            return this.divisionType;
                        };
                        TGDuration.prototype.getTime = function () {
                            var time = Math.floor((TGDuration.QUARTER_TIME * (4.0 / this.value)));
                            if (this.dotted) {
                                time += Math.floor(time / 2);
                            }
                            else if (this.doubleDotted) {
                                time += ((Math.floor(time / 4)) * 3);
                            }
                            return this.divisionType.convertTime(time);
                        };
                        TGDuration.fromTime$org_herac_tuxguitar_song_factory_TGFactory$long = function (factory, time) {
                            var duration = factory.newDuration();
                            duration.setValue(TGDuration.SIXTY_FOURTH);
                            duration.setDotted(false);
                            duration.setDoubleDotted(false);
                            duration.getDivision().setEnters(3);
                            duration.getDivision().setTimes(2);
                            return TGDuration.fromTime$org_herac_tuxguitar_song_factory_TGFactory$long$org_herac_tuxguitar_song_models_TGDuration(factory, time, duration);
                        };
                        TGDuration.fromTime$org_herac_tuxguitar_song_factory_TGFactory$long$org_herac_tuxguitar_song_models_TGDuration = function (factory, time, minDuration) {
                            return TGDuration.fromTime$org_herac_tuxguitar_song_factory_TGFactory$long$org_herac_tuxguitar_song_models_TGDuration$int(factory, time, minDuration, 10);
                        };
                        TGDuration.fromTime$org_herac_tuxguitar_song_factory_TGFactory$long$org_herac_tuxguitar_song_models_TGDuration$int = function (factory, time, minimum, diff) {
                            var duration = minimum.clone(factory);
                            var tmpDuration = factory.newDuration();
                            tmpDuration.setValue(TGDuration.WHOLE);
                            tmpDuration.setDotted(true);
                            var finish = false;
                            while ((!finish)) {
                                var tmpTime = tmpDuration.getTime();
                                if (tmpTime - diff <= time) {
                                    if (Math.abs(tmpTime - time) < Math.abs(duration.getTime() - time)) {
                                        duration = tmpDuration.clone(factory);
                                    }
                                }
                                if (tmpDuration.isDotted()) {
                                    tmpDuration.setDotted(false);
                                }
                                else if (tmpDuration.getDivision().isEqual(org.herac.tuxguitar.song.models.TGDivisionType.NORMAL_$LI$())) {
                                    tmpDuration.getDivision().setEnters(3);
                                    tmpDuration.getDivision().setTimes(2);
                                }
                                else {
                                    tmpDuration.setValue(tmpDuration.getValue() * 2);
                                    tmpDuration.setDotted(true);
                                    tmpDuration.getDivision().setEnters(1);
                                    tmpDuration.getDivision().setTimes(1);
                                }
                                if (tmpDuration.getValue() > TGDuration.SIXTY_FOURTH) {
                                    finish = true;
                                }
                            }
                            ;
                            return duration;
                        };
                        TGDuration.fromTime = function (factory, time, minimum, diff) {
                            if (((factory != null && factory instanceof org.herac.tuxguitar.song.factory.TGFactory) || factory === null) && ((typeof time === 'number') || time === null) && ((minimum != null && minimum instanceof org.herac.tuxguitar.song.models.TGDuration) || minimum === null) && ((typeof diff === 'number') || diff === null)) {
                                return org.herac.tuxguitar.song.models.TGDuration.fromTime$org_herac_tuxguitar_song_factory_TGFactory$long$org_herac_tuxguitar_song_models_TGDuration$int(factory, time, minimum, diff);
                            }
                            else if (((factory != null && factory instanceof org.herac.tuxguitar.song.factory.TGFactory) || factory === null) && ((typeof time === 'number') || time === null) && ((minimum != null && minimum instanceof org.herac.tuxguitar.song.models.TGDuration) || minimum === null) && diff === undefined) {
                                return org.herac.tuxguitar.song.models.TGDuration.fromTime$org_herac_tuxguitar_song_factory_TGFactory$long$org_herac_tuxguitar_song_models_TGDuration(factory, time, minimum);
                            }
                            else if (((factory != null && factory instanceof org.herac.tuxguitar.song.factory.TGFactory) || factory === null) && ((typeof time === 'number') || time === null) && minimum === undefined && diff === undefined) {
                                return org.herac.tuxguitar.song.models.TGDuration.fromTime$org_herac_tuxguitar_song_factory_TGFactory$long(factory, time);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGDuration.prototype.getIndex = function () {
                            var index = 0;
                            var value = this.value;
                            while (((value = (value >> 1)) > 0)) {
                                index++;
                            }
                            ;
                            return index;
                        };
                        TGDuration.prototype.isEqual = function (d) {
                            return (this.getValue() === d.getValue() && this.isDotted() === d.isDotted() && this.isDoubleDotted() === d.isDoubleDotted() && this.getDivision().isEqual(d.getDivision()));
                        };
                        TGDuration.prototype.clone = function (factory) {
                            var tgDuration = factory.newDuration();
                            tgDuration.copyFrom(this);
                            return tgDuration;
                        };
                        TGDuration.prototype.copyFrom = function (duration) {
                            this.setValue(duration.getValue());
                            this.setDotted(duration.isDotted());
                            this.setDoubleDotted(duration.isDoubleDotted());
                            this.getDivision().copyFrom(duration.getDivision());
                        };
                        return TGDuration;
                    }());
                    /**
                     * tiempo por defecto de la Negra.
                     */
                    TGDuration.QUARTER_TIME = 960;
                    /**
                     * Redonda.
                     */
                    TGDuration.WHOLE = 1;
                    /**
                     * Blanca.
                     */
                    TGDuration.HALF = 2;
                    /**
                     * Negra.
                     */
                    TGDuration.QUARTER = 4;
                    /**
                     * Corchea.
                     */
                    TGDuration.EIGHTH = 8;
                    /**
                     * Semi-Corchea.
                     */
                    TGDuration.SIXTEENTH = 16;
                    /**
                     * Fusa.
                     */
                    TGDuration.THIRTY_SECOND = 32;
                    /**
                     * Semi-Fusa.
                     */
                    TGDuration.SIXTY_FOURTH = 64;
                    models.TGDuration = TGDuration;
                    TGDuration["__class"] = "org.herac.tuxguitar.song.models.TGDuration";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var TGLyric = (function () {
                        function TGLyric() {
                            this.from = 0;
                            this.lyrics = null;
                            this.from = 1;
                            this.lyrics = new String();
                        }
                        TGLyric.prototype.getFrom = function () {
                            return this.from;
                        };
                        TGLyric.prototype.setFrom = function (from) {
                            this.from = from;
                        };
                        TGLyric.prototype.getLyrics = function () {
                            return this.lyrics;
                        };
                        TGLyric.prototype.setLyrics = function (lyrics) {
                            this.lyrics = lyrics;
                        };
                        TGLyric.prototype.getLyricBeats = function () {
                            var lyrics = this.getLyrics();
                            lyrics = lyrics.replace(new RegExp("\n", 'g'), TGLyric.REGEX);
                            lyrics = lyrics.replace(new RegExp("\r", 'g'), TGLyric.REGEX);
                            return lyrics.split(TGLyric.REGEX);
                        };
                        TGLyric.prototype.isEmpty = function () {
                            return (this.getLyrics().length === 0);
                        };
                        TGLyric.prototype.copyFrom = function (lyric) {
                            this.setFrom(lyric.getFrom());
                            this.setLyrics(lyric.getLyrics());
                        };
                        TGLyric.prototype.clone = function (factory) {
                            var tgLyric = factory.newLyric();
                            tgLyric.copyFrom(this);
                            return tgLyric;
                        };
                        return TGLyric;
                    }());
                    TGLyric.REGEX = " ";
                    models.TGLyric = TGLyric;
                    TGLyric["__class"] = "org.herac.tuxguitar.song.models.TGLyric";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to
                     * Window - Preferences - Java - Code Style - Code Templates
                     */
                    var TGMeasure = (function () {
                        function TGMeasure(header) {
                            this.header = null;
                            this.track = null;
                            this.clef = 0;
                            this.keySignature = 0;
                            this.beats = null;
                            this.header = header;
                            this.clef = TGMeasure.DEFAULT_CLEF_$LI$();
                            this.keySignature = TGMeasure.DEFAULT_KEY_SIGNATURE;
                            this.beats = (new java.util.ArrayList());
                        }
                        TGMeasure.DEFAULT_CLEF_$LI$ = function () { if (TGMeasure.DEFAULT_CLEF == null)
                            TGMeasure.DEFAULT_CLEF = TGMeasure.CLEF_TREBLE; return TGMeasure.DEFAULT_CLEF; };
                        ;
                        TGMeasure.prototype.getTrack = function () {
                            return this.track;
                        };
                        TGMeasure.prototype.setTrack = function (track) {
                            this.track = track;
                        };
                        TGMeasure.prototype.getClef = function () {
                            return this.clef;
                        };
                        TGMeasure.prototype.setClef = function (clef) {
                            this.clef = clef;
                        };
                        TGMeasure.prototype.getKeySignature = function () {
                            return this.keySignature;
                        };
                        TGMeasure.prototype.setKeySignature = function (keySignature) {
                            this.keySignature = keySignature;
                        };
                        TGMeasure.prototype.getBeats = function () {
                            return this.beats;
                        };
                        TGMeasure.prototype.addBeat = function (beat) {
                            beat.setMeasure(this);
                            this.beats.add(beat);
                        };
                        TGMeasure.prototype.moveBeat = function (index, beat) {
                            this.beats.remove(beat);
                            this.beats.add(index, beat);
                        };
                        TGMeasure.prototype.removeBeat = function (beat) {
                            this.beats.remove(beat);
                        };
                        TGMeasure.prototype.getBeat = function (index) {
                            if (index >= 0 && index < this.countBeats()) {
                                return this.beats.get(index);
                            }
                            return null;
                        };
                        TGMeasure.prototype.countBeats = function () {
                            return this.beats.size();
                        };
                        TGMeasure.prototype.getHeader = function () {
                            return this.header;
                        };
                        TGMeasure.prototype.setHeader = function (header) {
                            this.header = header;
                        };
                        TGMeasure.prototype.getNumber = function () {
                            return this.header.getNumber();
                        };
                        TGMeasure.prototype.getRepeatClose = function () {
                            return this.header.getRepeatClose();
                        };
                        TGMeasure.prototype.getStart = function () {
                            return this.header.getStart();
                        };
                        TGMeasure.prototype.getTempo = function () {
                            return this.header.getTempo();
                        };
                        TGMeasure.prototype.getTimeSignature = function () {
                            return this.header.getTimeSignature();
                        };
                        TGMeasure.prototype.isRepeatOpen = function () {
                            return this.header.isRepeatOpen();
                        };
                        TGMeasure.prototype.getTripletFeel = function () {
                            return this.header.getTripletFeel();
                        };
                        TGMeasure.prototype.getLength = function () {
                            return this.header.getLength();
                        };
                        TGMeasure.prototype.getMarker = function () {
                            return this.header.getMarker();
                        };
                        TGMeasure.prototype.hasMarker = function () {
                            return this.header.hasMarker();
                        };
                        TGMeasure.prototype.clear = function () {
                            this.beats.clear();
                        };
                        TGMeasure.prototype.copyFrom = function (factory, measure) {
                            this.clef = measure.getClef();
                            this.keySignature = measure.getKeySignature();
                            this.beats.clear();
                            for (var i = 0; i < measure.countBeats(); i++) {
                                this.addBeat(measure.getBeat(i).clone(factory));
                            }
                        };
                        TGMeasure.prototype.clone = function (factory, header) {
                            var tgMeasure = factory.newMeasure(header);
                            tgMeasure.copyFrom(factory, this);
                            return tgMeasure;
                        };
                        return TGMeasure;
                    }());
                    TGMeasure.CLEF_TREBLE = 1;
                    TGMeasure.CLEF_BASS = 2;
                    TGMeasure.CLEF_TENOR = 3;
                    TGMeasure.CLEF_ALTO = 4;
                    TGMeasure.DEFAULT_KEY_SIGNATURE = 0;
                    models.TGMeasure = TGMeasure;
                    TGMeasure["__class"] = "org.herac.tuxguitar.song.models.TGMeasure";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song_3) {
                var models;
                (function (models) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to
                     * Window - Preferences - Java - Code Style - Code Templates
                     */
                    var TGMeasureHeader = (function () {
                        function TGMeasureHeader(factory) {
                            this.number = 0;
                            this.start = 0;
                            this.timeSignature = null;
                            this.tempo = null;
                            this.marker = null;
                            this.repeatOpen = false;
                            this.repeatAlternative = 0;
                            this.repeatClose = 0;
                            this.tripletFeel = 0;
                            this.song = null;
                            this.number = 0;
                            this.start = org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME;
                            this.timeSignature = factory.newTimeSignature();
                            this.tempo = factory.newTempo();
                            this.marker = null;
                            this.tripletFeel = TGMeasureHeader.TRIPLET_FEEL_NONE;
                            this.repeatOpen = false;
                            this.repeatClose = 0;
                            this.repeatAlternative = 0;
                            this.checkMarker();
                        }
                        TGMeasureHeader.prototype.getNumber = function () {
                            return this.number;
                        };
                        TGMeasureHeader.prototype.setNumber = function (number) {
                            this.number = number;
                            this.checkMarker();
                        };
                        TGMeasureHeader.prototype.getRepeatClose = function () {
                            return this.repeatClose;
                        };
                        TGMeasureHeader.prototype.setRepeatClose = function (repeatClose) {
                            this.repeatClose = repeatClose;
                        };
                        TGMeasureHeader.prototype.getRepeatAlternative = function () {
                            return this.repeatAlternative;
                        };
                        /**
                         * bitwise value 1 TO 8.
                         * (1 << AlternativeNumber)
                         * @param {number} repeatAlternative
                         */
                        TGMeasureHeader.prototype.setRepeatAlternative = function (repeatAlternative) {
                            this.repeatAlternative = repeatAlternative;
                        };
                        TGMeasureHeader.prototype.isRepeatOpen = function () {
                            return this.repeatOpen;
                        };
                        TGMeasureHeader.prototype.setRepeatOpen = function (repeatOpen) {
                            this.repeatOpen = repeatOpen;
                        };
                        TGMeasureHeader.prototype.getStart = function () {
                            return this.start;
                        };
                        TGMeasureHeader.prototype.setStart = function (start) {
                            this.start = start;
                        };
                        TGMeasureHeader.prototype.getTripletFeel = function () {
                            return this.tripletFeel;
                        };
                        TGMeasureHeader.prototype.setTripletFeel = function (tripletFeel) {
                            this.tripletFeel = tripletFeel;
                        };
                        TGMeasureHeader.prototype.getTempo = function () {
                            return this.tempo;
                        };
                        TGMeasureHeader.prototype.setTempo = function (tempo) {
                            this.tempo = tempo;
                        };
                        TGMeasureHeader.prototype.getTimeSignature = function () {
                            return this.timeSignature;
                        };
                        TGMeasureHeader.prototype.setTimeSignature = function (timeSignature) {
                            this.timeSignature = timeSignature;
                        };
                        TGMeasureHeader.prototype.getMarker = function () {
                            return this.marker;
                        };
                        TGMeasureHeader.prototype.setMarker = function (marker) {
                            this.marker = marker;
                        };
                        TGMeasureHeader.prototype.hasMarker = function () {
                            return (this.getMarker() != null);
                        };
                        TGMeasureHeader.prototype.checkMarker = function () {
                            if (this.hasMarker()) {
                                this.marker.setMeasure(this.getNumber());
                            }
                        };
                        TGMeasureHeader.prototype.getLength = function () {
                            return this.getTimeSignature().getNumerator() * this.getTimeSignature().getDenominator().getTime();
                        };
                        TGMeasureHeader.prototype.getSong = function () {
                            return this.song;
                        };
                        TGMeasureHeader.prototype.setSong = function (song) {
                            this.song = song;
                        };
                        TGMeasureHeader.prototype.copyFrom = function (factory, header) {
                            this.setNumber(header.getNumber());
                            this.setStart(header.getStart());
                            this.setRepeatOpen(header.isRepeatOpen());
                            this.setRepeatAlternative(header.getRepeatAlternative());
                            this.setRepeatClose(header.getRepeatClose());
                            this.setTripletFeel(header.getTripletFeel());
                            this.getTimeSignature().copyFrom(header.getTimeSignature());
                            this.getTempo().copyFrom(header.getTempo());
                            this.setMarker(header.hasMarker() ? header.getMarker().clone(factory) : null);
                            this.checkMarker();
                        };
                        TGMeasureHeader.prototype.clone = function (factory) {
                            var tgMeasureHeader = factory.newHeader();
                            tgMeasureHeader.copyFrom(factory, this);
                            return tgMeasureHeader;
                        };
                        return TGMeasureHeader;
                    }());
                    TGMeasureHeader.TRIPLET_FEEL_NONE = 1;
                    TGMeasureHeader.TRIPLET_FEEL_EIGHTH = 2;
                    TGMeasureHeader.TRIPLET_FEEL_SIXTEENTH = 3;
                    models.TGMeasureHeader = TGMeasureHeader;
                    TGMeasureHeader["__class"] = "org.herac.tuxguitar.song.models.TGMeasureHeader";
                })(models = song_3.models || (song_3.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to Window - Preferences - Java - Code Style - Code Templates
                     */
                    var TGNote = (function () {
                        function TGNote(factory) {
                            this.value = 0;
                            this.velocity = 0;
                            this.string = 0;
                            this.tiedNote = false;
                            this.effect = null;
                            this.voice = null;
                            this.value = 0;
                            this.velocity = org.herac.tuxguitar.song.models.TGVelocities.DEFAULT_$LI$();
                            this.string = 1;
                            this.tiedNote = false;
                            this.effect = factory.newEffect();
                        }
                        TGNote.prototype.getValue = function () {
                            return this.value;
                        };
                        TGNote.prototype.setValue = function (value) {
                            this.value = value;
                        };
                        TGNote.prototype.getVelocity = function () {
                            return this.velocity;
                        };
                        TGNote.prototype.setVelocity = function (velocity) {
                            this.velocity = velocity;
                        };
                        TGNote.prototype.getString = function () {
                            return this.string;
                        };
                        TGNote.prototype.setString = function (string) {
                            this.string = string;
                        };
                        TGNote.prototype.isTiedNote = function () {
                            return this.tiedNote;
                        };
                        TGNote.prototype.setTiedNote = function (tiedNote) {
                            this.tiedNote = tiedNote;
                        };
                        TGNote.prototype.getEffect = function () {
                            return this.effect;
                        };
                        TGNote.prototype.setEffect = function (effect) {
                            this.effect = effect;
                        };
                        TGNote.prototype.getVoice = function () {
                            return this.voice;
                        };
                        TGNote.prototype.setVoice = function (voice) {
                            this.voice = voice;
                        };
                        TGNote.prototype.clone = function (factory) {
                            var note = factory.newNote();
                            note.setValue(this.getValue());
                            note.setVelocity(this.getVelocity());
                            note.setString(this.getString());
                            note.setTiedNote(this.isTiedNote());
                            note.setEffect(this.getEffect().clone(factory));
                            return note;
                        };
                        return TGNote;
                    }());
                    models.TGNote = TGNote;
                    TGNote["__class"] = "org.herac.tuxguitar.song.models.TGNote";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to
                     * Window - Preferences - Java - Code Style - Code Templates
                     */
                    var TGNoteEffect = (function () {
                        function TGNoteEffect() {
                            this.bend = null;
                            this.tremoloBar = null;
                            this.harmonic = null;
                            this.grace = null;
                            this.trill = null;
                            this.tremoloPicking = null;
                            this.vibrato = false;
                            this.deadNote = false;
                            this.slide = false;
                            this.hammer = false;
                            this.ghostNote = false;
                            this.accentuatedNote = false;
                            this.heavyAccentuatedNote = false;
                            this.palmMute = false;
                            this.staccato = false;
                            this.tapping = false;
                            this.slapping = false;
                            this.popping = false;
                            this.fadeIn = false;
                            this.letRing = false;
                            this.bend = null;
                            this.tremoloBar = null;
                            this.harmonic = null;
                            this.grace = null;
                            this.trill = null;
                            this.tremoloPicking = null;
                            this.vibrato = false;
                            this.deadNote = false;
                            this.slide = false;
                            this.hammer = false;
                            this.ghostNote = false;
                            this.accentuatedNote = false;
                            this.heavyAccentuatedNote = false;
                            this.palmMute = false;
                            this.staccato = false;
                            this.tapping = false;
                            this.slapping = false;
                            this.popping = false;
                            this.fadeIn = false;
                            this.letRing = false;
                        }
                        TGNoteEffect.prototype.isDeadNote = function () {
                            return this.deadNote;
                        };
                        TGNoteEffect.prototype.setDeadNote = function (deadNote) {
                            this.deadNote = deadNote;
                            if (this.isDeadNote()) {
                                this.bend = null;
                                this.trill = null;
                                this.slide = false;
                                this.hammer = false;
                                this.tremoloBar = null;
                                this.tremoloPicking = null;
                            }
                        };
                        TGNoteEffect.prototype.isVibrato = function () {
                            return this.vibrato;
                        };
                        TGNoteEffect.prototype.setVibrato = function (vibrato) {
                            this.vibrato = vibrato;
                            if (this.isVibrato()) {
                                this.trill = null;
                                this.tremoloPicking = null;
                            }
                        };
                        TGNoteEffect.prototype.getBend = function () {
                            return this.bend;
                        };
                        TGNoteEffect.prototype.setBend = function (bend) {
                            this.bend = bend;
                            if (this.isBend()) {
                                this.trill = null;
                                this.deadNote = false;
                                this.slide = false;
                                this.hammer = false;
                                this.tremoloBar = null;
                                this.tremoloPicking = null;
                            }
                        };
                        TGNoteEffect.prototype.isBend = function () {
                            return (this.bend != null && !this.bend.getPoints().isEmpty());
                        };
                        TGNoteEffect.prototype.getTremoloBar = function () {
                            return this.tremoloBar;
                        };
                        TGNoteEffect.prototype.setTremoloBar = function (tremoloBar) {
                            this.tremoloBar = tremoloBar;
                            if (this.isTremoloBar()) {
                                this.bend = null;
                                this.trill = null;
                                this.deadNote = false;
                                this.slide = false;
                                this.hammer = false;
                                this.tremoloPicking = null;
                            }
                        };
                        TGNoteEffect.prototype.isTremoloBar = function () {
                            return (this.tremoloBar != null);
                        };
                        TGNoteEffect.prototype.getTrill = function () {
                            return this.trill;
                        };
                        TGNoteEffect.prototype.setTrill = function (trill) {
                            this.trill = trill;
                            if (this.isTrill()) {
                                this.bend = null;
                                this.tremoloBar = null;
                                this.tremoloPicking = null;
                                this.slide = false;
                                this.hammer = false;
                                this.deadNote = false;
                                this.vibrato = false;
                            }
                        };
                        TGNoteEffect.prototype.isTrill = function () {
                            return (this.trill != null);
                        };
                        TGNoteEffect.prototype.getTremoloPicking = function () {
                            return this.tremoloPicking;
                        };
                        TGNoteEffect.prototype.setTremoloPicking = function (tremoloPicking) {
                            this.tremoloPicking = tremoloPicking;
                            if (this.isTremoloPicking()) {
                                this.trill = null;
                                this.bend = null;
                                this.tremoloBar = null;
                                this.slide = false;
                                this.hammer = false;
                                this.deadNote = false;
                                this.vibrato = false;
                            }
                        };
                        TGNoteEffect.prototype.isTremoloPicking = function () {
                            return (this.tremoloPicking != null);
                        };
                        TGNoteEffect.prototype.isHammer = function () {
                            return this.hammer;
                        };
                        TGNoteEffect.prototype.setHammer = function (hammer) {
                            this.hammer = hammer;
                            if (this.isHammer()) {
                                this.trill = null;
                                this.bend = null;
                                this.deadNote = false;
                                this.slide = false;
                                this.tremoloBar = null;
                                this.tremoloPicking = null;
                            }
                        };
                        TGNoteEffect.prototype.isSlide = function () {
                            return this.slide;
                        };
                        TGNoteEffect.prototype.setSlide = function (slide) {
                            this.slide = slide;
                            if (this.isSlide()) {
                                this.trill = null;
                                this.bend = null;
                                this.deadNote = false;
                                this.hammer = false;
                                this.tremoloBar = null;
                                this.tremoloPicking = null;
                            }
                        };
                        TGNoteEffect.prototype.isGhostNote = function () {
                            return this.ghostNote;
                        };
                        TGNoteEffect.prototype.setGhostNote = function (ghostNote) {
                            this.ghostNote = ghostNote;
                            if (this.isGhostNote()) {
                                this.accentuatedNote = false;
                                this.heavyAccentuatedNote = false;
                            }
                        };
                        TGNoteEffect.prototype.isAccentuatedNote = function () {
                            return this.accentuatedNote;
                        };
                        TGNoteEffect.prototype.setAccentuatedNote = function (accentuatedNote) {
                            this.accentuatedNote = accentuatedNote;
                            if (this.isAccentuatedNote()) {
                                this.ghostNote = false;
                                this.heavyAccentuatedNote = false;
                            }
                        };
                        TGNoteEffect.prototype.isHeavyAccentuatedNote = function () {
                            return this.heavyAccentuatedNote;
                        };
                        TGNoteEffect.prototype.setHeavyAccentuatedNote = function (heavyAccentuatedNote) {
                            this.heavyAccentuatedNote = heavyAccentuatedNote;
                            if (this.isHeavyAccentuatedNote()) {
                                this.ghostNote = false;
                                this.accentuatedNote = false;
                            }
                        };
                        TGNoteEffect.prototype.setHarmonic = function (harmonic) {
                            this.harmonic = harmonic;
                        };
                        TGNoteEffect.prototype.getHarmonic = function () {
                            return this.harmonic;
                        };
                        TGNoteEffect.prototype.isHarmonic = function () {
                            return (this.harmonic != null);
                        };
                        TGNoteEffect.prototype.getGrace = function () {
                            return this.grace;
                        };
                        TGNoteEffect.prototype.setGrace = function (grace) {
                            this.grace = grace;
                        };
                        TGNoteEffect.prototype.isGrace = function () {
                            return (this.grace != null);
                        };
                        TGNoteEffect.prototype.isPalmMute = function () {
                            return this.palmMute;
                        };
                        TGNoteEffect.prototype.setPalmMute = function (palmMute) {
                            this.palmMute = palmMute;
                            if (this.isPalmMute()) {
                                this.staccato = false;
                                this.letRing = false;
                            }
                        };
                        TGNoteEffect.prototype.isStaccato = function () {
                            return this.staccato;
                        };
                        TGNoteEffect.prototype.setStaccato = function (staccato) {
                            this.staccato = staccato;
                            if (this.isStaccato()) {
                                this.palmMute = false;
                                this.letRing = false;
                            }
                        };
                        TGNoteEffect.prototype.isLetRing = function () {
                            return this.letRing;
                        };
                        TGNoteEffect.prototype.setLetRing = function (letRing) {
                            this.letRing = letRing;
                            if (this.isLetRing()) {
                                this.staccato = false;
                                this.palmMute = false;
                            }
                        };
                        TGNoteEffect.prototype.isPopping = function () {
                            return this.popping;
                        };
                        TGNoteEffect.prototype.setPopping = function (popping) {
                            this.popping = popping;
                            if (this.isPopping()) {
                                this.tapping = false;
                                this.slapping = false;
                            }
                        };
                        TGNoteEffect.prototype.isSlapping = function () {
                            return this.slapping;
                        };
                        TGNoteEffect.prototype.setSlapping = function (slapping) {
                            this.slapping = slapping;
                            if (this.isSlapping()) {
                                this.tapping = false;
                                this.popping = false;
                            }
                        };
                        TGNoteEffect.prototype.isTapping = function () {
                            return this.tapping;
                        };
                        TGNoteEffect.prototype.setTapping = function (tapping) {
                            this.tapping = tapping;
                            if (this.isTapping()) {
                                this.slapping = false;
                                this.popping = false;
                            }
                        };
                        TGNoteEffect.prototype.isFadeIn = function () {
                            return this.fadeIn;
                        };
                        TGNoteEffect.prototype.setFadeIn = function (fadeIn) {
                            this.fadeIn = fadeIn;
                        };
                        TGNoteEffect.prototype.hasAnyEffect = function () {
                            return (this.isBend() || this.isTremoloBar() || this.isHarmonic() || this.isGrace() || this.isTrill() || this.isTremoloPicking() || this.isVibrato() || this.isDeadNote() || this.isSlide() || this.isHammer() || this.isGhostNote() || this.isAccentuatedNote() || this.isHeavyAccentuatedNote() || this.isPalmMute() || this.isLetRing() || this.isStaccato() || this.isTapping() || this.isSlapping() || this.isPopping() || this.isFadeIn());
                        };
                        TGNoteEffect.prototype.clone = function (factory) {
                            var effect = factory.newEffect();
                            effect.setVibrato(this.isVibrato());
                            effect.setDeadNote(this.isDeadNote());
                            effect.setSlide(this.isSlide());
                            effect.setHammer(this.isHammer());
                            effect.setGhostNote(this.isGhostNote());
                            effect.setAccentuatedNote(this.isAccentuatedNote());
                            effect.setHeavyAccentuatedNote(this.isHeavyAccentuatedNote());
                            effect.setPalmMute(this.isPalmMute());
                            effect.setLetRing(this.isLetRing());
                            effect.setStaccato(this.isStaccato());
                            effect.setTapping(this.isTapping());
                            effect.setSlapping(this.isSlapping());
                            effect.setPopping(this.isPopping());
                            effect.setFadeIn(this.isFadeIn());
                            effect.setBend(this.isBend() ? this.bend.clone(factory) : null);
                            effect.setTremoloBar(this.isTremoloBar() ? this.tremoloBar.clone(factory) : null);
                            effect.setHarmonic(this.isHarmonic() ? this.harmonic.clone(factory) : null);
                            effect.setGrace(this.isGrace() ? this.grace.clone(factory) : null);
                            effect.setTrill(this.isTrill() ? this.trill.clone(factory) : null);
                            effect.setTremoloPicking(this.isTremoloPicking() ? this.tremoloPicking.clone(factory) : null);
                            return effect;
                        };
                        return TGNoteEffect;
                    }());
                    models.TGNoteEffect = TGNoteEffect;
                    TGNoteEffect["__class"] = "org.herac.tuxguitar.song.models.TGNoteEffect";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var TGScale = (function () {
                        function TGScale() {
                            /*private*/ this.notes = new Array(12);
                            this.key = 0;
                            this.clear();
                        }
                        TGScale.prototype.setKey = function (key) {
                            this.key = key;
                        };
                        TGScale.prototype.getKey = function () {
                            return this.key;
                        };
                        TGScale.prototype.setNote = function (note, on) {
                            this.notes[note] = on;
                        };
                        TGScale.prototype.getNote = function (note) {
                            return this.notes[((note + (12 - this.key)) % 12)];
                        };
                        TGScale.prototype.clear = function () {
                            this.setKey(0);
                            for (var i = 0; i < this.notes.length; i++) {
                                this.setNote(i, false);
                            }
                        };
                        return TGScale;
                    }());
                    models.TGScale = TGScale;
                    TGScale["__class"] = "org.herac.tuxguitar.song.models.TGScale";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song_4) {
                var models;
                (function (models) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to
                     * Window - Preferences - Java - Code Style - Code Templates
                     */
                    var TGSong = (function () {
                        function TGSong() {
                            this.name = null;
                            this.artist = null;
                            this.album = null;
                            this.author = null;
                            this.date = null;
                            this.copyright = null;
                            this.writer = null;
                            this.transcriber = null;
                            this.comments = null;
                            this.tracks = null;
                            this.measureHeaders = null;
                            this.channels = null;
                            this.name = new String();
                            this.artist = new String();
                            this.album = new String();
                            this.author = new String();
                            this.date = new String();
                            this.copyright = new String();
                            this.writer = new String();
                            this.transcriber = new String();
                            this.comments = new String();
                            this.tracks = (new java.util.ArrayList());
                            this.channels = (new java.util.ArrayList());
                            this.measureHeaders = (new java.util.ArrayList());
                        }
                        TGSong.prototype.getName = function () {
                            return this.name;
                        };
                        TGSong.prototype.setName = function (name) {
                            this.name = name;
                        };
                        TGSong.prototype.getAlbum = function () {
                            return this.album;
                        };
                        TGSong.prototype.setAlbum = function (album) {
                            this.album = album;
                        };
                        TGSong.prototype.getAuthor = function () {
                            return this.author;
                        };
                        TGSong.prototype.setAuthor = function (author) {
                            this.author = author;
                        };
                        TGSong.prototype.getArtist = function () {
                            return this.artist;
                        };
                        TGSong.prototype.setArtist = function (artist) {
                            this.artist = artist;
                        };
                        TGSong.prototype.getDate = function () {
                            return this.date;
                        };
                        TGSong.prototype.setDate = function (date) {
                            this.date = date;
                        };
                        TGSong.prototype.getCopyright = function () {
                            return this.copyright;
                        };
                        TGSong.prototype.setCopyright = function (copyright) {
                            this.copyright = copyright;
                        };
                        TGSong.prototype.getWriter = function () {
                            return this.writer;
                        };
                        TGSong.prototype.setWriter = function (writer) {
                            this.writer = writer;
                        };
                        TGSong.prototype.getTranscriber = function () {
                            return this.transcriber;
                        };
                        TGSong.prototype.setTranscriber = function (transcriber) {
                            this.transcriber = transcriber;
                        };
                        TGSong.prototype.getComments = function () {
                            return this.comments;
                        };
                        TGSong.prototype.setComments = function (comments) {
                            this.comments = comments;
                        };
                        TGSong.prototype.countMeasureHeaders = function () {
                            return this.measureHeaders.size();
                        };
                        TGSong.prototype.addMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader = function (measureHeader) {
                            this.addMeasureHeader$int$org_herac_tuxguitar_song_models_TGMeasureHeader(this.countMeasureHeaders(), measureHeader);
                        };
                        TGSong.prototype.addMeasureHeader$int$org_herac_tuxguitar_song_models_TGMeasureHeader = function (index, measureHeader) {
                            measureHeader.setSong(this);
                            this.measureHeaders.add(index, measureHeader);
                        };
                        TGSong.prototype.addMeasureHeader = function (index, measureHeader) {
                            if (((typeof index === 'number') || index === null) && ((measureHeader != null && measureHeader instanceof org.herac.tuxguitar.song.models.TGMeasureHeader) || measureHeader === null)) {
                                return this.addMeasureHeader$int$org_herac_tuxguitar_song_models_TGMeasureHeader(index, measureHeader);
                            }
                            else if (((index != null && index instanceof org.herac.tuxguitar.song.models.TGMeasureHeader) || index === null) && measureHeader === undefined) {
                                return this.addMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader(index);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSong.prototype.removeMeasureHeader$int = function (index) {
                            this.measureHeaders.remove(index);
                        };
                        TGSong.prototype.removeMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader = function (measureHeader) {
                            this.measureHeaders.remove(measureHeader);
                        };
                        TGSong.prototype.removeMeasureHeader = function (measureHeader) {
                            if (((measureHeader != null && measureHeader instanceof org.herac.tuxguitar.song.models.TGMeasureHeader) || measureHeader === null)) {
                                return this.removeMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader(measureHeader);
                            }
                            else if (((typeof measureHeader === 'number') || measureHeader === null)) {
                                return this.removeMeasureHeader$int(measureHeader);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSong.prototype.getMeasureHeader = function (index) {
                            return this.measureHeaders.get(index);
                        };
                        TGSong.prototype.getMeasureHeaders = function () {
                            return this.measureHeaders.iterator();
                        };
                        TGSong.prototype.countTracks = function () {
                            return this.tracks.size();
                        };
                        TGSong.prototype.addTrack$org_herac_tuxguitar_song_models_TGTrack = function (track) {
                            this.addTrack$int$org_herac_tuxguitar_song_models_TGTrack(this.countTracks(), track);
                        };
                        TGSong.prototype.addTrack$int$org_herac_tuxguitar_song_models_TGTrack = function (index, track) {
                            track.setSong(this);
                            this.tracks.add(index, track);
                        };
                        TGSong.prototype.addTrack = function (index, track) {
                            if (((typeof index === 'number') || index === null) && ((track != null && track instanceof org.herac.tuxguitar.song.models.TGTrack) || track === null)) {
                                return this.addTrack$int$org_herac_tuxguitar_song_models_TGTrack(index, track);
                            }
                            else if (((index != null && index instanceof org.herac.tuxguitar.song.models.TGTrack) || index === null) && track === undefined) {
                                return this.addTrack$org_herac_tuxguitar_song_models_TGTrack(index);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSong.prototype.moveTrack = function (index, track) {
                            this.tracks.remove(track);
                            this.tracks.add(index, track);
                        };
                        TGSong.prototype.removeTrack = function (track) {
                            this.tracks.remove(track);
                            track.clear();
                        };
                        TGSong.prototype.getTrack = function (index) {
                            return this.tracks.get(index);
                        };
                        TGSong.prototype.getTracks = function () {
                            return this.tracks.iterator();
                        };
                        TGSong.prototype.countChannels = function () {
                            return this.channels.size();
                        };
                        TGSong.prototype.addChannel$org_herac_tuxguitar_song_models_TGChannel = function (channel) {
                            this.addChannel$int$org_herac_tuxguitar_song_models_TGChannel(this.countChannels(), channel);
                        };
                        TGSong.prototype.addChannel$int$org_herac_tuxguitar_song_models_TGChannel = function (index, channel) {
                            this.channels.add(index, channel);
                        };
                        TGSong.prototype.addChannel = function (index, channel) {
                            if (((typeof index === 'number') || index === null) && ((channel != null && channel instanceof org.herac.tuxguitar.song.models.TGChannel) || channel === null)) {
                                return this.addChannel$int$org_herac_tuxguitar_song_models_TGChannel(index, channel);
                            }
                            else if (((index != null && index instanceof org.herac.tuxguitar.song.models.TGChannel) || index === null) && channel === undefined) {
                                return this.addChannel$org_herac_tuxguitar_song_models_TGChannel(index);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSong.prototype.moveChannel = function (index, channel) {
                            this.channels.remove(channel);
                            this.channels.add(index, channel);
                        };
                        TGSong.prototype.removeChannel = function (channel) {
                            this.channels.remove(channel);
                        };
                        TGSong.prototype.getChannel = function (index) {
                            return this.channels.get(index);
                        };
                        TGSong.prototype.getChannels = function () {
                            return this.channels.iterator();
                        };
                        TGSong.prototype.isEmpty = function () {
                            return (this.countMeasureHeaders() === 0 || this.countTracks() === 0);
                        };
                        TGSong.prototype.clear = function () {
                            var tracks = this.getTracks();
                            while ((tracks.hasNext())) {
                                var track = tracks.next();
                                track.clear();
                            }
                            ;
                            this.tracks.clear();
                            this.channels.clear();
                            this.measureHeaders.clear();
                        };
                        TGSong.prototype.clone = function (factory) {
                            var tgSong = factory.newSong();
                            tgSong.copyFrom(factory, this);
                            return tgSong;
                        };
                        TGSong.prototype.copyFrom = function (factory, song) {
                            this.clear();
                            this.setName(song.getName());
                            this.setArtist(song.getArtist());
                            this.setAlbum(song.getAlbum());
                            this.setAuthor(song.getAuthor());
                            this.setDate(song.getDate());
                            this.setCopyright(song.getCopyright());
                            this.setWriter(song.getWriter());
                            this.setTranscriber(song.getTranscriber());
                            this.setComments(song.getComments());
                            var headers = song.getMeasureHeaders();
                            while ((headers.hasNext())) {
                                var header = headers.next();
                                this.addMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader(header.clone(factory));
                            }
                            ;
                            var channels = song.getChannels();
                            while ((channels.hasNext())) {
                                var channel = channels.next();
                                this.addChannel$org_herac_tuxguitar_song_models_TGChannel(channel.clone(factory));
                            }
                            ;
                            var tracks = song.getTracks();
                            while ((tracks.hasNext())) {
                                var track = tracks.next();
                                this.addTrack$org_herac_tuxguitar_song_models_TGTrack(track.clone(factory, this));
                            }
                            ;
                        };
                        return TGSong;
                    }());
                    models.TGSong = TGSong;
                    TGSong["__class"] = "org.herac.tuxguitar.song.models.TGSong";
                })(models = song_4.models || (song_4.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to
                     * Window - Preferences - Java - Code Style - Code Templates
                     */
                    var TGString = (function () {
                        function TGString() {
                            this.number = 0;
                            this.value = 0;
                            this.number = 0;
                            this.value = 0;
                        }
                        TGString.prototype.getNumber = function () {
                            return this.number;
                        };
                        TGString.prototype.getValue = function () {
                            return this.value;
                        };
                        TGString.prototype.setNumber = function (number) {
                            this.number = number;
                        };
                        TGString.prototype.setValue = function (value) {
                            this.value = value;
                        };
                        TGString.prototype.isEqual = function (string) {
                            return (this.getNumber() === string.getNumber() && this.getValue() === string.getValue());
                        };
                        TGString.prototype.clone = function (factory) {
                            var tgString = factory.newString();
                            tgString.copyFrom(this);
                            return tgString;
                        };
                        TGString.prototype.copyFrom = function (string) {
                            this.setNumber(string.getNumber());
                            this.setValue(string.getValue());
                        };
                        return TGString;
                    }());
                    models.TGString = TGString;
                    TGString["__class"] = "org.herac.tuxguitar.song.models.TGString";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var TGStroke = (function () {
                        function TGStroke() {
                            this.direction = 0;
                            this.value = 0;
                            this.direction = TGStroke.STROKE_NONE;
                        }
                        TGStroke.prototype.getDirection = function () {
                            return this.direction;
                        };
                        TGStroke.prototype.setDirection = function (direction) {
                            this.direction = direction;
                        };
                        TGStroke.prototype.getValue = function () {
                            return this.value;
                        };
                        TGStroke.prototype.setValue = function (value) {
                            this.value = value;
                        };
                        TGStroke.prototype.getIncrementTime = function (beat) {
                            var duration = 0;
                            if (this.value > 0) {
                                for (var v = 0; v < beat.countVoices(); v++) {
                                    var voice = beat.getVoice(v);
                                    if (!voice.isEmpty()) {
                                        var currentDuration = voice.getDuration().getTime();
                                        if (duration === 0 || currentDuration < duration) {
                                            duration = (currentDuration <= org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME ? currentDuration : org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME);
                                        }
                                    }
                                }
                                if (duration > 0) {
                                    return Math.round(((duration / 8.0) * (4.0 / this.value)));
                                }
                            }
                            return 0;
                        };
                        TGStroke.prototype.clone = function (factory) {
                            var tgStroke = factory.newStroke();
                            tgStroke.copyFrom(this);
                            return tgStroke;
                        };
                        TGStroke.prototype.copyFrom = function (stroke) {
                            this.setValue(stroke.getValue());
                            this.setDirection(stroke.getDirection());
                        };
                        return TGStroke;
                    }());
                    TGStroke.STROKE_NONE = 0;
                    TGStroke.STROKE_UP = 1;
                    TGStroke.STROKE_DOWN = -1;
                    models.TGStroke = TGStroke;
                    TGStroke["__class"] = "org.herac.tuxguitar.song.models.TGStroke";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to
                     * Window - Preferences - Java - Code Style - Code Templates
                     */
                    var TGTempo = (function () {
                        function TGTempo() {
                            this.value = 0;
                            this.value = 120;
                        }
                        TGTempo.prototype.getValue = function () {
                            return this.value;
                        };
                        TGTempo.prototype.setValue = function (value) {
                            this.value = value;
                        };
                        TGTempo.prototype.getInMillis = function () {
                            var millis = (60.0 / this.getValue() * TGTempo.SECOND_IN_MILLIS);
                            return Math.floor(millis);
                        };
                        TGTempo.prototype.getInUSQ = function () {
                            var usq = ((60.0 / this.getValue() * TGTempo.SECOND_IN_MILLIS) * 1000.0);
                            return Math.floor(usq);
                        };
                        TGTempo.fromUSQ = function (factory, usq) {
                            var value = ((60.0 * TGTempo.SECOND_IN_MILLIS) / (usq / 1000.0));
                            var tempo = factory.newTempo();
                            tempo.setValue((value | 0));
                            return tempo;
                        };
                        TGTempo.prototype.clone = function (factory) {
                            var tgTempo = factory.newTempo();
                            tgTempo.copyFrom(this);
                            return tgTempo;
                        };
                        TGTempo.prototype.copyFrom = function (tempo) {
                            this.setValue(tempo.getValue());
                        };
                        return TGTempo;
                    }());
                    TGTempo.SECOND_IN_MILLIS = 1000;
                    models.TGTempo = TGTempo;
                    TGTempo["__class"] = "org.herac.tuxguitar.song.models.TGTempo";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var TGText = (function () {
                        function TGText() {
                            this.value = null;
                            this.beat = null;
                        }
                        TGText.prototype.getBeat = function () {
                            return this.beat;
                        };
                        TGText.prototype.setBeat = function (beat) {
                            this.beat = beat;
                        };
                        TGText.prototype.getValue = function () {
                            return this.value;
                        };
                        TGText.prototype.setValue = function (value) {
                            this.value = value;
                        };
                        TGText.prototype.isEmpty = function () {
                            return (this.value == null || this.value.length === 0);
                        };
                        TGText.prototype.copyFrom = function (text) {
                            this.setValue(text.getValue());
                        };
                        TGText.prototype.clone = function (factory) {
                            var tgText = factory.newText();
                            tgText.copyFrom(this);
                            return tgText;
                        };
                        return TGText;
                    }());
                    models.TGText = TGText;
                    TGText["__class"] = "org.herac.tuxguitar.song.models.TGText";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to
                     * Window - Preferences - Java - Code Style - Code Templates
                     */
                    var TGTimeSignature = (function () {
                        function TGTimeSignature(factory) {
                            this.denominator = null;
                            this.numerator = 0;
                            this.numerator = 4;
                            this.denominator = factory.newDuration();
                        }
                        TGTimeSignature.prototype.getNumerator = function () {
                            return this.numerator;
                        };
                        TGTimeSignature.prototype.setNumerator = function (numerator) {
                            this.numerator = numerator;
                        };
                        TGTimeSignature.prototype.getDenominator = function () {
                            return this.denominator;
                        };
                        TGTimeSignature.prototype.setDenominator = function (denominator) {
                            this.denominator = denominator;
                        };
                        TGTimeSignature.prototype.clone = function (factory) {
                            var tgTimeSignature = factory.newTimeSignature();
                            tgTimeSignature.copyFrom(this);
                            return tgTimeSignature;
                        };
                        TGTimeSignature.prototype.copyFrom = function (timeSignature) {
                            this.setNumerator(timeSignature.getNumerator());
                            this.getDenominator().copyFrom(timeSignature.getDenominator());
                        };
                        TGTimeSignature.prototype.isEqual = function (ts) {
                            return (this.getNumerator() === ts.getNumerator() && this.getDenominator().isEqual(ts.getDenominator()));
                        };
                        return TGTimeSignature;
                    }());
                    models.TGTimeSignature = TGTimeSignature;
                    TGTimeSignature["__class"] = "org.herac.tuxguitar.song.models.TGTimeSignature";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song_5) {
                var models;
                (function (models) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to
                     * Window - Preferences - Java - Code Style - Code Templates
                     */
                    var TGTrack = (function () {
                        function TGTrack(factory) {
                            this.number = 0;
                            this.offset = 0;
                            this.channelId = 0;
                            this.solo = false;
                            this.mute = false;
                            this.name = null;
                            this.measures = null;
                            this.strings = null;
                            this.color = null;
                            this.lyrics = null;
                            this.song = null;
                            this.number = 0;
                            this.offset = 0;
                            this.channelId = -1;
                            this.solo = false;
                            this.mute = false;
                            this.name = new String();
                            this.measures = (new java.util.ArrayList());
                            this.strings = (new java.util.ArrayList());
                            this.color = factory.newColor();
                            this.lyrics = factory.newLyric();
                        }
                        TGTrack.prototype.getNumber = function () {
                            return this.number;
                        };
                        TGTrack.prototype.setNumber = function (number) {
                            this.number = number;
                        };
                        TGTrack.prototype.getMeasures = function () {
                            return this.measures.iterator();
                        };
                        TGTrack.prototype.addMeasure$org_herac_tuxguitar_song_models_TGMeasure = function (measure) {
                            measure.setTrack(this);
                            this.measures.add(measure);
                        };
                        TGTrack.prototype.addMeasure$int$org_herac_tuxguitar_song_models_TGMeasure = function (index, measure) {
                            measure.setTrack(this);
                            this.measures.add(index, measure);
                        };
                        TGTrack.prototype.addMeasure = function (index, measure) {
                            if (((typeof index === 'number') || index === null) && ((measure != null && measure instanceof org.herac.tuxguitar.song.models.TGMeasure) || measure === null)) {
                                return this.addMeasure$int$org_herac_tuxguitar_song_models_TGMeasure(index, measure);
                            }
                            else if (((index != null && index instanceof org.herac.tuxguitar.song.models.TGMeasure) || index === null) && measure === undefined) {
                                return this.addMeasure$org_herac_tuxguitar_song_models_TGMeasure(index);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGTrack.prototype.getMeasure = function (index) {
                            if (index >= 0 && index < this.countMeasures()) {
                                return this.measures.get(index);
                            }
                            return null;
                        };
                        TGTrack.prototype.removeMeasure = function (index) {
                            this.measures.remove(index);
                        };
                        TGTrack.prototype.countMeasures = function () {
                            return this.measures.size();
                        };
                        TGTrack.prototype.getStrings = function () {
                            return this.strings;
                        };
                        TGTrack.prototype.setStrings = function (strings) {
                            this.strings = strings;
                        };
                        TGTrack.prototype.getColor = function () {
                            return this.color;
                        };
                        TGTrack.prototype.setColor = function (color) {
                            this.color = color;
                        };
                        TGTrack.prototype.getName = function () {
                            return this.name;
                        };
                        TGTrack.prototype.setName = function (name) {
                            this.name = name;
                        };
                        TGTrack.prototype.getOffset = function () {
                            return this.offset;
                        };
                        TGTrack.prototype.setOffset = function (offset) {
                            this.offset = offset;
                        };
                        TGTrack.prototype.isSolo = function () {
                            return this.solo;
                        };
                        TGTrack.prototype.setSolo = function (solo) {
                            this.solo = solo;
                        };
                        TGTrack.prototype.isMute = function () {
                            return this.mute;
                        };
                        TGTrack.prototype.setMute = function (mute) {
                            this.mute = mute;
                        };
                        TGTrack.prototype.getChannelId = function () {
                            return this.channelId;
                        };
                        TGTrack.prototype.setChannelId = function (channelId) {
                            this.channelId = channelId;
                        };
                        TGTrack.prototype.getLyrics = function () {
                            return this.lyrics;
                        };
                        TGTrack.prototype.setLyrics = function (lyrics) {
                            this.lyrics = lyrics;
                        };
                        TGTrack.prototype.getString = function (number) {
                            return this.strings.get(number - 1);
                        };
                        TGTrack.prototype.stringCount = function () {
                            return this.strings.size();
                        };
                        TGTrack.prototype.getSong = function () {
                            return this.song;
                        };
                        TGTrack.prototype.setSong = function (song) {
                            this.song = song;
                        };
                        TGTrack.prototype.clear = function () {
                            var measureCount = this.countMeasures();
                            for (var i = 0; i < measureCount; i++) {
                                var tgMeasure = this.getMeasure(i);
                                tgMeasure.clear();
                            }
                            this.strings.clear();
                            this.measures.clear();
                        };
                        TGTrack.prototype.clone = function (factory, song) {
                            var tgTrack = factory.newTrack();
                            tgTrack.copyFrom(factory, song, this);
                            return tgTrack;
                        };
                        TGTrack.prototype.copyFrom = function (factory, song, track) {
                            this.clear();
                            this.setNumber(track.getNumber());
                            this.setName(track.getName());
                            this.setOffset(track.getOffset());
                            this.setSolo(track.isSolo());
                            this.setMute(track.isMute());
                            this.setChannelId(track.getChannelId());
                            this.getColor().copyFrom(track.getColor());
                            this.getLyrics().copyFrom(track.getLyrics());
                            for (var i = 0; i < track.getStrings().size(); i++) {
                                var string = track.getStrings().get(i);
                                this.getStrings().add(string.clone(factory));
                            }
                            for (var i = 0; i < track.countMeasures(); i++) {
                                var measure = track.getMeasure(i);
                                this.addMeasure$org_herac_tuxguitar_song_models_TGMeasure(measure.clone(factory, song.getMeasureHeader(i)));
                            }
                        };
                        return TGTrack;
                    }());
                    TGTrack.MAX_OFFSET = 24;
                    TGTrack.MIN_OFFSET = -24;
                    models.TGTrack = TGTrack;
                    TGTrack["__class"] = "org.herac.tuxguitar.song.models.TGTrack";
                })(models = song_5.models || (song_5.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var TGVelocities;
                    (function (TGVelocities) {
                        TGVelocities.MIN_VELOCITY = 15;
                        TGVelocities.VELOCITY_INCREMENT = 16;
                        function PIANO_PIANISSIMO_$LI$() { if (TGVelocities.PIANO_PIANISSIMO == null)
                            TGVelocities.PIANO_PIANISSIMO = (TGVelocities.MIN_VELOCITY); return TGVelocities.PIANO_PIANISSIMO; }
                        TGVelocities.PIANO_PIANISSIMO_$LI$ = PIANO_PIANISSIMO_$LI$;
                        ;
                        function PIANISSIMO_$LI$() { if (TGVelocities.PIANISSIMO == null)
                            TGVelocities.PIANISSIMO = (TGVelocities.MIN_VELOCITY + TGVelocities.VELOCITY_INCREMENT); return TGVelocities.PIANISSIMO; }
                        TGVelocities.PIANISSIMO_$LI$ = PIANISSIMO_$LI$;
                        ;
                        function PIANO_$LI$() { if (TGVelocities.PIANO == null)
                            TGVelocities.PIANO = (TGVelocities.MIN_VELOCITY + (TGVelocities.VELOCITY_INCREMENT * 2)); return TGVelocities.PIANO; }
                        TGVelocities.PIANO_$LI$ = PIANO_$LI$;
                        ;
                        function MEZZO_PIANO_$LI$() { if (TGVelocities.MEZZO_PIANO == null)
                            TGVelocities.MEZZO_PIANO = (TGVelocities.MIN_VELOCITY + (TGVelocities.VELOCITY_INCREMENT * 3)); return TGVelocities.MEZZO_PIANO; }
                        TGVelocities.MEZZO_PIANO_$LI$ = MEZZO_PIANO_$LI$;
                        ;
                        function MEZZO_FORTE_$LI$() { if (TGVelocities.MEZZO_FORTE == null)
                            TGVelocities.MEZZO_FORTE = (TGVelocities.MIN_VELOCITY + (TGVelocities.VELOCITY_INCREMENT * 4)); return TGVelocities.MEZZO_FORTE; }
                        TGVelocities.MEZZO_FORTE_$LI$ = MEZZO_FORTE_$LI$;
                        ;
                        function FORTE_$LI$() { if (TGVelocities.FORTE == null)
                            TGVelocities.FORTE = (TGVelocities.MIN_VELOCITY + (TGVelocities.VELOCITY_INCREMENT * 5)); return TGVelocities.FORTE; }
                        TGVelocities.FORTE_$LI$ = FORTE_$LI$;
                        ;
                        function FORTISSIMO_$LI$() { if (TGVelocities.FORTISSIMO == null)
                            TGVelocities.FORTISSIMO = (TGVelocities.MIN_VELOCITY + (TGVelocities.VELOCITY_INCREMENT * 6)); return TGVelocities.FORTISSIMO; }
                        TGVelocities.FORTISSIMO_$LI$ = FORTISSIMO_$LI$;
                        ;
                        function FORTE_FORTISSIMO_$LI$() { if (TGVelocities.FORTE_FORTISSIMO == null)
                            TGVelocities.FORTE_FORTISSIMO = (TGVelocities.MIN_VELOCITY + (TGVelocities.VELOCITY_INCREMENT * 7)); return TGVelocities.FORTE_FORTISSIMO; }
                        TGVelocities.FORTE_FORTISSIMO_$LI$ = FORTE_FORTISSIMO_$LI$;
                        ;
                        function DEFAULT_$LI$() { if (TGVelocities.DEFAULT == null)
                            TGVelocities.DEFAULT = TGVelocities.FORTE_$LI$(); return TGVelocities.DEFAULT; }
                        TGVelocities.DEFAULT_$LI$ = DEFAULT_$LI$;
                        ;
                    })(TGVelocities = models.TGVelocities || (models.TGVelocities = {}));
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to Window - Preferences - Java - Code Style - Code Templates
                     */
                    var TGVoice = (function () {
                        function TGVoice(factory, index) {
                            this.beat = null;
                            this.duration = null;
                            this.notes = null;
                            this.index = 0;
                            this.direction = 0;
                            this.empty = false;
                            this.duration = factory.newDuration();
                            this.notes = (new java.util.ArrayList());
                            this.index = index;
                            this.empty = true;
                            this.direction = TGVoice.DIRECTION_NONE;
                        }
                        TGVoice.prototype.getIndex = function () {
                            return this.index;
                        };
                        TGVoice.prototype.setIndex = function (index) {
                            this.index = index;
                        };
                        TGVoice.prototype.isEmpty = function () {
                            return this.empty;
                        };
                        TGVoice.prototype.setEmpty = function (empty) {
                            this.empty = empty;
                        };
                        TGVoice.prototype.getDirection = function () {
                            return this.direction;
                        };
                        TGVoice.prototype.setDirection = function (direction) {
                            this.direction = direction;
                        };
                        TGVoice.prototype.getDuration = function () {
                            return this.duration;
                        };
                        TGVoice.prototype.setDuration = function (duration) {
                            this.duration = duration;
                        };
                        TGVoice.prototype.getBeat = function () {
                            return this.beat;
                        };
                        TGVoice.prototype.setBeat = function (beat) {
                            this.beat = beat;
                        };
                        TGVoice.prototype.getNotes = function () {
                            return this.notes;
                        };
                        TGVoice.prototype.addNote = function (note) {
                            note.setVoice(this);
                            this.notes.add(note);
                            this.setEmpty(false);
                        };
                        TGVoice.prototype.moveNote = function (index, note) {
                            this.getNotes().remove(note);
                            this.getNotes().add(index, note);
                        };
                        TGVoice.prototype.removeNote = function (note) {
                            this.notes.remove(note);
                        };
                        TGVoice.prototype.getNote = function (index) {
                            if (index >= 0 && index < this.countNotes()) {
                                return this.notes.get(index);
                            }
                            return null;
                        };
                        TGVoice.prototype.countNotes = function () {
                            return this.notes.size();
                        };
                        TGVoice.prototype.isRestVoice = function () {
                            return this.notes.isEmpty();
                        };
                        TGVoice.prototype.clone = function (factory) {
                            var voice = factory.newVoice(this.getIndex());
                            voice.setEmpty(this.isEmpty());
                            voice.setDirection(this.getDirection());
                            voice.getDuration().copyFrom(this.getDuration());
                            for (var i = 0; i < this.countNotes(); i++) {
                                var note = this.notes.get(i);
                                voice.addNote(note.clone(factory));
                            }
                            return voice;
                        };
                        return TGVoice;
                    }());
                    TGVoice.DIRECTION_NONE = 0;
                    TGVoice.DIRECTION_UP = 1;
                    TGVoice.DIRECTION_DOWN = 2;
                    models.TGVoice = TGVoice;
                    TGVoice["__class"] = "org.herac.tuxguitar.song.models.TGVoice";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var thread;
            (function (thread) {
                var TGThreadLoop;
                (function (TGThreadLoop) {
                    TGThreadLoop.BREAK = -1;
                })(TGThreadLoop = thread.TGThreadLoop || (thread.TGThreadLoop = {}));
            })(thread = tuxguitar.thread || (tuxguitar.thread = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var thread;
            (function (thread) {
                var TGThreadManager = (function () {
                    function TGThreadManager() {
                        this.handler = null;
                    }
                    TGThreadManager.prototype.start = function (runnable) {
                        if (this.handler != null) {
                            this.handler.start(runnable);
                        }
                    };
                    TGThreadManager.prototype.loop = function (loop) {
                        if (this.handler != null) {
                            this.handler.loop(loop);
                        }
                    };
                    TGThreadManager.prototype.yield = function () {
                        if (this.handler != null) {
                            this.handler.yield();
                        }
                    };
                    TGThreadManager.prototype.getThreadId = function () {
                        if (this.handler != null) {
                            return this.handler.getThreadId();
                        }
                        return null;
                    };
                    TGThreadManager.prototype.getThreadHandler = function () {
                        return this.handler;
                    };
                    TGThreadManager.prototype.setThreadHandler = function (handler) {
                        this.handler = handler;
                    };
                    TGThreadManager.getInstance = function (context) {
                        return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGThreadManager), new TGThreadManager.TGThreadManager$0());
                    };
                    return TGThreadManager;
                }());
                thread.TGThreadManager = TGThreadManager;
                TGThreadManager["__class"] = "org.herac.tuxguitar.thread.TGThreadManager";
                TGThreadManager["__interfaces"] = ["org.herac.tuxguitar.thread.TGThreadHandler"];
                (function (TGThreadManager) {
                    var TGThreadManager$0 = (function () {
                        function TGThreadManager$0() {
                        }
                        TGThreadManager$0.prototype.createInstance = function (context) {
                            return new org.herac.tuxguitar.thread.TGThreadManager();
                        };
                        return TGThreadManager$0;
                    }());
                    TGThreadManager.TGThreadManager$0 = TGThreadManager$0;
                    TGThreadManager$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                })(TGThreadManager = thread.TGThreadManager || (thread.TGThreadManager = {}));
            })(thread = tuxguitar.thread || (tuxguitar.thread = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var configuration;
                (function (configuration) {
                    var TGConfigManager = (function () {
                        function TGConfigManager(context, module) {
                            this.context = null;
                            this.properties = null;
                            this.module = null;
                            this.context = context;
                            this.module = module;
                            this.initialize();
                        }
                        TGConfigManager.prototype.initialize = function () {
                            this.properties = org.herac.tuxguitar.util.properties.TGPropertiesManager.getInstance(this.context).createProperties();
                            this.load();
                        };
                        TGConfigManager.prototype.save = function () {
                            org.herac.tuxguitar.util.properties.TGPropertiesManager.getInstance(this.context).writeProperties(this.properties, TGConfigManager.RESOURCE, this.module);
                        };
                        TGConfigManager.prototype.load = function () {
                            org.herac.tuxguitar.util.properties.TGPropertiesManager.getInstance(this.context).readProperties(this.properties, TGConfigManager.RESOURCE, this.module);
                        };
                        TGConfigManager.prototype.getProperties = function () {
                            return this.properties;
                        };
                        TGConfigManager.prototype.getStringValue$java_lang_String = function (key) {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getStringValue(this.properties, key);
                        };
                        TGConfigManager.prototype.getStringValue$java_lang_String$java_lang_String = function (key, defaultValue) {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getStringValue(this.properties, key, defaultValue);
                        };
                        TGConfigManager.prototype.getStringValue = function (key, defaultValue) {
                            if (((typeof key === 'string') || key === null) && ((typeof defaultValue === 'string') || defaultValue === null)) {
                                return this.getStringValue$java_lang_String$java_lang_String(key, defaultValue);
                            }
                            else if (((typeof key === 'string') || key === null) && defaultValue === undefined) {
                                return this.getStringValue$java_lang_String(key);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGConfigManager.prototype.getIntegerValue$java_lang_String$int = function (key, defaultValue) {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getIntegerValue(this.properties, key, defaultValue);
                        };
                        TGConfigManager.prototype.getIntegerValue = function (key, defaultValue) {
                            if (((typeof key === 'string') || key === null) && ((typeof defaultValue === 'number') || defaultValue === null)) {
                                return this.getIntegerValue$java_lang_String$int(key, defaultValue);
                            }
                            else if (((typeof key === 'string') || key === null) && defaultValue === undefined) {
                                return this.getIntegerValue$java_lang_String(key);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGConfigManager.prototype.getIntegerValue$java_lang_String = function (key) {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getIntegerValue(this.properties, key);
                        };
                        TGConfigManager.prototype.getFloatValue$java_lang_String$float = function (key, defaultValue) {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getFloatValue(this.properties, key, defaultValue);
                        };
                        TGConfigManager.prototype.getFloatValue = function (key, defaultValue) {
                            if (((typeof key === 'string') || key === null) && ((typeof defaultValue === 'number') || defaultValue === null)) {
                                return this.getFloatValue$java_lang_String$float(key, defaultValue);
                            }
                            else if (((typeof key === 'string') || key === null) && defaultValue === undefined) {
                                return this.getFloatValue$java_lang_String(key);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGConfigManager.prototype.getFloatValue$java_lang_String = function (key) {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getFloatValue(this.properties, key);
                        };
                        TGConfigManager.prototype.getDoubleValue$java_lang_String$double = function (key, defaultValue) {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getDoubleValue(this.properties, key, defaultValue);
                        };
                        TGConfigManager.prototype.getDoubleValue = function (key, defaultValue) {
                            if (((typeof key === 'string') || key === null) && ((typeof defaultValue === 'number') || defaultValue === null)) {
                                return this.getDoubleValue$java_lang_String$double(key, defaultValue);
                            }
                            else if (((typeof key === 'string') || key === null) && defaultValue === undefined) {
                                return this.getDoubleValue$java_lang_String(key);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGConfigManager.prototype.getDoubleValue$java_lang_String = function (key) {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getDoubleValue(this.properties, key);
                        };
                        TGConfigManager.prototype.getBooleanValue$java_lang_String = function (key) {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getBooleanValue(this.properties, key);
                        };
                        TGConfigManager.prototype.getBooleanValue$java_lang_String$boolean = function (key, defaultValue) {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getBooleanValue(this.properties, key, defaultValue);
                        };
                        TGConfigManager.prototype.getBooleanValue = function (key, defaultValue) {
                            if (((typeof key === 'string') || key === null) && ((typeof defaultValue === 'boolean') || defaultValue === null)) {
                                return this.getBooleanValue$java_lang_String$boolean(key, defaultValue);
                            }
                            else if (((typeof key === 'string') || key === null) && defaultValue === undefined) {
                                return this.getBooleanValue$java_lang_String(key);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGConfigManager.prototype.getFloatArrayValue$java_lang_String = function (key) {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getFloatArrayValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String(this.properties, key);
                        };
                        TGConfigManager.prototype.getFloatArrayValue$java_lang_String$float_A = function (key, defaultValue) {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getFloatArrayValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$float_A(this.properties, key, defaultValue);
                        };
                        TGConfigManager.prototype.getFloatArrayValue = function (key, defaultValue) {
                            if (((typeof key === 'string') || key === null) && ((defaultValue != null && defaultValue instanceof Array && (defaultValue.length == 0 || defaultValue[0] == null || (typeof defaultValue[0] === 'number'))) || defaultValue === null)) {
                                return this.getFloatArrayValue$java_lang_String$float_A(key, defaultValue);
                            }
                            else if (((typeof key === 'string') || key === null) && defaultValue === undefined) {
                                return this.getFloatArrayValue$java_lang_String(key);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGConfigManager.prototype.setValue$java_lang_String$java_lang_String = function (key, value) {
                            org.herac.tuxguitar.util.properties.TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$java_lang_String(this.properties, key, value);
                        };
                        TGConfigManager.prototype.setValue = function (key, value) {
                            if (((typeof key === 'string') || key === null) && ((typeof value === 'string') || value === null)) {
                                return this.setValue$java_lang_String$java_lang_String(key, value);
                            }
                            else if (((typeof key === 'string') || key === null) && ((value != null && value instanceof Array && (value.length == 0 || value[0] == null || (typeof value[0] === 'number'))) || value === null)) {
                                return this.setValue$java_lang_String$float_A(key, value);
                            }
                            else if (((typeof key === 'string') || key === null) && ((typeof value === 'number') || value === null)) {
                                return this.setValue$java_lang_String$int(key, value);
                            }
                            else if (((typeof key === 'string') || key === null) && ((typeof value === 'number') || value === null)) {
                                return this.setValue$java_lang_String$float(key, value);
                            }
                            else if (((typeof key === 'string') || key === null) && ((typeof value === 'number') || value === null)) {
                                return this.setValue$java_lang_String$double(key, value);
                            }
                            else if (((typeof key === 'string') || key === null) && ((typeof value === 'boolean') || value === null)) {
                                return this.setValue$java_lang_String$boolean(key, value);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGConfigManager.prototype.setValue$java_lang_String$int = function (key, value) {
                            org.herac.tuxguitar.util.properties.TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$int(this.properties, key, value);
                        };
                        TGConfigManager.prototype.setValue$java_lang_String$float = function (key, value) {
                            org.herac.tuxguitar.util.properties.TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$float(this.properties, key, value);
                        };
                        TGConfigManager.prototype.setValue$java_lang_String$double = function (key, value) {
                            org.herac.tuxguitar.util.properties.TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$double(this.properties, key, value);
                        };
                        TGConfigManager.prototype.setValue$java_lang_String$boolean = function (key, value) {
                            org.herac.tuxguitar.util.properties.TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$boolean(this.properties, key, value);
                        };
                        TGConfigManager.prototype.setValue$java_lang_String$float_A = function (key, value) {
                            org.herac.tuxguitar.util.properties.TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$float_A(this.properties, key, value);
                        };
                        TGConfigManager.prototype.remove = function (key) {
                            this.properties.remove(key);
                        };
                        TGConfigManager.prototype.clear = function () {
                            this.properties.clear();
                        };
                        return TGConfigManager;
                    }());
                    TGConfigManager.RESOURCE = "config";
                    configuration.TGConfigManager = TGConfigManager;
                    TGConfigManager["__class"] = "org.herac.tuxguitar.util.configuration.TGConfigManager";
                })(configuration = util.configuration || (util.configuration = {}));
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var error;
                (function (error) {
                    var TGErrorManager = (function () {
                        function TGErrorManager() {
                            this.errorHandlers = null;
                            this.errorHandlers = (new java.util.ArrayList());
                        }
                        TGErrorManager.prototype.handleError = function (throwable) {
                            for (var index138 = this.errorHandlers.iterator(); index138.hasNext();) {
                                var tgErrorHandler = index138.next();
                                {
                                    tgErrorHandler.handleError(throwable);
                                }
                            }
                        };
                        TGErrorManager.prototype.addErrorHandler = function (errorHandler) {
                            if (!this.errorHandlers.contains(errorHandler)) {
                                this.errorHandlers.add(errorHandler);
                            }
                        };
                        TGErrorManager.prototype.removeErrorHandler = function (errorHandler) {
                            if (this.errorHandlers.contains(errorHandler)) {
                                this.errorHandlers.remove(errorHandler);
                            }
                        };
                        TGErrorManager.prototype.getErrorHandlers = function () {
                            return this.errorHandlers;
                        };
                        TGErrorManager.prototype.clear = function () {
                            this.errorHandlers.clear();
                        };
                        TGErrorManager.getInstance = function (context) {
                            return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGErrorManager), new TGErrorManager.TGErrorManager$0());
                        };
                        return TGErrorManager;
                    }());
                    error.TGErrorManager = TGErrorManager;
                    TGErrorManager["__class"] = "org.herac.tuxguitar.util.error.TGErrorManager";
                    (function (TGErrorManager) {
                        var TGErrorManager$0 = (function () {
                            function TGErrorManager$0() {
                            }
                            TGErrorManager$0.prototype.createInstance = function (context) {
                                return new org.herac.tuxguitar.util.error.TGErrorManager();
                            };
                            return TGErrorManager$0;
                        }());
                        TGErrorManager.TGErrorManager$0 = TGErrorManager$0;
                        TGErrorManager$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                    })(TGErrorManager = error.TGErrorManager || (error.TGErrorManager = {}));
                })(error = util.error || (util.error = {}));
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var plugin;
                (function (plugin) {
                    var TGPluginInfo = (function () {
                        function TGPluginInfo(context, moduleId) {
                            this.context = null;
                            this.properties = null;
                            this.context = context;
                            this.initialize(moduleId);
                        }
                        TGPluginInfo.prototype.initialize = function (moduleId) {
                            this.properties = org.herac.tuxguitar.util.properties.TGPropertiesManager.getInstance(this.context).createProperties();
                            this.loadPluginInfo(moduleId);
                        };
                        TGPluginInfo.prototype.loadPluginInfo = function (moduleId) {
                            org.herac.tuxguitar.util.properties.TGPropertiesManager.getInstance(this.context).readProperties(this.properties, TGPluginInfo.RESOURCE, moduleId);
                        };
                        TGPluginInfo.prototype.getProperties = function () {
                            return this.properties;
                        };
                        TGPluginInfo.prototype.getStringValue = function (key) {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getStringValue(this.properties, key);
                        };
                        TGPluginInfo.prototype.getName = function () {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getStringValue(this.properties, "plugin.name");
                        };
                        TGPluginInfo.prototype.getDescription = function () {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getStringValue(this.properties, "plugin.description");
                        };
                        TGPluginInfo.prototype.getVersion = function () {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getStringValue(this.properties, "plugin.version");
                        };
                        TGPluginInfo.prototype.getAuthor = function () {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getStringValue(this.properties, "plugin.author");
                        };
                        return TGPluginInfo;
                    }());
                    TGPluginInfo.RESOURCE = "plugin-info";
                    plugin.TGPluginInfo = TGPluginInfo;
                    TGPluginInfo["__class"] = "org.herac.tuxguitar.util.plugin.TGPluginInfo";
                })(plugin = util.plugin || (util.plugin = {}));
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var plugin;
                (function (plugin_1) {
                    var TGPluginManager = (function () {
                        function TGPluginManager(context) {
                            this.context = null;
                            this.plugins = null;
                            this.context = context;
                            this.plugins = (new java.util.ArrayList());
                            this.lookupPlugins();
                        }
                        TGPluginManager.prototype.getPlugins = function () {
                            return this.plugins;
                        };
                        TGPluginManager.prototype.lookupPlugins = function () {
                            try {
                                this.plugins.clear();
                                var it = org.herac.tuxguitar.util.TGServiceReader.lookupProviders$java_lang_Class$org_herac_tuxguitar_resource_TGResourceLoader("org.herac.tuxguitar.util.plugin.TGPlugin", org.herac.tuxguitar.resource.TGResourceManager.getInstance(this.context));
                                while ((it.hasNext())) {
                                    try {
                                        var tgPlugin = it.next();
                                        if (tgPlugin.getModuleId() != null) {
                                            this.plugins.add(tgPlugin);
                                        }
                                    }
                                    catch (throwable) {
                                        org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.context).handleError(new org.herac.tuxguitar.util.plugin.TGPluginException(TGPluginManager.PLUGIN_ERROR_ON_LOOKUP, throwable));
                                    }
                                    ;
                                }
                                ;
                            }
                            catch (throwable) {
                                org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.context).handleError(new org.herac.tuxguitar.util.plugin.TGPluginException(TGPluginManager.PLUGIN_ERROR_ON_LOOKUP, throwable));
                            }
                            ;
                        };
                        TGPluginManager.prototype.disconnectAll = function () {
                            for (var index139 = this.plugins.iterator(); index139.hasNext();) {
                                var plugin_2 = index139.next();
                                {
                                    this.disconnectPlugin(plugin_2);
                                }
                            }
                        };
                        TGPluginManager.prototype.connectEnabled = function () {
                            for (var index140 = this.plugins.iterator(); index140.hasNext();) {
                                var plugin_3 = index140.next();
                                {
                                    if (this.isEnabled(plugin_3.getModuleId())) {
                                        this.connectPlugin(plugin_3);
                                    }
                                }
                            }
                        };
                        TGPluginManager.prototype.connectPlugins = function (moduleId) {
                            for (var index141 = this.plugins.iterator(); index141.hasNext();) {
                                var plugin_4 = index141.next();
                                {
                                    if ((function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(plugin_4.getModuleId(), moduleId)) {
                                        this.connectPlugin(plugin_4);
                                    }
                                }
                            }
                        };
                        TGPluginManager.prototype.disconnectPlugins = function (moduleId) {
                            for (var index142 = this.plugins.iterator(); index142.hasNext();) {
                                var plugin_5 = index142.next();
                                {
                                    if ((function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(plugin_5.getModuleId(), moduleId)) {
                                        this.disconnectPlugin(plugin_5);
                                    }
                                }
                            }
                        };
                        TGPluginManager.prototype.connectPlugin = function (tgPlugin) {
                            try {
                                tgPlugin.connect(this.context);
                            }
                            catch (__e) {
                                if (__e != null && __e instanceof org.herac.tuxguitar.util.plugin.TGPluginException) {
                                    var exception = __e;
                                    org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.context).handleError(exception);
                                }
                                if (__e != null && __e instanceof Error) {
                                    var throwable = __e;
                                    org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.context).handleError(new org.herac.tuxguitar.util.plugin.TGPluginException(TGPluginManager.PLUGIN_ERROR_ON_CONNECT, throwable));
                                }
                            }
                            ;
                        };
                        TGPluginManager.prototype.disconnectPlugin = function (tgPlugin) {
                            try {
                                tgPlugin.disconnect(this.context);
                            }
                            catch (__e) {
                                if (__e != null && __e instanceof org.herac.tuxguitar.util.plugin.TGPluginException) {
                                    var exception = __e;
                                    org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.context).handleError(exception);
                                }
                                if (__e != null && __e instanceof Error) {
                                    var throwable = __e;
                                    org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.context).handleError(new org.herac.tuxguitar.util.plugin.TGPluginException(TGPluginManager.PLUGIN_ERROR_ON_DISCONNECT, throwable));
                                }
                            }
                            ;
                        };
                        TGPluginManager.prototype.updatePluginStatus = function (moduleId, enabled) {
                            try {
                                org.herac.tuxguitar.util.plugin.TGPluginProperties.getInstance(this.context).setEnabled(moduleId, enabled);
                                if (enabled) {
                                    this.connectPlugins(moduleId);
                                }
                                else {
                                    this.disconnectPlugins(moduleId);
                                }
                            }
                            catch (throwable) {
                                org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.context).handleError(new org.herac.tuxguitar.util.plugin.TGPluginException(TGPluginManager.PLUGIN_ERROR_ON_SET_STATUS, throwable));
                            }
                            ;
                        };
                        TGPluginManager.prototype.isEnabled = function (moduleId) {
                            try {
                                return org.herac.tuxguitar.util.plugin.TGPluginProperties.getInstance(this.context).isEnabled(moduleId);
                            }
                            catch (throwable) {
                                org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.context).handleError(new org.herac.tuxguitar.util.plugin.TGPluginException(TGPluginManager.PLUGIN_ERROR_ON_GET_STATUS, throwable));
                            }
                            ;
                            return false;
                        };
                        TGPluginManager.prototype.getPluginInstances = function (pluginClass) {
                            var pluginInstances = (new java.util.ArrayList());
                            for (var index143 = this.plugins.iterator(); index143.hasNext();) {
                                var plugin_6 = index143.next();
                                {
                                    if (pluginClass.isInstance(plugin_6)) {
                                        pluginInstances.add(plugin_6);
                                    }
                                }
                            }
                            return pluginInstances;
                        };
                        TGPluginManager.getInstance = function (context) {
                            return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGPluginManager), new TGPluginManager.TGPluginManager$0());
                        };
                        return TGPluginManager;
                    }());
                    TGPluginManager.PLUGIN_ERROR_ON_LOOKUP = "An error ocurred when trying to lookup plugin";
                    TGPluginManager.PLUGIN_ERROR_ON_CONNECT = "An error ocurred when trying to connect plugin";
                    TGPluginManager.PLUGIN_ERROR_ON_DISCONNECT = "An error ocurred when trying to disconnect plugin";
                    TGPluginManager.PLUGIN_ERROR_ON_GET_STATUS = "An error ocurred when trying to get plugin status";
                    TGPluginManager.PLUGIN_ERROR_ON_SET_STATUS = "An error ocurred when trying to set plugin status";
                    plugin_1.TGPluginManager = TGPluginManager;
                    TGPluginManager["__class"] = "org.herac.tuxguitar.util.plugin.TGPluginManager";
                    (function (TGPluginManager) {
                        var TGPluginManager$0 = (function () {
                            function TGPluginManager$0() {
                            }
                            TGPluginManager$0.prototype.createInstance = function (context) {
                                return new org.herac.tuxguitar.util.plugin.TGPluginManager(context);
                            };
                            return TGPluginManager$0;
                        }());
                        TGPluginManager.TGPluginManager$0 = TGPluginManager$0;
                        TGPluginManager$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                    })(TGPluginManager = plugin_1.TGPluginManager || (plugin_1.TGPluginManager = {}));
                })(plugin = util.plugin || (util.plugin = {}));
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var plugin;
                (function (plugin) {
                    var TGPluginProperties = (function () {
                        function TGPluginProperties(context) {
                            this.context = null;
                            this.properties = null;
                            this.context = context;
                            this.properties = org.herac.tuxguitar.util.properties.TGPropertiesManager.getInstance(this.context).createProperties();
                            this.load();
                        }
                        TGPluginProperties.prototype.load = function () {
                            org.herac.tuxguitar.util.properties.TGPropertiesManager.getInstance(this.context).readProperties(this.properties, TGPluginProperties.RESOURCE, TGPluginProperties.MODULE);
                        };
                        TGPluginProperties.prototype.save = function () {
                            org.herac.tuxguitar.util.properties.TGPropertiesManager.getInstance(this.context).writeProperties(this.properties, TGPluginProperties.RESOURCE, TGPluginProperties.MODULE);
                        };
                        TGPluginProperties.prototype.setEnabled = function (moduleId, enabled) {
                            this.setBooleanValue(this.createEnabledPropertyKey(moduleId), enabled);
                            this.save();
                        };
                        TGPluginProperties.prototype.isEnabled = function (moduleId) {
                            return this.getBooleanValue(this.createEnabledPropertyKey(moduleId), true);
                        };
                        TGPluginProperties.prototype.createEnabledPropertyKey = function (moduleId) {
                            return (moduleId + TGPluginProperties.ENABLED_PROPERTY_SUFFIX);
                        };
                        TGPluginProperties.prototype.getBooleanValue = function (key, defaultValue) {
                            return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getBooleanValue(this.properties, key, defaultValue);
                        };
                        TGPluginProperties.prototype.setBooleanValue = function (key, value) {
                            org.herac.tuxguitar.util.properties.TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$boolean(this.properties, key, value);
                        };
                        TGPluginProperties.getInstance = function (context) {
                            return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGPluginProperties), new TGPluginProperties.TGPluginProperties$0());
                        };
                        return TGPluginProperties;
                    }());
                    TGPluginProperties.MODULE = "tuxguitar";
                    TGPluginProperties.RESOURCE = "plugin-settings";
                    TGPluginProperties.ENABLED_PROPERTY_SUFFIX = ".enabled";
                    plugin.TGPluginProperties = TGPluginProperties;
                    TGPluginProperties["__class"] = "org.herac.tuxguitar.util.plugin.TGPluginProperties";
                    (function (TGPluginProperties) {
                        var TGPluginProperties$0 = (function () {
                            function TGPluginProperties$0() {
                            }
                            TGPluginProperties$0.prototype.createInstance = function (context) {
                                return new org.herac.tuxguitar.util.plugin.TGPluginProperties(context);
                            };
                            return TGPluginProperties$0;
                        }());
                        TGPluginProperties.TGPluginProperties$0 = TGPluginProperties$0;
                        TGPluginProperties$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                    })(TGPluginProperties = plugin.TGPluginProperties || (plugin.TGPluginProperties = {}));
                })(plugin = util.plugin || (util.plugin = {}));
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var properties;
                (function (properties_1) {
                    var TGPropertiesManager = (function () {
                        function TGPropertiesManager() {
                            this.propertiesFactory = null;
                            this.propertiesReaders = null;
                            this.propertiesWriters = null;
                            this.propertiesFactory = null;
                            this.propertiesReaders = (new java.util.HashMap());
                            this.propertiesWriters = (new java.util.HashMap());
                        }
                        TGPropertiesManager.prototype.createProperties = function () {
                            if (this.propertiesFactory != null) {
                                return this.propertiesFactory.createProperties();
                            }
                            return null;
                        };
                        TGPropertiesManager.prototype.readProperties = function (properties, resource, module) {
                            if (this.propertiesReaders.containsKey(resource)) {
                                var tgPropertiesReader = this.propertiesReaders.get(resource);
                                tgPropertiesReader.readProperties(properties, module);
                            }
                        };
                        TGPropertiesManager.prototype.writeProperties = function (properties, resource, module) {
                            if (this.propertiesWriters.containsKey(resource)) {
                                var tgPropertiesWriter = this.propertiesWriters.get(resource);
                                tgPropertiesWriter.writeProperties(properties, module);
                            }
                        };
                        TGPropertiesManager.prototype.getPropertiesFactory = function () {
                            return this.propertiesFactory;
                        };
                        TGPropertiesManager.prototype.setPropertiesFactory = function (propertiesFactory) {
                            this.propertiesFactory = propertiesFactory;
                        };
                        TGPropertiesManager.prototype.addPropertiesReader = function (resource, propertiesReader) {
                            if (!this.propertiesReaders.containsKey(resource)) {
                                this.propertiesReaders.put(resource, propertiesReader);
                            }
                        };
                        TGPropertiesManager.prototype.removePropertiesReader = function (resource) {
                            if (this.propertiesReaders.containsKey(resource)) {
                                this.propertiesReaders.remove(resource);
                            }
                        };
                        TGPropertiesManager.prototype.addPropertiesWriter = function (resource, propertiesWriter) {
                            if (!this.propertiesWriters.containsKey(resource)) {
                                this.propertiesWriters.put(resource, propertiesWriter);
                            }
                        };
                        TGPropertiesManager.prototype.removePropertiesWriter = function (resource) {
                            if (this.propertiesWriters.containsKey(resource)) {
                                this.propertiesWriters.remove(resource);
                            }
                        };
                        TGPropertiesManager.getInstance = function (context) {
                            return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGPropertiesManager), new TGPropertiesManager.TGPropertiesManager$0());
                        };
                        return TGPropertiesManager;
                    }());
                    properties_1.TGPropertiesManager = TGPropertiesManager;
                    TGPropertiesManager["__class"] = "org.herac.tuxguitar.util.properties.TGPropertiesManager";
                    (function (TGPropertiesManager) {
                        var TGPropertiesManager$0 = (function () {
                            function TGPropertiesManager$0() {
                            }
                            TGPropertiesManager$0.prototype.createInstance = function (context) {
                                return new org.herac.tuxguitar.util.properties.TGPropertiesManager();
                            };
                            return TGPropertiesManager$0;
                        }());
                        TGPropertiesManager.TGPropertiesManager$0 = TGPropertiesManager$0;
                        TGPropertiesManager$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                    })(TGPropertiesManager = properties_1.TGPropertiesManager || (properties_1.TGPropertiesManager = {}));
                })(properties = util.properties || (util.properties = {}));
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var properties;
                (function (properties_2) {
                    var TGPropertiesUtil = (function () {
                        function TGPropertiesUtil() {
                        }
                        TGPropertiesUtil.getStringValue = function (properties, key, defaultValue) {
                            if (defaultValue === void 0) { defaultValue = null; }
                            try {
                                var property = properties.getValue(key);
                                return (property == null) ? defaultValue : property.trim();
                            }
                            catch (throwable) {
                                return defaultValue;
                            }
                            ;
                        };
                        TGPropertiesUtil.getIntegerValue = function (properties, key, defaultValue) {
                            if (defaultValue === void 0) { defaultValue = 0; }
                            try {
                                var value = properties.getValue(key);
                                return (value == null) ? defaultValue : javaemul.internal.IntegerHelper.parseInt(value.trim());
                            }
                            catch (throwable) {
                                return defaultValue;
                            }
                            ;
                        };
                        TGPropertiesUtil.getFloatValue = function (properties, key, defaultValue) {
                            if (defaultValue === void 0) { defaultValue = 0.0; }
                            try {
                                var value = properties.getValue(key);
                                return (value == null) ? defaultValue : javaemul.internal.FloatHelper.parseFloat(value.trim());
                            }
                            catch (throwable) {
                                return defaultValue;
                            }
                            ;
                        };
                        TGPropertiesUtil.getDoubleValue = function (properties, key, defaultValue) {
                            if (defaultValue === void 0) { defaultValue = 0.0; }
                            try {
                                var value = properties.getValue(key);
                                return (value == null) ? defaultValue : javaemul.internal.DoubleHelper.parseDouble(value.trim());
                            }
                            catch (throwable) {
                                return defaultValue;
                            }
                            ;
                        };
                        TGPropertiesUtil.getBooleanValue = function (properties, key, defaultValue) {
                            if (defaultValue === void 0) { defaultValue = false; }
                            try {
                                var value = properties.getValue(key);
                                return (value == null) ? defaultValue : javaemul.internal.BooleanHelper.valueOf(value.trim()).booleanValue();
                            }
                            catch (throwable) {
                                return defaultValue;
                            }
                            ;
                        };
                        TGPropertiesUtil.getFloatArrayValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$float_A = function (properties, key, defaultValue) {
                            try {
                                var propertyValue = properties.getValue(key);
                                if (propertyValue != null) {
                                    var stringValues = propertyValue.split(TGPropertiesUtil.ARRAY_SEPARATOR);
                                    if (stringValues != null) {
                                        var floatValues = (function (s) { var a = []; while (s-- > 0)
                                            a.push(0); return a; })(stringValues.length);
                                        for (var i = 0; i < floatValues.length; i++) {
                                            if (stringValues[i].trim().length > 0) {
                                                floatValues[i] = javaemul.internal.FloatHelper.parseFloat(stringValues[i].trim());
                                            }
                                        }
                                        return floatValues;
                                    }
                                }
                                return defaultValue;
                            }
                            catch (throwable) {
                                return defaultValue;
                            }
                            ;
                        };
                        TGPropertiesUtil.getFloatArrayValue = function (properties, key, defaultValue) {
                            if (((properties != null && (properties["__interfaces"] != null && properties["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0 || properties.constructor != null && properties.constructor["__interfaces"] != null && properties.constructor["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0)) || properties === null) && ((typeof key === 'string') || key === null) && ((defaultValue != null && defaultValue instanceof Array && (defaultValue.length == 0 || defaultValue[0] == null || (typeof defaultValue[0] === 'number'))) || defaultValue === null)) {
                                return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getFloatArrayValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$float_A(properties, key, defaultValue);
                            }
                            else if (((properties != null && (properties["__interfaces"] != null && properties["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0 || properties.constructor != null && properties.constructor["__interfaces"] != null && properties.constructor["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0)) || properties === null) && ((typeof key === 'string') || key === null) && defaultValue === undefined) {
                                return org.herac.tuxguitar.util.properties.TGPropertiesUtil.getFloatArrayValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String(properties, key);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGPropertiesUtil.getFloatArrayValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String = function (properties, key) {
                            return TGPropertiesUtil.getFloatArrayValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$float_A(properties, key, []);
                        };
                        TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$java_lang_String = function (properties, key, value) {
                            properties.setValue(key, (value != null ? value : new String()));
                        };
                        TGPropertiesUtil.setValue = function (properties, key, value) {
                            if (((properties != null && (properties["__interfaces"] != null && properties["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0 || properties.constructor != null && properties.constructor["__interfaces"] != null && properties.constructor["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0)) || properties === null) && ((typeof key === 'string') || key === null) && ((typeof value === 'string') || value === null)) {
                                return org.herac.tuxguitar.util.properties.TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$java_lang_String(properties, key, value);
                            }
                            else if (((properties != null && (properties["__interfaces"] != null && properties["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0 || properties.constructor != null && properties.constructor["__interfaces"] != null && properties.constructor["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0)) || properties === null) && ((typeof key === 'string') || key === null) && ((value != null && value instanceof Array && (value.length == 0 || value[0] == null || (typeof value[0] === 'number'))) || value === null)) {
                                return org.herac.tuxguitar.util.properties.TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$float_A(properties, key, value);
                            }
                            else if (((properties != null && (properties["__interfaces"] != null && properties["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0 || properties.constructor != null && properties.constructor["__interfaces"] != null && properties.constructor["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0)) || properties === null) && ((typeof key === 'string') || key === null) && ((typeof value === 'number') || value === null)) {
                                return org.herac.tuxguitar.util.properties.TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$int(properties, key, value);
                            }
                            else if (((properties != null && (properties["__interfaces"] != null && properties["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0 || properties.constructor != null && properties.constructor["__interfaces"] != null && properties.constructor["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0)) || properties === null) && ((typeof key === 'string') || key === null) && ((typeof value === 'number') || value === null)) {
                                return org.herac.tuxguitar.util.properties.TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$float(properties, key, value);
                            }
                            else if (((properties != null && (properties["__interfaces"] != null && properties["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0 || properties.constructor != null && properties.constructor["__interfaces"] != null && properties.constructor["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0)) || properties === null) && ((typeof key === 'string') || key === null) && ((typeof value === 'number') || value === null)) {
                                return org.herac.tuxguitar.util.properties.TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$double(properties, key, value);
                            }
                            else if (((properties != null && (properties["__interfaces"] != null && properties["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0 || properties.constructor != null && properties.constructor["__interfaces"] != null && properties.constructor["__interfaces"].indexOf("org.herac.tuxguitar.util.properties.TGProperties") >= 0)) || properties === null) && ((typeof key === 'string') || key === null) && ((typeof value === 'boolean') || value === null)) {
                                return org.herac.tuxguitar.util.properties.TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$boolean(properties, key, value);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$int = function (properties, key, value) {
                            properties.setValue(key, /* toString */ ('' + (value)));
                        };
                        TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$float = function (properties, key, value) {
                            properties.setValue(key, /* toString */ ('' + (value)));
                        };
                        TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$double = function (properties, key, value) {
                            properties.setValue(key, /* toString */ ('' + (value)));
                        };
                        TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$boolean = function (properties, key, value) {
                            properties.setValue(key, javaemul.internal.BooleanHelper.toString(value));
                        };
                        TGPropertiesUtil.setValue$org_herac_tuxguitar_util_properties_TGProperties$java_lang_String$float_A = function (properties, key, values) {
                            var sb = new java.lang.StringBuilder();
                            for (var index144 = 0; index144 < values.length; index144++) {
                                var value = values[index144];
                                {
                                    if (sb.length() > 0) {
                                        sb.append(TGPropertiesUtil.ARRAY_SEPARATOR);
                                    }
                                    sb.append(value);
                                }
                            }
                            properties.setValue(key, sb.toString());
                        };
                        return TGPropertiesUtil;
                    }());
                    TGPropertiesUtil.ARRAY_SEPARATOR = ";";
                    properties_2.TGPropertiesUtil = TGPropertiesUtil;
                    TGPropertiesUtil["__class"] = "org.herac.tuxguitar.util.properties.TGPropertiesUtil";
                })(properties = util.properties || (util.properties = {}));
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var singleton;
                (function (singleton) {
                    var TGSingletonUtil = (function () {
                        function TGSingletonUtil() {
                        }
                        TGSingletonUtil.getInstance = function (context, key, factory) {
                            {
                                if (context.hasAttribute(key)) {
                                    return context.getAttribute(key);
                                }
                                context.setAttribute(key, factory.createInstance(context));
                                return TGSingletonUtil.getInstance(context, key, factory);
                            }
                            ;
                        };
                        TGSingletonUtil.getSingletonLock = function (context, key) {
                            {
                                var contextKey = (key + "-singletonLock");
                                if (context.hasAttribute(contextKey)) {
                                    return context.getAttribute(contextKey);
                                }
                                context.setAttribute(contextKey, new Object());
                                return TGSingletonUtil.getSingletonLock(context, key);
                            }
                            ;
                        };
                        return TGSingletonUtil;
                    }());
                    singleton.TGSingletonUtil = TGSingletonUtil;
                    TGSingletonUtil["__class"] = "org.herac.tuxguitar.util.singleton.TGSingletonUtil";
                })(singleton = util.singleton || (util.singleton = {}));
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var TGAbstractContext = (function () {
                    function TGAbstractContext() {
                        this.attributes = null;
                        this.attributes = (new java.util.concurrent.ConcurrentHashMap());
                    }
                    TGAbstractContext.prototype.setAttribute = function (key, value) {
                        if (value != null) {
                            this.attributes.put(key, value);
                        }
                        else {
                            this.removeAttribute(key);
                        }
                    };
                    TGAbstractContext.prototype.getAttribute = function (key) {
                        if (this.hasAttribute(key)) {
                            return this.attributes.get(key);
                        }
                        return null;
                    };
                    TGAbstractContext.prototype.removeAttribute = function (key) {
                        if (this.hasAttribute(key)) {
                            this.attributes.remove(key);
                        }
                    };
                    TGAbstractContext.prototype.getAttributes = function () {
                        return this.attributes;
                    };
                    TGAbstractContext.prototype.addAttributes = function (attributes) {
                        this.attributes.putAll(attributes);
                    };
                    TGAbstractContext.prototype.hasAttribute = function (key) {
                        return this.attributes.containsKey(key);
                    };
                    TGAbstractContext.prototype.clear = function () {
                        this.attributes.clear();
                    };
                    TGAbstractContext.prototype.addContext = function (context) {
                        this.addAttributes(context.getAttributes());
                    };
                    return TGAbstractContext;
                }());
                util.TGAbstractContext = TGAbstractContext;
                TGAbstractContext["__class"] = "org.herac.tuxguitar.util.TGAbstractContext";
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var TGException = (function (_super) {
                    __extends(TGException, _super);
                    function TGException(message, cause) {
                        var _this = this;
                        if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {
                            var __args = Array.prototype.slice.call(arguments);
                            _this = _super.call(this, message) || this;
                            _this.message = message;
                        }
                        else if (((typeof message === 'string') || message === null) && cause === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            _this = _super.call(this, message) || this;
                            _this.message = message;
                        }
                        else if (((message != null && message instanceof Error) || message === null) && cause === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            var cause_2 = __args[0];
                            _this = _super.call(this, cause_2.message) || this;
                            _this.message = cause_2.message;
                        }
                        else if (message === undefined && cause === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            _this = _super.call(this) || this;
                        }
                        else
                            throw new Error('invalid overload');
                        return _this;
                    }
                    return TGException;
                }(Error));
                TGException.serialVersionUID = 8298443126251976034;
                util.TGException = TGException;
                TGException["__class"] = "org.herac.tuxguitar.util.TGException";
                TGException["__interfaces"] = ["java.io.Serializable"];
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var TGExpressionResolver = (function () {
                    function TGExpressionResolver() {
                        this.variables = null;
                        this.variables = (new java.util.HashMap());
                    }
                    TGExpressionResolver.prototype.setVariable = function (key, value) {
                        this.variables.put(key, value);
                    };
                    TGExpressionResolver.prototype.removeVariable = function (key) {
                        this.variables.remove(key);
                    };
                    TGExpressionResolver.prototype.resolve = function (source) {
                        if (source != null) {
                            var pattern = java.util.regex.Pattern.compile("\\$+\\{+([a-zA-Z0-9_\\-\\.]+)\\}+");
                            var matcher = pattern.matcher(source);
                            var sb = new java.lang.StringBuffer();
                            while ((matcher.find())) {
                                var property = matcher.group(1);
                                var value = this.findProperty(property);
                                if (value != null) {
                                    var stringValue = value.toString();
                                    if (stringValue != null) {
                                        matcher.appendReplacement(sb, java.util.regex.Matcher.quoteReplacement(stringValue));
                                    }
                                }
                            }
                            ;
                            matcher.appendTail(sb);
                            return sb.toString();
                        }
                        return null;
                    };
                    TGExpressionResolver.prototype.findProperty = function (key) {
                        var value = null;
                        if (this.variables.containsKey(key)) {
                            value = this.variables.get(key);
                        }
                        if (value == null) {
                            value = java.lang.System.getProperty(key);
                        }
                        if (value == null) {
                            value = java.lang.System.getenv(key);
                        }
                        return value;
                    };
                    TGExpressionResolver.getInstance = function (context) {
                        return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGExpressionResolver), new TGExpressionResolver.TGExpressionResolver$0());
                    };
                    return TGExpressionResolver;
                }());
                util.TGExpressionResolver = TGExpressionResolver;
                TGExpressionResolver["__class"] = "org.herac.tuxguitar.util.TGExpressionResolver";
                (function (TGExpressionResolver) {
                    var TGExpressionResolver$0 = (function () {
                        function TGExpressionResolver$0() {
                        }
                        TGExpressionResolver$0.prototype.createInstance = function (context) {
                            return new org.herac.tuxguitar.util.TGExpressionResolver();
                        };
                        return TGExpressionResolver$0;
                    }());
                    TGExpressionResolver.TGExpressionResolver$0 = TGExpressionResolver$0;
                    TGExpressionResolver$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                })(TGExpressionResolver = util.TGExpressionResolver || (util.TGExpressionResolver = {}));
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var TGLibraryLoader = (function () {
                    function TGLibraryLoader(context) {
                        this.context = null;
                        this.context = context;
                    }
                    TGLibraryLoader.prototype.loadLibrary = function (file) {
                        try {
                            console.info("Loading: " + file.getAbsolutePath());
                            java.lang.System.load(file.getAbsolutePath());
                        }
                        catch (throwable) {
                            org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.context).handleError(throwable);
                        }
                        ;
                    };
                    TGLibraryLoader.prototype.loadLibraries = function (folder, prefix, extension) {
                        if (folder != null && folder.exists()) {
                            var libraries = this.findLibrariesToLoad(folder, prefix, extension);
                            for (var i = 0; i < libraries.size(); i++) {
                                var library = libraries.get(i);
                                var file = new java.io.File(this.getLibraryFileName(folder, library));
                                if (file.exists() && !file.isDirectory()) {
                                    this.loadLibrary(file);
                                }
                            }
                        }
                    };
                    TGLibraryLoader.prototype.getLibraryFileName = function (folder, library) {
                        return (folder.getAbsolutePath() + java.io.File.separator + library);
                    };
                    TGLibraryLoader.prototype.getLibraryDependenciesFileName = function (folder, library) {
                        return (this.getLibraryFileName(folder, library) + ".deps");
                    };
                    TGLibraryLoader.prototype.findLibrariesToLoad = function (folder, prefix, extension) {
                        var libraries = (new java.util.ArrayList());
                        var files = folder.list$java_io_FilenameFilter(this.createFilenameFilter(prefix, extension));
                        var library = null;
                        while (((library = this.findNextLibraryToLoad$java_util_List$java_io_File$java_lang_String_A(libraries, folder, files)) != null)) {
                            libraries.add(library);
                        }
                        ;
                        return libraries;
                    };
                    TGLibraryLoader.prototype.findNextLibraryToLoad$java_util_List$java_io_File$java_lang_String_A = function (libraries, folder, files) {
                        for (var i = 0; i < files.length; i++) {
                            if (!libraries.contains(files[i])) {
                                return this.findNextLibraryToLoad$java_util_List$java_io_File$java_lang_String_A$java_lang_String(libraries, folder, files, files[i]);
                            }
                        }
                        return null;
                    };
                    TGLibraryLoader.prototype.findNextLibraryToLoad$java_util_List$java_io_File$java_lang_String_A$java_lang_String = function (libraries, folder, files, expectedLib) {
                        var dependencies = this.findDependencyLibraries$java_io_File$java_lang_String(folder, expectedLib);
                        if (dependencies != null) {
                            var it = dependencies.iterator();
                            while ((it.hasNext())) {
                                var dependency = it.next();
                                if (!libraries.contains(dependency)) {
                                    for (var i = 0; i < files.length; i++) {
                                        if ((function (o1, o2) { if (o1.equals) {
                                            return o1.equals(o2);
                                        }
                                        else {
                                            return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                        } })(dependency, files[i])) {
                                            return this.findNextLibraryToLoad$java_util_List$java_io_File$java_lang_String_A$java_lang_String(libraries, folder, files, dependency);
                                        }
                                    }
                                }
                            }
                            ;
                        }
                        return expectedLib;
                    };
                    TGLibraryLoader.prototype.findNextLibraryToLoad = function (libraries, folder, files, expectedLib) {
                        if (((libraries != null && (libraries["__interfaces"] != null && libraries["__interfaces"].indexOf("java.util.List") >= 0 || libraries.constructor != null && libraries.constructor["__interfaces"] != null && libraries.constructor["__interfaces"].indexOf("java.util.List") >= 0)) || libraries === null) && ((folder != null && folder instanceof java.io.File) || folder === null) && ((files != null && files instanceof Array && (files.length == 0 || files[0] == null || (typeof files[0] === 'string'))) || files === null) && ((typeof expectedLib === 'string') || expectedLib === null)) {
                            return this.findNextLibraryToLoad$java_util_List$java_io_File$java_lang_String_A$java_lang_String(libraries, folder, files, expectedLib);
                        }
                        else if (((libraries != null && (libraries["__interfaces"] != null && libraries["__interfaces"].indexOf("java.util.List") >= 0 || libraries.constructor != null && libraries.constructor["__interfaces"] != null && libraries.constructor["__interfaces"].indexOf("java.util.List") >= 0)) || libraries === null) && ((folder != null && folder instanceof java.io.File) || folder === null) && ((files != null && files instanceof Array && (files.length == 0 || files[0] == null || (typeof files[0] === 'string'))) || files === null) && expectedLib === undefined) {
                            return this.findNextLibraryToLoad$java_util_List$java_io_File$java_lang_String_A(libraries, folder, files);
                        }
                        else
                            throw new Error('invalid overload');
                    };
                    TGLibraryLoader.prototype.findDependencyLibraries$java_io_File$java_lang_String = function (folder, library) {
                        return this.findDependencyLibraries$java_io_File(new java.io.File(this.getLibraryDependenciesFileName(folder, library)));
                    };
                    TGLibraryLoader.prototype.findDependencyLibraries = function (folder, library) {
                        if (((folder != null && folder instanceof java.io.File) || folder === null) && ((typeof library === 'string') || library === null)) {
                            return this.findDependencyLibraries$java_io_File$java_lang_String(folder, library);
                        }
                        else if (((folder != null && folder instanceof java.io.File) || folder === null) && library === undefined) {
                            return this.findDependencyLibraries$java_io_File(folder);
                        }
                        else
                            throw new Error('invalid overload');
                    };
                    TGLibraryLoader.prototype.findDependencyLibraries$java_io_File = function (file) {
                        try {
                            var libraries = (new java.util.ArrayList());
                            if (file.exists()) {
                                var reader = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), "UTF-8"));
                                var library = null;
                                while (((library = reader.readLine()) != null)) {
                                    libraries.add(library.trim());
                                }
                                ;
                                reader.close();
                            }
                            return libraries;
                        }
                        catch (__e) {
                            if (__e != null && __e instanceof java.io.UnsupportedEncodingException) {
                                var e = __e;
                                org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.context).handleError(e);
                            }
                            if (__e != null && __e instanceof java.io.IOException) {
                                var e = __e;
                                org.herac.tuxguitar.util.error.TGErrorManager.getInstance(this.context).handleError(e);
                            }
                        }
                        ;
                        return null;
                    };
                    TGLibraryLoader.prototype.createFilenameFilter = function (prefix, extension) {
                        return new TGLibraryLoader.TGLibraryLoader$0(this, prefix, extension);
                    };
                    TGLibraryLoader.getInstance = function (context) {
                        return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGLibraryLoader), new TGLibraryLoader.TGLibraryLoader$1());
                    };
                    return TGLibraryLoader;
                }());
                util.TGLibraryLoader = TGLibraryLoader;
                TGLibraryLoader["__class"] = "org.herac.tuxguitar.util.TGLibraryLoader";
                (function (TGLibraryLoader) {
                    var TGLibraryLoader$0 = (function () {
                        function TGLibraryLoader$0(__parent, prefix, extension) {
                            this.prefix = prefix;
                            this.extension = extension;
                            this.__parent = __parent;
                        }
                        TGLibraryLoader$0.prototype.accept = function (dir, name) {
                            if (name == null) {
                                return false;
                            }
                            if (this.prefix != null && this.prefix.length > 0) {
                                var index = name.indexOf(this.prefix);
                                if (index !== 0) {
                                    return false;
                                }
                            }
                            if (this.extension != null && this.extension.length > 0) {
                                var index = name.indexOf(this.extension);
                                if (index !== (name.length - this.extension.length)) {
                                    return false;
                                }
                            }
                            return true;
                        };
                        return TGLibraryLoader$0;
                    }());
                    TGLibraryLoader.TGLibraryLoader$0 = TGLibraryLoader$0;
                    TGLibraryLoader$0["__interfaces"] = ["java.io.FilenameFilter"];
                    var TGLibraryLoader$1 = (function () {
                        function TGLibraryLoader$1() {
                        }
                        TGLibraryLoader$1.prototype.createInstance = function (context) {
                            return new org.herac.tuxguitar.util.TGLibraryLoader(context);
                        };
                        return TGLibraryLoader$1;
                    }());
                    TGLibraryLoader.TGLibraryLoader$1 = TGLibraryLoader$1;
                    TGLibraryLoader$1["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                })(TGLibraryLoader = util.TGLibraryLoader || (util.TGLibraryLoader = {}));
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var TGLock = (function () {
                    function TGLock(context) {
                        this.lockCount = 0;
                        this.__lock = null;
                        this.lockThread = null;
                        this.threadManager = null;
                        this.lockCount = 0;
                        this.__lock = new Object();
                        this.lockThread = null;
                        this.threadManager = org.herac.tuxguitar.thread.TGThreadManager.getInstance(context);
                    }
                    TGLock.prototype.lock = function () {
                        var thread = this.threadManager.getThreadId();
                        var lockSuccess = false;
                        {
                            if ((lockSuccess = !this.isLocked$java_lang_Object(thread))) {
                                this.lockThread = thread;
                                this.lockCount++;
                            }
                        }
                        ;
                        if (!lockSuccess) {
                            while ((this.isLocked$java_lang_Object(thread))) {
                                this.threadManager.yield();
                            }
                            ;
                            this.lock();
                        }
                    };
                    TGLock.prototype.unlock = function (force) {
                        if (force === void 0) { force = false; }
                        {
                            this.lockCount--;
                            if (this.lockCount === 0 || force) {
                                this.lockCount = 0;
                                this.lockThread = null;
                            }
                        }
                        ;
                    };
                    TGLock.prototype.tryLock = function () {
                        {
                            if (this.isLocked()) {
                                return false;
                            }
                            this.lock();
                            return true;
                        }
                        ;
                    };
                    TGLock.prototype.isLocked$java_lang_Object = function (thread) {
                        {
                            return (this.lockThread != null && !(function (o1, o2) { if (o1.equals) {
                                return o1.equals(o2);
                            }
                            else {
                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                            } })(this.lockThread, thread));
                        }
                        ;
                    };
                    TGLock.prototype.isLocked = function (thread) {
                        if (((thread != null) || thread === null)) {
                            return this.isLocked$java_lang_Object(thread);
                        }
                        else if (thread === undefined) {
                            return this.isLocked$();
                        }
                        else
                            throw new Error('invalid overload');
                    };
                    TGLock.prototype.isLocked$ = function () {
                        return this.isLocked$java_lang_Object(this.threadManager.getThreadId());
                    };
                    return TGLock;
                }());
                util.TGLock = TGLock;
                TGLock["__class"] = "org.herac.tuxguitar.util.TGLock";
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var TGServiceReader = (function () {
                    function TGServiceReader() {
                    }
                    TGServiceReader.SERVICE_PATH_$LI$ = function () { if (TGServiceReader.SERVICE_PATH == null)
                        TGServiceReader.SERVICE_PATH = new String("META-INF/services/"); return TGServiceReader.SERVICE_PATH; };
                    ;
                    TGServiceReader.lookupProviders$java_lang_Class$org_herac_tuxguitar_util_TGContext = function (spi, context) {
                        return TGServiceReader.lookupProviders$java_lang_Class$org_herac_tuxguitar_resource_TGResourceLoader(spi, org.herac.tuxguitar.resource.TGResourceManager.getInstance(context));
                    };
                    TGServiceReader.lookupProviders = function (spi, context) {
                        if (((spi != null && spi instanceof Function) || spi === null) && ((context != null && context instanceof org.herac.tuxguitar.util.TGContext) || context === null)) {
                            return org.herac.tuxguitar.util.TGServiceReader.lookupProviders$java_lang_Class$org_herac_tuxguitar_util_TGContext(spi, context);
                        }
                        else if (((spi != null && spi instanceof Function) || spi === null) && ((context != null && (context["__interfaces"] != null && context["__interfaces"].indexOf("org.herac.tuxguitar.resource.TGResourceLoader") >= 0 || context.constructor != null && context.constructor["__interfaces"] != null && context.constructor["__interfaces"].indexOf("org.herac.tuxguitar.resource.TGResourceLoader") >= 0)) || context === null)) {
                            return org.herac.tuxguitar.util.TGServiceReader.lookupProviders$java_lang_Class$org_herac_tuxguitar_resource_TGResourceLoader(spi, context);
                        }
                        else
                            throw new Error('invalid overload');
                    };
                    TGServiceReader.lookupProviders$java_lang_Class$org_herac_tuxguitar_resource_TGResourceLoader = function (spi, loader) {
                        try {
                            if (spi == null || loader == null) {
                                throw new java.lang.IllegalArgumentException();
                            }
                            return (new TGServiceReader.IteratorImpl(spi, loader, loader.getResources(TGServiceReader.SERVICE_PATH_$LI$() + (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(spi))));
                        }
                        catch (e) {
                            return new java.util.ArrayList().iterator();
                        }
                        ;
                    };
                    return TGServiceReader;
                }());
                util.TGServiceReader = TGServiceReader;
                TGServiceReader["__class"] = "org.herac.tuxguitar.util.TGServiceReader";
                (function (TGServiceReader) {
                    var IteratorImpl = (function () {
                        function IteratorImpl(spi, loader, urls) {
                            this.spi = null;
                            this.loader = null;
                            this.urls = null;
                            this.iterator = null;
                            this.spi = spi;
                            this.loader = loader;
                            this.urls = urls;
                            this.initialize();
                        }
                        IteratorImpl.prototype.initialize = function () {
                            var providers = (new java.util.ArrayList());
                            while ((this.urls.hasMoreElements())) {
                                var url = this.urls.nextElement();
                                try {
                                    var reader = new java.io.BufferedReader(new java.io.InputStreamReader(url.openStream(), "UTF-8"));
                                    var line = null;
                                    while (((line = reader.readLine()) != null)) {
                                        var provider = this.uncommentLine(line).trim();
                                        if (provider != null && provider.length > 0) {
                                            providers.add(provider);
                                        }
                                    }
                                    ;
                                }
                                catch (__e) {
                                    if (__e != null && __e instanceof java.io.UnsupportedEncodingException) {
                                        var e = __e;
                                        console.error(e.message, e);
                                    }
                                    if (__e != null && __e instanceof java.io.IOException) {
                                        var e = __e;
                                        console.error(e.message, e);
                                    }
                                }
                                ;
                            }
                            ;
                            this.iterator = providers.iterator();
                        };
                        IteratorImpl.prototype.uncommentLine = function (line) {
                            var index = line.indexOf('#');
                            if (index >= 0) {
                                return (line.substring(0, index));
                            }
                            return line;
                        };
                        IteratorImpl.prototype.hasNext = function () {
                            return (this.iterator != null && this.iterator.hasNext());
                        };
                        IteratorImpl.prototype.next = function () {
                            if (!this.hasNext()) {
                                throw new java.util.NoSuchElementException();
                            }
                            try {
                                var provider = this.loader.loadClass(this.iterator.next()).newInstance();
                                if (this.spi.isInstance(provider)) {
                                    return provider;
                                }
                            }
                            catch (throwable) {
                                console.error(throwable.message, throwable);
                            }
                            ;
                            throw new java.util.NoSuchElementException();
                        };
                        IteratorImpl.prototype.remove = function () {
                            throw new java.lang.UnsupportedOperationException();
                        };
                        return IteratorImpl;
                    }());
                    TGServiceReader.IteratorImpl = IteratorImpl;
                    IteratorImpl["__class"] = "org.herac.tuxguitar.util.TGServiceReader.IteratorImpl";
                    IteratorImpl["__interfaces"] = ["java.util.Iterator"];
                })(TGServiceReader = util.TGServiceReader || (util.TGServiceReader = {}));
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var TGSynchronizer = (function () {
                    function TGSynchronizer() {
                        this.controller = null;
                    }
                    TGSynchronizer.prototype.executeLater = function (runnable) {
                        this.controller.executeLater(runnable);
                    };
                    TGSynchronizer.prototype.setController = function (controller) {
                        this.controller = controller;
                    };
                    TGSynchronizer.getInstance = function (context) {
                        return org.herac.tuxguitar.util.singleton.TGSingletonUtil.getInstance(context, /* getName */ (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(TGSynchronizer), new TGSynchronizer.TGSynchronizer$0());
                    };
                    return TGSynchronizer;
                }());
                util.TGSynchronizer = TGSynchronizer;
                TGSynchronizer["__class"] = "org.herac.tuxguitar.util.TGSynchronizer";
                (function (TGSynchronizer) {
                    var TGSynchronizer$0 = (function () {
                        function TGSynchronizer$0() {
                        }
                        TGSynchronizer$0.prototype.createInstance = function (context) {
                            return new org.herac.tuxguitar.util.TGSynchronizer();
                        };
                        return TGSynchronizer$0;
                    }());
                    TGSynchronizer.TGSynchronizer$0 = TGSynchronizer$0;
                    TGSynchronizer$0["__interfaces"] = ["org.herac.tuxguitar.util.singleton.TGSingletonFactory"];
                })(TGSynchronizer = util.TGSynchronizer || (util.TGSynchronizer = {}));
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var TGVersion = (function () {
                    function TGVersion(major, minor, revision) {
                        this.major = 0;
                        this.minor = 0;
                        this.revision = 0;
                        this.major = major;
                        this.minor = minor;
                        this.revision = revision;
                    }
                    TGVersion.CURRENT_$LI$ = function () { if (TGVersion.CURRENT == null)
                        TGVersion.CURRENT = new TGVersion(1, 4, 20170227); return TGVersion.CURRENT; };
                    ;
                    TGVersion.prototype.getMajor = function () {
                        return this.major;
                    };
                    TGVersion.prototype.getMinor = function () {
                        return this.minor;
                    };
                    TGVersion.prototype.getRevision = function () {
                        return this.revision;
                    };
                    TGVersion.prototype.isSameVersion = function (version) {
                        if (version == null) {
                            return false;
                        }
                        return (version.getMajor() === this.getMajor() && version.getMinor() === this.getMinor() && version.getRevision() === this.getRevision());
                    };
                    TGVersion.prototype.getVersion = function () {
                        var version = (this.getMajor() + "." + this.getMinor());
                        if (this.getRevision() > 0) {
                            version += ("." + this.getRevision());
                        }
                        return version;
                    };
                    TGVersion.prototype.toString = function () {
                        return this.getVersion();
                    };
                    return TGVersion;
                }());
                util.TGVersion = TGVersion;
                TGVersion["__class"] = "org.herac.tuxguitar.util.TGVersion";
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var midi;
                (function (midi) {
                    var synthesizer;
                    (function (synthesizer) {
                        var MidiOutputPortImpl = (function (_super) {
                            __extends(MidiOutputPortImpl, _super);
                            function MidiOutputPortImpl() {
                                var _this = _super.call(this) || this;
                                _this.receiver = null;
                                _this.receiver = new org.herac.tg.webapp.midi.synthesizer.MidiReceiverImpl();
                                return _this;
                            }
                            MidiOutputPortImpl.prototype.open = function () {
                            };
                            MidiOutputPortImpl.prototype.close = function () {
                            };
                            MidiOutputPortImpl.prototype.getReceiver = function () {
                                return this.receiver;
                            };
                            MidiOutputPortImpl.prototype.check = function () {
                            };
                            MidiOutputPortImpl.prototype.getKey = function () {
                                return "MIDI Port";
                            };
                            MidiOutputPortImpl.prototype.getName = function () {
                                return "MIDI Port";
                            };
                            return MidiOutputPortImpl;
                        }(org.herac.tuxguitar.gm.port.GMOutputPort));
                        synthesizer.MidiOutputPortImpl = MidiOutputPortImpl;
                        MidiOutputPortImpl["__class"] = "org.herac.tg.webapp.midi.synthesizer.MidiOutputPortImpl";
                        MidiOutputPortImpl["__interfaces"] = ["org.herac.tuxguitar.player.base.MidiOutputPort", "org.herac.tuxguitar.player.base.MidiDevice"];
                    })(synthesizer = midi.synthesizer || (midi.synthesizer = {}));
                })(midi = webapp.midi || (webapp.midi = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var action;
                (function (action) {
                    var impl;
                    (function (impl) {
                        var TGLoadSongAction = (function (_super) {
                            __extends(TGLoadSongAction, _super);
                            function TGLoadSongAction(context) {
                                return _super.call(this, context, TGLoadSongAction.NAME) || this;
                            }
                            TGLoadSongAction.prototype.execute = function (context) {
                                org.herac.tg.webapp.busy.TGBusyControl.getInstance(this.getContext()).block();
                                var bytes = context.getAttribute(TGLoadSongAction.ATTRIBUTE_BYTE_BUFFER);
                                var documentManager = org.herac.tuxguitar.document.TGDocumentManager.getInstance(this.getContext());
                                var handle = new org.herac.tuxguitar.io.base.TGSongReaderHandle();
                                handle.setFactory(documentManager.getSongManager().getFactory());
                                handle.setInputStream(new java.io.ByteArrayInputStream(bytes));
                                handle.setContext(new org.herac.tuxguitar.io.base.TGSongStreamContext());
                                org.herac.tuxguitar.io.base.TGFileFormatManager.getInstance(this.getContext()).read(handle);
                                documentManager.setSong(handle.getSong());
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).updateLoadedSong();
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).updateSelection();
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).redraw();
                                org.herac.tg.webapp.busy.TGBusyControl.getInstance(this.getContext()).unBlock();
                            };
                            return TGLoadSongAction;
                        }(org.herac.tg.webapp.action.TGActionAdapter));
                        TGLoadSongAction.NAME = "action.song.load";
                        TGLoadSongAction.ATTRIBUTE_BYTE_BUFFER = "byteBuffer";
                        impl.TGLoadSongAction = TGLoadSongAction;
                        TGLoadSongAction["__class"] = "org.herac.tg.webapp.action.impl.TGLoadSongAction";
                        TGLoadSongAction["__interfaces"] = ["org.herac.tuxguitar.action.TGAction"];
                    })(impl = action.impl || (action.impl = {}));
                })(action = webapp.action || (webapp.action = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var action;
                (function (action) {
                    var impl;
                    (function (impl) {
                        var TGLoadURLAction = (function (_super) {
                            __extends(TGLoadURLAction, _super);
                            function TGLoadURLAction(context) {
                                return _super.call(this, context, TGLoadURLAction.NAME) || this;
                            }
                            TGLoadURLAction.prototype.execute = function (context) {
                                var _this = this;
                                org.herac.tg.webapp.busy.TGBusyControl.getInstance(this.getContext()).block();
                                var url = context.getAttribute(TGLoadURLAction.ATTRIBUTE_URL);
                                var xhr = new XMLHttpRequest();
                                xhr.open("GET", (url + "?t=" + java.lang.System.currentTimeMillis()), true);
                                xhr.responseType = "arraybuffer";
                                xhr.onload = function (t) {
                                    var response = xhr.response;
                                    var buffer = new Uint8Array(response);
                                    var bytes = (function (s) { var a = []; while (s-- > 0)
                                        a.push(0); return a; })((buffer.length | 0));
                                    for (var i = 0; i < buffer.length; i++) {
                                        bytes[i] = buffer[i];
                                    }
                                    context.setAttribute(org.herac.tg.webapp.action.impl.TGLoadSongAction.ATTRIBUTE_BYTE_BUFFER, bytes);
                                    org.herac.tuxguitar.action.TGActionManager.getInstance(_this.getContext()).execute$java_lang_String$org_herac_tuxguitar_action_TGActionContext(org.herac.tg.webapp.action.impl.TGLoadSongAction.NAME, context);
                                    org.herac.tg.webapp.busy.TGBusyControl.getInstance(_this.getContext()).unBlock();
                                    return true;
                                };
                                xhr.send();
                            };
                            return TGLoadURLAction;
                        }(org.herac.tg.webapp.action.TGActionAdapter));
                        TGLoadURLAction.NAME = "action.url.read";
                        TGLoadURLAction.ATTRIBUTE_URL = "url";
                        impl.TGLoadURLAction = TGLoadURLAction;
                        TGLoadURLAction["__class"] = "org.herac.tg.webapp.action.impl.TGLoadURLAction";
                        TGLoadURLAction["__interfaces"] = ["org.herac.tuxguitar.action.TGAction"];
                    })(impl = action.impl || (action.impl = {}));
                })(action = webapp.action || (webapp.action = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var action;
                (function (action) {
                    var impl;
                    (function (impl) {
                        var TGMoveToAction = (function (_super) {
                            __extends(TGMoveToAction, _super);
                            function TGMoveToAction(context) {
                                return _super.call(this, context, TGMoveToAction.NAME) || this;
                            }
                            TGMoveToAction.prototype.execute = function (context) {
                                org.herac.tg.webapp.busy.TGBusyControl.getInstance(this.getContext()).block();
                                var track = context.getAttribute(TGMoveToAction.ATTRIBUTE_TRACK_NUMBER);
                                var position = context.getAttribute(TGMoveToAction.ATTRIBUTE_POSITION);
                                var tgSelection = org.herac.tg.webapp.selection.TGSelection.getInstance(this.getContext());
                                tgSelection.moveTo$java_lang_Integer$java_lang_Long(track, position);
                                org.herac.tg.webapp.transport.TGTransport.getInstance(this.getContext()).gotoMeasure(tgSelection.getMeasure().getHeader());
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).updateSelection();
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).redraw();
                                org.herac.tg.webapp.busy.TGBusyControl.getInstance(this.getContext()).unBlock();
                            };
                            return TGMoveToAction;
                        }(org.herac.tg.webapp.action.TGActionAdapter));
                        TGMoveToAction.NAME = "action.select.move-to";
                        TGMoveToAction.ATTRIBUTE_TRACK_NUMBER = "trackNumber";
                        TGMoveToAction.ATTRIBUTE_POSITION = "position";
                        impl.TGMoveToAction = TGMoveToAction;
                        TGMoveToAction["__class"] = "org.herac.tg.webapp.action.impl.TGMoveToAction";
                        TGMoveToAction["__interfaces"] = ["org.herac.tuxguitar.action.TGAction"];
                    })(impl = action.impl || (action.impl = {}));
                })(action = webapp.action || (webapp.action = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var action;
                (function (action) {
                    var impl;
                    (function (impl) {
                        var TGSetMultitrackAction = (function (_super) {
                            __extends(TGSetMultitrackAction, _super);
                            function TGSetMultitrackAction(context) {
                                return _super.call(this, context, TGSetMultitrackAction.NAME) || this;
                            }
                            TGSetMultitrackAction.prototype.execute = function (context) {
                                org.herac.tg.webapp.busy.TGBusyControl.getInstance(this.getContext()).block();
                                var layout = org.herac.tg.webapp.control.TGTabControl.getInstance(this.getContext()).getLayout();
                                layout.setStyle((layout.getStyle() ^ org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_MULTITRACK));
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).updateSong();
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).updateSelection();
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).redraw();
                                org.herac.tg.webapp.busy.TGBusyControl.getInstance(this.getContext()).unBlock();
                            };
                            return TGSetMultitrackAction;
                        }(org.herac.tg.webapp.action.TGActionAdapter));
                        TGSetMultitrackAction.NAME = "action.view.layout-set-multitrack-enabled";
                        impl.TGSetMultitrackAction = TGSetMultitrackAction;
                        TGSetMultitrackAction["__class"] = "org.herac.tg.webapp.action.impl.TGSetMultitrackAction";
                        TGSetMultitrackAction["__interfaces"] = ["org.herac.tuxguitar.action.TGAction"];
                    })(impl = action.impl || (action.impl = {}));
                })(action = webapp.action || (webapp.action = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var action;
                (function (action) {
                    var impl;
                    (function (impl) {
                        var TGSetScoreEnabledAction = (function (_super) {
                            __extends(TGSetScoreEnabledAction, _super);
                            function TGSetScoreEnabledAction(context) {
                                return _super.call(this, context, TGSetScoreEnabledAction.NAME) || this;
                            }
                            TGSetScoreEnabledAction.prototype.execute = function (context) {
                                org.herac.tg.webapp.busy.TGBusyControl.getInstance(this.getContext()).block();
                                var layout = org.herac.tg.webapp.control.TGTabControl.getInstance(this.getContext()).getLayout();
                                layout.setStyle((layout.getStyle() ^ org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE));
                                if ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) === 0 && (layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) === 0) {
                                    layout.setStyle((layout.getStyle() ^ org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE));
                                }
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).updateSong();
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).updateSelection();
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).redraw();
                                org.herac.tg.webapp.busy.TGBusyControl.getInstance(this.getContext()).unBlock();
                            };
                            return TGSetScoreEnabledAction;
                        }(org.herac.tg.webapp.action.TGActionAdapter));
                        TGSetScoreEnabledAction.NAME = "action.view.layout-set-score-enabled";
                        impl.TGSetScoreEnabledAction = TGSetScoreEnabledAction;
                        TGSetScoreEnabledAction["__class"] = "org.herac.tg.webapp.action.impl.TGSetScoreEnabledAction";
                        TGSetScoreEnabledAction["__interfaces"] = ["org.herac.tuxguitar.action.TGAction"];
                    })(impl = action.impl || (action.impl = {}));
                })(action = webapp.action || (webapp.action = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var action;
                (function (action) {
                    var impl;
                    (function (impl) {
                        var TGSetSelectedTrackAction = (function (_super) {
                            __extends(TGSetSelectedTrackAction, _super);
                            function TGSetSelectedTrackAction(context) {
                                return _super.call(this, context, TGSetSelectedTrackAction.NAME) || this;
                            }
                            TGSetSelectedTrackAction.prototype.execute = function (context) {
                                org.herac.tg.webapp.busy.TGBusyControl.getInstance(this.getContext()).block();
                                var value = $("#action-set-selected-track").val();
                                if (value != null && value.trim().length > 0) {
                                    context.setAttribute(org.herac.tg.webapp.action.impl.TGMoveToAction.ATTRIBUTE_TRACK_NUMBER, javaemul.internal.IntegerHelper.parseInt(value));
                                    context.setAttribute(org.herac.tg.webapp.action.impl.TGMoveToAction.ATTRIBUTE_POSITION, this.findCurrentPosition());
                                    org.herac.tuxguitar.action.TGActionManager.getInstance(this.getContext()).execute$java_lang_String$org_herac_tuxguitar_action_TGActionContext(org.herac.tg.webapp.action.impl.TGMoveToAction.NAME, context);
                                }
                                org.herac.tg.webapp.busy.TGBusyControl.getInstance(this.getContext()).unBlock();
                            };
                            TGSetSelectedTrackAction.prototype.findCurrentPosition = function () {
                                var player = org.herac.tuxguitar.player.base.MidiPlayer.getInstance(this.getContext());
                                if (player.isRunning()) {
                                    return org.herac.tg.webapp.midi.util.MidiTickUtil.getStart(this.getContext(), player.getTickPosition());
                                }
                                return org.herac.tg.webapp.selection.TGSelection.getInstance(this.getContext()).getMeasure().getStart();
                            };
                            return TGSetSelectedTrackAction;
                        }(org.herac.tg.webapp.action.TGActionAdapter));
                        TGSetSelectedTrackAction.NAME = "action.view.layout-set-selected-track";
                        impl.TGSetSelectedTrackAction = TGSetSelectedTrackAction;
                        TGSetSelectedTrackAction["__class"] = "org.herac.tg.webapp.action.impl.TGSetSelectedTrackAction";
                        TGSetSelectedTrackAction["__interfaces"] = ["org.herac.tuxguitar.action.TGAction"];
                    })(impl = action.impl || (action.impl = {}));
                })(action = webapp.action || (webapp.action = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var action;
                (function (action) {
                    var impl;
                    (function (impl) {
                        var TGSetTabEnabledAction = (function (_super) {
                            __extends(TGSetTabEnabledAction, _super);
                            function TGSetTabEnabledAction(context) {
                                return _super.call(this, context, TGSetTabEnabledAction.NAME) || this;
                            }
                            TGSetTabEnabledAction.prototype.execute = function (context) {
                                org.herac.tg.webapp.busy.TGBusyControl.getInstance(this.getContext()).block();
                                var layout = org.herac.tg.webapp.control.TGTabControl.getInstance(this.getContext()).getLayout();
                                layout.setStyle((layout.getStyle() ^ org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE));
                                if ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) === 0 && (layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) === 0) {
                                    layout.setStyle((layout.getStyle() ^ org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE));
                                }
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).updateSong();
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).updateSelection();
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).redraw();
                                org.herac.tg.webapp.busy.TGBusyControl.getInstance(this.getContext()).unBlock();
                            };
                            return TGSetTabEnabledAction;
                        }(org.herac.tg.webapp.action.TGActionAdapter));
                        TGSetTabEnabledAction.NAME = "action.view.layout-set-tab-enabled";
                        impl.TGSetTabEnabledAction = TGSetTabEnabledAction;
                        TGSetTabEnabledAction["__class"] = "org.herac.tg.webapp.action.impl.TGSetTabEnabledAction";
                        TGSetTabEnabledAction["__interfaces"] = ["org.herac.tuxguitar.action.TGAction"];
                    })(impl = action.impl || (action.impl = {}));
                })(action = webapp.action || (webapp.action = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var action;
                (function (action) {
                    var impl;
                    (function (impl) {
                        var TGTransportPlayAction = (function (_super) {
                            __extends(TGTransportPlayAction, _super);
                            function TGTransportPlayAction(context) {
                                return _super.call(this, context, TGTransportPlayAction.NAME) || this;
                            }
                            TGTransportPlayAction.prototype.execute = function (context) {
                                var _this = this;
                                org.herac.tg.webapp.busy.TGBusyControl.getInstance(this.getContext()).block();
                                var onMidiProgress = function (a, b) {
                                    org.herac.tg.webapp.busy.TGBusyControl.getInstance(_this.getContext()).log("Loading instruments");
                                };
                                var onMidiSuccess = function (data) {
                                    console.log("onMidiSuccess");
                                    org.herac.tg.webapp.transport.TGTransport.getInstance(_this.getContext()).play();
                                    org.herac.tg.webapp.editor.TGEditorManager.getInstance(_this.getContext()).updateSelection();
                                    org.herac.tg.webapp.editor.TGEditorManager.getInstance(_this.getContext()).redraw();
                                    org.herac.tg.webapp.busy.TGBusyControl.getInstance(_this.getContext()).unBlock();
                                };
                                var song = context.getAttribute(org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_SONG_$LI$());
                                var programs = (new java.util.ArrayList());
                                var it = song.getChannels();
                                while ((it.hasNext())) {
                                    var channel = it.next();
                                    var program = (channel.getProgram() | 0);
                                    if (channel.isPercussionChannel()) {
                                        program = org.herac.tg.webapp.midi.synthesizer.MidiReceiverImpl.PERCUSSION_PROGRAM;
                                    }
                                    if (!programs.contains(program)) {
                                        programs.add(program);
                                    }
                                }
                                ;
                                MIDI.loadPlugin({
                                    soundfontUrl: this.getContext().getAttribute(org.herac.tg.webapp.TGWebApp.ATTRIBUTE_SOUNDFONTS_URL),
                                    instruments: programs.toArray(new Array(programs.size())),
                                    onprogress: onMidiProgress,
                                    onsuccess: onMidiSuccess
                                });
                            };
                            return TGTransportPlayAction;
                        }(org.herac.tg.webapp.action.TGActionAdapter));
                        TGTransportPlayAction.NAME = "action.transport.play";
                        impl.TGTransportPlayAction = TGTransportPlayAction;
                        TGTransportPlayAction["__class"] = "org.herac.tg.webapp.action.impl.TGTransportPlayAction";
                        TGTransportPlayAction["__interfaces"] = ["org.herac.tuxguitar.action.TGAction"];
                    })(impl = action.impl || (action.impl = {}));
                })(action = webapp.action || (webapp.action = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var action;
                (function (action) {
                    var impl;
                    (function (impl) {
                        var TGTransportStopAction = (function (_super) {
                            __extends(TGTransportStopAction, _super);
                            function TGTransportStopAction(context) {
                                return _super.call(this, context, TGTransportStopAction.NAME) || this;
                            }
                            TGTransportStopAction.prototype.execute = function (context) {
                                org.herac.tg.webapp.transport.TGTransport.getInstance(this.getContext()).stop();
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).updateSelection();
                                org.herac.tg.webapp.editor.TGEditorManager.getInstance(this.getContext()).redraw();
                            };
                            return TGTransportStopAction;
                        }(org.herac.tg.webapp.action.TGActionAdapter));
                        TGTransportStopAction.NAME = "action.transport.stop";
                        impl.TGTransportStopAction = TGTransportStopAction;
                        TGTransportStopAction["__class"] = "org.herac.tg.webapp.action.impl.TGTransportStopAction";
                        TGTransportStopAction["__interfaces"] = ["org.herac.tuxguitar.action.TGAction"];
                    })(impl = action.impl || (action.impl = {}));
                })(action = webapp.action || (webapp.action = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var graphics;
                (function (graphics) {
                    var TGWebPainter = (function (_super) {
                        __extends(TGWebPainter, _super);
                        function TGWebPainter(ctx) {
                            var _this = _super.call(this) || this;
                            _this.style = 0;
                            _this.ctx = null;
                            _this.font = null;
                            _this.background = null;
                            _this.foreground = null;
                            _this.antialias = false;
                            _this.ctx = ctx;
                            _this.font = new org.herac.tg.webapp.graphics.TGWebFont("sans-serif", 9, false, false);
                            _this.foreground = new org.herac.tg.webapp.graphics.TGWebColor(0, 0, 0);
                            _this.background = new org.herac.tg.webapp.graphics.TGWebColor(255, 255, 255);
                            return _this;
                        }
                        TGWebPainter.prototype.initPath$int = function (style) {
                            this.style = style;
                            this.ctx.beginPath();
                            this.setAntialias(true);
                        };
                        TGWebPainter.prototype.initPath = function (style) {
                            if (((typeof style === 'number') || style === null)) {
                                return this.initPath$int(style);
                            }
                            else if (style === undefined) {
                                return this.initPath$();
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGWebPainter.prototype.initPath$ = function () {
                            this.initPath$int(org.herac.tuxguitar.graphics.TGPainter.PATH_DRAW);
                        };
                        TGWebPainter.prototype.closePath = function () {
                            if ((this.style & org.herac.tuxguitar.graphics.TGPainter.PATH_DRAW) !== 0) {
                                this.ctx.strokeStyle = this.foreground.createHandle();
                                this.ctx.stroke();
                            }
                            if ((this.style & org.herac.tuxguitar.graphics.TGPainter.PATH_FILL) !== 0) {
                                this.ctx.fillStyle = this.background.createHandle();
                                this.ctx.fill();
                            }
                            this.style = 0;
                            this.setAntialias(true);
                        };
                        TGWebPainter.prototype.dispose = function () {
                            this.ctx = null;
                        };
                        TGWebPainter.prototype.isDisposed = function () {
                            return (this.ctx == null);
                        };
                        TGWebPainter.prototype.cubicTo = function (xc1, yc1, xc2, yc2, x1, y1) {
                            this.ctx.bezierCurveTo(this.pos(xc1), this.pos(yc1), this.pos(xc2), this.pos(yc2), this.pos(x1), this.pos(y1));
                        };
                        TGWebPainter.prototype.lineTo = function (x, y) {
                            this.ctx.lineTo(this.pos(x), this.pos(y));
                        };
                        TGWebPainter.prototype.moveTo = function (x, y) {
                            this.ctx.moveTo(this.pos(x), this.pos(y));
                        };
                        TGWebPainter.prototype.addCircle = function (x, y, width) {
                            this.ctx.arc(x, y, this.pos(width / 2), 0, 360);
                        };
                        TGWebPainter.prototype.addRectangle = function (x, y, width, height) {
                            this.ctx.moveTo(this.pos(x), this.pos(y));
                            this.ctx.rect(this.pos(x), this.pos(y), this.pos(width), this.pos(height));
                        };
                        TGWebPainter.prototype.drawString$java_lang_String$float$float = function (string, x, y) {
                            this.drawString$java_lang_String$float$float$boolean(string, x, y, false);
                        };
                        TGWebPainter.prototype.drawString$java_lang_String$float$float$boolean = function (string, x, y, isTransparent) {
                            this.ctx.font = this.font.createHandle();
                            this.ctx.fillStyle = this.foreground.createHandle();
                            this.ctx.fillText(string, x, y);
                        };
                        TGWebPainter.prototype.drawString = function (string, x, y, isTransparent) {
                            if (((typeof string === 'string') || string === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof isTransparent === 'boolean') || isTransparent === null)) {
                                return this.drawString$java_lang_String$float$float$boolean(string, x, y, isTransparent);
                            }
                            else if (((typeof string === 'string') || string === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && isTransparent === undefined) {
                                return this.drawString$java_lang_String$float$float(string, x, y);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGWebPainter.prototype.setFont = function (font) {
                            this.font = new org.herac.tg.webapp.graphics.TGWebFont(font);
                        };
                        TGWebPainter.prototype.setBackground = function (color) {
                            this.background = color;
                        };
                        TGWebPainter.prototype.setForeground = function (color) {
                            this.foreground = color;
                        };
                        TGWebPainter.prototype.setLineWidth = function (lineWidth) {
                            this.ctx.lineWidth = (lineWidth === org.herac.tuxguitar.graphics.TGPainter.THINNEST_LINE_WIDTH ? 1.0 : lineWidth);
                        };
                        TGWebPainter.prototype.setLineStyleSolid = function () {
                        };
                        TGWebPainter.prototype.setLineStyleDot = function () {
                        };
                        TGWebPainter.prototype.setLineStyleDash = function () {
                        };
                        TGWebPainter.prototype.setLineStyleDashDot = function () {
                        };
                        TGWebPainter.prototype.getFontSize = function () {
                            return this.font.getHeight();
                        };
                        TGWebPainter.prototype.getFMBaseLine = function () {
                            return 0;
                        };
                        TGWebPainter.prototype.getFMTopLine = function () {
                            return (this.getFontSize() * 0.7);
                        };
                        TGWebPainter.prototype.getFMMiddleLine = function () {
                            return ((this.getFMTopLine() - this.getFMBaseLine()) / 2.0);
                        };
                        TGWebPainter.prototype.getFMHeight = function () {
                            return (this.getFMTopLine() - this.getFMBaseLine());
                        };
                        TGWebPainter.prototype.getFMWidth = function (text) {
                            this.ctx.font = this.font.createHandle();
                            return Math.round(this.ctx.measureText(text).width);
                        };
                        TGWebPainter.prototype.setAlpha = function (alpha) {
                            this.ctx.globalAlpha = alpha;
                        };
                        TGWebPainter.prototype.setAntialias = function (enabled) {
                            this.antialias = enabled;
                        };
                        TGWebPainter.prototype.setAdvanced = function (advanced) {
                            this.setAntialias(advanced);
                        };
                        TGWebPainter.prototype.drawImage$org_herac_tuxguitar_graphics_TGImage$float$float$float$float$float$float$float$float = function (image, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight) {
                        };
                        TGWebPainter.prototype.drawImage = function (image, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight) {
                            if (((image != null && (image["__interfaces"] != null && image["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGImage") >= 0 || image.constructor != null && image.constructor["__interfaces"] != null && image.constructor["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGImage") >= 0)) || image === null) && ((typeof srcX === 'number') || srcX === null) && ((typeof srcY === 'number') || srcY === null) && ((typeof srcWidth === 'number') || srcWidth === null) && ((typeof srcHeight === 'number') || srcHeight === null) && ((typeof destX === 'number') || destX === null) && ((typeof destY === 'number') || destY === null) && ((typeof destWidth === 'number') || destWidth === null) && ((typeof destHeight === 'number') || destHeight === null)) {
                                return this.drawImage$org_herac_tuxguitar_graphics_TGImage$float$float$float$float$float$float$float$float(image, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight);
                            }
                            else if (((image != null && (image["__interfaces"] != null && image["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGImage") >= 0 || image.constructor != null && image.constructor["__interfaces"] != null && image.constructor["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGImage") >= 0)) || image === null) && ((typeof srcX === 'number') || srcX === null) && ((typeof srcY === 'number') || srcY === null) && srcWidth === undefined && srcHeight === undefined && destX === undefined && destY === undefined && destWidth === undefined && destHeight === undefined) {
                                return this.drawImage$org_herac_tuxguitar_graphics_TGImage$float$float(image, srcX, srcY);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGWebPainter.prototype.drawImage$org_herac_tuxguitar_graphics_TGImage$float$float = function (image, x, y) {
                        };
                        TGWebPainter.prototype.pos = function (pos) {
                            return (this.antialias ? pos : (Math.round(pos) - (this.ctx.lineWidth / 2.0)));
                        };
                        return TGWebPainter;
                    }(org.herac.tg.webapp.graphics.TGWebResourceFactory));
                    graphics.TGWebPainter = TGWebPainter;
                    TGWebPainter["__class"] = "org.herac.tg.webapp.graphics.TGWebPainter";
                    TGWebPainter["__interfaces"] = ["org.herac.tuxguitar.graphics.TGPainter", "org.herac.tuxguitar.graphics.TGResource", "org.herac.tuxguitar.graphics.TGResourceFactory"];
                })(graphics = webapp.graphics || (webapp.graphics = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var painters;
                    (function (painters) {
                        var TGClefPainter = (function () {
                            function TGClefPainter() {
                            }
                            TGClefPainter.TREBLE_MODEL_$LI$ = function () { if (TGClefPainter.TREBLE_MODEL == null)
                                TGClefPainter.TREBLE_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(0.9706216, -0.9855771), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.99023926, -0.99538594, 0.99350905, -0.99538594, 1.0131269, -0.99538594), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0392835, -0.99211615, 1.055632, -0.9823073, 1.0915977, -0.9430719), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3270102, -0.7011198, 1.5231876, -0.26953024, 1.572232, 0.09666765), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.578771, 0.1555208, 1.578771, 0.29284477, 1.572232, 0.35496712), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.5362663, 0.6917379, 1.3956721, 0.9990827, 1.0719799, 1.4404812), new org.herac.tuxguitar.graphics.command.TGLineTo(1.0262054, 1.502604), new org.herac.tuxguitar.graphics.command.TGLineTo(1.0523622, 1.577805), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1144851, 1.7576342, 1.1864164, 1.9766989, 1.2321913, 2.1369102), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.24527, 2.1761456, 1.2550789, 2.208842, 1.2550789, 2.212112), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2550789, 2.212112, 1.2779659, 2.212112, 1.3008534, 2.2153816), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.4152898, 2.22519, 1.5133789, 2.2513473, 1.6147372, 2.3003914), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.6964773, 2.3428962, 1.7684091, 2.3919404, 1.8370711, 2.457333), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.9122725, 2.5325344, 1.9613168, 2.601196, 2.0070913, 2.6960156), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.0757532, 2.8333395, 2.10518, 2.9772024, 2.10191, 3.121066), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.0986407, 3.2126155, 2.085562, 3.2812777, 2.0561357, 3.3662882), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.0169, 3.4905329, 1.9449685, 3.60497, 1.8468798, 3.7030587), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.7618695, 3.7880688, 1.6833986, 3.8403826, 1.578771, 3.8828878), new org.herac.tuxguitar.graphics.command.TGLineTo(1.5395356, 3.8992357), new org.herac.tuxguitar.graphics.command.TGLineTo(1.5395356, 4.016942), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.5395356, 4.183693, 1.5297267, 4.37987, 1.516648, 4.497576), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.50357, 4.6185517, 1.4708736, 4.732989, 1.4185596, 4.837617), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2812357, 5.1155343, 1.0392835, 5.262667, 0.7679054, 5.2365108), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.46056065, 5.2070837, 0.21207006, 4.997828, 0.14994715, 4.716641), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.12052006, 4.589125, 0.13359922, 4.491037, 0.18591277, 4.409296), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.25457475, 4.3013988, 0.38535964, 4.2392764, 0.5128747, 4.2425456), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6632773, 4.2490854, 0.78425336, 4.3667912, 0.80714035, 4.5302725), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.8234888, 4.661057, 0.7679054, 4.782033, 0.6632773, 4.8474255), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6044242, 4.8833914, 0.52268356, 4.8997393, 0.46056065, 4.8899307), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.45075235, 4.8899307, 0.44094297, 4.8866606, 0.44094297, 4.8899307), new org.herac.tuxguitar.graphics.command.TGLineTo(0.48017892, 4.929166), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.55211014, 5.0010977, 0.63385075, 5.0468726, 0.7384789, 5.06976), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.76136583, 5.0730295, 0.78098357, 5.0730295, 0.8332976, 5.0730295), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.89215076, 5.0730295, 0.8986898, 5.0730295, 0.9313861, 5.0664897), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.97716117, 5.0534115, 1.0163965, 5.0370636, 1.0523622, 5.0174456), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2158434, 4.919357, 1.3270102, 4.716641, 1.3564366, 4.47142), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3662455, 4.37987, 1.3760543, 4.183693, 1.3760543, 4.0398297), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3760543, 3.9450107, 1.3760543, 3.9384713, 1.3695153, 3.9384713), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3564366, 3.9450107, 1.2877747, 3.95155, 1.2387304, 3.9548192), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1766075, 3.9580889, 1.0719799, 3.9580889, 1.0229356, 3.95155), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.8300278, 3.9286623, 0.65346843, 3.8632698, 0.4997966, 3.755372), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.2709232, 3.595161, 0.10744194, 3.3564782, 0.038779963, 3.0818305), new org.herac.tuxguitar.graphics.command.TGCubicTo(-0.04949972, 2.7385209, 0.012623194, 2.3723233, 0.22841798, 1.9865077), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.31996745, 1.8262968, 0.40824714, 1.6955118, 0.6273117, 1.4045155), new org.herac.tuxguitar.graphics.command.TGLineTo(0.751557, 1.2377651), new org.herac.tuxguitar.graphics.command.TGLineTo(0.72866946, 1.1756423), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.5717278, 0.7604004, 0.51941377, 0.52171814, 0.5030659, 0.17513847), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.49652684, 0.024735928, 0.5030659, -0.102779746, 0.52268356, -0.2074073), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.5717278, -0.48205525, 0.69924295, -0.72727656, 0.8986898, -0.92345417), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.9379252, -0.9626896, 0.9542737, -0.9757682, 0.9706216, -0.9855771), new org.herac.tuxguitar.graphics.command.TGMoveTo(1.2289215, -0.4264719), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1962258, -0.48205525, 1.2027647, -0.478786, 1.1733383, -0.45916772), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0817888, -0.40358436, 0.98697, -0.3185745, 0.9183075, -0.23356462), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.77771425, -0.05373496, 0.69924295, 0.1555208, 0.68943465, 0.38112438), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6861648, 0.4726739, 0.69597363, 0.5315269, 0.7384789, 0.6721202), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.77117467, 0.7865572, 0.8627241, 1.0644748, 0.86926377, 1.0710139), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.86926377, 1.0742836, 0.88888097, 1.0513968, 0.90849864, 1.0219696), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1341028, 0.6982775, 1.2550789, 0.43343806, 1.3008534, 0.16859889), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3106622, 0.09993696, 1.3172013, 0.044353604, 1.320471, -0.03411722), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3237408, -0.2139464, 1.3041232, -0.30222607, 1.2289215, -0.4264719), new org.herac.tuxguitar.graphics.command.TGMoveTo(0.9477346, 1.7739828), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.9281169, 1.71186, 0.90849864, 1.6628156, 0.90849864, 1.6628156), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.9052294, 1.6628156, 0.7679054, 1.8459139, 0.7090518, 1.9276547), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.5161445, 2.1990333, 0.39843827, 2.4180977, 0.32977578, 2.6338923), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.2840013, 2.7679467, 0.26438358, 2.8921926, 0.25784454, 3.0295167), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.25784454, 3.1047182, 0.26111433, 3.1504927, 0.27419245, 3.2060761), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.34939402, 3.4970722, 0.6600081, 3.7357545, 1.0262054, 3.7880688), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0817888, 3.7946076, 1.2387304, 3.7946076, 1.3073924, 3.7880688), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3760543, 3.7782598, 1.3695153, 3.7815294, 1.3662455, 3.7521029), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3466283, 3.4414887, 1.320471, 3.2518506, 1.2681575, 2.9706633), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2485392, 2.8529572, 1.192956, 2.604466, 1.1896861, 2.601196), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1864164, 2.5979269, 1.1242939, 2.604466, 1.0883284, 2.614275), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0425533, 2.6240838, 1.0131269, 2.6338923, 0.9738914, 2.6535103), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.76136583, 2.7614079, 0.69924295, 3.0066295, 0.8332976, 3.2060761), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.85618514, 3.2387724, 0.9150382, 3.2976255, 0.9510039, 3.3205128), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.96408254, 3.3303218, 0.99350905, 3.3499393, 1.0131269, 3.3597484), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0425533, 3.3760962, 1.0490924, 3.3826356, 1.055632, 3.3957143), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0817888, 3.4382195, 1.0654408, 3.4905329, 1.0163965, 3.5134206), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.99023926, 3.5264988, 0.9706216, 3.5232296, 0.9183075, 3.4970722), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.79079294, 3.4349499, 0.69597363, 3.3499393, 0.6273117, 3.2453117), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.4997966, 3.0491343, 0.48344818, 2.7973735, 0.5880763, 2.5848482), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.67962575, 2.4017498, 0.84310645, 2.2775042, 1.0523622, 2.2317295), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0719799, 2.22519, 1.0883284, 2.2219207, 1.0883284, 2.2219207), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0915977, 2.2186508, 1.0000482, 1.9211154, 0.9477346, 1.7739828), new org.herac.tuxguitar.graphics.command.TGMoveTo(1.3924028, 2.617545), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.382594, 2.617545, 1.3727851, 2.614275, 1.3695153, 2.614275), new org.herac.tuxguitar.graphics.command.TGLineTo(1.3597065, 2.611005), new org.herac.tuxguitar.graphics.command.TGLineTo(1.3760543, 2.6796675), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.4512559, 3.0098987, 1.5068393, 3.369557, 1.526457, 3.6736321), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.5297267, 3.7063284, 1.5297267, 3.7324853, 1.5297267, 3.7324853), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.5329965, 3.7324853, 1.5755012, 3.7128677, 1.5983888, 3.6965194), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.6539721, 3.6638227, 1.7062862, 3.6147785, 1.7487912, 3.559195), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.8501498, 3.4251404, 1.8861152, 3.25839, 1.8468798, 3.0883694), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.8174533, 2.9510455, 1.7389826, 2.8235304, 1.6278152, 2.735251), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.5591533, 2.6829367, 1.4676039, 2.6371622, 1.3924028, 2.617545)); return TGClefPainter.TREBLE_MODEL; };
                            ;
                            TGClefPainter.BASS_MODEL_$LI$ = function () { if (TGClefPainter.BASS_MODEL == null)
                                TGClefPainter.BASS_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(0.71937084, 0.16147426), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.75454587, 0.15827677, 0.8920496, 0.16147426, 0.94321334, 0.16467176), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3429334, 0.20944051, 1.6147422, 0.4077018, 1.7042797, 0.72108173), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.7266634, 0.8074205, 1.7362571, 0.87137556, 1.7330583, 0.9800993), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.7330583, 1.1176031, 1.7170696, 1.2327217, 1.6723021, 1.3542367), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.5092158, 1.8370967, 1.0327508, 2.236817, 0.16296211, 2.6205468), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.12778586, 2.6365356, 0.095808364, 2.6525242, 0.092610866, 2.655722), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.073424615, 2.668513, 0.054238364, 2.6717105, 0.035052113, 2.6621182), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.019063365, 2.655722, 0.012667115, 2.6493268, 0.006272115, 2.633338), new org.herac.tuxguitar.graphics.command.TGCubicTo(-0.0033216353, 2.6173494, -1.2413526E-4, 2.6013606, 0.006272115, 2.5885694), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.012667115, 2.575778, 0.025458366, 2.5661855, 0.095808364, 2.5246143), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.3804096, 2.355133, 0.58826333, 2.2048392, 0.7641396, 2.0513468), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.8185009, 2.000183, 0.9208296, 1.8978542, 0.96559834, 1.8466904), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1606609, 1.6196505, 1.2629896, 1.3990055, 1.2981646, 1.1431843), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3045596, 1.0824268, 1.3045596, 0.93852806, 1.2981646, 0.87777054), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2853733, 0.7850368, 1.2629896, 0.69869673, 1.2342097, 0.6219505), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2118247, 0.5707868, 1.2054296, 0.554798, 1.1798471, 0.51322675), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0871121, 0.35653678, 0.94641083, 0.27019802, 0.7897221, 0.27019802), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.63622963, 0.27019802, 0.5083196, 0.35653678, 0.42517713, 0.51962304), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.4123871, 0.5452043, 0.3804096, 0.6283468, 0.3804096, 0.63154423), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.3804096, 0.6347418, 0.39319962, 0.63154423, 0.40599087, 0.63154423), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.4795396, 0.6283468, 0.55948335, 0.65712553, 0.62024087, 0.705093), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.7353596, 0.80422306, 0.7673371, 0.9641105, 0.6969871, 1.1080092), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.64902085, 1.2135355, 0.54669213, 1.280688, 0.43477085, 1.2902818), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.27808085, 1.2998742, 0.12458836, 1.1975467, 0.073424615, 1.0504493), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.057435866, 1.002483, 0.054238364, 0.95451677, 0.060633365, 0.87777054), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.08941337, 0.55799556, 0.29406962, 0.28618675, 0.5754721, 0.19345176), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.62343836, 0.17746301, 0.6714046, 0.16786925, 0.71937084, 0.16147426), new org.herac.tuxguitar.graphics.command.TGMoveTo(1.9632971, 0.462063), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.0144608, 0.44607428, 2.0752184, 0.462063, 2.1167896, 0.5004368), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.1455696, 0.53241426, 2.1615584, 0.57398427, 2.1615584, 0.6155555), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.1615584, 0.7018943, 2.091207, 0.7722455, 2.0048683, 0.7722455), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.9153309, 0.7722455, 1.8449808, 0.7018943, 1.8449808, 0.6155555), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.8449808, 0.54200673, 1.8929471, 0.48124927, 1.9632971, 0.462063), new org.herac.tuxguitar.graphics.command.TGMoveTo(1.9632971, 1.2583042), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.0144608, 1.2423155, 2.0752184, 1.2583042, 2.1167896, 1.2966768), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.155162, 1.338248, 2.171151, 1.3958068, 2.155162, 1.4469718), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.1391733, 1.5205193, 2.0784159, 1.5684855, 2.0048683, 1.5684855), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.9153309, 1.5684855, 1.8449808, 1.4981354, 1.8449808, 1.4117955), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.8449808, 1.338248, 1.8929471, 1.2774905, 1.9632971, 1.2583042)); return TGClefPainter.BASS_MODEL; };
                            ;
                            TGClefPainter.ALTO_MODEL_$LI$ = function () { if (TGClefPainter.ALTO_MODEL == null)
                                TGClefPainter.ALTO_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(0.026545623, 0.5470838), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.03553187, 0.5410925, 0.053504374, 0.5410925, 0.21525937, 0.5410925), new org.herac.tuxguitar.graphics.command.TGLineTo(0.39498562, 0.5410925), new org.herac.tuxguitar.graphics.command.TGLineTo(0.40397188, 0.55007875), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.40996313, 0.55607, 0.41595438, 0.56206, 0.41894937, 0.5680513), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.42494062, 0.5800325, 0.42494062, 0.69086504, 0.42494062, 2.038815), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.42494062, 3.386765, 0.42494062, 3.4975975, 0.41894937, 3.5095787), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.41595438, 3.51557, 0.40996313, 3.52156, 0.40397188, 3.5275512), new org.herac.tuxguitar.graphics.command.TGLineTo(0.39498562, 3.5335424), new org.herac.tuxguitar.graphics.command.TGLineTo(0.21226312, 3.5335424), new org.herac.tuxguitar.graphics.command.TGLineTo(0.029541872, 3.5335424), new org.herac.tuxguitar.graphics.command.TGLineTo(0.020554373, 3.5275512), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.014564373, 3.52156, 0.008573122, 3.51557, 0.0055781226, 3.5095787), new org.herac.tuxguitar.graphics.command.TGCubicTo(-4.131275E-4, 3.4975975, -4.131275E-4, 3.386765, -4.131275E-4, 2.03582), new org.herac.tuxguitar.graphics.command.TGLineTo(0.0025818725, 0.5710463), new org.herac.tuxguitar.graphics.command.TGLineTo(0.008573122, 0.56206), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.014564373, 0.55607, 0.020554373, 0.55007875, 0.026545623, 0.5470838), new org.herac.tuxguitar.graphics.command.TGMoveTo(0.6016719, 0.5470838), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6106581, 0.5410925, 0.6196444, 0.5410925, 0.6525944, 0.5410925), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6915344, 0.5410925, 0.6945306, 0.5440875, 0.7035169, 0.55007875), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.72748065, 0.5680513, 0.7244844, 0.49915627, 0.7244844, 1.2779713), new org.herac.tuxguitar.graphics.command.TGLineTo(0.7244844, 1.9759114), new org.herac.tuxguitar.graphics.command.TGLineTo(0.74245685, 1.9609337), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.8173431, 1.8890426, 0.8862381, 1.7782114, 0.92517936, 1.6793613), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.9491431, 1.6074712, 0.9641206, 1.5265937, 0.9701106, 1.4397264), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.9701106, 1.400785, 0.97310686, 1.3947937, 0.97909814, 1.3858075), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.9850881, 1.3768213, 1.0060569, 1.36484, 1.0210332, 1.36484), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0360106, 1.36484, 1.0539831, 1.3738263, 1.0629693, 1.3828125), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0689607, 1.3947937, 1.0719569, 1.39779, 1.0749519, 1.4547038), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0839381, 1.5775163, 1.1258744, 1.6793613, 1.1947694, 1.7512524), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2636644, 1.8171525, 1.3445419, 1.8441112, 1.4433919, 1.8321288), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.5122869, 1.8231425, 1.5632094, 1.802175, 1.6021507, 1.7632337), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.6440868, 1.7212975, 1.6680493, 1.6733713, 1.6860231, 1.598485), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.7039956, 1.532585, 1.7099856, 1.466685, 1.7129818, 1.3318901), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.7189732, 0.86759627, 1.6321044, 0.67888254, 1.3894731, 0.6459325), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2936194, 0.63395125, 1.2307143, 0.6519238, 1.2037556, 0.696855), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1977656, 0.7088375, 1.1977656, 0.7118325, 1.1977656, 0.7357963), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1977656, 0.76275504, 1.1977656, 0.76575124, 1.2067518, 0.7837238), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2157382, 0.8016963, 1.2217281, 0.81068254, 1.2576743, 0.84662753), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2936194, 0.8795775, 1.2996106, 0.89156, 1.3085968, 0.9065363), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3295643, 0.95146877, 1.3205781, 1.0173688, 1.2876282, 1.0772775), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2756469, 1.098245, 1.2337106, 1.1401813, 1.2127419, 1.1521637), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1378556, 1.197095, 1.0509881, 1.197095, 0.9761019, 1.1521637), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.9551344, 1.1401813, 0.9131981, 1.098245, 0.9012156, 1.0772775), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.8712619, 1.026355, 0.8622756, 0.9724363, 0.8712619, 0.90354127), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.8862381, 0.81667376, 0.92517936, 0.74178755, 0.9880844, 0.6758875), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0539831, 0.6129825, 1.1348606, 0.5710463, 1.2307143, 0.55007875), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2876282, 0.53809625, 1.3984594, 0.53809625, 1.4943144, 0.55307376), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.8477769, 0.6039963, 2.0364895, 0.81966877, 2.0634482, 1.197095), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.0724356, 1.3139175, 2.0634482, 1.39779, 2.0364895, 1.4846575), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.9526169, 1.7302837, 1.7279594, 1.9070151, 1.4583694, 1.933975), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3715006, 1.9429612, 1.3475369, 1.93697, 1.2666606, 1.8830512), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2187331, 1.8501024, 1.1947694, 1.83812, 1.1708056, 1.8321288), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1348606, 1.8231425, 1.0989156, 1.8321288, 1.0719569, 1.8560925), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0390068, 1.8830512, 1.0240294, 1.939965, 1.0240294, 2.038815), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0240294, 2.137665, 1.0390068, 2.194579, 1.0719569, 2.2215376), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0989156, 2.2455013, 1.1348606, 2.2544875, 1.1708056, 2.2455013), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1947694, 2.23951, 1.2187331, 2.2275276, 1.2666606, 2.194579), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3475369, 2.14066, 1.3715006, 2.1346688, 1.4583694, 2.143655), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.7279594, 2.170615, 1.9526169, 2.3473463, 2.0364895, 2.5929725), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.0634482, 2.6798398, 2.0724356, 2.7637124, 2.0634482, 2.8775399), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.0334945, 3.2909112, 1.8178219, 3.5035875, 1.4044507, 3.5335424), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3056006, 3.5395336, 1.2367057, 3.5335424, 1.1678107, 3.5095787), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0330156, 3.4646475, 0.92218435, 3.3568113, 0.88324314, 3.2280061), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.8592794, 3.1381438, 0.8652706, 3.0662525, 0.9012156, 3.0003524), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.9131981, 2.979385, 0.9551344, 2.9374487, 0.9761019, 2.9254663), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0509881, 2.880535, 1.1378556, 2.880535, 1.2127419, 2.9254663), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2337106, 2.9374487, 1.2756469, 2.979385, 1.2876282, 3.0003524), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3205781, 3.0602612, 1.3295643, 3.126161, 1.3085968, 3.1710937), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2996106, 3.18607, 1.2936194, 3.1980524, 1.2576743, 3.2310026), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2217281, 3.2669475, 1.2157382, 3.2759337, 1.2067518, 3.2939062), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1977656, 3.3118787, 1.1977656, 3.314875, 1.1977656, 3.3388388), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1977656, 3.3657975, 1.1977656, 3.3687925, 1.2037556, 3.380775), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2307143, 3.4257061, 1.2936194, 3.4436786, 1.3894731, 3.4316974), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.5362506, 3.4107287, 1.6261132, 3.3328474, 1.6710457, 3.1770837), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.7009994, 3.0752387, 1.7159768, 2.9374487, 1.7129818, 2.74574), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.7099856, 2.610945, 1.7039956, 2.545045, 1.6860231, 2.47615), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.6500769, 2.3323689, 1.5751907, 2.2604775, 1.4433919, 2.2455013), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3445419, 2.2335188, 1.2636644, 2.2604775, 1.1947694, 2.3263776), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1258744, 2.3982687, 1.0839381, 2.5001137, 1.0749519, 2.6229262), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0719569, 2.6798398, 1.0689607, 2.6828363, 1.0629693, 2.6948175), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0539831, 2.7038038, 1.0360106, 2.71279, 1.0210332, 2.71279), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0060569, 2.71279, 0.9850881, 2.7008088, 0.97909814, 2.6918225), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.97310686, 2.6828363, 0.9701106, 2.676845, 0.9701106, 2.6379037), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.9641206, 2.5180862, 0.9401569, 2.4282224, 0.8922294, 2.3233826), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.8562844, 2.2514913, 0.79637563, 2.170615, 0.74245685, 2.1166964), new org.herac.tuxguitar.graphics.command.TGLineTo(0.7244844, 2.1017187), new org.herac.tuxguitar.graphics.command.TGLineTo(0.7244844, 2.7996588), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.7244844, 3.5784738, 0.72748065, 3.5095787, 0.7035169, 3.5275512), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6945306, 3.5335424, 0.6915344, 3.5335424, 0.6495981, 3.5335424), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6076619, 3.5335424, 0.6046669, 3.5335424, 0.59568065, 3.5275512), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.5896894, 3.52156, 0.58369815, 3.51557, 0.58070314, 3.5095787), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.57471186, 3.4975975, 0.57471186, 3.386765, 0.57471186, 2.03582), new org.herac.tuxguitar.graphics.command.TGLineTo(0.5777081, 0.5710463), new org.herac.tuxguitar.graphics.command.TGLineTo(0.58369815, 0.56206), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.5896894, 0.55607, 0.59568065, 0.55007875, 0.6016719, 0.5470838)); return TGClefPainter.ALTO_MODEL; };
                            ;
                            TGClefPainter.TENOR_MODEL_$LI$ = function () { if (TGClefPainter.TENOR_MODEL == null)
                                TGClefPainter.TENOR_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(0.026545623, -0.45291623), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.03553187, -0.45890749, 0.053504374, -0.45890749, 0.21525937, -0.45890749), new org.herac.tuxguitar.graphics.command.TGLineTo(0.39498562, -0.45890749), new org.herac.tuxguitar.graphics.command.TGLineTo(0.40397188, -0.44992122), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.40996313, -0.44392997, 0.41595438, -0.43793997, 0.41894937, -0.43194872), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.42494062, -0.41996747, 0.42494062, -0.30913496, 0.42494062, 1.038815), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.42494062, 2.386765, 0.42494062, 2.4975975, 0.41894937, 2.5095787), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.41595438, 2.51557, 0.40996313, 2.52156, 0.40397188, 2.5275512), new org.herac.tuxguitar.graphics.command.TGLineTo(0.39498562, 2.5335424), new org.herac.tuxguitar.graphics.command.TGLineTo(0.21226312, 2.5335424), new org.herac.tuxguitar.graphics.command.TGLineTo(0.029541872, 2.5335424), new org.herac.tuxguitar.graphics.command.TGLineTo(0.020554373, 2.5275512), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.014564373, 2.52156, 0.008573122, 2.51557, 0.0055781226, 2.5095787), new org.herac.tuxguitar.graphics.command.TGCubicTo(-4.131275E-4, 2.4975975, -4.131275E-4, 2.386765, -4.131275E-4, 1.03582), new org.herac.tuxguitar.graphics.command.TGLineTo(0.0025818725, -0.42895374), new org.herac.tuxguitar.graphics.command.TGLineTo(0.008573122, -0.43793997), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.014564373, -0.44392997, 0.020554373, -0.44992122, 0.026545623, -0.45291623), new org.herac.tuxguitar.graphics.command.TGMoveTo(0.6016719, -0.45291623), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6106581, -0.45890749, 0.6196444, -0.45890749, 0.6525944, -0.45890749), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6915344, -0.45890749, 0.6945306, -0.45591247, 0.7035169, -0.44992122), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.72748065, -0.43194872, 0.7244844, -0.5008437, 0.7244844, 0.27797127), new org.herac.tuxguitar.graphics.command.TGLineTo(0.7244844, 0.9759113), new org.herac.tuxguitar.graphics.command.TGLineTo(0.74245685, 0.96093374), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.8173431, 0.88904256, 0.8862381, 0.7782113, 0.92517936, 0.6793613), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.9491431, 0.6074713, 0.9641206, 0.52659374, 0.9701106, 0.4397263), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.9701106, 0.40078503, 0.97310686, 0.39479375, 0.97909814, 0.3858075), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.9850881, 0.37682128, 1.0060569, 0.36484003, 1.0210332, 0.36484003), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0360106, 0.36484003, 1.0539831, 0.37382627, 1.0629693, 0.3828125), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0689607, 0.39479375, 1.0719569, 0.39779, 1.0749519, 0.45470375), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0839381, 0.57751626, 1.1258744, 0.6793613, 1.1947694, 0.7512525), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2636644, 0.81715256, 1.3445419, 0.84411126, 1.4433919, 0.8321288), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.5122869, 0.82314247, 1.5632094, 0.802175, 1.6021507, 0.7632337), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.6440868, 0.72129756, 1.6680493, 0.67337126, 1.6860231, 0.59848505), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.7039956, 0.532585, 1.7099856, 0.466685, 1.7129818, 0.33189005), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.7189732, -0.13240373, 1.6321044, -0.32111746, 1.3894731, -0.35406747), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2936194, -0.36604872, 1.2307143, -0.34807622, 1.2037556, -0.303145), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1977656, -0.2911625, 1.1977656, -0.28816748, 1.1977656, -0.26420373), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1977656, -0.23724498, 1.1977656, -0.23424873, 1.2067518, -0.21627623), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2157382, -0.19830373, 1.2217281, -0.18931746, 1.2576743, -0.15337247), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2936194, -0.12042248, 1.2996106, -0.10843998, 1.3085968, -0.09346372), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3295643, -0.048531234, 1.3205781, 0.017368764, 1.2876282, 0.07727754), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2756469, 0.098245025, 1.2337106, 0.14018124, 1.2127419, 0.15216374), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1378556, 0.19709504, 1.0509881, 0.19709504, 0.9761019, 0.15216374), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.9551344, 0.14018124, 0.9131981, 0.098245025, 0.9012156, 0.07727754), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.8712619, 0.026355028, 0.8622756, -0.027563721, 0.8712619, -0.09645873), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.8862381, -0.18332621, 0.92517936, -0.25821248, 0.9880844, -0.32411247), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0539831, -0.3870175, 1.1348606, -0.42895374, 1.2307143, -0.44992122), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2876282, -0.46190372, 1.3984594, -0.46190372, 1.4943144, -0.44692624), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.8477769, -0.39600372, 2.0364895, -0.18033123, 2.0634482, 0.19709504), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.0724356, 0.31391752, 2.0634482, 0.39779, 2.0364895, 0.48465753), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.9526169, 0.7302838, 1.7279594, 0.907015, 1.4583694, 0.93397504), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3715006, 0.9429613, 1.3475369, 0.93697006, 1.2666606, 0.8830512), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2187331, 0.8501025, 1.1947694, 0.83812004, 1.1708056, 0.8321288), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1348606, 0.82314247, 1.0989156, 0.8321288, 1.0719569, 0.8560925), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0390068, 0.8830512, 1.0240294, 0.93996507, 1.0240294, 1.038815), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0240294, 1.137665, 1.0390068, 1.1945789, 1.0719569, 1.2215376), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0989156, 1.2455013, 1.1348606, 1.2544875, 1.1708056, 1.2455013), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1947694, 1.23951, 1.2187331, 1.2275276, 1.2666606, 1.1945789), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3475369, 1.14066, 1.3715006, 1.1346688, 1.4583694, 1.1436551), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.7279594, 1.170615, 1.9526169, 1.3473463, 2.0364895, 1.5929725), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.0634482, 1.6798398, 2.0724356, 1.7637124, 2.0634482, 1.8775399), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.0334945, 2.2909112, 1.8178219, 2.5035875, 1.4044507, 2.5335424), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3056006, 2.5395336, 1.2367057, 2.5335424, 1.1678107, 2.5095787), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0330156, 2.4646475, 0.92218435, 2.3568113, 0.88324314, 2.2280061), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.8592794, 2.1381438, 0.8652706, 2.0662525, 0.9012156, 2.0003524), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.9131981, 1.9793849, 0.9551344, 1.9374487, 0.9761019, 1.9254663), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0509881, 1.8805349, 1.1378556, 1.8805349, 1.2127419, 1.9254663), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2337106, 1.9374487, 1.2756469, 1.9793849, 1.2876282, 2.0003524), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3205781, 2.0602612, 1.3295643, 2.126161, 1.3085968, 2.1710937), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2996106, 2.18607, 1.2936194, 2.1980524, 1.2576743, 2.2310026), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2217281, 2.2669475, 1.2157382, 2.2759337, 1.2067518, 2.2939062), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1977656, 2.3118787, 1.1977656, 2.314875, 1.1977656, 2.3388388), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1977656, 2.3657975, 1.1977656, 2.3687925, 1.2037556, 2.380775), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2307143, 2.4257061, 1.2936194, 2.4436786, 1.3894731, 2.4316974), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.5362506, 2.4107287, 1.6261132, 2.3328474, 1.6710457, 2.1770837), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.7009994, 2.0752387, 1.7159768, 1.9374487, 1.7129818, 1.7457399), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.7099856, 1.610945, 1.7039956, 1.5450449, 1.6860231, 1.47615), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.6500769, 1.3323689, 1.5751907, 1.2604775, 1.4433919, 1.2455013), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.3445419, 1.2335188, 1.2636644, 1.2604775, 1.1947694, 1.3263776), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1258744, 1.3982687, 1.0839381, 1.5001137, 1.0749519, 1.6229262), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0719569, 1.6798398, 1.0689607, 1.6828363, 1.0629693, 1.6948175), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0539831, 1.7038038, 1.0360106, 1.71279, 1.0210332, 1.71279), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.0060569, 1.71279, 0.9850881, 1.7008088, 0.97909814, 1.6918225), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.97310686, 1.6828363, 0.9701106, 1.6768451, 0.9701106, 1.6379037), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.9641206, 1.5180862, 0.9401569, 1.4282224, 0.8922294, 1.3233826), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.8562844, 1.2514913, 0.79637563, 1.170615, 0.74245685, 1.1166964), new org.herac.tuxguitar.graphics.command.TGLineTo(0.7244844, 1.1017187), new org.herac.tuxguitar.graphics.command.TGLineTo(0.7244844, 1.7996588), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.7244844, 2.5784738, 0.72748065, 2.5095787, 0.7035169, 2.5275512), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6945306, 2.5335424, 0.6915344, 2.5335424, 0.6495981, 2.5335424), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6076619, 2.5335424, 0.6046669, 2.5335424, 0.59568065, 2.5275512), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.5896894, 2.52156, 0.58369815, 2.51557, 0.58070314, 2.5095787), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.57471186, 2.4975975, 0.57471186, 2.386765, 0.57471186, 1.03582), new org.herac.tuxguitar.graphics.command.TGLineTo(0.5777081, -0.42895374), new org.herac.tuxguitar.graphics.command.TGLineTo(0.58369815, -0.43793997), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.5896894, -0.44392997, 0.59568065, -0.44992122, 0.6016719, -0.45291623)); return TGClefPainter.TENOR_MODEL; };
                            ;
                            TGClefPainter.paintTreble = function (painter, x, y, scale) {
                                TGClefPainter.TREBLE_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            TGClefPainter.paintBass = function (painter, x, y, scale) {
                                TGClefPainter.BASS_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            TGClefPainter.paintAlto = function (painter, x, y, scale) {
                                TGClefPainter.ALTO_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            TGClefPainter.paintTenor = function (painter, x, y, scale) {
                                TGClefPainter.TENOR_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            return TGClefPainter;
                        }());
                        painters.TGClefPainter = TGClefPainter;
                        TGClefPainter["__class"] = "org.herac.tuxguitar.graphics.control.painters.TGClefPainter";
                    })(painters = control.painters || (control.painters = {}));
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var painters;
                    (function (painters) {
                        var TGKeySignaturePainter = (function () {
                            function TGKeySignaturePainter() {
                            }
                            TGKeySignaturePainter.SHARP_MODEL_$LI$ = function () { if (TGKeySignaturePainter.SHARP_MODEL == null)
                                TGKeySignaturePainter.SHARP_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(0.4330491, -0.79610115), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.44892004, -0.80517024, 0.47386006, -0.7983684, 0.48292914, -0.7779629), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.48746368, -0.76889384, 0.48746368, -0.76209205, 0.48746368, -0.60338295), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.48746368, -0.51042473, 0.48746368, -0.43560475, 0.48973095, -0.43560475), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.48973095, -0.43560475, 0.51013637, -0.44467384, 0.5350764, -0.45374292), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.5872237, -0.47414836, 0.5940255, -0.47641566, 0.6076291, -0.46507928), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.62350005, -0.45374292, 0.62350005, -0.45147565, 0.62350005, -0.36078474), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.62350005, -0.2836975, 0.62350005, -0.27689564, 0.6189655, -0.2700938), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6166982, -0.26555926, 0.61216366, -0.2610247, 0.6098964, -0.25875747), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6053619, -0.25649017, 0.5781546, -0.24288653, 0.54641277, -0.2315502), new org.herac.tuxguitar.graphics.command.TGLineTo(0.48973095, -0.20661019), new org.herac.tuxguitar.graphics.command.TGLineTo(0.48746368, -0.022961069), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.48746368, 0.07679899, 0.48746368, 0.16068806, 0.48973095, 0.16068806), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.48973095, 0.16068806, 0.51013637, 0.15161897, 0.5350764, 0.14254989), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.5872237, 0.12214436, 0.5940255, 0.119877115, 0.6076291, 0.13121344), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.62350005, 0.14254989, 0.62350005, 0.14481713, 0.62350005, 0.23550804), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.62350005, 0.31259543, 0.62350005, 0.31939715, 0.6189655, 0.326199), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6166982, 0.3307336, 0.61216366, 0.33526808, 0.6098964, 0.33753532), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6053619, 0.33980268, 0.5781546, 0.35340625, 0.54641277, 0.36474258), new org.herac.tuxguitar.graphics.command.TGLineTo(0.48973095, 0.3896826), new org.herac.tuxguitar.graphics.command.TGLineTo(0.48746368, 0.5801335), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.48746368, 0.75244635, 0.4851964, 0.77285165, 0.48292914, 0.7796536), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.4670582, 0.806861, 0.42851457, 0.806861, 0.4126437, 0.7796536), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.41037643, 0.77285165, 0.40810916, 0.7547135, 0.40810916, 0.5960044), new org.herac.tuxguitar.graphics.command.TGLineTo(0.40810916, 0.42142445), new org.herac.tuxguitar.graphics.command.TGLineTo(0.31061637, 0.45996803), new org.herac.tuxguitar.graphics.command.TGLineTo(0.21539094, 0.49851173), new org.herac.tuxguitar.graphics.command.TGLineTo(0.21539094, 0.6821607), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.21539094, 0.8771464, 0.21539094, 0.8726117, 0.20405458, 0.88394815), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.19952002, 0.89075, 0.18364911, 0.8975517, 0.1768473, 0.8975517), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.1677782, 0.8975517, 0.15190728, 0.89075, 0.14737274, 0.88394815), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.13603638, 0.8726117, 0.13603638, 0.8771464, 0.13603638, 0.70029896), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.13603638, 0.6073409, 0.13603638, 0.53252083, 0.1337691, 0.53252083), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.1337691, 0.53252083, 0.113363646, 0.5415899, 0.08842365, 0.550659), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.036276367, 0.5710644, 0.029474549, 0.5733318, 0.01587091, 0.5619953), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.0, 0.550659, 0.0, 0.54839164, 0.0, 0.4577008), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.0, 0.3806135, 0.0, 0.37381178, 0.004534546, 0.36700982), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.0068018185, 0.36247534, 0.011336365, 0.35794073, 0.013603637, 0.3556735), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.018138183, 0.35340625, 0.04534546, 0.33980268, 0.07708728, 0.32846624), new org.herac.tuxguitar.graphics.command.TGLineTo(0.13603638, 0.30352622), new org.herac.tuxguitar.graphics.command.TGLineTo(0.13603638, 0.119877115), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.13603638, 0.020117175, 0.13603638, -0.06377195, 0.1337691, -0.06377195), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.1337691, -0.06377195, 0.113363646, -0.054702807, 0.08842365, -0.045633722), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.036276367, -0.02522831, 0.029474549, -0.022961069, 0.01587091, -0.034297395), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.0, -0.045633722, 0.0, -0.047901023, 0.0, -0.13859199), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.0, -0.21567927, 0.0, -0.22248112, 0.004534546, -0.2292829), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.0068018185, -0.23381744, 0.011336365, -0.23835205, 0.013603637, -0.24061923), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.018138183, -0.24288653, 0.04534546, -0.25649017, 0.07708728, -0.26782656), new org.herac.tuxguitar.graphics.command.TGLineTo(0.13603638, -0.29276657), new org.herac.tuxguitar.graphics.command.TGLineTo(0.13603638, -0.48321748), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.13603638, -0.6555302, 0.13830365, -0.6759357, 0.14057092, -0.68273747), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.15644182, -0.7099448, 0.19498548, -0.7099448, 0.2108564, -0.68273747), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.21312366, -0.6759357, 0.21539094, -0.6577975, 0.21539094, -0.49908838), new org.herac.tuxguitar.graphics.command.TGLineTo(0.21765819, -0.32450837), new org.herac.tuxguitar.graphics.command.TGLineTo(0.31288365, -0.363052), new org.herac.tuxguitar.graphics.command.TGLineTo(0.40810916, -0.40159562), new org.herac.tuxguitar.graphics.command.TGLineTo(0.40810916, -0.5852448), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.40810916, -0.7575575, 0.40810916, -0.76889384, 0.4126437, -0.7779629), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.41717824, -0.78703207, 0.4217128, -0.7915666, 0.4330491, -0.79610115), new org.herac.tuxguitar.graphics.command.TGMoveTo(0.40810916, 0.00878073), new org.herac.tuxguitar.graphics.command.TGLineTo(0.40810916, -0.17486833), new org.herac.tuxguitar.graphics.command.TGLineTo(0.31061637, -0.13632469), new org.herac.tuxguitar.graphics.command.TGLineTo(0.21539094, -0.09778105), new org.herac.tuxguitar.graphics.command.TGLineTo(0.21539094, 0.08813532), new org.herac.tuxguitar.graphics.command.TGLineTo(0.21539094, 0.27178437), new org.herac.tuxguitar.graphics.command.TGLineTo(0.22219275, 0.26951712), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.22672729, 0.26724988, 0.26980546, 0.24911173, 0.3196855, 0.23097356), new org.herac.tuxguitar.graphics.command.TGLineTo(0.40810916, 0.19469716), new org.herac.tuxguitar.graphics.command.TGLineTo(0.40810916, 0.00878073)); return TGKeySignaturePainter.SHARP_MODEL; };
                            ;
                            TGKeySignaturePainter.FLAT_MODEL_$LI$ = function () { if (TGKeySignaturePainter.FLAT_MODEL == null)
                                TGKeySignaturePainter.FLAT_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(0.036081146, -1.227901), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.066563375, -1.2334433, 0.11644338, -1.227901, 0.13584116, -1.2140454), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.14138338, -1.2112744, 0.14138338, -1.1807921, 0.13307005, -0.72910094), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.12752782, -0.46584538, 0.12475671, -0.24969868, 0.12475671, -0.24969868), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.12475671, -0.2469276, 0.13584116, -0.2524698, 0.1469256, -0.2607831), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.20511894, -0.2995787, 0.27716786, -0.32174757, 0.34921673, -0.3272898), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.42403674, -0.330061, 0.4850012, -0.30789205, 0.53765225, -0.2552409), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.5903034, -0.20536087, 0.6180146, -0.13885425, 0.6235568, -0.06680534), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.6263279, -0.014154296, 0.61524343, 0.03295471, 0.5903034, 0.082834624), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.55150783, 0.15765466, 0.49608564, 0.21030582, 0.32981896, 0.32392135), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.2245167, 0.39597037, 0.19680561, 0.41813925, 0.16355227, 0.45693472), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.1469256, 0.47356132, 0.12752782, 0.49295917, 0.12198559, 0.4957303), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.0970456, 0.5123569, 0.06933448, 0.50958586, 0.04716559, 0.49018803), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.04162337, 0.48187473, 0.036081146, 0.47356132, 0.033310037, 0.46524814), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.030538924, 0.45970586, 0.024996702, 0.16319682, 0.016683366, -0.30512092), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.0083700325, -0.7235587, 0.00282781, -1.0976588, 5.669861E-5, -1.1392255), new org.herac.tuxguitar.graphics.command.TGLineTo(5.669861E-5, -1.2112744), new org.herac.tuxguitar.graphics.command.TGLineTo(0.011141145, -1.2168165), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.016683366, -1.2195877, 0.027767813, -1.22513, 0.036081146, -1.227901), new org.herac.tuxguitar.graphics.command.TGMoveTo(0.32981896, -0.21090315), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.31042117, -0.22198771, 0.27993897, -0.22475873, 0.25499895, -0.21644543), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.20511894, -0.20258985, 0.16355227, -0.15825199, 0.1469256, -0.10005865), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.14138338, -0.07234762, 0.13584116, 0.16596796, 0.14138338, 0.25741473), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.14415449, 0.29621032, 0.14415449, 0.33223465, 0.1469256, 0.34054795), new org.herac.tuxguitar.graphics.command.TGLineTo(0.14969671, 0.3516325), new org.herac.tuxguitar.graphics.command.TGLineTo(0.19126338, 0.31560805), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.24945672, 0.26572803, 0.30765006, 0.20753469, 0.33536118, 0.1687391), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.36307228, 0.12994362, 0.39078343, 0.077292465, 0.40186784, 0.03849699), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.41849452, -0.025238734, 0.41018116, -0.09728751, 0.38524118, -0.15270983), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.37138563, -0.18042086, 0.35475895, -0.1998186, 0.32981896, -0.21090315)); return TGKeySignaturePainter.FLAT_MODEL; };
                            ;
                            TGKeySignaturePainter.NATURAL_MODEL_$LI$ = function () { if (TGKeySignaturePainter.NATURAL_MODEL == null)
                                TGKeySignaturePainter.NATURAL_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(0.038880464, -0.9978458), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.061049357, -1.003388, 0.11092936, -0.9978458, 0.13032715, -0.98399025), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.13309824, -0.9812192, 0.13309824, -0.9396525, 0.13032715, -0.7429036), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.12755603, -0.6098902, 0.12755603, -0.50181687, 0.12755603, -0.50181687), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.12755603, -0.4990458, 0.1968338, -0.5101303, 0.28273827, -0.52398574), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.37141383, -0.54061246, 0.4406916, -0.54892576, 0.44346273, -0.54892576), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.4573183, -0.5461546, 0.4684027, -0.5350702, 0.47671604, -0.52121466), new org.herac.tuxguitar.graphics.command.TGLineTo(0.48225826, -0.5101303), new org.herac.tuxguitar.graphics.command.TGLineTo(0.49057162, 0.29072094), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.49888495, 0.9336188, 0.50165606, 1.0915723, 0.49888495, 1.0915723), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.49611384, 1.0943432, 0.48780048, 1.0971143, 0.47948715, 1.0998855), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.4573183, 1.1081989, 0.4129805, 1.1081989, 0.3908116, 1.0998855), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.3824983, 1.0971143, 0.37418494, 1.0943432, 0.37141383, 1.0915723), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.36864272, 1.0888011, 0.36864272, 1.0472345, 0.37141383, 0.85048544), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.37418494, 0.7174721, 0.37418494, 0.6093987, 0.37418494, 0.6093987), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.37418494, 0.6066277, 0.30490717, 0.61771214, 0.21900271, 0.6315676), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.13032715, 0.6481943, 0.061049357, 0.65650773, 0.058278244, 0.65650773), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.044422686, 0.6537366, 0.033338238, 0.64265203, 0.025024906, 0.6287966), new org.herac.tuxguitar.graphics.command.TGLineTo(0.019482683, 0.614941), new org.herac.tuxguitar.graphics.command.TGLineTo(0.011169349, -0.08060795), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.005627127, -0.46302134, 0.002856015, -0.8232658, 8.490361E-5, -0.8814592), new org.herac.tuxguitar.graphics.command.TGLineTo(8.490361E-5, -0.98399025), new org.herac.tuxguitar.graphics.command.TGLineTo(0.01394046, -0.9895325), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.022253795, -0.9923036, 0.033338238, -0.9950747, 0.038880464, -0.9978458), new org.herac.tuxguitar.graphics.command.TGMoveTo(0.38526937, -0.22193468), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.38526937, -0.25241685, 0.38526937, -0.2607302, 0.3824983, -0.2607302), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.37141383, -0.2607302, 0.12478492, -0.21916354, 0.12478492, -0.2163924), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.12201381, -0.2163924, 0.11647158, 0.36554098, 0.11647158, 0.36831212), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.1192427, 0.36831212, 0.37418494, 0.3267454, 0.37695605, 0.32397425), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.37695605, 0.32397425, 0.38526937, -0.09446347, 0.38526937, -0.22193468)); return TGKeySignaturePainter.NATURAL_MODEL; };
                            ;
                            TGKeySignaturePainter.paintSharp = function (painter, x, y, scale) {
                                TGKeySignaturePainter.SHARP_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            TGKeySignaturePainter.paintFlat = function (painter, x, y, scale) {
                                TGKeySignaturePainter.FLAT_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            TGKeySignaturePainter.paintNatural = function (painter, x, y, scale) {
                                TGKeySignaturePainter.NATURAL_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            return TGKeySignaturePainter;
                        }());
                        painters.TGKeySignaturePainter = TGKeySignaturePainter;
                        TGKeySignaturePainter["__class"] = "org.herac.tuxguitar.graphics.control.painters.TGKeySignaturePainter";
                    })(painters = control.painters || (control.painters = {}));
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var painters;
                    (function (painters) {
                        var TGNotePainter = (function () {
                            function TGNotePainter() {
                            }
                            TGNotePainter.NOTE_MODEL_$LI$ = function () { if (TGNotePainter.NOTE_MODEL == null)
                                TGNotePainter.NOTE_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(0.0, 0.66), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.0, 0.83, 0.166, 1.0, 0.33, 1.0), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.83, 1.0, 1.33, 0.66, 1.33, 0.33), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.33, 0.166, 1.16, 0.0, 1.0, 0.0), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.5, 0.0, 0.0, 0.33, 0.0, 0.66)); return TGNotePainter.NOTE_MODEL; };
                            ;
                            TGNotePainter.HARMONIC_MODEL_$LI$ = function () { if (TGNotePainter.HARMONIC_MODEL == null)
                                TGNotePainter.HARMONIC_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(0.1, 0.5), new org.herac.tuxguitar.graphics.command.TGLineTo(0.65000004, 1.0), new org.herac.tuxguitar.graphics.command.TGLineTo(1.2, 0.5), new org.herac.tuxguitar.graphics.command.TGLineTo(0.65000004, 0.0), new org.herac.tuxguitar.graphics.command.TGLineTo(0.1, 0.5), new org.herac.tuxguitar.graphics.command.TGLineTo(0.65000004, 1.0)); return TGNotePainter.HARMONIC_MODEL; };
                            ;
                            TGNotePainter.FOOTER_UP_MODEL_$LI$ = function () { if (TGNotePainter.FOOTER_UP_MODEL == null)
                                TGNotePainter.FOOTER_UP_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(0.64375, -0.00625), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.659375, 0.0, 0.69375, -0.00625, 0.70625, -0.0125), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.725, -0.025, 0.73125, -0.03125, 0.75, -0.065625), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.815625, -0.1875, 0.86875, -0.3375, 0.890625, -0.4625), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.934375, -0.70937496, 0.903125, -0.890625, 0.778125, -1.096875), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.721875, -1.19375, 0.653125, -1.28125, 0.5, -1.453125), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.340625, -1.6375, 0.290625, -1.703125, 0.228125, -1.790625), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.165625, -1.8875, 0.121875, -1.978125, 0.09375, -2.06875), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.078125, -2.125, 0.065625, -2.209375, 0.065625, -2.25625), new org.herac.tuxguitar.graphics.command.TGLineTo(0.065625, -2.271875), new org.herac.tuxguitar.graphics.command.TGLineTo(0.034375, -2.271875), new org.herac.tuxguitar.graphics.command.TGLineTo(0.0, -2.271875), new org.herac.tuxguitar.graphics.command.TGLineTo(0.0, -1.88125), new org.herac.tuxguitar.graphics.command.TGLineTo(0.0, -1.490625), new org.herac.tuxguitar.graphics.command.TGLineTo(0.034375, -1.490625), new org.herac.tuxguitar.graphics.command.TGLineTo(0.06875, -1.490625), new org.herac.tuxguitar.graphics.command.TGLineTo(0.15, -1.434375), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.38125, -1.28125, 0.521875, -1.15625, 0.621875, -1.021875), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.74375, -0.85625, 0.778125, -0.71874994, 0.74375, -0.5124999), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.721875, -0.38125, 0.66875, -0.246875, 0.6, -0.128125), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.584375, -0.10625, 0.58125, -0.096875, 0.58125, -0.0875), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.58125, -0.05, 0.60625, -0.01875, 0.64375, -0.00625)); return TGNotePainter.FOOTER_UP_MODEL; };
                            ;
                            TGNotePainter.FOOTER_DOWN_MODEL_$LI$ = function () { if (TGNotePainter.FOOTER_DOWN_MODEL == null)
                                TGNotePainter.FOOTER_DOWN_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(0.64375, 0.00625), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.659375, 0.0, 0.69375, 0.00625, 0.70625, 0.0125), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.725, 0.025, 0.73125, 0.03125, 0.75, 0.065625), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.815625, 0.1875, 0.86875, 0.3375, 0.890625, 0.4625), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.934375, 0.70937496, 0.903125, 0.890625, 0.778125, 1.096875), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.721875, 1.19375, 0.653125, 1.28125, 0.5, 1.453125), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.340625, 1.6375, 0.290625, 1.703125, 0.228125, 1.790625), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.165625, 1.8875, 0.121875, 1.978125, 0.09375, 2.06875), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.078125, 2.125, 0.065625, 2.209375, 0.065625, 2.25625), new org.herac.tuxguitar.graphics.command.TGLineTo(0.065625, 2.271875), new org.herac.tuxguitar.graphics.command.TGLineTo(0.034375, 2.271875), new org.herac.tuxguitar.graphics.command.TGLineTo(0.0, 2.271875), new org.herac.tuxguitar.graphics.command.TGLineTo(0.0, 1.88125), new org.herac.tuxguitar.graphics.command.TGLineTo(0.0, 1.490625), new org.herac.tuxguitar.graphics.command.TGLineTo(0.034375, 1.490625), new org.herac.tuxguitar.graphics.command.TGLineTo(0.06875, 1.490625), new org.herac.tuxguitar.graphics.command.TGLineTo(0.15, 1.434375), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.38125, 1.28125, 0.521875, 1.15625, 0.621875, 1.021875), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.74375, 0.85625, 0.778125, 0.71874994, 0.74375, 0.5124999), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.721875, 0.38125, 0.66875, 0.246875, 0.6, 0.128125), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.584375, 0.10625, 0.58125, 0.096875, 0.58125, 0.0875), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.58125, 0.05, 0.60625, 0.01875, 0.64375, 0.00625)); return TGNotePainter.FOOTER_DOWN_MODEL; };
                            ;
                            TGNotePainter.paintNote = function (painter, x, y, scale) {
                                TGNotePainter.NOTE_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            TGNotePainter.paintHarmonic = function (painter, x, y, scale) {
                                TGNotePainter.HARMONIC_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            TGNotePainter.paintFooter = function (painter, x, y, dir, scale) {
                                var tgPaintCommand = (dir > 0 ? TGNotePainter.FOOTER_DOWN_MODEL_$LI$() : TGNotePainter.FOOTER_UP_MODEL_$LI$());
                                tgPaintCommand.paint(painter, x, y, scale);
                            };
                            return TGNotePainter;
                        }());
                        painters.TGNotePainter = TGNotePainter;
                        TGNotePainter["__class"] = "org.herac.tuxguitar.graphics.control.painters.TGNotePainter";
                    })(painters = control.painters || (control.painters = {}));
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var painters;
                    (function (painters) {
                        var TGSilencePainter = (function () {
                            function TGSilencePainter() {
                            }
                            TGSilencePainter.WHOLE_MODEL_$LI$ = function () { if (TGSilencePainter.WHOLE_MODEL == null)
                                TGSilencePainter.WHOLE_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(0.04681015, 0.046812057), new org.herac.tuxguitar.graphics.command.TGLineTo(0.1170311, 0.0), new org.herac.tuxguitar.graphics.command.TGLineTo(4.3769493, 0.0), new org.herac.tuxguitar.graphics.command.TGLineTo(8.6602745, 0.0), new org.herac.tuxguitar.graphics.command.TGLineTo(8.730488, 0.046812057), new org.herac.tuxguitar.graphics.command.TGLineTo(8.777302, 0.11703062), new org.herac.tuxguitar.graphics.command.TGLineTo(8.777302, 1.8256791), new org.herac.tuxguitar.graphics.command.TGLineTo(8.777302, 3.5343275), new org.herac.tuxguitar.graphics.command.TGLineTo(8.730488, 3.6045456), new org.herac.tuxguitar.graphics.command.TGLineTo(8.6602745, 3.6513581), new org.herac.tuxguitar.graphics.command.TGLineTo(4.3769493, 3.6513581), new org.herac.tuxguitar.graphics.command.TGLineTo(0.1170311, 3.6513581), new org.herac.tuxguitar.graphics.command.TGLineTo(0.04681015, 3.6045456), new org.herac.tuxguitar.graphics.command.TGLineTo(0.0, 3.5343275), new org.herac.tuxguitar.graphics.command.TGLineTo(0.0, 1.8256791), new org.herac.tuxguitar.graphics.command.TGLineTo(0.0, 0.11703062), new org.herac.tuxguitar.graphics.command.TGLineTo(0.04681015, 0.046812057)); return TGSilencePainter.WHOLE_MODEL; };
                            ;
                            TGSilencePainter.HALF_MODEL_$LI$ = function () { if (TGSilencePainter.HALF_MODEL == null)
                                TGSilencePainter.HALF_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(0.04681015, 0.046812057), new org.herac.tuxguitar.graphics.command.TGLineTo(0.1170311, 0.0), new org.herac.tuxguitar.graphics.command.TGLineTo(4.3769493, 0.0), new org.herac.tuxguitar.graphics.command.TGLineTo(8.6602745, 0.0), new org.herac.tuxguitar.graphics.command.TGLineTo(8.730488, 0.046812057), new org.herac.tuxguitar.graphics.command.TGLineTo(8.777302, 0.11703062), new org.herac.tuxguitar.graphics.command.TGLineTo(8.777302, 1.8256791), new org.herac.tuxguitar.graphics.command.TGLineTo(8.777302, 3.5343275), new org.herac.tuxguitar.graphics.command.TGLineTo(8.730488, 3.6045456), new org.herac.tuxguitar.graphics.command.TGLineTo(8.6602745, 3.6513581), new org.herac.tuxguitar.graphics.command.TGLineTo(4.3769493, 3.6513581), new org.herac.tuxguitar.graphics.command.TGLineTo(0.1170311, 3.6513581), new org.herac.tuxguitar.graphics.command.TGLineTo(0.04681015, 3.6045456), new org.herac.tuxguitar.graphics.command.TGLineTo(0.0, 3.5343275), new org.herac.tuxguitar.graphics.command.TGLineTo(0.0, 1.8256791), new org.herac.tuxguitar.graphics.command.TGLineTo(0.0, 0.11703062), new org.herac.tuxguitar.graphics.command.TGLineTo(0.04681015, 0.046812057)); return TGSilencePainter.HALF_MODEL; };
                            ;
                            TGSilencePainter.QUARTER_MODEL_$LI$ = function () { if (TGSilencePainter.QUARTER_MODEL == null)
                                TGSilencePainter.QUARTER_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(2.1034088, 0.047267675), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.1979485, 0.0, 2.2924728, 0.0, 2.387024, 0.023633957), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.4579277, 0.070901394, 6.121151, 4.4195156, 6.2156906, 4.6085863), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.38113, 4.915825, 6.333866, 5.2230635, 6.0975113, 5.601205), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.9084587, 5.8611765, 5.5303154, 6.239316, 4.821308, 6.830161), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.4667816, 7.1137667, 4.1359215, 7.4210052, 4.065014, 7.491905), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.3323631, 8.271823, 3.166935, 9.453509, 3.5923424, 10.351589), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.73415, 10.65883, 3.8050346, 10.729736, 4.6322327, 11.675077), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.1447945, 13.447618, 6.0738907, 13.376713, 6.0738907, 13.518524), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.0738907, 13.66031, 5.9320793, 13.802121, 5.790291, 13.825765), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.6721115, 13.825765, 5.5775757, 13.778487, 5.4121437, 13.6130495), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.821308, 13.02221, 3.4741745, 12.5968, 2.7415237, 12.762231), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.387024, 12.833136, 2.1979485, 12.974947, 2.0325203, 13.305807), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.9379692, 13.542143, 1.8670654, 13.825765, 1.8434448, 14.203887), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.8198013, 14.7238455, 1.9143524, 15.267421, 2.0797806, 15.787354), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.1979485, 16.118237, 2.2688522, 16.307312, 2.4342842, 16.543648), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.5760956, 16.73272, 2.5760956, 16.803608, 2.4579277, 16.874508), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.3633804, 16.921787, 2.3161163, 16.898151, 2.1034088, 16.638172), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.2526054, 15.551019, 0.47267532, 13.991195, 0.21271515, 12.833136), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.0, 12.005961, 0.09454727, 11.438742, 0.4254074, 11.202407), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.590847, 11.107882, 0.75629425, 11.084239, 1.1107941, 11.084239), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.7961845, 11.131502, 2.7651672, 11.3914795, 3.7105103, 11.793245), new org.herac.tuxguitar.graphics.command.TGLineTo(4.01775, 11.935056), new org.herac.tuxguitar.graphics.command.TGLineTo(2.7178802, 10.398851), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.73265076, 8.059115, 0.66174316, 7.9645834, 0.590847, 7.8227787), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.5199585, 7.63371, 0.496315, 7.4446383, 0.5672188, 7.2319345), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.68538666, 6.853795, 1.0162506, 6.4756536, 2.0088768, 5.648472), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.3633804, 5.3648667, 2.67062, 5.0812616, 2.7415237, 5.033994), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.2851028, 4.443149, 3.5450783, 3.6159673, 3.450531, 2.8360534), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.4032707, 2.5760818, 3.2851028, 2.1743064, 3.1432915, 1.9616027), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.0723915, 1.8434343, 2.7887878, 1.4889283, 2.505188, 1.1344206), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.2215881, 0.8035486, 1.9616127, 0.49630952, 1.9379692, 0.44904137), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.8670654, 0.30723906, 1.9379692, 0.11816859, 2.1034088, 0.047267675)); return TGSilencePainter.QUARTER_MODEL; };
                            ;
                            TGSilencePainter.EIGHTH_MODEL_$LI$ = function () { if (TGSilencePainter.EIGHTH_MODEL == null)
                                TGSilencePainter.EIGHTH_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(1.6779978, 0.070901394), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.1979408, 0.0, 2.6469831, 0.14180231, 3.0014887, 0.47267532), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.214193, 0.7090125, 3.3087273, 0.89808273, 3.450531, 1.4652932), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.5214317, 1.7252648, 3.5923345, 1.9852359, 3.6159685, 2.0325048), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.7105024, 2.2452075, 3.8759398, 2.3870108, 4.0886426, 2.4106443), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.183178, 2.4106443, 4.2304454, 2.4106443, 4.348614, 2.3397439), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.6558537, 2.19794, 5.388501, 1.3234913, 5.6721063, 0.7799146), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.7430067, 0.6144779, 5.861175, 0.5435767, 5.979345, 0.5435767), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.073879, 0.5435767, 6.192049, 0.6144779, 6.239316, 0.6853788), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.26295, 0.7326472, 6.026612, 1.5598292, 4.7740216, 5.7430067), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.970474, 8.484522, 3.2850938, 10.776992, 3.2614603, 10.800634), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.2614603, 10.824278, 3.1669261, 10.895159, 3.0723903, 10.918801), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.9305882, 10.989707, 2.9069548, 10.989707, 2.7178838, 10.989707), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.528813, 10.989707, 2.481546, 10.989707, 2.3397446, 10.942445), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.2688415, 10.895159, 2.1743073, 10.847896, 2.1743073, 10.824278), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.1270401, 10.800634, 2.292475, 10.375227, 3.4977982, 6.94833), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.254079, 4.844924, 4.8685584, 3.0960243, 4.8449225, 3.0960243), new org.herac.tuxguitar.graphics.command.TGLineTo(4.4431496, 3.2141926), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.5923345, 3.4977977, 3.0723903, 3.5923336, 2.4342787, 3.5923336), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.914336, 3.5923336, 1.7725322, 3.5687, 1.394393, 3.3796299), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.3545066, 2.88332, 0.0, 1.6779974, 0.5908443, 0.7799146), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.85081583, 0.4254074, 1.2525895, 0.14180231, 1.6779978, 0.070901394)); return TGSilencePainter.EIGHTH_MODEL; };
                            ;
                            TGSilencePainter.SIXTEENTH_MODEL_$LI$ = function () { if (TGSilencePainter.SIXTEENTH_MODEL == null)
                                TGSilencePainter.SIXTEENTH_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(3.5214243, 0.070901394), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.041381, 0.0, 4.490409, 0.14180231, 4.8449125, 0.4726758), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.0576286, 0.7090137, 5.152153, 0.89808273, 5.2939644, 1.4652946), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.36487, 1.725266, 5.435775, 1.9852376, 5.4593954, 2.032505), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.5775614, 2.3397436, 5.9084463, 2.4815469, 6.144781, 2.363377), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.4520226, 2.2215748, 7.090123, 1.394392, 7.421006, 0.7326474), new org.herac.tuxguitar.graphics.command.TGCubicTo(7.4682703, 0.6144779, 7.6100817, 0.54357696, 7.704606, 0.54357696), new org.herac.tuxguitar.graphics.command.TGCubicTo(7.7991533, 0.54357696, 7.917321, 0.6144779, 7.9645834, 0.6853788), new org.herac.tuxguitar.graphics.command.TGCubicTo(7.988206, 0.7326474, 7.6100817, 2.150673, 5.861184, 8.6972275), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.6794825, 13.069472, 3.710497, 16.685432, 3.6868773, 16.709076), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.6632347, 16.73272, 3.592329, 16.803608, 3.4978046, 16.827246), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.3559942, 16.89815, 3.3323498, 16.89815, 3.143302, 16.89815), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.9542284, 16.89815, 2.9069443, 16.89815, 2.7651548, 16.850887), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.69425, 16.803608, 2.5997238, 16.75634, 2.5997238, 16.73272), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.5524387, 16.709076, 2.69425, 16.283669, 3.7341404, 12.856779), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.372241, 10.753368, 4.8921986, 9.028101, 4.8921986, 9.004459), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.868556, 9.004459, 4.6794825, 9.051743, 4.46679, 9.122626), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.6159725, 9.406247, 3.0723963, 9.500772, 2.43427, 9.500772), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.9143381, 9.500772, 1.7725258, 9.477153, 1.3943825, 9.28808), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.3545103, 8.791764, 0.0, 7.586442, 0.59084797, 6.6883574), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1580448, 5.8611765, 2.3397465, 5.7193727, 3.0014915, 6.357486), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.2378254, 6.6174574, 3.3323498, 6.830161, 3.4741611, 7.4446383), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.5450668, 7.799144, 3.6395912, 8.059116, 3.7341404, 8.153648), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.805046, 8.224551, 3.9468327, 8.295452, 4.088643, 8.31909), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.1831684, 8.31909, 4.2304544, 8.31909, 4.3486233, 8.248187), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.608577, 8.130019, 5.152153, 7.515539, 5.4593954, 6.995596), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.5539417, 6.830161, 5.601205, 6.6883574, 5.766636, 6.144781), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.2865934, 4.4904165, 6.6883574, 3.119658, 6.6883574, 3.0960245), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.6883574, 3.0960245, 6.5229273, 3.1432915, 6.3574743, 3.2141924), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.9557085, 3.3323627, 5.4121323, 3.474164, 5.033985, 3.5450664), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.7740307, 3.5923338, 4.6322203, 3.5923338, 4.2777157, 3.5923338), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.757759, 3.5923338, 3.6159725, 3.5687003, 3.2378254, 3.3796296), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.197935, 2.8833203, 1.8434324, 1.6779971, 2.43427, 0.77991486), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.69425, 0.4254074, 3.096015, 0.14180231, 3.5214243, 0.070901394)); return TGSilencePainter.SIXTEENTH_MODEL; };
                            ;
                            TGSilencePainter.THIRTY_SECOND_MODEL_$LI$ = function () { if (TGSilencePainter.THIRTY_SECOND_MODEL == null)
                                TGSilencePainter.THIRTY_SECOND_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(4.939474, 0.070901155), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.459408, 0.0, 5.9084606, 0.14180207, 6.2629623, 0.4726758), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.4756565, 0.70901346, 6.570204, 0.89808273, 6.7119904, 1.4652941), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.782896, 1.7252657, 6.8538036, 1.9852374, 6.877445, 2.0325048), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.9719696, 2.245209, 7.1373997, 2.3870108, 7.3501167, 2.4106443), new org.herac.tuxguitar.graphics.command.TGCubicTo(7.444641, 2.4106443, 7.4919033, 2.4106443, 7.562809, 2.3633773), new org.herac.tuxguitar.graphics.command.TGCubicTo(7.8227882, 2.19794, 8.34272, 1.4889283, 8.697241, 0.80354834), new org.herac.tuxguitar.graphics.command.TGCubicTo(8.768129, 0.61447763, 8.862679, 0.54357696, 9.004465, 0.54357696), new org.herac.tuxguitar.graphics.command.TGCubicTo(9.099014, 0.54357696, 9.217182, 0.61447763, 9.264444, 0.6853788), new org.herac.tuxguitar.graphics.command.TGCubicTo(9.288086, 0.7326474, 8.815416, 2.7887857, 6.735634, 11.627814), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.3175983, 17.6308, 4.1359196, 22.57025, 4.1359196, 22.593893), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.112276, 22.641155, 4.041378, 22.688417, 3.946846, 22.73568), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.781416, 22.806585, 3.7577744, 22.806585, 3.5687008, 22.806585), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.3796272, 22.806585, 3.332365, 22.806585, 3.1905785, 22.759323), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.1196728, 22.71206, 3.0251236, 22.664799, 3.0251236, 22.641155), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.9778614, 22.617512, 3.0960293, 22.192102, 3.9941082, 18.765215), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.5376854, 16.661814, 4.986738, 14.936537, 5.0103607, 14.912916), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.0103607, 14.889275, 4.9158325, 14.889275, 4.6322346, 15.007441), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.7105122, 15.314682, 2.883337, 15.456493, 2.2688541, 15.43285), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.9379692, 15.409229, 1.6780167, 15.3383255, 1.3943939, 15.196516), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.35450363, 14.700201, 0.0, 13.49488, 0.59086037, 12.5968), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1580582, 11.769626, 2.3397598, 11.627814, 3.001505, 12.265927), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.2378407, 12.525894, 3.332365, 12.738611, 3.4741764, 13.353088), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.5450802, 13.707598, 3.6396065, 13.967552, 3.7341537, 14.062099), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.8286781, 14.133005, 3.9704895, 14.203886, 4.112276, 14.22753), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.2068253, 14.22753, 4.2540874, 14.22753, 4.348612, 14.156624), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.679497, 13.991194, 5.3648834, 13.140376, 5.5775776, 12.667706), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.601219, 12.573157, 6.546562, 9.051743, 6.546562, 9.004459), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.546562, 8.980838, 6.404751, 9.0281, 6.2393208, 9.099006), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.7430058, 9.240808, 5.2939777, 9.382604, 4.8685703, 9.453508), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.561329, 9.5007715, 4.443161, 9.5007715, 4.065014, 9.5007715), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.5450802, 9.5007715, 3.4032707, 9.477151, 3.0251236, 9.288079), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.9852371, 8.791764, 1.6307297, 7.586441, 2.2215939, 6.6883574), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.7887878, 5.8611755, 3.9704895, 5.7193727, 4.6322346, 6.357485), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.8685703, 6.6174564, 4.9630947, 6.830161, 5.104904, 7.4446383), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.175812, 7.799144, 5.270336, 8.059115, 5.3648834, 8.153648), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.50667, 8.295452, 5.7666492, 8.366357, 5.9320793, 8.271823), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.168415, 8.177285, 6.4756565, 7.8227797, 6.782896, 7.3501034), new org.herac.tuxguitar.graphics.command.TGCubicTo(7.113781, 6.877428, 7.0901375, 6.948329, 7.610079, 4.963092), new org.herac.tuxguitar.graphics.command.TGCubicTo(7.8700504, 3.970473, 8.082766, 3.1432917, 8.082766, 3.1196578), new org.herac.tuxguitar.graphics.command.TGCubicTo(8.082766, 3.1196578, 7.9173126, 3.1432917, 7.72826, 3.2141926), new org.herac.tuxguitar.graphics.command.TGCubicTo(7.279211, 3.355996, 6.830158, 3.4741638, 6.452036, 3.545066), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.1920567, 3.592334, 6.050247, 3.592334, 5.6957436, 3.592334), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.175812, 3.592334, 5.0339985, 3.5687, 4.6558533, 3.3796294), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.6159801, 2.88332, 3.2614594, 1.6779974, 3.8523216, 0.7799146), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.112276, 0.4254074, 4.5140667, 0.14180207, 4.939474, 0.070901155)); return TGSilencePainter.THIRTY_SECOND_MODEL; };
                            ;
                            TGSilencePainter.SIXTY_FOURTH_MODEL_$LI$ = function () { if (TGSilencePainter.SIXTY_FOURTH_MODEL == null)
                                TGSilencePainter.SIXTY_FOURTH_MODEL = new org.herac.tuxguitar.graphics.command.TGPaintModel(new org.herac.tuxguitar.graphics.command.TGMoveTo(5.908436, 0.07090092), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.4283676, 0.0, 6.8774185, 0.14180303, 7.231926, 0.4726758), new org.herac.tuxguitar.graphics.command.TGCubicTo(7.4446335, 0.70901346, 7.5391655, 0.8980839, 7.680977, 1.4652941), new org.herac.tuxguitar.graphics.command.TGCubicTo(7.7991447, 1.9616034, 7.846405, 2.1034052, 7.9409294, 2.221575), new org.herac.tuxguitar.graphics.command.TGCubicTo(8.082741, 2.3870103, 8.366341, 2.4579127, 8.531792, 2.3633769), new org.herac.tuxguitar.graphics.command.TGCubicTo(8.72084, 2.2688425, 9.028084, 1.8434336, 9.382591, 1.1344209), new org.herac.tuxguitar.graphics.command.TGCubicTo(9.642563, 0.61447763, 9.689827, 0.5672102, 9.855282, 0.5672102), new org.herac.tuxguitar.graphics.command.TGCubicTo(9.949806, 0.5672102, 10.067974, 0.6381123, 10.115234, 0.70901346), new org.herac.tuxguitar.graphics.command.TGCubicTo(10.138878, 0.75628066, 9.571659, 3.592333, 7.3264503, 14.605665), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.790268, 22.215736, 4.514042, 28.478699, 4.514042, 28.502335), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.4903984, 28.549604, 4.4195137, 28.596869, 4.3249702, 28.644129), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.1595383, 28.715034, 4.135895, 28.715034, 3.9468231, 28.715034), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.7577515, 28.715034, 3.7104874, 28.715034, 3.568699, 28.667772), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.497795, 28.62051, 3.403244, 28.573223, 3.403244, 28.549604), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.3559837, 28.525963, 3.450531, 28.100554, 4.230446, 24.65002), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.7031136, 22.522978, 5.0812607, 20.797724, 5.0812607, 20.77408), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.0812607, 20.77408, 4.892189, 20.821352, 4.679474, 20.892248), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.1595383, 21.081322, 3.7341309, 21.175869, 3.28508, 21.270393), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.954216, 21.317657, 2.836052, 21.317657, 2.4579048, 21.317657), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.9143257, 21.317657, 1.7725143, 21.294037, 1.3943901, 21.104965), new org.herac.tuxguitar.graphics.command.TGCubicTo(0.35450363, 20.60865, 0.0, 19.40333, 0.5908394, 18.505249), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.1580353, 17.678051, 2.339737, 17.536264, 3.00148, 18.174364), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.2378159, 18.434345, 3.3323517, 18.647038, 3.4741516, 19.261518), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.5450554, 19.616022, 3.6395798, 19.876, 3.7341309, 19.970549), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.8050346, 20.04143, 3.9468231, 20.112335, 4.0886345, 20.135979), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.2540627, 20.1596, 4.395874, 20.065073, 4.6558533, 19.805096), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.010357, 19.450592, 5.459385, 18.812492, 5.577553, 18.505249), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.6011925, 18.434345, 5.790268, 17.60717, 6.00296, 16.661804), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.2156754, 15.716461, 6.3811073, 14.93655, 6.404751, 14.912907), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.404751, 14.889288, 6.333843, 14.889288, 6.0266037, 15.007456), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.1048813, 15.314692, 4.277706, 15.456482, 3.6632233, 15.432863), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.3323517, 15.409222, 3.0723839, 15.338314, 2.7887688, 15.19651), new org.herac.tuxguitar.graphics.command.TGCubicTo(1.7488976, 14.700214, 1.3943901, 13.494894, 1.9852333, 12.59679), new org.herac.tuxguitar.graphics.command.TGCubicTo(2.2688293, 12.17139, 2.7415009, 11.911427, 3.28508, 11.864165), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.7104874, 11.840521, 4.0886345, 11.982332, 4.395874, 12.289569), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.6085663, 12.525908, 4.7031136, 12.714971, 4.8449097, 13.282178), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.915806, 13.542156, 4.9867134, 13.802132, 5.010357, 13.849398), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.128525, 14.156637, 5.459385, 14.298426, 5.7193604, 14.180258), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.00296, 14.038469, 6.6647034, 13.187653, 6.8774185, 12.691338), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.9010506, 12.620433, 7.1137543, 11.745991, 7.3264503, 10.777008), new org.herac.tuxguitar.graphics.command.TGLineTo(7.728237, 8.980829), new org.herac.tuxguitar.graphics.command.TGLineTo(7.3028297, 9.122639), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.4283676, 9.406237, 5.8847923, 9.500785, 5.246689, 9.500785), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.726738, 9.500785, 4.5849457, 9.47714, 4.2067986, 9.288069), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.1669083, 8.791758, 2.8124046, 7.586441, 3.403244, 6.6883574), new org.herac.tuxguitar.graphics.command.TGCubicTo(3.6868668, 6.26295, 4.1595383, 6.0029783, 4.7031136, 5.9557104), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.128525, 5.9320765, 5.506672, 6.07388, 5.8138924, 6.381119), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.0266037, 6.6174564, 6.121128, 6.806527, 6.2629395, 7.3737373), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.3811073, 7.8700476, 6.4283676, 8.0118475, 6.5229187, 8.130014), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.688347, 8.295459, 6.948326, 8.366352, 7.1137543, 8.271822), new org.herac.tuxguitar.graphics.command.TGCubicTo(7.397354, 8.130014, 7.846405, 7.539174, 8.130005, 6.948328), new org.herac.tuxguitar.graphics.command.TGCubicTo(8.224552, 6.759259, 8.271812, 6.5701895, 8.62632, 4.939458), new org.herac.tuxguitar.graphics.command.TGLineTo(9.028084, 3.1196573), new org.herac.tuxguitar.graphics.command.TGCubicTo(9.028084, 3.0960238, 8.886295, 3.1432912, 8.72084, 3.2141936), new org.herac.tuxguitar.graphics.command.TGCubicTo(7.8227615, 3.4977987, 7.066494, 3.6396005, 6.4992714, 3.6159666), new org.herac.tuxguitar.graphics.command.TGCubicTo(6.168415, 3.592333, 5.908436, 3.5214326, 5.624836, 3.379629), new org.herac.tuxguitar.graphics.command.TGCubicTo(4.5849457, 2.8833196, 4.230446, 1.6779983, 4.8212814, 0.7799144), new org.herac.tuxguitar.graphics.command.TGCubicTo(5.0812607, 0.42540812, 5.4830284, 0.14180303, 5.908436, 0.07090092)); return TGSilencePainter.SIXTY_FOURTH_MODEL; };
                            ;
                            TGSilencePainter.paintWhole = function (painter, x, y, scale) {
                                TGSilencePainter.WHOLE_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            TGSilencePainter.paintHalf = function (painter, x, y, scale) {
                                TGSilencePainter.HALF_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            TGSilencePainter.paintQuarter = function (painter, x, y, scale) {
                                TGSilencePainter.QUARTER_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            TGSilencePainter.paintEighth = function (painter, x, y, scale) {
                                TGSilencePainter.EIGHTH_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            TGSilencePainter.paintSixteenth = function (painter, x, y, scale) {
                                TGSilencePainter.SIXTEENTH_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            TGSilencePainter.paintThirtySecond = function (painter, x, y, scale) {
                                TGSilencePainter.THIRTY_SECOND_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            TGSilencePainter.paintSixtyFourth = function (painter, x, y, scale) {
                                TGSilencePainter.SIXTY_FOURTH_MODEL_$LI$().paint(painter, x, y, scale);
                            };
                            return TGSilencePainter;
                        }());
                        painters.TGSilencePainter = TGSilencePainter;
                        TGSilencePainter["__class"] = "org.herac.tuxguitar.graphics.control.painters.TGSilencePainter";
                    })(painters = control.painters || (control.painters = {}));
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var print;
                    (function (print) {
                        var TGPrintLayout = (function (_super) {
                            __extends(TGPrintLayout, _super);
                            function TGPrintLayout(controller, settings) {
                                var _this = _super.call(this, controller, (settings.getStyle() | org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_COMPACT)) || this;
                                _this.settings = null;
                                _this.document = null;
                                _this.page = 0;
                                _this.songNameFont = null;
                                _this.trackNameFont = null;
                                _this.songAuthorFont = null;
                                _this.settings = settings;
                                return _this;
                            }
                            TGPrintLayout.prototype.getMode = function () {
                                return 0;
                            };
                            TGPrintLayout.prototype.makeDocument$org_herac_tuxguitar_graphics_control_print_TGPrintDocument = function (document) {
                                this.page = 0;
                                this.document = document;
                                this.makeDocument();
                            };
                            TGPrintLayout.prototype.makeDocument = function (document) {
                                if (((document != null && (document["__interfaces"] != null && document["__interfaces"].indexOf("org.herac.tuxguitar.graphics.control.print.TGPrintDocument") >= 0 || document.constructor != null && document.constructor["__interfaces"] != null && document.constructor["__interfaces"].indexOf("org.herac.tuxguitar.graphics.control.print.TGPrintDocument") >= 0)) || document === null)) {
                                    return this.makeDocument$org_herac_tuxguitar_graphics_control_print_TGPrintDocument(document);
                                }
                                else if (document === undefined) {
                                    return this.makeDocument$();
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGPrintLayout.prototype.makeDocument$ = function () {
                                this.document.start();
                                this.paint(this.document.getPainter(), null, this.document.getMargins().getLeft(), this.document.getMargins().getTop());
                                this.document.finish();
                            };
                            TGPrintLayout.prototype.paintSong = function (painter, clientArea, fromX, fromY) {
                                this.setWidth(0);
                                this.setHeight(0);
                                var style = this.getStyle();
                                var posY = 0.0;
                                var height = this.getFirstTrackSpacing();
                                var lineHeight = 0;
                                var tracks = this.getSong().getTracks();
                                while ((tracks.hasNext())) {
                                    var track = tracks.next();
                                    if (this.settings.getTrackNumber() < 0 || track.getNumber() === this.settings.getTrackNumber()) {
                                        this.openPage();
                                        posY = Math.round(fromY + this.getFirstTrackSpacing());
                                        posY += this.paintHeader(painter, track);
                                        track.getLyrics().start(this.getSkippedBeats(track));
                                        var ts = new org.herac.tuxguitar.graphics.control.TGTrackSpacing(this);
                                        var line = this.getTempLines(track, (this.settings.getFromMeasure() - 1), ts);
                                        while ((!line.measures.isEmpty())) {
                                            ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES, ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 ? ((this.getScoreLineSpacing() * 5)) : 0));
                                            if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                                ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_UP_LINES, Math.abs(line.minY));
                                                if (line.maxY > track.getScoreHeight()) {
                                                    ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_DOWN_LINES, (line.maxY - track.getScoreHeight()));
                                                }
                                            }
                                            if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0) {
                                                ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE_TOP_SEPARATOR, ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 ? this.getMinScoreTabSpacing() : Math.max(Math.abs(line.minY), this.getStringSpacing())));
                                                ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE, ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 ? track.getTabHeight() + this.getStringSpacing() + 1 : Math.max(line.maxY, track.getTabHeight() + this.getStringSpacing() + 1)));
                                            }
                                            ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_LYRIC, 10);
                                            this.checkDefaultSpacing(ts);
                                            lineHeight = ts.getSize();
                                            if ((posY + lineHeight + this.getTrackSpacing()) > (this.document.getMargins().getTop() + this.getMaxHeight())) {
                                                this.paintFooter(painter);
                                                this.closePage();
                                                this.openPage();
                                                posY = Math.round(this.document.getMargins().getTop() + this.getFirstTrackSpacing());
                                            }
                                            this.paintLine(track, line, painter, fromX, posY, ts);
                                            var lineHeightWithSpacing = Math.round(lineHeight + this.getTrackSpacing() + 0.5);
                                            posY += lineHeightWithSpacing;
                                            height += lineHeightWithSpacing;
                                            ts = new org.herac.tuxguitar.graphics.control.TGTrackSpacing(this);
                                            line = this.getTempLines(track, (line.lastIndex + 1), ts);
                                        }
                                        ;
                                        this.paintFooter(painter);
                                        this.closePage();
                                    }
                                }
                                ;
                                this.setHeight(height);
                            };
                            TGPrintLayout.prototype.paintHeader = function (painter, track) {
                                var headerOffset = 0.0;
                                if (this.document.isPaintable(this.page)) {
                                    var x = this.document.getMargins().getLeft();
                                    var y = this.document.getMargins().getTop();
                                    var fmTopLine = painter.getFMTopLine();
                                    var songName = this.getSong().getName();
                                    var songAuthor = this.getSong().getAuthor();
                                    var trackName = track.getName();
                                    if (songName != null && songName.length > 0) {
                                        painter.setFont(this.getSongNameFont(painter));
                                        painter['drawString$java_lang_String$float$float'](songName, (x + this.getCenter(painter, songName)), (fmTopLine + y));
                                        headerOffset += (30.0 * this.getScale());
                                    }
                                    if (trackName != null && trackName.length > 0) {
                                        trackName = "(" + trackName + ")";
                                        painter.setFont(this.getTrackNameFont(painter));
                                        painter['drawString$java_lang_String$float$float'](trackName, (x + this.getCenter(painter, trackName)), (fmTopLine + y + Math.round(headerOffset)));
                                        headerOffset += (20.0 * this.getScale());
                                    }
                                    if (songAuthor != null && songAuthor.length > 0) {
                                        painter.setFont(this.getSongAuthorFont(painter));
                                        painter['drawString$java_lang_String$float$float'](songAuthor, (x + this.getRight(painter, songAuthor)), (fmTopLine + y + Math.round(headerOffset)));
                                        headerOffset += (20.0 * this.getScale());
                                    }
                                }
                                return headerOffset;
                            };
                            TGPrintLayout.prototype.paintFooter = function (painter) {
                                if (this.document.isPaintable(this.page)) {
                                    var x = this.document.getMargins().getLeft();
                                    var y = this.document.getMargins().getTop();
                                    var fmTopLine = painter.getFMTopLine();
                                    var pageNumber = ('' + (this.page));
                                    painter.setBackground(this.getResources().getColorWhite());
                                    painter.setForeground(this.getResources().getColorBlack());
                                    painter['drawString$java_lang_String$float$float'](pageNumber, (x + this.getRight(painter, pageNumber)), (fmTopLine + y + this.getBottom(painter, pageNumber)));
                                }
                            };
                            TGPrintLayout.prototype.paintLine = function (track, line, painter, fromX, fromY, ts) {
                                if (this.document.isPaintable(this.page)) {
                                    var posX = fromX;
                                    var posY = fromY;
                                    var width = 0;
                                    var defaultMeasureSpacing = 0;
                                    if (line.fullLine) {
                                        var diff = (this.getMaxWidth() - line.tempWith);
                                        if (diff !== 0 && line.measures.size() > 0) {
                                            defaultMeasureSpacing = diff / line.measures.size();
                                        }
                                    }
                                    var measureSpacing = defaultMeasureSpacing;
                                    for (var i = 0; i < line.measures.size(); i++) {
                                        var index = (line.measures.get(i) | 0);
                                        var currMeasure = track.getMeasure(index);
                                        currMeasure.setPosX(posX);
                                        currMeasure.setPosY(posY);
                                        currMeasure.setTs(ts);
                                        track.getLyrics().setCurrentMeasure(currMeasure);
                                        currMeasure.setFirstOfLine(i === 0);
                                        var measureWidth = currMeasure.getWidth(this);
                                        var measureWidthWithSpacing = (this.isBufferEnabled() ? Math.round(measureWidth + measureSpacing) : (measureWidth + measureSpacing));
                                        var measureSpacingAfterRound = (measureWidthWithSpacing - measureWidth);
                                        this.paintMeasure(currMeasure, painter, measureSpacingAfterRound);
                                        track.getLyrics().paintCurrentNoteBeats(painter, this, currMeasure, posX, posY);
                                        posX += measureWidthWithSpacing;
                                        width += measureWidthWithSpacing;
                                        measureSpacing = (defaultMeasureSpacing + (measureSpacing - measureSpacingAfterRound));
                                    }
                                    this.setWidth(Math.max(this.getWidth(), width));
                                }
                            };
                            TGPrintLayout.prototype.fillBackground = function (painter) {
                                if (!this.document.isTransparentBackground()) {
                                    painter.setBackground(this.getLightColor(this.getResources().getBackgroundColor()));
                                    painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                    painter.addRectangle(0, 0, this.document.getSize().getWidth(), this.document.getSize().getHeight());
                                    painter.closePath();
                                }
                            };
                            TGPrintLayout.prototype.openPage = function () {
                                this.page++;
                                if (this.document.isPaintable(this.page)) {
                                    this.document.pageStart();
                                    this.fillBackground(this.document.getPainter());
                                }
                            };
                            TGPrintLayout.prototype.closePage = function () {
                                if (this.document.isPaintable(this.page)) {
                                    this.document.pageFinish();
                                }
                            };
                            TGPrintLayout.prototype.getCenter = function (painter, text) {
                                return ((this.getMaxWidth() - painter.getFMWidth(text)) / 2);
                            };
                            TGPrintLayout.prototype.getRight = function (painter, text) {
                                return ((this.getMaxWidth() - painter.getFMWidth(text)));
                            };
                            TGPrintLayout.prototype.getBottom = function (painter, text) {
                                return ((this.getMaxHeight() - painter.getFMHeight()));
                            };
                            TGPrintLayout.prototype.getTempLines = function (track, fromIndex, ts) {
                                var line = new TGPrintLayout.TempLine(this);
                                var measureCount = track.countMeasures();
                                for (var measureIdx = fromIndex; measureIdx < measureCount; measureIdx++) {
                                    var measure = track.getMeasure(measureIdx);
                                    if (measure.getNumber() >= this.settings.getFromMeasure() && measure.getNumber() <= this.settings.getToMeasure()) {
                                        if ((line.tempWith + measure.getWidth(this)) >= this.getMaxWidth()) {
                                            if (line.measures.isEmpty()) {
                                                this.addToTempLine(line, ts, measure, measureIdx);
                                            }
                                            line.fullLine = true;
                                            return line;
                                        }
                                        this.addToTempLine(line, ts, measure, measureIdx);
                                    }
                                }
                                return line;
                            };
                            TGPrintLayout.prototype.addToTempLine = function (line, ts, measure, measureIdx) {
                                line.tempWith += measure.getWidth(this);
                                line.maxY = (measure.getMaxY() > line.maxY) ? measure.getMaxY() : line.maxY;
                                line.minY = (measure.getMinY() < line.minY) ? measure.getMinY() : line.minY;
                                line.addMeasure(measureIdx);
                                measure.registerSpacing(this, ts);
                            };
                            TGPrintLayout.prototype.getSkippedBeats = function (track) {
                                var beats = 0;
                                for (var i = 0; i < (this.settings.getFromMeasure() - 1); i++) {
                                    var measure = track.getMeasure(i);
                                    beats += measure.getNotEmptyBeats();
                                }
                                return beats;
                            };
                            TGPrintLayout.prototype.isPlayModeEnabled = function () {
                                return false;
                            };
                            TGPrintLayout.prototype.getMaxWidth = function () {
                                return (this.document.getSize().getWidth() - this.document.getMargins().getLeft() - this.document.getMargins().getRight() - this.getScale());
                            };
                            TGPrintLayout.prototype.getMaxHeight = function () {
                                return (this.document.getSize().getHeight() - this.document.getMargins().getTop() - this.document.getMargins().getBottom() - this.getScale());
                            };
                            TGPrintLayout.prototype.isFirstMeasure$org_herac_tuxguitar_song_models_TGMeasureHeader = function (mh) {
                                return (mh.getNumber() === this.settings.getFromMeasure());
                            };
                            TGPrintLayout.prototype.isFirstMeasure = function (mh) {
                                if (((mh != null && mh instanceof org.herac.tuxguitar.song.models.TGMeasureHeader) || mh === null)) {
                                    return this.isFirstMeasure$org_herac_tuxguitar_song_models_TGMeasureHeader(mh);
                                }
                                else if (((mh != null && mh instanceof org.herac.tuxguitar.song.models.TGMeasure) || mh === null)) {
                                    return this.isFirstMeasure$org_herac_tuxguitar_song_models_TGMeasure(mh);
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGPrintLayout.prototype.isLastMeasure$org_herac_tuxguitar_song_models_TGMeasureHeader = function (mh) {
                                return (mh.getNumber() === this.settings.getToMeasure());
                            };
                            TGPrintLayout.prototype.isLastMeasure = function (mh) {
                                if (((mh != null && mh instanceof org.herac.tuxguitar.song.models.TGMeasureHeader) || mh === null)) {
                                    return this.isLastMeasure$org_herac_tuxguitar_song_models_TGMeasureHeader(mh);
                                }
                                else if (((mh != null && mh instanceof org.herac.tuxguitar.song.models.TGMeasure) || mh === null)) {
                                    return this.isLastMeasure$org_herac_tuxguitar_song_models_TGMeasure(mh);
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGPrintLayout.prototype.getSongNameFont = function (factory) {
                                if (factory != null && (this.songNameFont == null || this.songNameFont.isDisposed())) {
                                    this.songNameFont = factory['createFont$java_lang_String$float$boolean$boolean'](this.getResources().getDefaultFont().getName(), (16.0 * this.getFontScale()), true, false);
                                }
                                return this.songNameFont;
                            };
                            TGPrintLayout.prototype.getSongAuthorFont = function (factory) {
                                if (factory != null && (this.songAuthorFont == null || this.songAuthorFont.isDisposed())) {
                                    this.songAuthorFont = factory['createFont$java_lang_String$float$boolean$boolean'](this.getResources().getDefaultFont().getName(), (8.0 * this.getFontScale()), true, false);
                                }
                                return this.songAuthorFont;
                            };
                            TGPrintLayout.prototype.getTrackNameFont = function (factory) {
                                if (factory != null && (this.trackNameFont == null || this.trackNameFont.isDisposed())) {
                                    this.trackNameFont = factory['createFont$java_lang_String$float$boolean$boolean'](this.getResources().getDefaultFont().getName(), (8.0 * this.getFontScale()), true, false);
                                }
                                return this.trackNameFont;
                            };
                            TGPrintLayout.prototype.disposeLayout = function () {
                                _super.prototype.disposeLayout.call(this);
                                if (this.songNameFont != null && !this.songNameFont.isDisposed()) {
                                    this.songNameFont.dispose();
                                }
                                if (this.songAuthorFont != null && !this.songAuthorFont.isDisposed()) {
                                    this.songAuthorFont.dispose();
                                }
                                if (this.trackNameFont != null && !this.trackNameFont.isDisposed()) {
                                    this.trackNameFont.dispose();
                                }
                            };
                            return TGPrintLayout;
                        }(org.herac.tuxguitar.graphics.control.TGLayout));
                        print.TGPrintLayout = TGPrintLayout;
                        TGPrintLayout["__class"] = "org.herac.tuxguitar.graphics.control.print.TGPrintLayout";
                        (function (TGPrintLayout) {
                            var TempLine = (function () {
                                function TempLine(__parent) {
                                    this.__parent = __parent;
                                    this.tempWith = 0;
                                    this.lastIndex = 0;
                                    this.fullLine = false;
                                    this.maxY = 0;
                                    this.minY = 50;
                                    this.measures = null;
                                    this.measures = (new java.util.ArrayList());
                                }
                                TempLine.prototype.addMeasure = function (index) {
                                    this.measures.add(new Number(index));
                                    this.lastIndex = index;
                                };
                                return TempLine;
                            }());
                            TGPrintLayout.TempLine = TempLine;
                            TempLine["__class"] = "org.herac.tuxguitar.graphics.control.print.TGPrintLayout.TempLine";
                        })(TGPrintLayout = print.TGPrintLayout || (print.TGPrintLayout = {}));
                    })(print = control.print || (control.print = {}));
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to
                     * Window - Preferences - Java - Code Style - Code Templates
                     * @extends org.herac.tuxguitar.graphics.control.TGLayout
                     */
                    var TGLayoutHorizontal = (function (_super) {
                        __extends(TGLayoutHorizontal, _super);
                        function TGLayoutHorizontal(controller, style) {
                            return _super.call(this, controller, style) || this;
                        }
                        TGLayoutHorizontal.prototype.getMode = function () {
                            return org.herac.tuxguitar.graphics.control.TGLayout.MODE_HORIZONTAL;
                        };
                        TGLayoutHorizontal.prototype.paintSong = function (painter, clientArea, fromX, fromY) {
                            this.setWidth(0);
                            this.setHeight(0);
                            this.clearTrackPositions();
                            var style = this.getStyle();
                            var number = this.getComponent().getTrackSelection();
                            var posY = Math.round(fromY + this.getFirstTrackSpacing());
                            var height = this.getFirstTrackSpacing();
                            var trackHeight;
                            var tracks = this.getSong().getTracks();
                            while ((tracks.hasNext())) {
                                var track = tracks.next();
                                if (number < 0 || track.getNumber() === number) {
                                    var ts = new org.herac.tuxguitar.graphics.control.TGTrackSpacing(this);
                                    ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES, ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 ? ((this.getScoreLineSpacing() * 5)) : 0));
                                    track.getLyrics().start();
                                    var maxY = 0;
                                    var minY = 0;
                                    if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) === 0 && (style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                        maxY = ((this.getScoreLineSpacing() * 4) + (this.getScoreLineSpacing() * 4));
                                        minY = -(this.getScoreLineSpacing() * 3);
                                    }
                                    var measures = track.getMeasures();
                                    while ((measures.hasNext())) {
                                        var measure = measures.next();
                                        maxY = (measure.getMaxY() > maxY) ? measure.getMaxY() : maxY;
                                        minY = (measure.getMinY() < minY) ? measure.getMinY() : minY;
                                        measure.registerSpacing(this, ts);
                                    }
                                    ;
                                    ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_UP_LINES, ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 ? Math.abs(minY) : 0));
                                    if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 && maxY > track.getScoreHeight()) {
                                        ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_DOWN_LINES, (maxY - track.getScoreHeight()));
                                    }
                                    if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0) {
                                        ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE_TOP_SEPARATOR, ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 ? this.getMinScoreTabSpacing() : Math.max(Math.abs(minY), this.getStringSpacing())));
                                        ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE, ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 ? track.getTabHeight() + this.getStringSpacing() + 1 : Math.max(maxY, track.getTabHeight() + this.getStringSpacing() + 1)));
                                    }
                                    ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_LYRIC, 10);
                                    this.checkDefaultSpacing(ts);
                                    this.paintMeasures(track, painter, fromX, posY, ts, clientArea);
                                    this.paintLines(track, ts, painter, fromX + (this.getWidth() + (2.0 * this.getScale())), posY, (clientArea.getWidth() - (fromX + this.getWidth())));
                                    trackHeight = ts.getSize();
                                    this.addTrackPosition(track.getNumber(), posY, trackHeight);
                                    var trackHeightWithSpacing = Math.round(trackHeight + this.getTrackSpacing() + 0.5);
                                    posY += trackHeightWithSpacing;
                                    height += trackHeightWithSpacing;
                                }
                            }
                            ;
                            if (this.getWidth() > clientArea.getWidth()) {
                                this.setWidth(this.getWidth() + this.getFirstMeasureSpacing());
                            }
                            this.setHeight(height);
                        };
                        TGLayoutHorizontal.prototype.paintMeasures = function (track, painter, fromX, fromY, ts, clientArea) {
                            var posX = Math.round(fromX + this.getFirstMeasureSpacing());
                            var posY = fromY;
                            var width = this.getFirstMeasureSpacing();
                            var measures = track.getMeasures();
                            while ((measures.hasNext())) {
                                var measure = measures.next();
                                measure.setPosX(posX);
                                measure.setPosY(posY);
                                measure.setTs(ts);
                                track.getLyrics().setCurrentMeasure(measure);
                                var measureWidth = measure.getWidth(this);
                                var measureWidthRounded = (this.isBufferEnabled() ? Math.round(measureWidth) : measureWidth);
                                var measureSpacing = (measureWidthRounded - measureWidth);
                                var isAtX = ((posX + measure.getWidth(this)) > clientArea.getX() - 100 && posX < clientArea.getX() + clientArea.getWidth() + measure.getWidth(this) + 100);
                                var isAtY = (posY + ts.getSize() > clientArea.getY() && posY < clientArea.getY() + clientArea.getHeight() + 80);
                                if (isAtX && isAtY) {
                                    this.paintMeasure(measure, painter, measureSpacing);
                                    track.getLyrics().paintCurrentNoteBeats(painter, this, measure, posX, posY);
                                }
                                else {
                                    measure.setOutOfBounds(true);
                                }
                                posX += measureWidthRounded;
                                width += measureWidthRounded;
                            }
                            ;
                            this.setWidth(Math.max(this.getWidth(), width));
                        };
                        return TGLayoutHorizontal;
                    }(org.herac.tuxguitar.graphics.control.TGLayout));
                    control.TGLayoutHorizontal = TGLayoutHorizontal;
                    TGLayoutHorizontal["__class"] = "org.herac.tuxguitar.graphics.control.TGLayoutHorizontal";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to
                     * Window - Preferences - Java - Code Style - Code Templates
                     * @extends org.herac.tuxguitar.graphics.control.TGLayout
                     */
                    var TGLayoutVertical = (function (_super) {
                        __extends(TGLayoutVertical, _super);
                        function TGLayoutVertical(controller, style) {
                            var _this = _super.call(this, controller, style) || this;
                            _this.maximumWidth = 0;
                            _this.marginLeft = 0;
                            _this.marginRight = 0;
                            return _this;
                        }
                        TGLayoutVertical.prototype.getMode = function () {
                            return org.herac.tuxguitar.graphics.control.TGLayout.MODE_VERTICAL;
                        };
                        TGLayoutVertical.prototype.paintSong = function (painter, clientArea, fromX, fromY) {
                            this.marginLeft = this.getFirstMeasureSpacing();
                            this.marginRight = 10;
                            this.maximumWidth = (clientArea.getWidth() - (this.marginLeft + this.marginRight));
                            this.setHeight(0);
                            this.setWidth(0);
                            this.clearTrackPositions();
                            var style = this.getStyle();
                            var number = this.getComponent().getTrackSelection();
                            var posY = Math.round(fromY + this.getFirstTrackSpacing());
                            var height = this.getFirstTrackSpacing();
                            var lineHeight = 0;
                            var measureCount = this.getSong().countMeasureHeaders();
                            var nextMeasureIndex = 0;
                            while ((measureCount > nextMeasureIndex)) {
                                var line = null;
                                var tracks = this.getSong().getTracks();
                                while ((tracks.hasNext())) {
                                    var track = tracks.next();
                                    if (number < 0 || track.getNumber() === number) {
                                        var ts = new org.herac.tuxguitar.graphics.control.TGTrackSpacing(this);
                                        ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES, ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 ? ((this.getScoreLineSpacing() * 5)) : 0));
                                        if (nextMeasureIndex === 0) {
                                            track.getLyrics().start();
                                        }
                                        line = this.getTempLines(track, nextMeasureIndex, ts);
                                        if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                            ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_UP_LINES, Math.abs(line.minY));
                                            if (line.maxY > track.getScoreHeight()) {
                                                ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_DOWN_LINES, (line.maxY - track.getScoreHeight()));
                                            }
                                        }
                                        if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0) {
                                            ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE_TOP_SEPARATOR, ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 ? this.getMinScoreTabSpacing() : Math.max(Math.abs(line.minY), this.getStringSpacing())));
                                            ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE, ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 ? track.getTabHeight() + this.getStringSpacing() + 1 : Math.max(line.maxY, track.getTabHeight() + this.getStringSpacing() + 1)));
                                        }
                                        ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_LYRIC, 10);
                                        this.checkDefaultSpacing(ts);
                                        this.paintLine(track, line, painter, fromX, posY, ts, clientArea);
                                        lineHeight = ts.getSize();
                                        this.addTrackPosition(track.getNumber(), posY, lineHeight);
                                        var emptyX = (this.marginLeft + fromX + line.tempWith + 2);
                                        var emptyWith = (this.maximumWidth - emptyX);
                                        if ((emptyWith - 20) > 0 && (line.lastIndex + 1) >= measureCount) {
                                            if (emptyX < (clientArea.getX() + clientArea.getWidth())) {
                                                emptyX = (emptyX < clientArea.getX() ? clientArea.getX() : emptyX);
                                                emptyWith = (emptyWith > clientArea.getWidth() ? clientArea.getWidth() : emptyWith);
                                                this.paintLines(track, ts, painter, emptyX, posY, emptyWith);
                                            }
                                        }
                                        var lineHeightWithSpacing = Math.round(lineHeight + this.getTrackSpacing() + 0.5);
                                        posY += lineHeightWithSpacing;
                                        height += lineHeightWithSpacing;
                                    }
                                }
                                ;
                                if (line != null) {
                                    nextMeasureIndex = line.lastIndex + 1;
                                }
                            }
                            ;
                            this.setHeight(height);
                            this.setWidth(this.getWidth() + this.marginRight);
                        };
                        TGLayoutVertical.prototype.paintLine = function (track, line, painter, fromX, fromY, ts, clientArea) {
                            var posX = Math.round(this.marginLeft + fromX);
                            var posY = Math.round(fromY);
                            var width = this.marginLeft;
                            var isAtY = (posY + ts.getSize() > clientArea.getY() && posY < clientArea.getY() + clientArea.getHeight() + (this.getScale() * 80.0));
                            var defaultMeasureSpacing = 0;
                            if (line.fullLine) {
                                var diff = (this.maximumWidth - line.tempWith);
                                if (diff !== 0 && line.measures.size() > 0) {
                                    defaultMeasureSpacing = (diff / line.measures.size());
                                }
                            }
                            var measureSpacing = defaultMeasureSpacing;
                            for (var i = 0; i < line.measures.size(); i++) {
                                var index = (line.measures.get(i) | 0);
                                var currMeasure = track.getMeasure(index);
                                currMeasure.setPosX(posX);
                                currMeasure.setPosY(posY);
                                currMeasure.setTs(ts);
                                track.getLyrics().setCurrentMeasure(currMeasure);
                                currMeasure.setFirstOfLine(i === 0);
                                var measureWidth = currMeasure.getWidth(this);
                                var measureWidthWithSpacing = (this.isBufferEnabled() ? Math.round(measureWidth + measureSpacing) : (measureWidth + measureSpacing));
                                var measureSpacingAfterRound = (measureWidthWithSpacing - measureWidth);
                                var isAtX = (posX + measureWidthWithSpacing > clientArea.getX() && posX < clientArea.getX() + clientArea.getWidth());
                                if (isAtX && isAtY) {
                                    this.paintMeasure(currMeasure, painter, measureSpacingAfterRound);
                                    track.getLyrics().paintCurrentNoteBeats(painter, this, currMeasure, posX, posY);
                                }
                                else {
                                    currMeasure.setOutOfBounds(true);
                                }
                                posX += measureWidthWithSpacing;
                                width += measureWidthWithSpacing;
                                measureSpacing = (defaultMeasureSpacing + (measureSpacing - measureSpacingAfterRound));
                            }
                            this.setWidth(Math.max(this.getWidth(), width));
                        };
                        TGLayoutVertical.prototype.getTempLines = function (track, fromIndex, ts) {
                            var style = this.getStyle();
                            var line = new TGLayoutVertical.TempLine(this);
                            line.maxY = 0;
                            line.minY = 0;
                            if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) === 0 && (style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                line.maxY = ((this.getScoreLineSpacing() * 4) + (this.getScoreLineSpacing() * 4));
                                line.minY = -(this.getScoreLineSpacing() * 3);
                            }
                            var measureCount = track.countMeasures();
                            for (var measureIdx = fromIndex; measureIdx < measureCount; measureIdx++) {
                                var measure = track.getMeasure(measureIdx);
                                if ((line.tempWith + measure.getWidth(this)) >= this.maximumWidth) {
                                    if (line.measures.isEmpty()) {
                                        this.addToTempLine(line, ts, measure, measureIdx);
                                    }
                                    line.fullLine = true;
                                    return line;
                                }
                                this.addToTempLine(line, ts, measure, measureIdx);
                            }
                            return line;
                        };
                        TGLayoutVertical.prototype.addToTempLine = function (line, ts, measure, measureIdx) {
                            line.tempWith += measure.getWidth(this);
                            line.maxY = (measure.getMaxY() > line.maxY) ? measure.getMaxY() : line.maxY;
                            line.minY = (measure.getMinY() < line.minY) ? measure.getMinY() : line.minY;
                            line.addMeasure(measureIdx);
                            measure.registerSpacing(this, ts);
                        };
                        return TGLayoutVertical;
                    }(org.herac.tuxguitar.graphics.control.TGLayout));
                    control.TGLayoutVertical = TGLayoutVertical;
                    TGLayoutVertical["__class"] = "org.herac.tuxguitar.graphics.control.TGLayoutVertical";
                    (function (TGLayoutVertical) {
                        var TempLine = (function () {
                            function TempLine(__parent) {
                                this.__parent = __parent;
                                this.tempWith = 0;
                                this.lastIndex = 0;
                                this.fullLine = false;
                                this.maxY = 0;
                                this.minY = 0;
                                this.measures = null;
                                this.measures = (new java.util.ArrayList());
                            }
                            TempLine.prototype.addMeasure = function (index) {
                                this.measures.add(new Number(index));
                                this.lastIndex = index;
                            };
                            return TempLine;
                        }());
                        TGLayoutVertical.TempLine = TempLine;
                        TempLine["__class"] = "org.herac.tuxguitar.graphics.control.TGLayoutVertical.TempLine";
                    })(TGLayoutVertical = control.TGLayoutVertical || (control.TGLayoutVertical = {}));
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var control;
                (function (control) {
                    var TGTabLayoutStyles = (function (_super) {
                        __extends(TGTabLayoutStyles, _super);
                        function TGTabLayoutStyles() {
                            var _this = _super.call(this) || this;
                            _this.setBufferEnabled(false);
                            _this.setTrackSpacing(5);
                            _this.setFirstTrackSpacing(15);
                            _this.setFirstMeasureSpacing(10);
                            _this.setStringSpacing(10);
                            _this.setScoreLineSpacing(8);
                            _this.setMinBufferSeparator(20);
                            _this.setMinTopSpacing(10);
                            _this.setMinScoreTabSpacing(5);
                            _this.setFirstNoteSpacing(10);
                            _this.setMeasureLeftSpacing(15);
                            _this.setMeasureRightSpacing(15);
                            _this.setClefSpacing(30);
                            _this.setKeySignatureSpacing(15);
                            _this.setTimeSignatureSpacing(15);
                            _this.setChordFretIndexSpacing(8);
                            _this.setChordStringSpacing(5);
                            _this.setChordFretSpacing(6);
                            _this.setChordNoteSize(4);
                            _this.setRepeatEndingSpacing(20);
                            _this.setTextSpacing(15);
                            _this.setMarkerSpacing(15);
                            _this.setLoopMarkerSpacing(5);
                            _this.setDivisionTypeSpacing(10);
                            _this.setEffectSpacing(8);
                            _this.setLineWidths([0, 1, 2, 3, 4, 5]);
                            _this.setDurationWidths([30.0, 25.0, 21.0, 20.0, 19.0, 18.0]);
                            _this.setDefaultFont(new org.herac.tuxguitar.graphics.TGFontModel("sans-serif", 8, false, false));
                            _this.setNoteFont(new org.herac.tuxguitar.graphics.TGFontModel("sans-serif", 9, true, false));
                            _this.setTimeSignatureFont(new org.herac.tuxguitar.graphics.TGFontModel("sans-serif", 15, true, false));
                            _this.setLyricFont(new org.herac.tuxguitar.graphics.TGFontModel("sans-serif", 8, false, false));
                            _this.setTextFont(new org.herac.tuxguitar.graphics.TGFontModel("sans-serif", 8, false, false));
                            _this.setGraceFont(new org.herac.tuxguitar.graphics.TGFontModel("sans-serif", 8, false, false));
                            _this.setChordFont(new org.herac.tuxguitar.graphics.TGFontModel("sans-serif", 8, false, false));
                            _this.setChordFretFont(new org.herac.tuxguitar.graphics.TGFontModel("sans-serif", 8, false, false));
                            _this.setMarkerFont(new org.herac.tuxguitar.graphics.TGFontModel("sans-serif", 8, false, false));
                            _this.setBackgroundColor(new org.herac.tuxguitar.graphics.TGColorModel(255, 255, 255));
                            _this.setLineColor(new org.herac.tuxguitar.graphics.TGColorModel(0, 0, 0));
                            _this.setScoreNoteColor(new org.herac.tuxguitar.graphics.TGColorModel(0, 0, 0));
                            _this.setTabNoteColor(new org.herac.tuxguitar.graphics.TGColorModel(0, 0, 0));
                            _this.setPlayNoteColor(new org.herac.tuxguitar.graphics.TGColorModel(170, 0, 0));
                            _this.setLoopSMarkerColor(new org.herac.tuxguitar.graphics.TGColorModel(0, 0, 0));
                            _this.setLoopEMarkerColor(new org.herac.tuxguitar.graphics.TGColorModel(0, 0, 0));
                            return _this;
                        }
                        return TGTabLayoutStyles;
                    }(org.herac.tuxguitar.graphics.control.TGLayoutStyles));
                    control.TGTabLayoutStyles = TGTabLayoutStyles;
                    TGTabLayoutStyles["__class"] = "org.herac.tg.webapp.control.TGTabLayoutStyles";
                })(control = webapp.control || (webapp.control = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGBeatSpacing = (function (_super) {
                        __extends(TGBeatSpacing, _super);
                        function TGBeatSpacing(layout) {
                            return _super.call(this, layout, TGBeatSpacing.POSITIONS_$LI$(), TGBeatSpacing.EFFECT_POSITIONS_$LI$().length) || this;
                        }
                        TGBeatSpacing.EFFECT_POSITIONS_$LI$ = function () { if (TGBeatSpacing.EFFECT_POSITIONS == null)
                            TGBeatSpacing.EFFECT_POSITIONS = [TGBeatSpacing.POSITION_ACCENTUATED_EFFECT, TGBeatSpacing.POSITION_HEAVY_ACCENTUATED_EFFECT, TGBeatSpacing.POSITION_HARMONIC_EFFEC, TGBeatSpacing.POSITION_TAPPING_EFFEC, TGBeatSpacing.POSITION_SLAPPING_EFFEC, TGBeatSpacing.POSITION_POPPING_EFFEC, TGBeatSpacing.POSITION_PALM_MUTE_EFFEC, TGBeatSpacing.POSITION_LET_RING_EFFEC, TGBeatSpacing.POSITION_VIBRATO_EFFEC, TGBeatSpacing.POSITION_TRILL_EFFEC, TGBeatSpacing.POSITION_FADE_IN]; return TGBeatSpacing.EFFECT_POSITIONS; };
                        ;
                        TGBeatSpacing.POSITIONS_$LI$ = function () { if (TGBeatSpacing.POSITIONS == null)
                            TGBeatSpacing.POSITIONS = [TGBeatSpacing.EFFECT_POSITIONS_$LI$(), TGBeatSpacing.EFFECT_POSITIONS_$LI$(), TGBeatSpacing.EFFECT_POSITIONS_$LI$()]; return TGBeatSpacing.POSITIONS; };
                        ;
                        return TGBeatSpacing;
                    }(org.herac.tuxguitar.graphics.control.TGSpacing));
                    /**
                     * POSITIONS ARRAY INDICES
                     */
                    TGBeatSpacing.POSITION_ACCENTUATED_EFFECT = 0;
                    TGBeatSpacing.POSITION_HEAVY_ACCENTUATED_EFFECT = 1;
                    TGBeatSpacing.POSITION_HARMONIC_EFFEC = 2;
                    TGBeatSpacing.POSITION_TAPPING_EFFEC = 3;
                    TGBeatSpacing.POSITION_SLAPPING_EFFEC = 4;
                    TGBeatSpacing.POSITION_POPPING_EFFEC = 5;
                    TGBeatSpacing.POSITION_PALM_MUTE_EFFEC = 6;
                    TGBeatSpacing.POSITION_LET_RING_EFFEC = 7;
                    TGBeatSpacing.POSITION_VIBRATO_EFFEC = 8;
                    TGBeatSpacing.POSITION_TRILL_EFFEC = 9;
                    TGBeatSpacing.POSITION_FADE_IN = 10;
                    control.TGBeatSpacing = TGBeatSpacing;
                    TGBeatSpacing["__class"] = "org.herac.tuxguitar.graphics.control.TGBeatSpacing";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGTrackSpacing = (function (_super) {
                        __extends(TGTrackSpacing, _super);
                        function TGTrackSpacing(layout) {
                            return _super.call(this, layout, TGTrackSpacing.POSITIONS_$LI$(), 16) || this;
                        }
                        TGTrackSpacing.POSITIONS_$LI$ = function () { if (TGTrackSpacing.POSITIONS == null)
                            TGTrackSpacing.POSITIONS = [[0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 8, 12, 7, 13, 14, 15, 16], [0, 1, 2, 3, 4, 5, 6, 14, 15, 16, 8, 11, 7, 9, 10, 12, 13], [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 7, 11, 12, 13, 14, 15, 16]]; return TGTrackSpacing.POSITIONS; };
                        ;
                        return TGTrackSpacing;
                    }(org.herac.tuxguitar.graphics.control.TGSpacing));
                    /**
                     * POSITIONS ARRAY INDICES
                     */
                    TGTrackSpacing.POSITION_TOP = 0;
                    TGTrackSpacing.POSITION_LOOP_MARKER = 1;
                    TGTrackSpacing.POSITION_MARKER = 2;
                    TGTrackSpacing.POSITION_TEXT = 3;
                    TGTrackSpacing.POSITION_BUFFER_SEPARATOR = 4;
                    TGTrackSpacing.POSITION_REPEAT_ENDING = 5;
                    TGTrackSpacing.POSITION_CHORD = 6;
                    TGTrackSpacing.POSITION_SCORE_UP_LINES = 7;
                    TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES = 8;
                    TGTrackSpacing.POSITION_SCORE_DOWN_LINES = 9;
                    TGTrackSpacing.POSITION_DIVISION_TYPE_1 = 10;
                    TGTrackSpacing.POSITION_DIVISION_TYPE_2 = 11;
                    TGTrackSpacing.POSITION_EFFECTS = 12;
                    TGTrackSpacing.POSITION_TABLATURE_TOP_SEPARATOR = 13;
                    TGTrackSpacing.POSITION_TABLATURE = 14;
                    TGTrackSpacing.POSITION_LYRIC = 15;
                    TGTrackSpacing.POSITION_BOTTOM = 16;
                    control.TGTrackSpacing = TGTrackSpacing;
                    TGTrackSpacing["__class"] = "org.herac.tuxguitar.graphics.control.TGTrackSpacing";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var graphics;
                (function (graphics) {
                    var TGWebColor = (function (_super) {
                        __extends(TGWebColor, _super);
                        function TGWebColor(red, green, blue) {
                            var _this = this;
                            if (((typeof red === 'number') || red === null) && ((typeof green === 'number') || green === null) && ((typeof blue === 'number') || blue === null)) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this, red, green, blue) || this;
                                _this.disposed = false;
                                _this.disposed = false;
                            }
                            else if (((red != null && red instanceof org.herac.tuxguitar.graphics.TGColorModel) || red === null) && green === undefined && blue === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                var model = __args[0];
                                {
                                    var __args_12 = Array.prototype.slice.call(arguments);
                                    var red_2 = model.getRed();
                                    var green_2 = model.getGreen();
                                    var blue_2 = model.getBlue();
                                    _this = _super.call(this, red_2, green_2, blue_2) || this;
                                    _this.disposed = false;
                                    _this.disposed = false;
                                }
                            }
                            else if (((red != null && (red["__interfaces"] != null && red["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGColor") >= 0 || red.constructor != null && red.constructor["__interfaces"] != null && red.constructor["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGColor") >= 0)) || red === null) && green === undefined && blue === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                var color = __args[0];
                                {
                                    var __args_13 = Array.prototype.slice.call(arguments);
                                    var red_3 = color.getRed();
                                    var green_3 = color.getGreen();
                                    var blue_3 = color.getBlue();
                                    _this = _super.call(this, red_3, green_3, blue_3) || this;
                                    _this.disposed = false;
                                    _this.disposed = false;
                                }
                            }
                            else
                                throw new Error('invalid overload');
                            return _this;
                        }
                        TGWebColor.prototype.dispose = function () {
                            this.disposed = true;
                        };
                        TGWebColor.prototype.isDisposed = function () {
                            return this.disposed;
                        };
                        TGWebColor.prototype.createHandle = function () {
                            return ("rgb(" + (this.getRed() & 255) + "," + (this.getGreen() & 255) + "," + (this.getBlue() & 255) + ")");
                        };
                        return TGWebColor;
                    }(org.herac.tuxguitar.graphics.TGColorModel));
                    graphics.TGWebColor = TGWebColor;
                    TGWebColor["__class"] = "org.herac.tg.webapp.graphics.TGWebColor";
                    TGWebColor["__interfaces"] = ["org.herac.tuxguitar.graphics.TGResource", "org.herac.tuxguitar.graphics.TGColor"];
                })(graphics = webapp.graphics || (webapp.graphics = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var graphics;
                (function (graphics) {
                    var TGWebFont = (function (_super) {
                        __extends(TGWebFont, _super);
                        function TGWebFont(name, height, bold, italic) {
                            var _this = this;
                            if (((typeof name === 'string') || name === null) && ((typeof height === 'number') || height === null) && ((typeof bold === 'boolean') || bold === null) && ((typeof italic === 'boolean') || italic === null)) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this, name, height, bold, italic) || this;
                                _this.disposed = false;
                                _this.disposed = false;
                            }
                            else if (((name != null && name instanceof org.herac.tuxguitar.graphics.TGFontModel) || name === null) && height === undefined && bold === undefined && italic === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                var model = __args[0];
                                {
                                    var __args_14 = Array.prototype.slice.call(arguments);
                                    var name_3 = model.getName();
                                    var height_4 = model.getHeight();
                                    var bold_2 = model.isBold();
                                    var italic_2 = model.isItalic();
                                    _this = _super.call(this, name_3, height_4, bold_2, italic_2) || this;
                                    _this.disposed = false;
                                    _this.disposed = false;
                                }
                            }
                            else if (((name != null && (name["__interfaces"] != null && name["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGFont") >= 0 || name.constructor != null && name.constructor["__interfaces"] != null && name.constructor["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGFont") >= 0)) || name === null) && height === undefined && bold === undefined && italic === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                var font = __args[0];
                                {
                                    var __args_15 = Array.prototype.slice.call(arguments);
                                    var name_4 = font.getName();
                                    var height_5 = font.getHeight();
                                    var bold_3 = font.isBold();
                                    var italic_3 = font.isItalic();
                                    _this = _super.call(this, name_4, height_5, bold_3, italic_3) || this;
                                    _this.disposed = false;
                                    _this.disposed = false;
                                }
                            }
                            else
                                throw new Error('invalid overload');
                            return _this;
                        }
                        TGWebFont.prototype.dispose = function () {
                            this.disposed = true;
                        };
                        TGWebFont.prototype.isDisposed = function () {
                            return this.disposed;
                        };
                        TGWebFont.prototype.createHandle = function () {
                            return (Math.round(this.getHeight()) + "px " + this.getName());
                        };
                        return TGWebFont;
                    }(org.herac.tuxguitar.graphics.TGFontModel));
                    graphics.TGWebFont = TGWebFont;
                    TGWebFont["__class"] = "org.herac.tg.webapp.graphics.TGWebFont";
                    TGWebFont["__interfaces"] = ["org.herac.tuxguitar.graphics.TGResource", "org.herac.tuxguitar.graphics.TGFont"];
                })(graphics = webapp.graphics || (webapp.graphics = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v08;
                    (function (v08) {
                        var TGStream = (function () {
                            function TGStream() {
                            }
                            TGStream.TG_VERSION_$LI$ = function () { if (TGStream.TG_VERSION == null)
                                TGStream.TG_VERSION = ("TG_DEVEL-0.8"); return TGStream.TG_VERSION; };
                            ;
                            TGStream.TG_FORMAT_CODE_$LI$ = function () { if (TGStream.TG_FORMAT_CODE == null)
                                TGStream.TG_FORMAT_CODE = ("tg"); return TGStream.TG_FORMAT_CODE; };
                            ;
                            TGStream.TG_FORMAT_$LI$ = function () { if (TGStream.TG_FORMAT == null)
                                TGStream.TG_FORMAT = new org.herac.tuxguitar.io.base.TGFileFormat("TuxGuitar 0.8", "audio/x-tuxguitar", [TGStream.TG_FORMAT_CODE_$LI$()]); return TGStream.TG_FORMAT; };
                            ;
                            return TGStream;
                        }());
                        TGStream.CHANNEL_SOLO = 1;
                        TGStream.CHANNEL_MUTE = 2;
                        TGStream.MEASURE_HEADER_TIMESIGNATURE = 1;
                        TGStream.MEASURE_HEADER_TEMPO = 2;
                        TGStream.MEASURE_HEADER_OPEN_REPEAT = 4;
                        TGStream.MEASURE_HEADER_CLOSE_REPEAT = 8;
                        TGStream.MEASURE_HEADER_MARKER = 16;
                        TGStream.MEASURE_HEADER_TRIPLET_FEEL = 32;
                        TGStream.MEASURE_CLEF = 1;
                        TGStream.MEASURE_KEYSIGNATURE = 2;
                        TGStream.COMPONENT_NOTE = 1;
                        TGStream.COMPONENT_SILENCE = 2;
                        TGStream.COMPONENT_TIEDNOTE = 4;
                        TGStream.COMPONENT_EFFECT = 8;
                        TGStream.COMPONENT_NEXT_BEAT = 16;
                        TGStream.COMPONENT_NEXT_DURATION = 32;
                        TGStream.DURATION_DOTTED = 1;
                        TGStream.DURATION_DOUBLE_DOTTED = 2;
                        TGStream.DURATION_TUPLETO = 4;
                        TGStream.EFFECT_VIBRATO = 1;
                        TGStream.EFFECT_BEND = 2;
                        TGStream.EFFECT_DEAD_NOTE = 4;
                        TGStream.EFFECT_SLIDE = 8;
                        TGStream.EFFECT_HAMMER = 16;
                        v08.TGStream = TGStream;
                        TGStream["__class"] = "org.herac.tuxguitar.io.tg.v08.TGStream";
                    })(v08 = tg.v08 || (tg.v08 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v09;
                    (function (v09) {
                        var TGStream = (function () {
                            function TGStream() {
                            }
                            TGStream.TG_VERSION_$LI$ = function () { if (TGStream.TG_VERSION == null)
                                TGStream.TG_VERSION = ("TuxGuitar File Format - 0.9"); return TGStream.TG_VERSION; };
                            ;
                            TGStream.TG_FORMAT_CODE_$LI$ = function () { if (TGStream.TG_FORMAT_CODE == null)
                                TGStream.TG_FORMAT_CODE = ("tg"); return TGStream.TG_FORMAT_CODE; };
                            ;
                            TGStream.TG_FORMAT_$LI$ = function () { if (TGStream.TG_FORMAT == null)
                                TGStream.TG_FORMAT = new org.herac.tuxguitar.io.base.TGFileFormat("TuxGuitar 0.9", "audio/x-tuxguitar", [TGStream.TG_FORMAT_CODE_$LI$()]); return TGStream.TG_FORMAT; };
                            ;
                            return TGStream;
                        }());
                        TGStream.TRACK_LYRICS = 1;
                        TGStream.CHANNEL_SOLO = 1;
                        TGStream.CHANNEL_MUTE = 2;
                        TGStream.MEASURE_HEADER_TIMESIGNATURE = 1;
                        TGStream.MEASURE_HEADER_TEMPO = 2;
                        TGStream.MEASURE_HEADER_OPEN_REPEAT = 4;
                        TGStream.MEASURE_HEADER_CLOSE_REPEAT = 8;
                        TGStream.MEASURE_HEADER_MARKER = 16;
                        TGStream.MEASURE_HEADER_TRIPLET_FEEL = 32;
                        TGStream.MEASURE_CLEF = 1;
                        TGStream.MEASURE_KEYSIGNATURE = 2;
                        TGStream.COMPONENT_NOTE = 1;
                        TGStream.COMPONENT_SILENCE = 2;
                        TGStream.COMPONENT_TIEDNOTE = 4;
                        TGStream.COMPONENT_EFFECT = 8;
                        TGStream.COMPONENT_NEXT_BEAT = 16;
                        TGStream.COMPONENT_NEXT_DURATION = 32;
                        TGStream.COMPONENT_VELOCITY = 64;
                        TGStream.DURATION_DOTTED = 1;
                        TGStream.DURATION_DOUBLE_DOTTED = 2;
                        TGStream.DURATION_NO_TUPLET = 4;
                        TGStream.EFFECT_BEND = 1;
                        TGStream.EFFECT_TREMOLO_BAR = 2;
                        TGStream.EFFECT_HARMONIC = 4;
                        TGStream.EFFECT_GRACE = 8;
                        TGStream.EFFECT_TRILL = 16;
                        TGStream.EFFECT_TREMOLO_PICKING = 32;
                        TGStream.EFFECT_VIBRATO = 64;
                        TGStream.EFFECT_DEAD = 128;
                        TGStream.EFFECT_SLIDE = 256;
                        TGStream.EFFECT_HAMMER = 512;
                        TGStream.EFFECT_GHOST = 1024;
                        TGStream.EFFECT_ACCENTUATED = 2048;
                        TGStream.EFFECT_HEAVY_ACCENTUATED = 4096;
                        TGStream.EFFECT_PALM_MUTE = 8192;
                        TGStream.EFFECT_STACCATO = 16384;
                        TGStream.EFFECT_TAPPING = 32768;
                        TGStream.EFFECT_SLAPPING = 65536;
                        TGStream.EFFECT_POPPING = 131072;
                        TGStream.EFFECT_FADE_IN = 262144;
                        TGStream.GRACE_FLAG_DEAD = 1;
                        TGStream.GRACE_FLAG_ON_BEAT = 2;
                        v09.TGStream = TGStream;
                        TGStream["__class"] = "org.herac.tuxguitar.io.tg.v09.TGStream";
                    })(v09 = tg.v09 || (tg.v09 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var base;
                (function (base) {
                    var TGSongReaderHandle = (function (_super) {
                        __extends(TGSongReaderHandle, _super);
                        function TGSongReaderHandle() {
                            var _this = _super.call(this) || this;
                            _this.inputStream = null;
                            return _this;
                        }
                        TGSongReaderHandle.prototype.getInputStream = function () {
                            return this.inputStream;
                        };
                        TGSongReaderHandle.prototype.setInputStream = function (is) {
                            this.inputStream = is;
                        };
                        return TGSongReaderHandle;
                    }(org.herac.tuxguitar.io.base.TGSongPersistenceHandle));
                    base.TGSongReaderHandle = TGSongReaderHandle;
                    TGSongReaderHandle["__class"] = "org.herac.tuxguitar.io.base.TGSongReaderHandle";
                })(base = io.base || (io.base = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var base;
                (function (base) {
                    var TGSongWriterHandle = (function (_super) {
                        __extends(TGSongWriterHandle, _super);
                        function TGSongWriterHandle() {
                            var _this = _super.call(this) || this;
                            _this.outputStream = null;
                            return _this;
                        }
                        TGSongWriterHandle.prototype.getOutputStream = function () {
                            return this.outputStream;
                        };
                        TGSongWriterHandle.prototype.setOutputStream = function (os) {
                            this.outputStream = os;
                        };
                        return TGSongWriterHandle;
                    }(org.herac.tuxguitar.io.base.TGSongPersistenceHandle));
                    base.TGSongWriterHandle = TGSongWriterHandle;
                    TGSongWriterHandle["__class"] = "org.herac.tuxguitar.io.base.TGSongWriterHandle";
                })(base = io.base || (io.base = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var base;
                (function (base) {
                    var TGSongReaderHelper = (function (_super) {
                        __extends(TGSongReaderHelper, _super);
                        function TGSongReaderHelper(context) {
                            return _super.call(this, context) || this;
                        }
                        TGSongReaderHelper.prototype.read = function (handle) {
                            try {
                                var success = false;
                                handle.setInputStream(new java.io.BufferedInputStream(handle.getInputStream()));
                                if (handle.getFormat() == null) {
                                    handle.setFormat(this.detectFileFormat(handle));
                                }
                                if (handle.getFormat() != null) {
                                    var reader = org.herac.tuxguitar.io.base.TGFileFormatManager.getInstance(this.getContext()).findSongReader(handle.getFormat());
                                    if (reader != null) {
                                        reader['read$org_herac_tuxguitar_io_base_TGSongReaderHandle'](handle);
                                        success = true;
                                    }
                                }
                                if (!success) {
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException("Unsupported file format");
                                }
                            }
                            catch (__e) {
                                if (__e != null && __e instanceof org.herac.tuxguitar.io.base.TGFileFormatException) {
                                    var tgFileFormatException = __e;
                                    throw tgFileFormatException;
                                }
                                if (__e != null && __e instanceof Error) {
                                    var throwable = __e;
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException(throwable);
                                }
                            }
                            finally {
                                try {
                                    handle.getInputStream().close();
                                }
                                catch (e) {
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException(e);
                                }
                                ;
                            }
                            ;
                        };
                        TGSongReaderHelper.prototype.detectFileFormat = function (handle) {
                            handle.getInputStream().mark(1);
                            var fileFormatManager = org.herac.tuxguitar.io.base.TGFileFormatManager.getInstance(this.getContext());
                            var detectors = fileFormatManager.getFileFormatDetectors();
                            for (var index145 = detectors.iterator(); index145.hasNext();) {
                                var detector = index145.next();
                                {
                                    var fileFormat = detector.getFileFormat(handle.getInputStream());
                                    handle.getInputStream().reset();
                                    if (fileFormat != null) {
                                        return fileFormat;
                                    }
                                }
                            }
                            var mimeType = handle.getContext().getAttribute(org.herac.tuxguitar.io.base.TGSongPersistenceHelper.ATTRIBUTE_MIME_TYPE);
                            if (mimeType != null) {
                                var fileFormat = fileFormatManager.findReaderFileFormatByMimeType$java_lang_String(mimeType);
                                if (fileFormat != null) {
                                    return fileFormat;
                                }
                            }
                            var formatCode = handle.getContext().getAttribute(org.herac.tuxguitar.io.base.TGSongPersistenceHelper.ATTRIBUTE_FORMAT_CODE);
                            if (formatCode != null) {
                                var fileFormat = fileFormatManager.findReaderFileFormatByCode$java_lang_String(formatCode);
                                if (fileFormat != null) {
                                    return fileFormat;
                                }
                            }
                            return null;
                        };
                        return TGSongReaderHelper;
                    }(org.herac.tuxguitar.io.base.TGSongPersistenceHelper));
                    base.TGSongReaderHelper = TGSongReaderHelper;
                    TGSongReaderHelper["__class"] = "org.herac.tuxguitar.io.base.TGSongReaderHelper";
                })(base = io.base || (io.base = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var base;
                (function (base) {
                    var TGSongWriterHelper = (function (_super) {
                        __extends(TGSongWriterHelper, _super);
                        function TGSongWriterHelper(context) {
                            return _super.call(this, context) || this;
                        }
                        TGSongWriterHelper.prototype.write = function (handle) {
                            try {
                                var success = false;
                                if (handle.getFormat() == null) {
                                    handle.setFormat(this.detectFileFormat(handle));
                                }
                                if (handle.getFormat() != null) {
                                    var writer = org.herac.tuxguitar.io.base.TGFileFormatManager.getInstance(this.getContext()).findSongWriter(handle.getFormat());
                                    if (writer != null) {
                                        writer['write$org_herac_tuxguitar_io_base_TGSongWriterHandle'](handle);
                                        success = true;
                                    }
                                }
                                if (!success) {
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException("Unsupported file format");
                                }
                            }
                            catch (__e) {
                                if (__e != null && __e instanceof org.herac.tuxguitar.io.base.TGFileFormatException) {
                                    var tgFileFormatException = __e;
                                    throw tgFileFormatException;
                                }
                                if (__e != null && __e instanceof Error) {
                                    var throwable = __e;
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException(throwable);
                                }
                            }
                            finally {
                                try {
                                    handle.getOutputStream().close();
                                }
                                catch (e) {
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException(e);
                                }
                                ;
                            }
                            ;
                        };
                        TGSongWriterHelper.prototype.detectFileFormat = function (handle) {
                            var fileFormatManager = org.herac.tuxguitar.io.base.TGFileFormatManager.getInstance(this.getContext());
                            var mimeType = handle.getContext().getAttribute(org.herac.tuxguitar.io.base.TGSongPersistenceHelper.ATTRIBUTE_MIME_TYPE);
                            if (mimeType != null) {
                                var fileFormat = fileFormatManager.findWriterFileFormatByMimeType$java_lang_String(mimeType);
                                if (fileFormat != null) {
                                    return fileFormat;
                                }
                            }
                            var formatCode = handle.getContext().getAttribute(org.herac.tuxguitar.io.base.TGSongPersistenceHelper.ATTRIBUTE_FORMAT_CODE);
                            if (formatCode != null) {
                                var fileFormat = fileFormatManager.findWriterFileFormatByCode$java_lang_String(formatCode);
                                if (fileFormat != null) {
                                    return fileFormat;
                                }
                            }
                            return null;
                        };
                        return TGSongWriterHelper;
                    }(org.herac.tuxguitar.io.base.TGSongPersistenceHelper));
                    base.TGSongWriterHelper = TGSongWriterHelper;
                    TGSongWriterHelper["__class"] = "org.herac.tuxguitar.io.base.TGSongWriterHelper";
                })(base = io.base || (io.base = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var TGAbstractSongReaderPlugin = (function (_super) {
                        __extends(TGAbstractSongReaderPlugin, _super);
                        function TGAbstractSongReaderPlugin() {
                            return _super.call(this, true) || this;
                        }
                        TGAbstractSongReaderPlugin.prototype.getModuleId = function () {
                            return org.herac.tuxguitar.io.tg.TGCompatPlugin.MODULE_ID;
                        };
                        return TGAbstractSongReaderPlugin;
                    }(org.herac.tuxguitar.io.plugin.TGSongReaderPlugin));
                    tg.TGAbstractSongReaderPlugin = TGAbstractSongReaderPlugin;
                    TGAbstractSongReaderPlugin["__class"] = "org.herac.tuxguitar.io.tg.TGAbstractSongReaderPlugin";
                    TGAbstractSongReaderPlugin["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var TGAbstractSongWriterPlugin = (function (_super) {
                        __extends(TGAbstractSongWriterPlugin, _super);
                        function TGAbstractSongWriterPlugin() {
                            return _super.call(this, false) || this;
                        }
                        TGAbstractSongWriterPlugin.prototype.getModuleId = function () {
                            return org.herac.tuxguitar.io.tg.TGCompatPlugin.MODULE_ID;
                        };
                        return TGAbstractSongWriterPlugin;
                    }(org.herac.tuxguitar.io.plugin.TGSongWriterPlugin));
                    tg.TGAbstractSongWriterPlugin = TGAbstractSongWriterPlugin;
                    TGAbstractSongWriterPlugin["__class"] = "org.herac.tuxguitar.io.tg.TGAbstractSongWriterPlugin";
                    TGAbstractSongWriterPlugin["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v07;
                    (function (v07) {
                        var TGSongReaderImpl = (function () {
                            function TGSongReaderImpl() {
                                this.dataInputStream = null;
                                this.factory = null;
                            }
                            TGSongReaderImpl.TG_FORMAT_$LI$ = function () { if (TGSongReaderImpl.TG_FORMAT == null)
                                TGSongReaderImpl.TG_FORMAT = new org.herac.tuxguitar.io.base.TGFileFormat("TuxGuitar 0.7", "audio/x-tuxguitar", ["tg"]); return TGSongReaderImpl.TG_FORMAT; };
                            ;
                            TGSongReaderImpl.SUPPORTED_FORMAT_$LI$ = function () { if (TGSongReaderImpl.SUPPORTED_FORMAT == null)
                                TGSongReaderImpl.SUPPORTED_FORMAT = new org.herac.tuxguitar.io.tg.TGFileFormatVersion(TGSongReaderImpl.TG_FORMAT_$LI$(), TGSongReaderImpl.TG_VERSION); return TGSongReaderImpl.SUPPORTED_FORMAT; };
                            ;
                            TGSongReaderImpl.prototype.getFileFormat = function () {
                                return TGSongReaderImpl.TG_FORMAT_$LI$();
                            };
                            TGSongReaderImpl.prototype.read$org_herac_tuxguitar_io_base_TGSongReaderHandle = function (handle) {
                                try {
                                    this.factory = handle.getFactory();
                                    this.dataInputStream = new java.io.DataInputStream(handle.getInputStream());
                                    var fileFormat = new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(TGSongReaderImpl.SUPPORTED_FORMAT_$LI$()).getFileFormat(this.dataInputStream);
                                    if (fileFormat == null || !(function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(fileFormat, this.getFileFormat())) {
                                        throw new org.herac.tuxguitar.io.base.TGFileFormatException("Unsupported Version");
                                    }
                                    var song_6 = this.read();
                                    this.dataInputStream.close();
                                    handle.setSong(song_6);
                                }
                                catch (throwable) {
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException(throwable);
                                }
                                ;
                            };
                            TGSongReaderImpl.prototype.read = function (handle) {
                                if (((handle != null && handle instanceof org.herac.tuxguitar.io.base.TGSongReaderHandle) || handle === null)) {
                                    return this.read$org_herac_tuxguitar_io_base_TGSongReaderHandle(handle);
                                }
                                else if (handle === undefined) {
                                    return this.read$();
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongReaderImpl.prototype.read$ = function () {
                                var song = this.factory.newSong();
                                song.setName(this.readString());
                                song.setArtist(this.readString());
                                song.setAlbum(this.readString());
                                song.setAuthor(this.readString());
                                var trackCount = this.readInt();
                                for (var i = 0; i < trackCount; i++) {
                                    song.addTrack$org_herac_tuxguitar_song_models_TGTrack(this.readTrack(song));
                                }
                                return song;
                            };
                            TGSongReaderImpl.prototype.readTrack = function (song) {
                                var track = this.factory.newTrack();
                                track.setNumber((this.readLong() | 0));
                                track.setName(this.readString());
                                this.readChannel(song, track);
                                track.setSolo(this.readBoolean());
                                track.setMute(this.readBoolean());
                                var measureCount = this.readInt();
                                if (song.countMeasureHeaders() === 0) {
                                    for (var i = 0; i < measureCount; i++) {
                                        var header = this.factory.newHeader();
                                        song.addMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader(header);
                                    }
                                }
                                for (var i = 0; i < measureCount; i++) {
                                    track.addMeasure$org_herac_tuxguitar_song_models_TGMeasure(this.readMeasure(song.getMeasureHeader(i)));
                                }
                                var stringCount = this.readInt();
                                for (var i = 0; i < stringCount; i++) {
                                    track.getStrings().add(this.readInstrumentString());
                                }
                                this.readColor(track.getColor());
                                return track;
                            };
                            TGSongReaderImpl.prototype.readMeasure = function (header) {
                                var measure = this.factory.newMeasure(header);
                                header.setNumber(this.readInt());
                                header.setStart((Math.floor(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME * this.readLong() / 1000)));
                                var noteCount = this.readInt();
                                var previous = null;
                                for (var i = 0; i < noteCount; i++) {
                                    previous = this.readNote(measure, previous);
                                }
                                var silenceCount = this.readInt();
                                previous = null;
                                for (var i = 0; i < silenceCount; i++) {
                                    previous = this.readSilence(measure, previous);
                                }
                                this.readTimeSignature(header.getTimeSignature());
                                this.readTempo(header.getTempo());
                                measure.setClef(this.readInt());
                                measure.setKeySignature(this.readInt());
                                header.setRepeatOpen(this.readBoolean());
                                header.setRepeatClose(this.readInt());
                                return measure;
                            };
                            TGSongReaderImpl.prototype.readNote = function (measure, previous) {
                                var beat = previous;
                                var value = this.readInt();
                                var start = (Math.floor(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME * this.readLong() / 1000));
                                if (beat == null || beat.getStart() !== start) {
                                    beat = this.factory.newBeat();
                                    beat.setStart(start);
                                    measure.addBeat(beat);
                                }
                                var voice = beat.getVoice(0);
                                voice.setEmpty(false);
                                this.readDuration(voice.getDuration());
                                var note = this.factory.newNote();
                                note.setValue(value);
                                note.setVelocity(this.readInt());
                                note.setString(this.readInt());
                                note.setTiedNote(this.readBoolean());
                                this.readNoteEffect(note.getEffect());
                                voice.addNote(note);
                                return beat;
                            };
                            TGSongReaderImpl.prototype.readChannel = function (song, track) {
                                var channel = this.factory.newChannel();
                                var gmChannel1Param = this.factory.newChannelParameter();
                                var gmChannel2Param = this.factory.newChannelParameter();
                                var channel1 = this.readShort();
                                gmChannel1Param.setKey(org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_1);
                                gmChannel1Param.setValue(/* toString */ ('' + (channel1)));
                                var channel2 = this.readShort();
                                gmChannel2Param.setKey(org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_2);
                                gmChannel2Param.setValue(/* toString */ ('' + (channel2)));
                                channel.setBank(channel1 === 9 ? org.herac.tuxguitar.song.models.TGChannel.DEFAULT_PERCUSSION_BANK : org.herac.tuxguitar.song.models.TGChannel.DEFAULT_BANK);
                                channel.setProgram(this.readShort());
                                channel.setVolume(this.readShort());
                                channel.setBalance(this.readShort());
                                channel.setChorus(this.readShort());
                                channel.setReverb(this.readShort());
                                channel.setPhaser(this.readShort());
                                channel.setTremolo(this.readShort());
                                for (var i = 0; i < song.countChannels(); i++) {
                                    var channelAux = song.getChannel(i);
                                    for (var n = 0; n < channelAux.countParameters(); n++) {
                                        var channelParameter = channelAux.getParameter(n);
                                        if ((function (o1, o2) { if (o1.equals) {
                                            return o1.equals(o2);
                                        }
                                        else {
                                            return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                        } })(channelParameter.getKey(), org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_1)) {
                                            if ((function (o1, o2) { if (o1.equals) {
                                                return o1.equals(o2);
                                            }
                                            else {
                                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                            } })(/* toString */ ('' + (channel1)), channelParameter.getValue())) {
                                                channel.setChannelId(channelAux.getChannelId());
                                            }
                                        }
                                    }
                                }
                                if (channel.getChannelId() <= 0) {
                                    channel.setChannelId(song.countChannels() + 1);
                                    channel.setName(new org.herac.tuxguitar.song.managers.TGSongManager(this.factory).createChannelNameFromProgram(song, channel));
                                    channel.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(gmChannel1Param);
                                    channel.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(gmChannel2Param);
                                    song.addChannel$org_herac_tuxguitar_song_models_TGChannel(channel);
                                }
                                track.setChannelId(channel.getChannelId());
                            };
                            TGSongReaderImpl.prototype.readSilence = function (measure, previous) {
                                var beat = previous;
                                var start = (Math.floor(org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME * this.readLong() / 1000));
                                if (beat == null || beat.getStart() !== start) {
                                    beat = this.factory.newBeat();
                                    beat.setStart(start);
                                    measure.addBeat(beat);
                                }
                                var voice = beat.getVoice(0);
                                voice.setEmpty(false);
                                this.readDuration(voice.getDuration());
                                return beat;
                            };
                            TGSongReaderImpl.prototype.readInstrumentString = function () {
                                var string = this.factory.newString();
                                string.setNumber(this.readInt());
                                string.setValue(this.readInt());
                                return string;
                            };
                            TGSongReaderImpl.prototype.readTempo = function (tempo) {
                                tempo.setValue(this.readInt());
                            };
                            TGSongReaderImpl.prototype.readTimeSignature = function (timeSignature) {
                                timeSignature.setNumerator(this.readInt());
                                this.readDuration(timeSignature.getDenominator());
                            };
                            TGSongReaderImpl.prototype.readDuration = function (duration) {
                                duration.setValue(this.readInt());
                                duration.setDotted(this.readBoolean());
                                duration.setDoubleDotted(this.readBoolean());
                                this.readDivisionType(duration.getDivision());
                            };
                            TGSongReaderImpl.prototype.readDivisionType = function (divisionType) {
                                divisionType.setEnters(this.readInt());
                                divisionType.setTimes(this.readInt());
                            };
                            TGSongReaderImpl.prototype.readNoteEffect = function (effect) {
                                effect.setVibrato(this.readBoolean());
                                if (this.readBoolean()) {
                                    effect.setBend(this.readBendEffect());
                                }
                                effect.setDeadNote(this.readBoolean());
                                effect.setSlide(this.readBoolean());
                                effect.setHammer(this.readBoolean());
                            };
                            TGSongReaderImpl.prototype.readBendEffect = function () {
                                var bend = this.factory.newEffectBend();
                                var count = this.readInt();
                                for (var i = 0; i < count; i++) {
                                    var position = this.readInt();
                                    var value = this.readInt();
                                    bend.addPoint(position, ((value > 0) ? (value / 2 | 0) : value));
                                }
                                return bend;
                            };
                            TGSongReaderImpl.prototype.readColor = function (color) {
                                color.setR(this.readInt());
                                color.setG(this.readInt());
                                color.setB(this.readInt());
                            };
                            TGSongReaderImpl.prototype.readShort = function () {
                                try {
                                    return this.dataInputStream.readShort();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readInt = function () {
                                try {
                                    return this.dataInputStream.readInt();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readLong = function () {
                                try {
                                    return this.dataInputStream.readLong();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readString = function () {
                                try {
                                    var length_4 = this.dataInputStream.read();
                                    var chars = new Array(length_4);
                                    for (var i = 0; i < chars.length; i++) {
                                        chars[i] = this.dataInputStream.readChar();
                                    }
                                    return javaemul.internal.StringHelper.copyValueOf(chars);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return null;
                            };
                            TGSongReaderImpl.prototype.readBoolean = function () {
                                try {
                                    return this.dataInputStream.readBoolean();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return false;
                            };
                            return TGSongReaderImpl;
                        }());
                        TGSongReaderImpl.TG_VERSION = "TG_DEVEL-0.01";
                        v07.TGSongReaderImpl = TGSongReaderImpl;
                        TGSongReaderImpl["__class"] = "org.herac.tuxguitar.io.tg.v07.TGSongReaderImpl";
                        TGSongReaderImpl["__interfaces"] = ["org.herac.tuxguitar.io.base.TGSongReader", "org.herac.tuxguitar.io.base.TGSongPersistenceHandler"];
                    })(v07 = tg.v07 || (tg.v07 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var base;
                (function (base) {
                    var MidiSequencerEmpty = (function () {
                        function MidiSequencerEmpty() {
                        }
                        MidiSequencerEmpty.prototype.open = function () {
                        };
                        MidiSequencerEmpty.prototype.close = function () {
                        };
                        MidiSequencerEmpty.prototype.check = function () {
                        };
                        MidiSequencerEmpty.prototype.createSequence = function (tracks) {
                            return new MidiSequencerEmpty.MidiSequencerEmpty$0(this, tracks);
                        };
                        MidiSequencerEmpty.prototype.setTransmitter = function (transmitter) {
                        };
                        MidiSequencerEmpty.prototype.getTickLength = function () {
                            return 0;
                        };
                        MidiSequencerEmpty.prototype.getTickPosition = function () {
                            return 0;
                        };
                        MidiSequencerEmpty.prototype.isRunning = function () {
                            return false;
                        };
                        MidiSequencerEmpty.prototype.setMute = function (index, mute) {
                        };
                        MidiSequencerEmpty.prototype.setSolo = function (index, solo) {
                        };
                        MidiSequencerEmpty.prototype.setTickPosition = function (tickPosition) {
                        };
                        MidiSequencerEmpty.prototype.start = function () {
                        };
                        MidiSequencerEmpty.prototype.stop = function () {
                        };
                        MidiSequencerEmpty.prototype.getKey = function () {
                            return null;
                        };
                        MidiSequencerEmpty.prototype.getName = function () {
                            return null;
                        };
                        return MidiSequencerEmpty;
                    }());
                    base.MidiSequencerEmpty = MidiSequencerEmpty;
                    MidiSequencerEmpty["__class"] = "org.herac.tuxguitar.player.base.MidiSequencerEmpty";
                    MidiSequencerEmpty["__interfaces"] = ["org.herac.tuxguitar.player.base.MidiDevice", "org.herac.tuxguitar.player.base.MidiSequencer"];
                    (function (MidiSequencerEmpty) {
                        var MidiSequencerEmpty$0 = (function (_super) {
                            __extends(MidiSequencerEmpty$0, _super);
                            function MidiSequencerEmpty$0(__parent, __arg0) {
                                var _this = _super.call(this, __arg0) || this;
                                _this.__parent = __parent;
                                return _this;
                            }
                            MidiSequencerEmpty$0.prototype.notifyFinish = function () {
                            };
                            MidiSequencerEmpty$0.prototype.addTimeSignature = function (tick, track, ts) {
                            };
                            MidiSequencerEmpty$0.prototype.addTempoInUSQ = function (tick, track, usq) {
                            };
                            MidiSequencerEmpty$0.prototype.addProgramChange = function (tick, track, channel, instrument) {
                            };
                            MidiSequencerEmpty$0.prototype.addPitchBend = function (tick, track, channel, value, voice, bendMode) {
                            };
                            MidiSequencerEmpty$0.prototype.addNoteOn = function (tick, track, channel, note, velocity, voice, bendMode) {
                            };
                            MidiSequencerEmpty$0.prototype.addNoteOff = function (tick, track, channel, note, velocity, voice, bendMode) {
                            };
                            MidiSequencerEmpty$0.prototype.addControlChange = function (tick, track, channel, controller, value) {
                            };
                            return MidiSequencerEmpty$0;
                        }(org.herac.tuxguitar.player.base.MidiSequenceHandler));
                        MidiSequencerEmpty.MidiSequencerEmpty$0 = MidiSequencerEmpty$0;
                    })(MidiSequencerEmpty = base.MidiSequencerEmpty || (base.MidiSequencerEmpty = {}));
                })(base = player.base || (player.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var impl;
                (function (impl) {
                    var sequencer;
                    (function (sequencer) {
                        var MidiSequenceHandlerImpl = (function (_super) {
                            __extends(MidiSequenceHandlerImpl, _super);
                            function MidiSequenceHandlerImpl(seq, tracks) {
                                var _this = _super.call(this, tracks) || this;
                                _this.seq = null;
                                _this.seq = seq;
                                _this.seq.getMidiTrackController().init(_this.getTracks());
                                return _this;
                            }
                            MidiSequenceHandlerImpl.prototype.addControlChange = function (tick, track, channel, controller, value) {
                                this.seq.addEvent(org.herac.tuxguitar.player.impl.sequencer.MidiEvent.controlChange(tick, track, channel, controller, value));
                            };
                            MidiSequenceHandlerImpl.prototype.addNoteOff = function (tick, track, channel, note, velocity, voice, bendMode) {
                                this.seq.addEvent(org.herac.tuxguitar.player.impl.sequencer.MidiEvent.noteOff(tick, track, channel, note, velocity, voice, bendMode));
                            };
                            MidiSequenceHandlerImpl.prototype.addNoteOn = function (tick, track, channel, note, velocity, voice, bendMode) {
                                this.seq.addEvent(org.herac.tuxguitar.player.impl.sequencer.MidiEvent.noteOn(tick, track, channel, note, velocity, voice, bendMode));
                            };
                            MidiSequenceHandlerImpl.prototype.addPitchBend = function (tick, track, channel, value, voice, bendMode) {
                                this.seq.addEvent(org.herac.tuxguitar.player.impl.sequencer.MidiEvent.pitchBend(tick, track, channel, value, voice, bendMode));
                            };
                            MidiSequenceHandlerImpl.prototype.addProgramChange = function (tick, track, channel, instrument) {
                                this.seq.addEvent(org.herac.tuxguitar.player.impl.sequencer.MidiEvent.programChange(tick, track, channel, instrument));
                            };
                            MidiSequenceHandlerImpl.prototype.addTempoInUSQ = function (tick, track, usq) {
                                this.seq.addEvent(org.herac.tuxguitar.player.impl.sequencer.MidiEvent.tempoInUSQ(tick, usq));
                            };
                            MidiSequenceHandlerImpl.prototype.addTimeSignature = function (tick, track, ts) {
                            };
                            MidiSequenceHandlerImpl.prototype.notifyFinish = function () {
                            };
                            return MidiSequenceHandlerImpl;
                        }(org.herac.tuxguitar.player.base.MidiSequenceHandler));
                        sequencer.MidiSequenceHandlerImpl = MidiSequenceHandlerImpl;
                        MidiSequenceHandlerImpl["__class"] = "org.herac.tuxguitar.player.impl.sequencer.MidiSequenceHandlerImpl";
                    })(sequencer = impl.sequencer || (impl.sequencer = {}));
                })(impl = player.impl || (player.impl = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGBeatImpl = (function (_super) {
                        __extends(TGBeatImpl, _super);
                        function TGBeatImpl(factory) {
                            var _this = _super.call(this, factory) || this;
                            _this.posX = 0;
                            _this.width = 0;
                            _this.maxNote = null;
                            _this.minNote = null;
                            _this.usedStrings = null;
                            _this.joinedType = 0;
                            _this.joinedGreaterThanQuarter = false;
                            _this.join1 = null;
                            _this.join2 = null;
                            _this.previous = null;
                            _this.next = null;
                            _this.group = null;
                            _this.bs = null;
                            _this.accentuated = false;
                            _this.heavyAccentuated = false;
                            _this.harmonic = false;
                            _this.tapping = false;
                            _this.slapping = false;
                            _this.popping = false;
                            _this.palmMute = false;
                            _this.letRing = false;
                            _this.vibrato = false;
                            _this.trill = false;
                            _this.fadeIn = false;
                            return _this;
                        }
                        TGBeatImpl.prototype.getPosX = function () {
                            return this.posX;
                        };
                        TGBeatImpl.prototype.setPosX = function (posX) {
                            this.posX = posX;
                        };
                        TGBeatImpl.prototype.getMinimumWidth = function () {
                            return this.width;
                        };
                        TGBeatImpl.prototype.setWidth = function (width) {
                            this.width = width;
                        };
                        TGBeatImpl.prototype.getMinNote = function () {
                            return this.minNote;
                        };
                        TGBeatImpl.prototype.getMaxNote = function () {
                            return this.maxNote;
                        };
                        TGBeatImpl.prototype.getMeasureImpl = function () {
                            return this.getMeasure();
                        };
                        TGBeatImpl.prototype.getUsedStrings = function () {
                            if (this.usedStrings == null) {
                                this.usedStrings = new Array(this.getMeasure().getTrack().stringCount());
                            }
                            return this.usedStrings;
                        };
                        TGBeatImpl.prototype.getJoin1 = function () {
                            return this.join1;
                        };
                        TGBeatImpl.prototype.setJoin1 = function (join1) {
                            this.join1 = join1;
                        };
                        TGBeatImpl.prototype.getJoin2 = function () {
                            return this.join2;
                        };
                        TGBeatImpl.prototype.setJoin2 = function (join2) {
                            this.join2 = join2;
                        };
                        TGBeatImpl.prototype.isJoinedGreaterThanQuarter = function () {
                            return this.joinedGreaterThanQuarter;
                        };
                        TGBeatImpl.prototype.setJoinedGreaterThanQuarter = function (joinedGreaterThanQuarter) {
                            this.joinedGreaterThanQuarter = joinedGreaterThanQuarter;
                        };
                        TGBeatImpl.prototype.getJoinedType = function () {
                            return this.joinedType;
                        };
                        TGBeatImpl.prototype.setJoinedType = function (joinedType) {
                            this.joinedType = joinedType;
                        };
                        TGBeatImpl.prototype.getPreviousBeat = function () {
                            return this.previous;
                        };
                        TGBeatImpl.prototype.setPreviousBeat = function (previous) {
                            this.previous = previous;
                        };
                        TGBeatImpl.prototype.getNextBeat = function () {
                            return this.next;
                        };
                        TGBeatImpl.prototype.setNextBeat = function (next) {
                            this.next = next;
                        };
                        TGBeatImpl.prototype.getBeatGroup = function () {
                            return this.group;
                        };
                        TGBeatImpl.prototype.setBeatGroup = function (group) {
                            this.group = group;
                        };
                        TGBeatImpl.prototype.getSpacing = function (layout) {
                            return this.getMeasureImpl().getBeatSpacing(layout, this);
                        };
                        TGBeatImpl.prototype.isPlaying = function (layout) {
                            return layout.getComponent()['isRunning$org_herac_tuxguitar_song_models_TGBeat'](this);
                        };
                        TGBeatImpl.prototype.getVoiceImpl = function (index) {
                            var voice = _super.prototype.getVoice.call(this, index);
                            if (voice != null && voice instanceof org.herac.tuxguitar.graphics.control.TGVoiceImpl) {
                                return voice;
                            }
                            return null;
                        };
                        TGBeatImpl.prototype.reset = function () {
                            this.maxNote = null;
                            this.minNote = null;
                            this.usedStrings = new Array(this.getMeasure().getTrack().stringCount());
                        };
                        TGBeatImpl.prototype.check = function (layout, note) {
                            var value = note.getRealValue();
                            if (this.maxNote == null || value > this.maxNote.getRealValue()) {
                                this.maxNote = note;
                            }
                            if (this.minNote == null || value < this.minNote.getRealValue()) {
                                this.minNote = note;
                            }
                            this.getUsedStrings();
                            this.usedStrings[note.getString() - 1] = true;
                        };
                        TGBeatImpl.prototype.resetEffectsSpacing = function (layout) {
                            this.bs = new org.herac.tuxguitar.graphics.control.TGBeatSpacing(layout);
                            this.accentuated = false;
                            this.heavyAccentuated = false;
                            this.harmonic = false;
                            this.tapping = false;
                            this.slapping = false;
                            this.popping = false;
                            this.palmMute = false;
                            this.letRing = false;
                            this.fadeIn = false;
                            this.vibrato = false;
                            this.trill = false;
                        };
                        TGBeatImpl.prototype.updateEffectsSpacing = function (layout, effect) {
                            if (effect.isAccentuatedNote()) {
                                this.accentuated = true;
                            }
                            if (effect.isHeavyAccentuatedNote()) {
                                this.heavyAccentuated = true;
                            }
                            if (effect.isHarmonic() && (layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) === 0) {
                                this.harmonic = true;
                            }
                            if (effect.isTapping()) {
                                this.tapping = true;
                            }
                            if (effect.isSlapping()) {
                                this.slapping = true;
                            }
                            if (effect.isPopping()) {
                                this.popping = true;
                            }
                            if (effect.isPalmMute()) {
                                this.palmMute = true;
                            }
                            if (effect.isLetRing()) {
                                this.letRing = true;
                            }
                            if (effect.isFadeIn()) {
                                this.fadeIn = true;
                            }
                            if (effect.isVibrato()) {
                                this.vibrato = true;
                            }
                            if (effect.isTrill()) {
                                this.trill = true;
                            }
                        };
                        TGBeatImpl.prototype.getEffectsSpacing = function (layout) {
                            if (this.accentuated) {
                                this.bs.setSize(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_ACCENTUATED_EFFECT, layout.getEffectSpacing());
                            }
                            if (this.heavyAccentuated) {
                                this.bs.setSize(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_HEAVY_ACCENTUATED_EFFECT, layout.getEffectSpacing());
                            }
                            if (this.harmonic) {
                                this.bs.setSize(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_HARMONIC_EFFEC, layout.getEffectSpacing());
                            }
                            if (this.tapping) {
                                this.bs.setSize(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_TAPPING_EFFEC, layout.getEffectSpacing());
                            }
                            if (this.slapping) {
                                this.bs.setSize(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_SLAPPING_EFFEC, layout.getEffectSpacing());
                            }
                            if (this.popping) {
                                this.bs.setSize(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_POPPING_EFFEC, layout.getEffectSpacing());
                            }
                            if (this.palmMute) {
                                this.bs.setSize(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_PALM_MUTE_EFFEC, layout.getEffectSpacing());
                            }
                            if (this.letRing) {
                                this.bs.setSize(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_LET_RING_EFFEC, layout.getEffectSpacing());
                            }
                            if (this.fadeIn) {
                                this.bs.setSize(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_FADE_IN, layout.getEffectSpacing());
                            }
                            if (this.vibrato) {
                                this.bs.setSize(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_VIBRATO_EFFEC, layout.getEffectSpacing());
                            }
                            if (this.trill) {
                                this.bs.setSize(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_TRILL_EFFEC, layout.getEffectSpacing());
                            }
                            return this.bs.getSize();
                        };
                        TGBeatImpl.prototype.registerBuffer = function (layout) {
                            var chordRegistryKey = ((function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGChord) + "-" + (function (o) { if (o.hashCode) {
                                return o.hashCode();
                            }
                            else if (!isNaN(parseInt(o.toString()))) {
                                return parseInt(o.toString());
                            }
                            else {
                                window['hashCodeCounter'] = (window['hashCodeCounter'] ? window['hashCodeCounter'] + 1 : 1);
                                o['generatedHashCode'] = window['hashCodeCounter'];
                                o.hashCode = function () { return o['generatedHashCode']; };
                                return o.hashCode();
                            } })(this));
                            var buffer = layout.getResourceBuffer();
                            if (this.isChordBeat()) {
                                var tgChord = this.getChord();
                                tgChord.registerBuffer$org_herac_tuxguitar_graphics_control_TGResourceBuffer$java_lang_Object(buffer, chordRegistryKey);
                            }
                            else if (buffer.isRegistered(chordRegistryKey)) {
                                buffer.unregister(chordRegistryKey);
                            }
                        };
                        TGBeatImpl.prototype.paint = function (layout, painter, fromX, fromY) {
                            if (!layout.isPlayModeEnabled() && (layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                this.paintExtraLines$org_herac_tuxguitar_graphics_TGPainter$org_herac_tuxguitar_graphics_control_TGLayout$float$float(painter, layout, fromX, fromY);
                            }
                            for (var v = 0; v < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; v++) {
                                this.getVoiceImpl(v).paint(layout, painter, fromX, fromY);
                            }
                            if (!layout.isPlayModeEnabled()) {
                                if (this.isChordBeat()) {
                                    var chord = this.getChord();
                                    chord.paint$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter$float$float(layout, painter, fromX, fromY);
                                }
                                if (this.getStroke().getDirection() !== org.herac.tuxguitar.song.models.TGStroke.STROKE_NONE) {
                                    this.paintStroke(layout, painter, fromX, fromY);
                                }
                            }
                        };
                        TGBeatImpl.prototype.paintExtraLines$org_herac_tuxguitar_graphics_TGPainter$org_herac_tuxguitar_graphics_control_TGLayout$float$float = function (painter, layout, fromX, fromY) {
                            if (!this.isRestBeat()) {
                                var scoreY = (fromY + this.getMeasureImpl().getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES));
                                this.paintExtraLines$org_herac_tuxguitar_graphics_TGPainter$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_control_TGNoteImpl$float$float(painter, layout, this.getMinNote(), fromX, scoreY);
                                this.paintExtraLines$org_herac_tuxguitar_graphics_TGPainter$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_control_TGNoteImpl$float$float(painter, layout, this.getMaxNote(), fromX, scoreY);
                            }
                        };
                        TGBeatImpl.prototype.paintExtraLines$org_herac_tuxguitar_graphics_TGPainter$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_control_TGNoteImpl$float$float = function (painter, layout, note, fromX, fromY) {
                            var scale = layout.getScale();
                            var scoreLineSpacing = layout.getScoreLineSpacing();
                            var spacing = (layout.getScoreLineSpacing() / 2.0);
                            var noteY = (fromY + note.getScorePosY() + spacing);
                            var lineY = (fromY > noteY ? fromY : (fromY + (scoreLineSpacing * 4)));
                            var x = fromX + this.getPosX() + this.getSpacing(layout);
                            var x1 = x - (4 * scale);
                            var x2 = x + (12 * scale);
                            var direction = (fromY > noteY ? -1 : 1);
                            var requiredExtraLines = this.findRequiredExtraLines(layout, lineY, noteY, direction);
                            if (requiredExtraLines > 0) {
                                layout.setLineStyle(painter);
                                for (var i = 0; i < requiredExtraLines; i++) {
                                    painter.initPath();
                                    painter.setAntialias(false);
                                    painter.moveTo(x1, lineY + ((scoreLineSpacing * (i + 1)) * direction));
                                    painter.lineTo(x2, lineY + ((scoreLineSpacing * (i + 1)) * direction));
                                    painter.closePath();
                                }
                            }
                        };
                        TGBeatImpl.prototype.paintExtraLines = function (painter, layout, note, fromX, fromY) {
                            if (((painter != null && (painter["__interfaces"] != null && painter["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0 || painter.constructor != null && painter.constructor["__interfaces"] != null && painter.constructor["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0)) || painter === null) && ((layout != null && layout instanceof org.herac.tuxguitar.graphics.control.TGLayout) || layout === null) && ((note != null && note instanceof org.herac.tuxguitar.graphics.control.TGNoteImpl) || note === null) && ((typeof fromX === 'number') || fromX === null) && ((typeof fromY === 'number') || fromY === null)) {
                                return this.paintExtraLines$org_herac_tuxguitar_graphics_TGPainter$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_control_TGNoteImpl$float$float(painter, layout, note, fromX, fromY);
                            }
                            else if (((painter != null && (painter["__interfaces"] != null && painter["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0 || painter.constructor != null && painter.constructor["__interfaces"] != null && painter.constructor["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0)) || painter === null) && ((layout != null && layout instanceof org.herac.tuxguitar.graphics.control.TGLayout) || layout === null) && ((typeof note === 'number') || note === null) && ((typeof fromX === 'number') || fromX === null) && fromY === undefined) {
                                return this.paintExtraLines$org_herac_tuxguitar_graphics_TGPainter$org_herac_tuxguitar_graphics_control_TGLayout$float$float(painter, layout, note, fromX);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGBeatImpl.prototype.findRequiredExtraLines = function (layout, lineY, noteY, direction) {
                            var counter = 0;
                            var spacing = (layout.getScoreLineSpacing() / 2.0);
                            var previousPosition = lineY;
                            for (var position = (lineY + (spacing * direction));; position += (spacing * direction), counter++) {
                                var distance1 = Math.abs(previousPosition - noteY);
                                var distance2 = Math.abs(position - noteY);
                                if (Math.min(distance1, distance2) === distance1) {
                                    return (counter > 0 ? (counter / 2 | 0) : 0);
                                }
                                previousPosition = position;
                            }
                        };
                        TGBeatImpl.prototype.paintStroke = function (layout, painter, fromX, fromY) {
                            var style = layout.getStyle();
                            var scale = layout.getScale();
                            var x = (fromX + this.getPosX() + this.getSpacing(layout) + (12.0 * scale));
                            var y1 = 0;
                            var y2 = 0;
                            if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                var y = (fromY + this.getPaintPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES));
                                y1 = (y + layout.getScoreLineSpacing());
                                y2 = (y + (this.getMeasureImpl().getTrackImpl().getScoreHeight() - layout.getScoreLineSpacing()));
                            }
                            if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0) {
                                var y = (fromY + this.getPaintPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE));
                                y1 = (y + layout.getStringSpacing());
                                y2 = (y + (this.getMeasureImpl().getTrackImpl().getTabHeight() - layout.getStringSpacing()));
                            }
                            else if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                var y = (fromY + this.getPaintPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES));
                                y1 = (y + layout.getScoreLineSpacing());
                                y2 = (y + (this.getMeasureImpl().getTrackImpl().getScoreHeight() - layout.getScoreLineSpacing()));
                            }
                            else {
                                return;
                            }
                            if (this.getStroke().getDirection() === org.herac.tuxguitar.song.models.TGStroke.STROKE_UP) {
                                painter.setLineWidth(layout.getLineWidth(0));
                                painter.initPath();
                                painter.moveTo(x, y1);
                                painter.lineTo(x, y2);
                                painter.moveTo(x - (2.0 * scale), y2 - (5.0 * scale));
                                painter.lineTo(x, y2);
                                painter.moveTo(x + (2.0 * scale), y2 - (5.0 * scale));
                                painter.lineTo(x, y2);
                                painter.closePath();
                            }
                            else if (this.getStroke().getDirection() === org.herac.tuxguitar.song.models.TGStroke.STROKE_DOWN) {
                                painter.setLineWidth(layout.getLineWidth(0));
                                painter.initPath();
                                painter.moveTo(x, y2);
                                painter.lineTo(x, y1);
                                painter.moveTo(x - (2.0 * scale), y1 + (5.0 * scale));
                                painter.lineTo(x, y1);
                                painter.moveTo(x + (2.0 * scale), y1 + (5.0 * scale));
                                painter.lineTo(x, y1);
                                painter.closePath();
                            }
                        };
                        TGBeatImpl.prototype.getPaintPosition = function (index) {
                            return this.getMeasureImpl().getTs().getPosition(index);
                        };
                        TGBeatImpl.prototype.getBs = function () {
                            return this.bs;
                        };
                        return TGBeatImpl;
                    }(org.herac.tuxguitar.song.models.TGBeat));
                    /**
                     * desviacion a la izquierda
                     */
                    TGBeatImpl.JOINED_TYPE_NONE_LEFT = 1;
                    /**
                     * desviacion a la derecha
                     */
                    TGBeatImpl.JOINED_TYPE_NONE_RIGHT = 2;
                    /**
                     * Union a la izquierda
                     */
                    TGBeatImpl.JOINED_TYPE_LEFT = 3;
                    /**
                     * Union a la derecha
                     */
                    TGBeatImpl.JOINED_TYPE_RIGHT = 4;
                    control.TGBeatImpl = TGBeatImpl;
                    TGBeatImpl["__class"] = "org.herac.tuxguitar.graphics.control.TGBeatImpl";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to Window - Preferences - Java - Code Style - Code Templates
                     * @extends org.herac.tuxguitar.song.models.TGChord
                     */
                    var TGChordImpl = (function (_super) {
                        __extends(TGChordImpl, _super);
                        function TGChordImpl(length) {
                            var _this = _super.call(this, length) || this;
                            _this.style = 0;
                            _this.posX = 0;
                            _this.posY = 0;
                            _this.width = 0;
                            _this.height = 0;
                            _this.tonic = 0;
                            _this.diagramWidth = 0;
                            _this.diagramHeight = 0;
                            _this.nameWidth = 0;
                            _this.nameHeight = 0;
                            _this.diagram = null;
                            _this.foregroundColor = null;
                            _this.backgroundColor = null;
                            _this.noteColor = null;
                            _this.tonicColor = null;
                            _this.color = null;
                            _this.font = null;
                            _this.firstFretFont = null;
                            _this.firstFretSpacing = 0;
                            _this.stringSpacing = 0;
                            _this.fretSpacing = 0;
                            _this.noteSize = 0;
                            _this.lineWidth = 0;
                            _this.editing = false;
                            _this.registryKey = null;
                            return _this;
                        }
                        TGChordImpl.prototype.isEditing = function () {
                            return this.editing;
                        };
                        TGChordImpl.prototype.setEditing = function (editing) {
                            this.editing = editing;
                        };
                        TGChordImpl.prototype.setPosX = function (posX) {
                            this.posX = posX;
                        };
                        TGChordImpl.prototype.setPosY = function (posY) {
                            this.posY = posY;
                        };
                        TGChordImpl.prototype.getPosY = function () {
                            return this.posY;
                        };
                        TGChordImpl.prototype.getWidth = function () {
                            return this.width;
                        };
                        TGChordImpl.prototype.getHeight = function () {
                            return this.height;
                        };
                        TGChordImpl.prototype.setStyle = function (style) {
                            this.style = style;
                        };
                        TGChordImpl.prototype.setTonic = function (tonic) {
                            if (!this.isDisposed() && this.tonic !== tonic) {
                                this.dispose();
                            }
                            this.tonic = tonic;
                        };
                        TGChordImpl.prototype.getForegroundColor = function () {
                            return this.foregroundColor;
                        };
                        TGChordImpl.prototype.setForegroundColor = function (foregroundColor) {
                            if (!this.isDisposed() && !this.isSameColor(this.foregroundColor, foregroundColor)) {
                                this.dispose();
                            }
                            this.foregroundColor = foregroundColor;
                        };
                        TGChordImpl.prototype.getBackgroundColor = function () {
                            return this.backgroundColor;
                        };
                        TGChordImpl.prototype.setBackgroundColor = function (backgroundColor) {
                            if (!this.isDisposed() && !this.isSameColor(this.backgroundColor, backgroundColor)) {
                                this.dispose();
                            }
                            this.backgroundColor = backgroundColor;
                        };
                        TGChordImpl.prototype.getColor = function () {
                            return this.color;
                        };
                        TGChordImpl.prototype.setColor = function (color) {
                            if (!this.isDisposed() && !this.isSameColor(this.color, color)) {
                                this.dispose();
                            }
                            this.color = color;
                        };
                        TGChordImpl.prototype.getNoteColor = function () {
                            return this.noteColor;
                        };
                        TGChordImpl.prototype.setNoteColor = function (noteColor) {
                            if (!this.isDisposed() && !this.isSameColor(this.noteColor, noteColor)) {
                                this.dispose();
                            }
                            this.noteColor = noteColor;
                        };
                        TGChordImpl.prototype.getTonicColor = function () {
                            return this.tonicColor;
                        };
                        TGChordImpl.prototype.setTonicColor = function (tonicColor) {
                            if (!this.isDisposed() && !this.isSameColor(this.tonicColor, tonicColor)) {
                                this.dispose();
                            }
                            this.tonicColor = tonicColor;
                        };
                        TGChordImpl.prototype.getFirstFretSpacing = function () {
                            return this.firstFretSpacing;
                        };
                        TGChordImpl.prototype.setFirstFretSpacing = function (firstFretSpacing) {
                            if (!this.isDisposed() && this.firstFretSpacing !== firstFretSpacing) {
                                this.dispose();
                            }
                            this.firstFretSpacing = firstFretSpacing;
                        };
                        TGChordImpl.prototype.getFretSpacing = function () {
                            return this.fretSpacing;
                        };
                        TGChordImpl.prototype.setFretSpacing = function (fretSpacing) {
                            if (!this.isDisposed() && this.fretSpacing !== fretSpacing) {
                                this.dispose();
                            }
                            this.fretSpacing = fretSpacing;
                        };
                        TGChordImpl.prototype.getStringSpacing = function () {
                            return this.stringSpacing;
                        };
                        TGChordImpl.prototype.setStringSpacing = function (stringSpacing) {
                            if (!this.isDisposed() && this.stringSpacing !== stringSpacing) {
                                this.dispose();
                            }
                            this.stringSpacing = stringSpacing;
                        };
                        TGChordImpl.prototype.getNoteSize = function () {
                            return this.noteSize;
                        };
                        TGChordImpl.prototype.setNoteSize = function (noteSize) {
                            if (!this.isDisposed() && this.noteSize !== noteSize) {
                                this.dispose();
                            }
                            this.noteSize = noteSize;
                        };
                        TGChordImpl.prototype.getLineWidth = function () {
                            return this.lineWidth;
                        };
                        TGChordImpl.prototype.setLineWidth = function (lineWidth) {
                            if (!this.isDisposed() && this.lineWidth !== lineWidth) {
                                this.dispose();
                            }
                            this.lineWidth = lineWidth;
                        };
                        TGChordImpl.prototype.getFont = function () {
                            return this.font;
                        };
                        TGChordImpl.prototype.setFont = function (font) {
                            if (!this.isDisposed() && !this.isSameFont(this.font, font)) {
                                this.dispose();
                            }
                            this.font = font;
                        };
                        TGChordImpl.prototype.getFirstFretFont = function () {
                            return this.firstFretFont;
                        };
                        TGChordImpl.prototype.setFirstFretFont = function (firstFretFont) {
                            if (!this.isDisposed() && !this.isSameFont(this.firstFretFont, firstFretFont)) {
                                this.dispose();
                            }
                            this.firstFretFont = firstFretFont;
                        };
                        TGChordImpl.prototype.paint$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter$float$float = function (layout, painter, fromX, fromY) {
                            layout.setChordStyle(this);
                            this.setPosY(this.getPaintPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_CHORD));
                            this.setEditing(false);
                            this.update(painter, (layout.isBufferEnabled() ? layout.getResourceBuffer() : null));
                            this.paint$org_herac_tuxguitar_graphics_TGPainter$float$float(painter, this.getBeatImpl().getSpacing(layout) + fromX + Math.round(4.0 * layout.getScale()), fromY);
                        };
                        TGChordImpl.prototype.paint = function (layout, painter, fromX, fromY) {
                            if (((layout != null && layout instanceof org.herac.tuxguitar.graphics.control.TGLayout) || layout === null) && ((painter != null && (painter["__interfaces"] != null && painter["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0 || painter.constructor != null && painter.constructor["__interfaces"] != null && painter.constructor["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0)) || painter === null) && ((typeof fromX === 'number') || fromX === null) && ((typeof fromY === 'number') || fromY === null)) {
                                return this.paint$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter$float$float(layout, painter, fromX, fromY);
                            }
                            else if (((layout != null && (layout["__interfaces"] != null && layout["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0 || layout.constructor != null && layout.constructor["__interfaces"] != null && layout.constructor["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0)) || layout === null) && ((typeof painter === 'number') || painter === null) && ((typeof fromX === 'number') || fromX === null) && fromY === undefined) {
                                return this.paint$org_herac_tuxguitar_graphics_TGPainter$float$float(layout, painter, fromX);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGChordImpl.prototype.paint$org_herac_tuxguitar_graphics_TGPainter$float$float = function (painter, fromX, fromY) {
                            var x = (fromX + this.getPosX());
                            var y = (fromY + this.getPosY());
                            if ((this.style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_CHORD_DIAGRAM) !== 0) {
                                if (this.diagram != null) {
                                    painter['drawImage$org_herac_tuxguitar_graphics_TGImage$float$float'](this.diagram, x - ((this.diagramWidth - this.getFirstFretSpacing()) / 2) - this.getFirstFretSpacing(), y);
                                }
                                else {
                                    this.paintDiagram(painter, x - ((this.diagramWidth - this.getFirstFretSpacing()) / 2) - this.getFirstFretSpacing(), y);
                                }
                            }
                            if ((this.style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_CHORD_NAME) !== 0 && this.getName() != null && this.getName().length > 0) {
                                painter.setFont(this.getFont());
                                painter.setForeground(this.getForegroundColor());
                                painter.setBackground(this.getBackgroundColor());
                                painter['drawString$java_lang_String$float$float'](this.getName(), x - (this.nameWidth / 2), y + this.diagramHeight + painter.getFMTopLine());
                            }
                        };
                        TGChordImpl.prototype.update = function (painter, buffer) {
                            this.width = 0;
                            this.height = 0;
                            if (this.getFirstFret() <= 0) {
                                this.calculateFirstFret();
                            }
                            if ((this.style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_CHORD_NAME) !== 0) {
                                this.updateName(painter);
                                this.width = Math.max(this.width, this.nameWidth);
                                this.height += this.nameHeight;
                            }
                            if ((this.style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_CHORD_DIAGRAM) !== 0) {
                                this.updateDiagram((buffer != null ? painter : null), buffer);
                                this.width = Math.max(this.width, this.diagramWidth);
                                this.height += this.diagramHeight;
                            }
                        };
                        TGChordImpl.prototype.updateName = function (painter) {
                            var name = this.getName();
                            if (painter == null || name == null || name.length === 0) {
                                this.nameWidth = 0;
                                this.nameHeight = 0;
                                return;
                            }
                            this.nameWidth = painter.getFMWidth(name);
                            this.nameHeight = painter.getFMHeight();
                        };
                        TGChordImpl.prototype.updateDiagram = function (bufferFactory, resourceBuffer) {
                            var font = this.getFirstFretFont();
                            this.diagramWidth = this.getStringSpacing() + (this.getStringSpacing() * this.countStrings()) + ((font != null) ? this.getFirstFretSpacing() : 0);
                            this.diagramHeight = this.getFretSpacing() + (this.getFretSpacing() * TGChordImpl.MAX_FRETS);
                            if (bufferFactory != null && (this.diagram == null || this.diagram.isDisposed())) {
                                this.diagram = bufferFactory.createImage(this.diagramWidth, this.diagramHeight);
                                var painterBuffer = this.diagram.createPainter();
                                this.paintDiagram(painterBuffer, 0, 0);
                                painterBuffer.dispose();
                                if (this.registryKey == null) {
                                    this.registerBuffer$org_herac_tuxguitar_graphics_control_TGResourceBuffer(resourceBuffer);
                                }
                                resourceBuffer.setResource(this.registryKey, this.diagram);
                            }
                        };
                        TGChordImpl.prototype.paintDiagram = function (painter, fromX, fromY) {
                            var font = this.getFirstFretFont();
                            painter.setBackground(this.getBackgroundColor());
                            painter.setLineWidth(this.getLineWidth());
                            painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                            painter.addRectangle(fromX, fromY, this.diagramWidth, this.diagramHeight);
                            painter.closePath();
                            painter.setForeground(this.getColor());
                            var x = fromX + this.getStringSpacing();
                            var y = fromY + this.getFretSpacing();
                            if (font != null) {
                                var firstFretString = ('' + (this.getFirstFret()));
                                painter.setFont(font);
                                painter['drawString$java_lang_String$float$float'](firstFretString, fromX + (this.getFirstFretSpacing() - painter.getFMWidth(firstFretString)), (y + ((this.getFretSpacing() / 2.0) + painter.getFMMiddleLine())));
                                x += this.getFirstFretSpacing();
                            }
                            painter.initPath();
                            painter.setAntialias(false);
                            for (var i = 0; i < this.getStrings().length; i++) {
                                var x1 = x + (i * this.getStringSpacing());
                                var x2 = x + (i * this.getStringSpacing());
                                var y1 = y;
                                var y2 = y + ((this.getFretSpacing() * (TGChordImpl.MAX_FRETS - 1)));
                                painter.moveTo(x1, y1);
                                painter.lineTo(x2, y2);
                            }
                            painter.closePath();
                            painter.initPath();
                            painter.setAntialias(false);
                            for (var i = 0; i < TGChordImpl.MAX_FRETS; i++) {
                                var x1 = x;
                                var x2 = x + ((this.getStringSpacing() * (this.countStrings() - 1)));
                                var y1 = y + (i * this.getFretSpacing());
                                var y2 = y + (i * this.getFretSpacing());
                                painter.moveTo(x1, y1);
                                painter.lineTo(x2, y2);
                            }
                            painter.closePath();
                            for (var i = 0; i < this.getStrings().length; i++) {
                                var fret = this.getFretValue(i);
                                var noteX = x + ((this.getStringSpacing() * (this.countStrings() - 1)) - (this.getStringSpacing() * i));
                                if (fret < 0) {
                                    painter.initPath();
                                    painter.moveTo((noteX - (this.getNoteSize() / 2)), fromY);
                                    painter.lineTo((noteX + (this.getNoteSize() / 2)), fromY + this.getNoteSize());
                                    painter.moveTo((noteX + (this.getNoteSize() / 2)), fromY);
                                    painter.lineTo((noteX - (this.getNoteSize() / 2)), fromY + this.getNoteSize());
                                    painter.closePath();
                                }
                                else if (fret === 0) {
                                    painter.initPath();
                                    painter.addCircle(noteX, (fromY + (this.getNoteSize() / 2)), this.getNoteSize());
                                    painter.closePath();
                                }
                                else {
                                    painter.setBackground(this.isTonicFret(i, fret) ? this.getTonicColor() : this.getNoteColor());
                                    painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                    fret -= (this.getFirstFret() - 1);
                                    var noteY = y + ((this.getFretSpacing() * fret) - (this.getFretSpacing() / 2));
                                    painter.addCircle(noteX, noteY, (this.getNoteSize() + 1));
                                    painter.closePath();
                                }
                            }
                        };
                        TGChordImpl.prototype.calculateFirstFret = function () {
                            var minimum = -1;
                            var maximum = -1;
                            var zero = false;
                            for (var i = 0; i < this.getStrings().length; i++) {
                                var fretValue = this.getFretValue(i);
                                zero = (zero || fretValue === 0);
                                if (fretValue > 0) {
                                    minimum = (minimum < 0) ? fretValue : Math.min(minimum, fretValue);
                                    maximum = (Math.max(maximum, fretValue));
                                }
                            }
                            var firstFret = (zero && maximum < TGChordImpl.MAX_FRETS) ? 1 : minimum;
                            this.setFirstFret(Math.max(firstFret, 1));
                        };
                        TGChordImpl.prototype.isTonicFret = function (stringIndex, fret) {
                            if (this.tonic >= 0) {
                                var track = this.getBeat().getMeasure().getTrack();
                                if (track != null && track.stringCount() > stringIndex) {
                                    var string = track.getString(stringIndex + 1);
                                    if (string != null) {
                                        return (((string.getValue() + fret) % 12) === this.tonic);
                                    }
                                }
                            }
                            return false;
                        };
                        TGChordImpl.prototype.registerBuffer$org_herac_tuxguitar_graphics_control_TGResourceBuffer = function (resourceBuffer) {
                            this.registerBuffer$org_herac_tuxguitar_graphics_control_TGResourceBuffer$java_lang_Object(resourceBuffer, this);
                        };
                        TGChordImpl.prototype.registerBuffer$org_herac_tuxguitar_graphics_control_TGResourceBuffer$java_lang_Object = function (resourceBuffer, registryKey) {
                            this.registryKey = registryKey;
                            resourceBuffer.register(this.registryKey);
                        };
                        TGChordImpl.prototype.registerBuffer = function (resourceBuffer, registryKey) {
                            if (((resourceBuffer != null && resourceBuffer instanceof org.herac.tuxguitar.graphics.control.TGResourceBuffer) || resourceBuffer === null) && ((registryKey != null) || registryKey === null)) {
                                return this.registerBuffer$org_herac_tuxguitar_graphics_control_TGResourceBuffer$java_lang_Object(resourceBuffer, registryKey);
                            }
                            else if (((resourceBuffer != null && resourceBuffer instanceof org.herac.tuxguitar.graphics.control.TGResourceBuffer) || resourceBuffer === null) && registryKey === undefined) {
                                return this.registerBuffer$org_herac_tuxguitar_graphics_control_TGResourceBuffer(resourceBuffer);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGChordImpl.prototype.isDisposed = function () {
                            return (this.diagram == null || this.diagram.isDisposed());
                        };
                        TGChordImpl.prototype.dispose = function () {
                            if (!this.isDisposed()) {
                                this.diagram.dispose();
                            }
                        };
                        TGChordImpl.prototype.getPosX = function () {
                            return (this.isEditing()) ? this.posX : this.getBeatImpl().getPosX();
                        };
                        TGChordImpl.prototype.getPaintPosition = function (index) {
                            return this.getBeatImpl().getMeasureImpl().getTs().getPosition(index);
                        };
                        TGChordImpl.prototype.getBeatImpl = function () {
                            return this.getBeat();
                        };
                        TGChordImpl.prototype.isSameFont = function (f1, f2) {
                            if (f1 == null && f2 == null) {
                                return true;
                            }
                            if (f1 != null && f2 != null && !f1.isDisposed() && !f2.isDisposed()) {
                                var sameName = ((function (o1, o2) { if (o1.equals) {
                                    return o1.equals(o2);
                                }
                                else {
                                    return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                } })(f1.getName(), f2.getName()));
                                var sameBold = (f1.isBold() === f2.isBold());
                                var sameItalic = (f1.isItalic() === f2.isItalic());
                                var sameHeight = (f1.getHeight() === f2.getHeight());
                                return (sameName && sameBold && sameItalic && sameHeight);
                            }
                            return false;
                        };
                        TGChordImpl.prototype.isSameColor = function (c1, c2) {
                            if (c1 == null && c2 == null) {
                                return true;
                            }
                            if (c1 != null && c2 != null && !c1.isDisposed() && !c2.isDisposed()) {
                                return (c1.getRed() === c2.getRed() && c1.getGreen() === c2.getGreen() && c1.getBlue() === c2.getBlue());
                            }
                            return false;
                        };
                        TGChordImpl.prototype.addFretValue = function (string, fret) {
                            if (!this.isDisposed() && this.getFretValue(string) !== fret) {
                                this.dispose();
                            }
                            _super.prototype.addFretValue.call(this, string, fret);
                        };
                        TGChordImpl.prototype.setFirstFret = function (firstFret) {
                            if (!this.isDisposed() && this.getFirstFret() !== firstFret) {
                                this.dispose();
                            }
                            _super.prototype.setFirstFret.call(this, firstFret);
                        };
                        return TGChordImpl;
                    }(org.herac.tuxguitar.song.models.TGChord));
                    TGChordImpl.MAX_FRETS = 6;
                    control.TGChordImpl = TGChordImpl;
                    TGChordImpl["__class"] = "org.herac.tuxguitar.graphics.control.TGChordImpl";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var models;
                (function (models) {
                    var TGMarker = (function () {
                        function TGMarker(factory) {
                            this.measure = 0;
                            this.title = null;
                            this.color = null;
                            this.measure = 0;
                            this.title = TGMarker.DEFAULT_TITLE;
                            this.color = TGMarker.DEFAULT_COLOR_$LI$().clone(factory);
                        }
                        TGMarker.DEFAULT_COLOR_$LI$ = function () { if (TGMarker.DEFAULT_COLOR == null)
                            TGMarker.DEFAULT_COLOR = org.herac.tuxguitar.song.models.TGColor.RED_$LI$(); return TGMarker.DEFAULT_COLOR; };
                        ;
                        TGMarker.prototype.getMeasure = function () {
                            return this.measure;
                        };
                        TGMarker.prototype.setMeasure = function (measure) {
                            this.measure = measure;
                        };
                        TGMarker.prototype.getTitle = function () {
                            return this.title;
                        };
                        TGMarker.prototype.setTitle = function (title) {
                            this.title = title;
                        };
                        TGMarker.prototype.getColor = function () {
                            return this.color;
                        };
                        TGMarker.prototype.setColor = function (color) {
                            this.color = color;
                        };
                        TGMarker.prototype.clone = function (factory) {
                            var tgMarker = factory.newMarker();
                            tgMarker.copyFrom(this);
                            return tgMarker;
                        };
                        TGMarker.prototype.copyFrom = function (marker) {
                            this.setMeasure(marker.getMeasure());
                            this.setTitle(marker.getTitle());
                            this.getColor().copyFrom(marker.getColor());
                        };
                        return TGMarker;
                    }());
                    TGMarker.DEFAULT_TITLE = "Untitled";
                    models.TGMarker = TGMarker;
                    TGMarker["__class"] = "org.herac.tuxguitar.song.models.TGMarker";
                })(models = song.models || (song.models = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGLyricImpl = (function (_super) {
                        __extends(TGLyricImpl, _super);
                        function TGLyricImpl() {
                            var _this = _super.call(this) || this;
                            /*private*/ _this.nextIndex = 0;
                            _this.height = 0;
                            _this.height = 0;
                            return _this;
                        }
                        TGLyricImpl.prototype.setFrom = function (from) {
                            _super.prototype.setFrom.call(this, from);
                            this.update();
                        };
                        TGLyricImpl.prototype.setLyrics = function (lyrics) {
                            _super.prototype.setLyrics.call(this, lyrics);
                            this.update();
                        };
                        TGLyricImpl.prototype.update = function () {
                            this.height = (this.isEmpty() ? 0 : 10);
                        };
                        TGLyricImpl.prototype.start = function (index) {
                            if (index === void 0) { index = 0; }
                            this.nextIndex = index;
                        };
                        TGLyricImpl.prototype.setCurrentMeasure = function (measure) {
                            if (measure.getNumber() >= this.getFrom()) {
                                measure.setLyricBeatIndex(this.nextIndex);
                                this.nextIndex += (measure.getNotEmptyBeats());
                            }
                            else {
                                measure.setLyricBeatIndex(-1);
                                this.start();
                            }
                        };
                        TGLyricImpl.prototype.paintCurrentNoteBeats = function (painter, layout, currentMeasure, fromX, fromY) {
                            var from = currentMeasure.getLyricBeatIndex();
                            var beats = this.getLyricBeats();
                            if (beats != null && from >= 0 && from < beats.length) {
                                var beatIndex = 0;
                                for (var i = 0; i < currentMeasure.countBeats(); i++) {
                                    var beat = currentMeasure.getBeat(i);
                                    if (!beat.isRestBeat()) {
                                        if ((from + beatIndex) < beats.length) {
                                            var str = beats[from + beatIndex].trim();
                                            if (str.length > 0) {
                                                var x = (fromX + beat.getPosX() + beat.getSpacing(layout) + 2);
                                                layout.setLyricStyle(painter, (layout.isPlayModeEnabled() && beat.isPlaying(layout)));
                                                painter['drawString$java_lang_String$float$float'](str, x + 13, (fromY + currentMeasure.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_LYRIC)));
                                            }
                                        }
                                        beatIndex++;
                                    }
                                }
                            }
                        };
                        TGLyricImpl.prototype.getHeight = function () {
                            return this.height;
                        };
                        return TGLyricImpl;
                    }(org.herac.tuxguitar.song.models.TGLyric));
                    control.TGLyricImpl = TGLyricImpl;
                    TGLyricImpl["__class"] = "org.herac.tuxguitar.graphics.control.TGLyricImpl";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to Window - Preferences - Java - Code Style - Code Templates
                     * @extends org.herac.tuxguitar.song.models.TGMeasure
                     */
                    var TGMeasureImpl = (function (_super) {
                        __extends(TGMeasureImpl, _super);
                        function TGMeasureImpl(header) {
                            var _this = _super.call(this, header) || this;
                            /**
                             * Boolean para saber si hay que pintar la clave
                             */
                            /*private*/ _this.__paintClef = true;
                            /**
                             * Boolean para saber si hay que pintar el KeySignature
                             */
                            /*private*/ _this.__paintKeySignature = true;
                            /*private*/ _this.widthBeats = 0;
                            _this.posX = 0;
                            _this.posY = 0;
                            _this.quarterSpacing = 0;
                            _this.divisionLength = 0;
                            _this.prevMeasure = null;
                            _this.outOfBounds = false;
                            _this.firstOfLine = false;
                            _this.compactMode = false;
                            _this.spacing = 0;
                            _this.ts = null;
                            _this.maxY = 0;
                            _this.minY = 0;
                            _this.notEmptyVoices = 0;
                            _this.notEmptyBeats = 0;
                            _this.voiceGroups = null;
                            _this.buffer = null;
                            _this.bufferCreated = false;
                            _this.lyricBeatIndex = 0;
                            _this.width = 0;
                            _this.beatEffectSpacing = 0;
                            _this.text = false;
                            _this.chord = false;
                            _this.division1 = false;
                            _this.division2 = false;
                            _this.registeredAccidentals = null;
                            _this.readyToPaint = false;
                            _this.readyToPaint = false;
                            _this.registeredAccidentals = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
                                return undefined;
                            }
                            else {
                                var array = [];
                                for (var i = 0; i < dims[0]; i++) {
                                    array.push(allocate(dims.slice(1)));
                                }
                                return array;
                            } }; return allocate(dims); })([11, 7]);
                            _this.voiceGroups = new Array(org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES);
                            for (var v = 0; v < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; v++) {
                                _this.voiceGroups[v] = (new java.util.ArrayList());
                            }
                            return _this;
                        }
                        TGMeasureImpl.KEY_SIGNATURES_$LI$ = function () { if (TGMeasureImpl.KEY_SIGNATURES == null)
                            TGMeasureImpl.KEY_SIGNATURES = [[TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL], [TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.SHARP, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL], [TGMeasureImpl.SHARP, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.SHARP, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL], [TGMeasureImpl.SHARP, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL], [TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.NATURAL, TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL], [TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.NATURAL, TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.NATURAL], [TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.NATURAL], [TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.SHARP, TGMeasureImpl.SHARP], [TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.FLAT], [TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.FLAT, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.FLAT], [TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.FLAT, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.FLAT, TGMeasureImpl.FLAT], [TGMeasureImpl.NATURAL, TGMeasureImpl.FLAT, TGMeasureImpl.FLAT, TGMeasureImpl.NATURAL, TGMeasureImpl.NATURAL, TGMeasureImpl.FLAT, TGMeasureImpl.FLAT], [TGMeasureImpl.NATURAL, TGMeasureImpl.FLAT, TGMeasureImpl.FLAT, TGMeasureImpl.NATURAL, TGMeasureImpl.FLAT, TGMeasureImpl.FLAT, TGMeasureImpl.FLAT], [TGMeasureImpl.FLAT, TGMeasureImpl.FLAT, TGMeasureImpl.FLAT, TGMeasureImpl.NATURAL, TGMeasureImpl.FLAT, TGMeasureImpl.FLAT, TGMeasureImpl.FLAT], [TGMeasureImpl.FLAT, TGMeasureImpl.FLAT, TGMeasureImpl.FLAT, TGMeasureImpl.FLAT, TGMeasureImpl.FLAT, TGMeasureImpl.FLAT, TGMeasureImpl.FLAT]]; return TGMeasureImpl.KEY_SIGNATURES; };
                        ;
                        TGMeasureImpl.ACCIDENTAL_SHARP_NOTES_$LI$ = function () { if (TGMeasureImpl.ACCIDENTAL_SHARP_NOTES == null)
                            TGMeasureImpl.ACCIDENTAL_SHARP_NOTES = [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6]; return TGMeasureImpl.ACCIDENTAL_SHARP_NOTES; };
                        ;
                        TGMeasureImpl.ACCIDENTAL_FLAT_NOTES_$LI$ = function () { if (TGMeasureImpl.ACCIDENTAL_FLAT_NOTES == null)
                            TGMeasureImpl.ACCIDENTAL_FLAT_NOTES = [0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6]; return TGMeasureImpl.ACCIDENTAL_FLAT_NOTES; };
                        ;
                        TGMeasureImpl.ACCIDENTAL_NOTES_$LI$ = function () { if (TGMeasureImpl.ACCIDENTAL_NOTES == null)
                            TGMeasureImpl.ACCIDENTAL_NOTES = [false, true, false, true, false, false, true, false, true, false, true, false]; return TGMeasureImpl.ACCIDENTAL_NOTES; };
                        ;
                        TGMeasureImpl.SCORE_KEY_OFFSETS_$LI$ = function () { if (TGMeasureImpl.SCORE_KEY_OFFSETS == null)
                            TGMeasureImpl.SCORE_KEY_OFFSETS = [30, 18, 22, 24]; return TGMeasureImpl.SCORE_KEY_OFFSETS; };
                        ;
                        TGMeasureImpl.SCORE_KEY_SHARP_POSITIONS_$LI$ = function () { if (TGMeasureImpl.SCORE_KEY_SHARP_POSITIONS == null)
                            TGMeasureImpl.SCORE_KEY_SHARP_POSITIONS = [[1, 4, 0, 3, 6, 2, 5], [3, 6, 2, 5, 8, 4, 7], [7, 3, 6, 2, 5, 1, 4], [2, 5, 1, 4, 7, 3, 6]]; return TGMeasureImpl.SCORE_KEY_SHARP_POSITIONS; };
                        ;
                        TGMeasureImpl.SCORE_KEY_FLAT_POSITIONS_$LI$ = function () { if (TGMeasureImpl.SCORE_KEY_FLAT_POSITIONS == null)
                            TGMeasureImpl.SCORE_KEY_FLAT_POSITIONS = [[5, 2, 6, 3, 7, 4, 8], [7, 4, 8, 5, 9, 6, 10], [4, 1, 5, 2, 6, 3, 7], [6, 3, 7, 4, 8, 5, 9]]; return TGMeasureImpl.SCORE_KEY_FLAT_POSITIONS; };
                        ;
                        /**
                         * Crea los valores necesarios
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         */
                        TGMeasureImpl.prototype.create = function (layout) {
                            this.readyToPaint = false;
                            this.divisionLength = org.herac.tuxguitar.song.managers.TGSongManager.getDivisionLength(this.getHeader());
                            this.resetSpacing();
                            this.autoCompleteSilences(layout.getSongManager());
                            this.orderBeats(layout.getSongManager());
                            this.checkCompactMode(layout);
                            this.clearRegisteredAccidentals();
                            this.calculateBeats(layout);
                            this.calculateWidth(layout);
                            this.setFirstOfLine(false);
                        };
                        /**
                         * Actualiza los valores para dibujar
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         */
                        TGMeasureImpl.prototype.update = function (layout) {
                            this.registerBuffer(layout);
                            this.updateComponents(layout);
                            this.setOutOfBounds(true);
                            this.setBufferCreated(false);
                            this.readyToPaint = true;
                        };
                        TGMeasureImpl.prototype.checkCompactMode = function (layout) {
                            var compactMode = ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_COMPACT) !== 0);
                            if (compactMode && (layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_MULTITRACK) !== 0) {
                                compactMode = (layout.getSong().countTracks() === 1);
                            }
                            this.compactMode = compactMode;
                        };
                        TGMeasureImpl.prototype.clearRegisteredAccidentals = function () {
                            for (var i = 0; i < 11; i++) {
                                for (var n = 0; n < 7; n++) {
                                    this.registeredAccidentals[i][n] = false;
                                }
                            }
                        };
                        TGMeasureImpl.prototype.calculateWidth = function (layout) {
                            if (this.compactMode) {
                                this.width = this.widthBeats;
                            }
                            else {
                                var quartersInSignature = ((1.0 / this.getTimeSignature().getDenominator().getValue()) * 4.0) * this.getTimeSignature().getNumerator();
                                this.width = (this.getQuarterSpacing() * quartersInSignature);
                            }
                            this.width += this.getFirstNoteSpacing(layout);
                            this.width += (this.getRepeatClose() > 0) ? (20.0 * layout.getScale()) : 0;
                            this.width += this.getHeaderImpl().getLeftSpacing(layout);
                            this.width += this.getHeaderImpl().getRightSpacing(layout);
                            this.getHeaderImpl().notifyWidth(this.width);
                        };
                        TGMeasureImpl.prototype.calculateBeats = function (layout) {
                            var previousChord = null;
                            var minDuration = null;
                            var previousBeat = null;
                            var previousVoices = new Array(org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES);
                            var groups = new Array(org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES);
                            var style = layout.getStyle();
                            var minimumChordLength = 0;
                            var notEmptyVoicesChecked = new Array(org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES);
                            var chordEnabled = ((style & (org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_CHORD_DIAGRAM | org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_CHORD_NAME)) !== 0);
                            this.widthBeats = 0;
                            this.notEmptyBeats = 0;
                            this.notEmptyVoices = 0;
                            for (var v = 0; v < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; v++) {
                                this.voiceGroups[v].clear();
                            }
                            for (var i = 0; i < this.countBeats(); i++) {
                                var beat = this.getBeat(i);
                                beat.reset();
                                if (chordEnabled && beat.getChord() != null) {
                                    if (previousChord != null) {
                                        var length_5 = (beat.getStart() - previousChord.getBeat().getStart());
                                        minimumChordLength = (minimumChordLength > 0) ? Math.min(minimumChordLength, Math.abs(length_5)) : length_5;
                                    }
                                    previousChord = beat.getChord();
                                }
                                var emptyBeat = true;
                                for (var v = 0; v < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; v++) {
                                    var voice = beat.getVoice(v);
                                    if (!voice.isEmpty()) {
                                        emptyBeat = false;
                                        voice.reset();
                                        if (minDuration == null || voice.getDuration().getTime() <= minDuration.getTime()) {
                                            minDuration = voice.getDuration();
                                        }
                                        if (!notEmptyVoicesChecked[v]) {
                                            notEmptyVoicesChecked[v] = true;
                                            this.notEmptyVoices++;
                                        }
                                        var it = voice.getNotes().iterator();
                                        while ((it.hasNext())) {
                                            var note = it.next();
                                            voice.check(note);
                                        }
                                        ;
                                        if (!voice.isRestVoice()) {
                                            beat.check(layout, voice.getMinNote());
                                            beat.check(layout, voice.getMaxNote());
                                            if ((groups[v] == null) || !this.canJoin(layout.getSongManager(), voice, previousVoices[v])) {
                                                groups[v] = new org.herac.tuxguitar.graphics.control.TGBeatGroup(v);
                                                this.voiceGroups[v].add(groups[v]);
                                            }
                                            groups[v].check$org_herac_tuxguitar_graphics_control_TGVoiceImpl(voice);
                                        }
                                        else {
                                            for (var v2 = 0; v2 < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; v2++) {
                                                if (v2 !== voice.getIndex()) {
                                                    var voice2 = beat.getVoiceImpl(v2);
                                                    if (!voice2.isEmpty() && voice2.getDuration().isEqual(voice.getDuration())) {
                                                        if (!voice2.isRestVoice() || !voice2.isHiddenSilence()) {
                                                            voice.setHiddenSilence(true);
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        this.makeVoice(layout, voice, previousVoices[v], groups[v]);
                                        previousVoices[v] = voice;
                                    }
                                }
                                if (emptyBeat) {
                                    console.info("Empty Beat !!!!!! " + beat.getStart() + "  " + i);
                                }
                                this.makeBeat(layout, beat, previousBeat, chordEnabled);
                                previousBeat = beat;
                            }
                            for (var v = 0; v < this.voiceGroups.length; v++) {
                                var voiceGroups = this.voiceGroups[v].iterator();
                                while ((voiceGroups.hasNext())) {
                                    var group = voiceGroups.next();
                                    group.finish(layout, this);
                                }
                                ;
                            }
                            if (!this.compactMode) {
                                this.quarterSpacing = (minDuration != null ? layout.getSpacingForQuarter(minDuration) : layout.getMinimumDurationWidth());
                                if (chordEnabled && minimumChordLength > 0) {
                                    var chordWidth = (layout.getChordFretIndexSpacing() + layout.getChordStringSpacing() + (this.getTrack().stringCount() * layout.getChordStringSpacing()));
                                    var minimumSpacing = ((org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME * chordWidth) / minimumChordLength);
                                    this.quarterSpacing = Math.max(minimumSpacing, this.quarterSpacing);
                                }
                                this.getHeaderImpl().notifyQuarterSpacing(this.quarterSpacing);
                            }
                        };
                        TGMeasureImpl.prototype.canJoin = function (manager, b1, b2) {
                            if (b1 == null || b2 == null || b1.isRestVoice() || b2.isRestVoice()) {
                                return false;
                            }
                            var divisionLength = this.getDivisionLength();
                            var start = this.getStart();
                            var start1 = (manager.getMeasureManager().getRealStart(this, b1.getBeat().getStart()) - start);
                            var start2 = (manager.getMeasureManager().getRealStart(this, b2.getBeat().getStart()) - start);
                            if (b1.getDuration().getValue() < org.herac.tuxguitar.song.models.TGDuration.EIGHTH || b2.getDuration().getValue() < org.herac.tuxguitar.song.models.TGDuration.EIGHTH) {
                                return (start1 === start2);
                            }
                            var p1 = (Math.floor((divisionLength + start1) / divisionLength));
                            var p2 = (Math.floor((divisionLength + start2) / divisionLength));
                            return (p1 === p2);
                        };
                        TGMeasureImpl.prototype.makeVoice = function (layout, voice, previousVoice, group) {
                            voice.setWidth(layout.getDurationWidth(voice.getDuration()));
                            voice.setBeatGroup(group);
                            if (previousVoice != null) {
                                voice.setPreviousBeat(previousVoice);
                                previousVoice.setNextBeat(voice);
                            }
                        };
                        TGMeasureImpl.prototype.makeBeat = function (layout, beat, previousBeat, chordEnabled) {
                            var minimumWidth = -1;
                            var restBeat = true;
                            for (var v = 0; v < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; v++) {
                                var voice = beat.getVoiceImpl(v);
                                if (!voice.isEmpty()) {
                                    if (minimumWidth < 0 || voice.getWidth() < minimumWidth) {
                                        minimumWidth = voice.getWidth();
                                    }
                                    if (!voice.isRestVoice()) {
                                        restBeat = false;
                                    }
                                }
                            }
                            beat.setWidth(minimumWidth);
                            this.notEmptyBeats += (restBeat ? 0 : 1);
                            this.widthBeats += beat.getMinimumWidth();
                            if (previousBeat != null) {
                                beat.setPreviousBeat(previousBeat);
                                previousBeat.setNextBeat(beat);
                                if (chordEnabled && beat.isChordBeat() && previousBeat.isChordBeat()) {
                                    var previousWidth = previousBeat.getMinimumWidth();
                                    var chordWidth = (layout.getChordFretIndexSpacing() + layout.getChordStringSpacing() + (this.getTrack().stringCount() * layout.getChordStringSpacing()));
                                    previousBeat.setWidth(Math.max(chordWidth, previousWidth));
                                    this.widthBeats -= previousWidth;
                                    this.widthBeats += previousBeat.getMinimumWidth();
                                }
                            }
                        };
                        /**
                         * Calcula si debe pintar el TimeSignature
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         */
                        TGMeasureImpl.prototype.calculateMeasureChanges = function (layout) {
                            this.__paintClef = false;
                            this.__paintKeySignature = false;
                            this.prevMeasure = (layout.isFirstMeasure$org_herac_tuxguitar_song_models_TGMeasure(this) ? null : layout.getSongManager().getTrackManager().getPrevMeasure(this));
                            if ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                if (this.prevMeasure == null || this.getClef() !== this.prevMeasure.getClef()) {
                                    this.__paintClef = true;
                                    this.getHeaderImpl().notifyClefSpacing(this.calculateClefSpacing(layout));
                                }
                                if (this.prevMeasure == null || this.getKeySignature() !== this.prevMeasure.getKeySignature()) {
                                    this.__paintKeySignature = true;
                                    this.getHeaderImpl().notifyKeySignatureSpacing(this.calculateKeySignatureSpacing(layout));
                                }
                            }
                        };
                        /**
                         * Calcula si hay espacios libres. y crea nuevos silencios
                         * @param {org.herac.tuxguitar.song.managers.TGSongManager} manager
                         * @private
                         */
                        TGMeasureImpl.prototype.autoCompleteSilences = function (manager) {
                            manager.getMeasureManager().autoCompleteSilences(this);
                        };
                        TGMeasureImpl.prototype.registerBuffer = function (layout) {
                            var buffer = layout.getResourceBuffer();
                            this.getBuffer().register(buffer);
                            var markerKey = this.getMarkerRegistryKey();
                            if (this.hasMarker()) {
                                buffer.register(markerKey);
                            }
                            else if (buffer.isRegistered(markerKey)) {
                                buffer.unregister(markerKey);
                            }
                        };
                        /**
                         * Llama a update de todas las notas del compas
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         * @private
                         */
                        TGMeasureImpl.prototype.updateComponents = function (layout) {
                            this.maxY = 0;
                            this.minY = 0;
                            var spacing = this.getFirstNoteSpacing(layout);
                            var tmpX = spacing;
                            for (var i = 0; i < this.countBeats(); i++) {
                                var beat = this.getBeat(i);
                                beat.registerBuffer(layout);
                                beat.resetEffectsSpacing(layout);
                                if (this.compactMode) {
                                    beat.setPosX(tmpX);
                                    tmpX += beat.getMinimumWidth();
                                }
                                else {
                                    var quarterWidth = this.getMaxQuarterSpacing(layout);
                                    var x1 = (spacing + this.getDisplayPosition(beat.getStart(), quarterWidth));
                                    var minimumWidth = -1;
                                    for (var v = 0; v < beat.countVoices(); v++) {
                                        var voice = beat.getVoiceImpl(v);
                                        if (!voice.isEmpty()) {
                                            var x2 = (spacing + this.getDisplayPosition(beat.getStart() + voice.getDuration().getTime(), quarterWidth));
                                            var width = (x2 - x1);
                                            if (minimumWidth < 0 || width < minimumWidth) {
                                                minimumWidth = width;
                                            }
                                            voice.setWidth(width);
                                        }
                                    }
                                    beat.setPosX(x1);
                                    beat.setWidth(minimumWidth);
                                }
                                for (var v = 0; v < beat.countVoices(); v++) {
                                    var voice = beat.getVoiceImpl(v);
                                    if (!voice.isEmpty()) {
                                        var notes = voice.getNotes().iterator();
                                        while ((notes.hasNext())) {
                                            var note = notes.next();
                                            beat.updateEffectsSpacing(layout, note.getEffect());
                                            note.update(layout);
                                        }
                                        ;
                                        voice.update(layout);
                                        if (!this.division1 && (v % 2 === 0) && !voice.getDuration().getDivision().isEqual(org.herac.tuxguitar.song.models.TGDivisionType.NORMAL_$LI$())) {
                                            this.division1 = true;
                                        }
                                        if (!this.division2 && (v % 2 === 1) && !voice.getDuration().getDivision().isEqual(org.herac.tuxguitar.song.models.TGDivisionType.NORMAL_$LI$())) {
                                            this.division2 = true;
                                        }
                                        if ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) === 0 || (voice.isRestVoice() && !voice.isHiddenSilence())) {
                                            if (voice.getMaxY() > this.maxY) {
                                                this.maxY = voice.getMaxY();
                                            }
                                            if (voice.getMinY() < this.minY) {
                                                this.minY = voice.getMinY();
                                            }
                                        }
                                    }
                                }
                                var bsSize = beat.getEffectsSpacing(layout);
                                if (bsSize > this.beatEffectSpacing) {
                                    this.beatEffectSpacing = bsSize;
                                }
                                if (!this.chord && beat.isChordBeat()) {
                                    this.chord = true;
                                }
                                if (!this.text && beat.isTextBeat()) {
                                    this.text = true;
                                }
                            }
                            if ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                for (var i = 0; i < this.voiceGroups.length; i++) {
                                    var groups = this.voiceGroups[i].iterator();
                                    while ((groups.hasNext())) {
                                        var group = groups.next();
                                        this.checkValue(layout, group.getMinNote(), group.getDirection());
                                        this.checkValue(layout, group.getMaxNote(), group.getDirection());
                                    }
                                    ;
                                }
                            }
                        };
                        TGMeasureImpl.prototype.getDisplayPosition = function (start, quarterWidth) {
                            var newStart = (start - this.getStart());
                            var displayPosition = 0.0;
                            if (newStart > 0) {
                                var position = (newStart / org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME);
                                displayPosition = (position * quarterWidth);
                            }
                            return displayPosition;
                        };
                        TGMeasureImpl.prototype.getNoteAccidental = function (noteValue) {
                            if (noteValue >= 0 && noteValue < 128) {
                                var key = this.getKeySignature();
                                var note = (noteValue % 12);
                                var octave = ((noteValue / 12 | 0));
                                var accidentalValue = (key <= 7 ? TGMeasureImpl.SHARP : TGMeasureImpl.FLAT);
                                var accidentalNotes = (key <= 7 ? TGMeasureImpl.ACCIDENTAL_SHARP_NOTES_$LI$() : TGMeasureImpl.ACCIDENTAL_FLAT_NOTES_$LI$());
                                var isAccidentalNote = TGMeasureImpl.ACCIDENTAL_NOTES_$LI$()[note];
                                var isAccidentalKey = TGMeasureImpl.KEY_SIGNATURES_$LI$()[key][accidentalNotes[note]] === accidentalValue;
                                if (isAccidentalKey !== isAccidentalNote && !this.registeredAccidentals[octave][accidentalNotes[note]]) {
                                    this.registeredAccidentals[octave][accidentalNotes[note]] = true;
                                    return (isAccidentalNote ? accidentalValue : TGMeasureImpl.NATURAL);
                                }
                                if (isAccidentalKey === isAccidentalNote && this.registeredAccidentals[octave][accidentalNotes[note]]) {
                                    this.registeredAccidentals[octave][accidentalNotes[note]] = false;
                                    return (isAccidentalNote ? accidentalValue : TGMeasureImpl.NATURAL);
                                }
                            }
                            return 0;
                        };
                        TGMeasureImpl.prototype.checkValue = function (layout, note, direction) {
                            var y = note.getScorePosY();
                            var upOffset = org.herac.tuxguitar.graphics.control.TGBeatGroup.getUpOffset(layout);
                            var downOffset = org.herac.tuxguitar.graphics.control.TGBeatGroup.getDownOffset(layout);
                            if (direction === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_UP && y > this.maxY) {
                                this.maxY = y;
                            }
                            else if (direction === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_DOWN && (y + downOffset) > this.maxY) {
                                this.maxY = (y + downOffset + 2.0);
                            }
                            if (direction === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_UP && (y - upOffset) < this.minY) {
                                this.minY = (y - upOffset - 2.0);
                            }
                            else if (direction === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_DOWN && y < this.minY) {
                                this.minY = y;
                            }
                        };
                        TGMeasureImpl.prototype.resetSpacing = function () {
                            this.text = false;
                            this.chord = false;
                            this.division1 = false;
                            this.division2 = false;
                            this.beatEffectSpacing = 0;
                        };
                        TGMeasureImpl.prototype.registerSpacing = function (layout, ts) {
                            if (layout.hasLoopMarker$org_herac_tuxguitar_song_models_TGMeasureHeader(this.getHeader())) {
                                ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_LOOP_MARKER, layout.getLoopMarkerSpacing());
                            }
                            if (this.hasMarker()) {
                                ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_MARKER, layout.getMarkerSpacing());
                            }
                            if (this.chord) {
                                ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_CHORD, layout.getDefaultChordSpacing());
                            }
                            if (this.text) {
                                ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TEXT, layout.getTextSpacing());
                            }
                            if (this.getHeader().getRepeatAlternative() > 0) {
                                ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_REPEAT_ENDING, layout.getRepeatEndingSpacing());
                            }
                            if (this.division1) {
                                ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_DIVISION_TYPE_1, layout.getDivisionTypeSpacing());
                            }
                            if (this.division2) {
                                ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_DIVISION_TYPE_2, layout.getDivisionTypeSpacing());
                            }
                            if (this.beatEffectSpacing > 0) {
                                ts.setSize(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_EFFECTS, this.beatEffectSpacing);
                            }
                        };
                        TGMeasureImpl.prototype.orderBeats = function (manager) {
                            manager.getMeasureManager().orderBeats(this);
                        };
                        TGMeasureImpl.prototype.paintMeasure = function (layout, painter) {
                            if (this.readyToPaint) {
                                this.setOutOfBounds(false);
                                var bufferEnabled = layout.isBufferEnabled();
                                var resourceBuffer = layout.getResourceBuffer();
                                if (!bufferEnabled || this.shouldRepaintBuffer(resourceBuffer)) {
                                    var bufferPainter = painter;
                                    var x = (bufferEnabled ? 0 : this.getPosX());
                                    var y = (bufferEnabled ? 0 : this.getPosY());
                                    if (bufferEnabled) {
                                        bufferPainter = this.getBuffer().createBuffer(resourceBuffer, painter, this.getWidth(layout) + this.getSpacing(), this.getTs().getSize(), layout.getResources().getBackgroundColor());
                                    }
                                    layout.paintLines(this.getTrackImpl(), this.getTs(), bufferPainter, x, y, this.getWidth(layout) + this.getSpacing());
                                    this.paintTimeSignature(layout, bufferPainter, x, y);
                                    this.paintClef(layout, bufferPainter, x, y);
                                    this.paintKeySignature(layout, bufferPainter, x, y);
                                    this.paintComponents(layout, bufferPainter, x, y);
                                    if (bufferEnabled) {
                                        bufferPainter.dispose();
                                    }
                                    this.setBufferCreated(true);
                                }
                                if (bufferEnabled) {
                                    painter.setBackground(layout.getResources().getBackgroundColor());
                                    this.getBuffer().paintBuffer(resourceBuffer, painter, this.getPosX(), this.getPosY());
                                }
                                this.paintMarker(layout, painter);
                                this.paintTexts(layout, painter);
                                this.paintTempo(layout, painter);
                                this.paintTripletFeel(layout, painter);
                                this.paintDivisions$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter(layout, painter);
                                this.paintRepeatEnding(layout, painter);
                                this.paintPlayMode(layout, painter);
                                this.paintLoopMarker$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter(layout, painter);
                            }
                        };
                        TGMeasureImpl.prototype.shouldRepaintBuffer = function (resourceBuffer) {
                            return (!this.isBufferCreated() || this.getBuffer().isDisposed(resourceBuffer));
                        };
                        TGMeasureImpl.prototype.paintRepeatEnding = function (layout, painter) {
                            if (this.getHeader().getRepeatAlternative() > 0) {
                                var scale = layout.getScale();
                                var x1 = (this.getPosX() + this.getHeaderImpl().getLeftSpacing(layout) + this.getFirstNoteSpacing(layout));
                                var x2 = (this.getPosX() + this.getWidth(layout) + this.getSpacing());
                                var y1 = (this.getPosY() + this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_REPEAT_ENDING));
                                var y2 = (y1 + (layout.getRepeatEndingSpacing() * 0.75));
                                var string = new String();
                                for (var i = 0; i < 8; i++) {
                                    if ((this.getHeader().getRepeatAlternative() & (1 << i)) !== 0) {
                                        string += ((string.length > 0) ? (", ") + ('' + (i + 1)) : ('' + (i + 1)));
                                    }
                                }
                                layout.setRepeatEndingStyle(painter);
                                painter.initPath();
                                painter.setAntialias(false);
                                painter.moveTo(x1, y2);
                                painter.lineTo(x1, y1);
                                painter.moveTo(x1, y1);
                                painter.lineTo(x2, y1);
                                painter.closePath();
                                painter['drawString$java_lang_String$float$float'](string, (x1 + (5.0 * scale)), (y1 + painter.getFMTopLine() + (4.0 * scale)));
                            }
                        };
                        /**
                         * Pinta las notas
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         * @param {org.herac.tuxguitar.graphics.TGPainter} painter
                         * @param {number} fromX
                         * @param {number} fromY
                         */
                        TGMeasureImpl.prototype.paintComponents = function (layout, painter, fromX, fromY) {
                            var x = (fromX + this.getHeaderImpl().getLeftSpacing(layout));
                            var it = this.getBeats().iterator();
                            while ((it.hasNext())) {
                                var beat = it.next();
                                beat.paint(layout, painter, x, fromY);
                            }
                            ;
                            this.paintDivisionTypes$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter$float$float(layout, painter, x, fromY);
                        };
                        TGMeasureImpl.prototype.paintDivisionTypes$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter$float$float = function (layout, painter, fromX, fromY) {
                            for (var v = 0; v < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; v++) {
                                if ((this.division1 && v % 2 === 0) || (this.division2 && v % 2 === 1)) {
                                    this.paintDivisionTypes$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter$float$float$int(layout, painter, fromX, fromY, v);
                                }
                            }
                        };
                        TGMeasureImpl.prototype.paintDivisionTypes$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter$float$float$int = function (layout, painter, fromX, fromY, voiceIndex) {
                            var x1 = 0;
                            var x2 = 0;
                            var divisionType = null;
                            var it = this.getBeats().iterator();
                            while ((it.hasNext())) {
                                var beat = it.next();
                                var voice = beat.getVoiceImpl(voiceIndex);
                                if (!voice.isEmpty()) {
                                    if (divisionType != null && !voice.getDuration().getDivision().isEqual(divisionType)) {
                                        this.paintDivisionType(layout, painter, divisionType, x1, x2, fromY, voiceIndex);
                                        divisionType = null;
                                    }
                                    if (!voice.getDuration().getDivision().isEqual(org.herac.tuxguitar.song.models.TGDivisionType.NORMAL_$LI$())) {
                                        x2 = (fromX + beat.getPosX() + beat.getSpacing(layout));
                                        if (divisionType == null) {
                                            divisionType = voice.getDuration().getDivision();
                                            x1 = x2;
                                        }
                                    }
                                }
                            }
                            ;
                            if (divisionType != null) {
                                this.paintDivisionType(layout, painter, divisionType, x1, x2, fromY, voiceIndex);
                            }
                        };
                        TGMeasureImpl.prototype.paintDivisionTypes = function (layout, painter, fromX, fromY, voiceIndex) {
                            if (((layout != null && layout instanceof org.herac.tuxguitar.graphics.control.TGLayout) || layout === null) && ((painter != null && (painter["__interfaces"] != null && painter["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0 || painter.constructor != null && painter.constructor["__interfaces"] != null && painter.constructor["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0)) || painter === null) && ((typeof fromX === 'number') || fromX === null) && ((typeof fromY === 'number') || fromY === null) && ((typeof voiceIndex === 'number') || voiceIndex === null)) {
                                return this.paintDivisionTypes$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter$float$float$int(layout, painter, fromX, fromY, voiceIndex);
                            }
                            else if (((layout != null && layout instanceof org.herac.tuxguitar.graphics.control.TGLayout) || layout === null) && ((painter != null && (painter["__interfaces"] != null && painter["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0 || painter.constructor != null && painter.constructor["__interfaces"] != null && painter.constructor["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0)) || painter === null) && ((typeof fromX === 'number') || fromX === null) && ((typeof fromY === 'number') || fromY === null) && voiceIndex === undefined) {
                                return this.paintDivisionTypes$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter$float$float(layout, painter, fromX, fromY);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGMeasureImpl.prototype.paintDivisionType = function (layout, painter, divisionType, beatX1, beatX2, fromY, voice) {
                            layout.setDivisionTypeStyle(painter);
                            var label = ('' + (divisionType.getEnters()));
                            var scale = layout.getScale();
                            var labelWidth = painter.getFMWidth(label);
                            var y = (fromY + this.getTs().getPosition(voice % 2 === 0 ? org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_DIVISION_TYPE_1 : org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_DIVISION_TYPE_2));
                            var yMove = ((layout.getDivisionTypeSpacing() / 2.0) - scale);
                            var xMove = ((((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 ? layout.getScoreNoteWidth() : layout.getStringSpacing()) / 2.0) + scale);
                            var y1 = (y + yMove + (yMove * (voice % 2 === 0 ? 1 : -1)));
                            var y2 = (y + yMove);
                            var x1 = (beatX1 - xMove);
                            var x2 = (beatX2 + (xMove * 2.0));
                            var xCenter = (x1 + ((x2 - x1) / 2.0));
                            if (beatX2 > beatX1) {
                                painter.setLineWidth(layout.getLineWidth(1));
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_DRAW);
                                painter.moveTo(x1, y1);
                                painter.lineTo(x1, y2);
                                painter.lineTo(xCenter - (labelWidth / 2.0) - scale, y2);
                                painter.moveTo(x2, y1);
                                painter.lineTo(x2, y2);
                                painter.lineTo(xCenter + (labelWidth / 2.0) + scale, y2);
                                painter.closePath();
                            }
                            painter['drawString$java_lang_String$float$float'](label, (xCenter - (labelWidth / 2.0)), (y2 + painter.getFMMiddleLine()));
                        };
                        /**
                         * Pinta las divisiones del compas
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         * @param {org.herac.tuxguitar.graphics.TGPainter} painter
                         * @private
                         */
                        TGMeasureImpl.prototype.paintDivisions$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter = function (layout, painter) {
                            var x1 = this.getPosX();
                            var x2 = this.getPosX() + this.getWidth(layout);
                            var y1 = 0;
                            var y2 = 0;
                            var offsetY = 0;
                            var style = layout.getStyle();
                            var addInfo = false;
                            if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                y1 = this.getPosY() + this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES);
                                y2 = y1 + (layout.getScoreLineSpacing() * 4);
                                addInfo = true;
                                if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0 && (layout.isFirstMeasure$org_herac_tuxguitar_song_models_TGMeasure(this) || this.isFirstOfLine())) {
                                    offsetY = (this.getPosY() + this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE)) - y2;
                                }
                                this.paintDivisions$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter$float$float$float$float$float$boolean(layout, painter, x1, y1, x2, y2, offsetY, addInfo);
                            }
                            if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0) {
                                y1 = this.getPosY() + this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE);
                                y2 = y1 + ((this.getTrack().getStrings().size() - 1) * layout.getStringSpacing());
                                addInfo = ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) === 0);
                                offsetY = 0;
                                this.paintDivisions$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter$float$float$float$float$float$boolean(layout, painter, x1, y1, x2, y2, offsetY, addInfo);
                            }
                        };
                        TGMeasureImpl.prototype.paintDivisions$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter$float$float$float$float$float$boolean = function (layout, painter, x1, y1, x2, y2, offsetY, addInfo) {
                            var scale = layout.getScale();
                            var lineWidthSmall = layout.getLineWidth(1);
                            var lineWidthBig = layout.getLineWidth(3);
                            if (addInfo) {
                                var number = ('' + (this.getNumber()));
                                layout.setMeasureNumberStyle(painter);
                                painter['drawString$java_lang_String$float$float$boolean'](number, this.getPosX() + scale, y1 + painter.getFMBaseLine() - (2.0 * scale), true);
                            }
                            layout.setDivisionsStyle(painter, true);
                            if (this.isRepeatOpen() || layout.isFirstMeasure$org_herac_tuxguitar_song_models_TGMeasure(this)) {
                                painter.setLineWidth(layout.getLineWidth(0));
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_DRAW | org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                painter.setAntialias(false);
                                painter.addRectangle(x1, y1, lineWidthBig, (y2 + offsetY) - y1);
                                painter.closePath();
                                painter.setLineWidth(layout.getLineWidth(0));
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_DRAW | org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                painter.setAntialias(false);
                                painter.addRectangle(x1 + lineWidthBig + (2.0 * scale), y1, lineWidthSmall, (y2 + offsetY) - y1);
                                painter.closePath();
                                if (this.isRepeatOpen()) {
                                    var size = Math.max(1, Math.round(4.0 * scale));
                                    var xMove = ((lineWidthBig + scale + lineWidthSmall) + (2.0 * scale) + size);
                                    var yMove = ((lineWidthBig + scale + lineWidthSmall) + (2.0 * scale));
                                    painter.setLineWidth(lineWidthSmall);
                                    painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                    painter.moveTo(x1 + xMove, y1 + ((y2 - y1) / 2) - yMove);
                                    painter.addCircle(x1 + xMove, y1 + ((y2 - y1) / 2) - yMove, size);
                                    painter.moveTo(x1 + xMove, y1 + ((y2 - y1) / 2) + yMove);
                                    painter.addCircle(x1 + xMove, y1 + ((y2 - y1) / 2) + yMove, size);
                                    painter.closePath();
                                }
                            }
                            else {
                                painter.setLineWidth(layout.getLineWidth(0));
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_DRAW | org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                painter.setAntialias(false);
                                painter.moveTo(x1, y1);
                                painter.lineTo(x1, (y2 + offsetY));
                                painter.closePath();
                            }
                            if (this.getRepeatClose() > 0 || layout.isLastMeasure$org_herac_tuxguitar_song_models_TGMeasure(this)) {
                                painter.setLineWidth(layout.getLineWidth(0));
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_DRAW | org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                painter.setAntialias(false);
                                painter.addRectangle((x2 + this.getSpacing()) - (lineWidthBig + lineWidthSmall + (2.0 * scale)), y1, lineWidthSmall, (y2 - y1));
                                painter.closePath();
                                painter.setLineWidth(layout.getLineWidth(0));
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_DRAW | org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                painter.setAntialias(false);
                                painter.addRectangle((x2 + this.getSpacing()) - lineWidthBig, y1, lineWidthBig, (y2 - y1));
                                painter.closePath();
                                if (this.getRepeatClose() > 0) {
                                    var size = Math.max(1, Math.round(4.0 * scale));
                                    var xMove = (((lineWidthBig + scale + lineWidthSmall) + (2.0 * scale)) + size);
                                    var yMove = ((lineWidthBig + scale + lineWidthSmall) + (2.0 * scale));
                                    painter.setLineWidth(lineWidthSmall);
                                    painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                    painter.moveTo((x2 - xMove) + this.getSpacing(), y1 + ((y2 - y1) / 2) - yMove);
                                    painter.addCircle((x2 - xMove) + this.getSpacing(), y1 + ((y2 - y1) / 2) - yMove, size);
                                    painter.moveTo((x2 - xMove) + this.getSpacing(), y1 + ((y2 - y1) / 2) + yMove);
                                    painter.addCircle((x2 - xMove) + this.getSpacing(), y1 + ((y2 - y1) / 2) + yMove, size);
                                    painter.closePath();
                                    if (addInfo) {
                                        layout.setDivisionsStyle(painter, false);
                                        var repetitions = ("x" + this.getRepeatClose());
                                        painter['drawString$java_lang_String$float$float$boolean'](repetitions, x2 - painter.getFMWidth(repetitions) + this.getSpacing() - size, y1 + painter.getFMBaseLine() - (2.0 * scale), true);
                                    }
                                }
                            }
                            else {
                                painter.setLineWidth(layout.getLineWidth(0));
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_DRAW | org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                painter.setAntialias(false);
                                painter.moveTo((x2 + this.getSpacing()), y1);
                                painter.lineTo((x2 + this.getSpacing()), y2);
                                painter.closePath();
                            }
                            painter.setLineWidth(lineWidthSmall);
                        };
                        TGMeasureImpl.prototype.paintDivisions = function (layout, painter, x1, y1, x2, y2, offsetY, addInfo) {
                            if (((layout != null && layout instanceof org.herac.tuxguitar.graphics.control.TGLayout) || layout === null) && ((painter != null && (painter["__interfaces"] != null && painter["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0 || painter.constructor != null && painter.constructor["__interfaces"] != null && painter.constructor["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0)) || painter === null) && ((typeof x1 === 'number') || x1 === null) && ((typeof y1 === 'number') || y1 === null) && ((typeof x2 === 'number') || x2 === null) && ((typeof y2 === 'number') || y2 === null) && ((typeof offsetY === 'number') || offsetY === null) && ((typeof addInfo === 'boolean') || addInfo === null)) {
                                return this.paintDivisions$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter$float$float$float$float$float$boolean(layout, painter, x1, y1, x2, y2, offsetY, addInfo);
                            }
                            else if (((layout != null && layout instanceof org.herac.tuxguitar.graphics.control.TGLayout) || layout === null) && ((painter != null && (painter["__interfaces"] != null && painter["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0 || painter.constructor != null && painter.constructor["__interfaces"] != null && painter.constructor["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0)) || painter === null) && x1 === undefined && y1 === undefined && x2 === undefined && y2 === undefined && offsetY === undefined && addInfo === undefined) {
                                return this.paintDivisions$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter(layout, painter);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        /**
                         * Pinta la Clave
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         * @param {org.herac.tuxguitar.graphics.TGPainter} painter
                         * @param {number} fromX
                         * @param {number} fromY
                         * @private
                         */
                        TGMeasureImpl.prototype.paintClef = function (layout, painter, fromX, fromY) {
                            if ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 && this.__paintClef) {
                                var x = (fromX + this.getHeaderImpl().getLeftSpacing(layout));
                                var y = (fromY + this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES));
                                layout.setClefStyle(painter);
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                if (this.getClef() === org.herac.tuxguitar.song.models.TGMeasure.CLEF_TREBLE) {
                                    org.herac.tuxguitar.graphics.control.painters.TGClefPainter.paintTreble(painter, x, y, layout.getScoreLineSpacing());
                                }
                                else if (this.getClef() === org.herac.tuxguitar.song.models.TGMeasure.CLEF_BASS) {
                                    org.herac.tuxguitar.graphics.control.painters.TGClefPainter.paintBass(painter, x, y, layout.getScoreLineSpacing());
                                }
                                else if (this.getClef() === org.herac.tuxguitar.song.models.TGMeasure.CLEF_TENOR) {
                                    org.herac.tuxguitar.graphics.control.painters.TGClefPainter.paintTenor(painter, x, y, layout.getScoreLineSpacing());
                                }
                                else if (this.getClef() === org.herac.tuxguitar.song.models.TGMeasure.CLEF_ALTO) {
                                    org.herac.tuxguitar.graphics.control.painters.TGClefPainter.paintAlto(painter, x, y, layout.getScoreLineSpacing());
                                }
                                painter.closePath();
                            }
                        };
                        /**
                         * Pinta la Armadura de Clave
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         * @param {org.herac.tuxguitar.graphics.TGPainter} painter
                         * @param {number} fromX
                         * @param {number} fromY
                         * @private
                         */
                        TGMeasureImpl.prototype.paintKeySignature = function (layout, painter, fromX, fromY) {
                            if ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 && this.__paintKeySignature) {
                                var scale = layout.getScoreLineSpacing();
                                var x = (fromX + this.getHeaderImpl().getLeftSpacing(layout) + this.getClefSpacing(layout));
                                var y = (fromY + this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES));
                                var clefIndex = (this.getClef() - 1);
                                var currentKey = this.getKeySignature();
                                var previousKey = (this.prevMeasure != null ? this.prevMeasure.getKeySignature() : 0);
                                layout.setKeySignatureStyle(painter);
                                if (previousKey >= 1 && previousKey <= 7) {
                                    var naturalFrom = (currentKey >= 1 && currentKey <= 7) ? currentKey : 0;
                                    for (var i = naturalFrom; i < previousKey; i++) {
                                        var offset = (((scale / 2) * TGMeasureImpl.SCORE_KEY_SHARP_POSITIONS_$LI$()[clefIndex][i]) - (scale / 2));
                                        painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                        org.herac.tuxguitar.graphics.control.painters.TGKeySignaturePainter.paintNatural(painter, x, (y + offset), scale);
                                        painter.closePath();
                                        x += (scale - (scale / 4));
                                    }
                                }
                                else if (previousKey >= 8 && previousKey <= 14) {
                                    var naturalFrom = (currentKey >= 8 && currentKey <= 14) ? currentKey : 7;
                                    for (var i = naturalFrom; i < previousKey; i++) {
                                        var offset = (((scale / 2) * TGMeasureImpl.SCORE_KEY_FLAT_POSITIONS_$LI$()[clefIndex][i - 7]) - (scale / 2));
                                        painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                        org.herac.tuxguitar.graphics.control.painters.TGKeySignaturePainter.paintNatural(painter, x, (y + offset), scale);
                                        painter.closePath();
                                        x += (scale - (scale / 4));
                                    }
                                }
                                if (currentKey >= 1 && currentKey <= 7) {
                                    for (var i = 0; i < currentKey; i++) {
                                        var offset = (((scale / 2) * TGMeasureImpl.SCORE_KEY_SHARP_POSITIONS_$LI$()[clefIndex][i]) - (scale / 2));
                                        painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                        org.herac.tuxguitar.graphics.control.painters.TGKeySignaturePainter.paintSharp(painter, x, (y + offset), scale);
                                        painter.closePath();
                                        x += (scale - (scale / 4));
                                    }
                                }
                                else if (currentKey >= 8 && currentKey <= 14) {
                                    for (var i = 7; i < currentKey; i++) {
                                        var offset = (((scale / 2) * TGMeasureImpl.SCORE_KEY_FLAT_POSITIONS_$LI$()[clefIndex][i - 7]) - (scale / 2));
                                        painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                        org.herac.tuxguitar.graphics.control.painters.TGKeySignaturePainter.paintFlat(painter, x, (y + offset), scale);
                                        painter.closePath();
                                        x += (scale - (scale / 4));
                                    }
                                }
                            }
                        };
                        TGMeasureImpl.prototype.paintTimeSignature = function (layout, painter, fromX, fromY) {
                            if (this.getHeaderImpl().shouldPaintTimeSignature()) {
                                layout.setTimeSignatureStyle(painter);
                                var style = layout.getStyle();
                                var scale = layout.getScale();
                                var fmTopLine = painter.getFMTopLine();
                                var fmBaseLine = painter.getFMBaseLine();
                                var x = (fromX + this.getHeaderImpl().getLeftSpacing(layout) + this.getClefSpacing(layout) + this.getKeySignatureSpacing(layout));
                                var numerator = ('' + (this.getTimeSignature().getNumerator()));
                                var denominator = ('' + (this.getTimeSignature().getDenominator().getValue()));
                                if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                    var y = this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES);
                                    var y1 = (y + fmTopLine + (1.0 * scale));
                                    var y2 = ((y + this.getTrackImpl().getScoreHeight()) + fmBaseLine - (1.0 * scale));
                                    painter['drawString$java_lang_String$float$float$boolean'](numerator, x, fromY + y1, true);
                                    painter['drawString$java_lang_String$float$float$boolean'](denominator, x, fromY + y2, true);
                                }
                                else if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0) {
                                    var y = this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE);
                                    var y1 = (y + fmTopLine + (1.0 * scale));
                                    var y2 = ((y + this.getTrackImpl().getTabHeight()) + fmBaseLine - (1.0 * scale));
                                    painter['drawString$java_lang_String$float$float$boolean'](numerator, x, fromY + y1, true);
                                    painter['drawString$java_lang_String$float$float$boolean'](denominator, x, fromY + y2, true);
                                }
                            }
                        };
                        TGMeasureImpl.prototype.paintTempo = function (layout, painter) {
                            if (this.getHeaderImpl().shouldPaintTempo()) {
                                var scale = 5.0 * layout.getScale();
                                var x = (this.getPosX() + this.getHeaderImpl().getLeftSpacing(layout));
                                var y = this.getPosY();
                                var lineSpacing = (Math.max(layout.getScoreLineSpacing(), layout.getStringSpacing()));
                                var style = layout.getStyle();
                                if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                    y += (this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES) - lineSpacing);
                                }
                                else if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0) {
                                    y += (this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE) - lineSpacing);
                                }
                                layout.setTempoStyle(painter, false);
                                var imgX = x;
                                var imgY = (y - (Math.round(scale * 3.5) + 2));
                                org.herac.tuxguitar.graphics.control.painters.TGTempoPainter.paintTempo(painter, imgX, imgY, scale);
                                layout.setTempoStyle(painter, true);
                                var value = (" = " + this.getTempo().getValue());
                                var fontX = x + (Math.round((1.33 * scale)) + 1);
                                var fontY = (y - (0.75 * scale) + painter.getFMBaseLine());
                                painter['drawString$java_lang_String$float$float$boolean'](value, fontX, fontY, true);
                            }
                        };
                        TGMeasureImpl.prototype.paintTripletFeel = function (layout, painter) {
                            if (this.getHeaderImpl().shouldPaintTripletFeel()) {
                                var scale = (5.0 * layout.getScale());
                                var x = (this.getPosX() + this.getHeaderImpl().getLeftSpacing(layout) + this.getHeaderImpl().getTempoSpacing(layout));
                                var y = (this.getPosY());
                                var lineSpacing = (Math.max(layout.getScoreLineSpacing(), layout.getStringSpacing()));
                                var style = layout.getStyle();
                                if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                    y += (this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES) - lineSpacing);
                                }
                                else if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0) {
                                    y += (this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE) - lineSpacing);
                                }
                                layout.setTripletFeelStyle(painter, true);
                                var equal = (" = ");
                                var fontX = (x + (3.2 * scale));
                                var fontY = (y - (0.75 * scale) + painter.getFMBaseLine());
                                painter['drawString$java_lang_String$float$float$boolean'](equal, fontX, fontY, true);
                                layout.setTripletFeelStyle(painter, false);
                                var x1 = x;
                                var x2 = x + ((3.2 * scale) + painter.getFMWidth(equal));
                                var y1 = y - (((1.0 * scale) + (2.5 * scale)) + 2);
                                var y2 = y - (((1.0 * scale) + (2.5 * scale) + (1.0 * scale)) + 2);
                                if (this.getTripletFeel() === org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_NONE && this.prevMeasure != null) {
                                    var previous = this.prevMeasure.getTripletFeel();
                                    if (previous === org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_EIGHTH) {
                                        org.herac.tuxguitar.graphics.control.painters.TGTripletFeelPainter.paintTripletFeel8(painter, x1, y2, scale);
                                        org.herac.tuxguitar.graphics.control.painters.TGTripletFeelPainter.paintTripletFeelNone8(painter, x2, y1, scale);
                                    }
                                    else if (previous === org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_SIXTEENTH) {
                                        org.herac.tuxguitar.graphics.control.painters.TGTripletFeelPainter.paintTripletFeel16(painter, x1, y2, scale);
                                        org.herac.tuxguitar.graphics.control.painters.TGTripletFeelPainter.paintTripletFeelNone16(painter, x2, y1, scale);
                                    }
                                }
                                else if (this.getTripletFeel() === org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_EIGHTH) {
                                    org.herac.tuxguitar.graphics.control.painters.TGTripletFeelPainter.paintTripletFeelNone8(painter, x1, y1, scale);
                                    org.herac.tuxguitar.graphics.control.painters.TGTripletFeelPainter.paintTripletFeel8(painter, x2, y2, scale);
                                }
                                else if (this.getTripletFeel() === org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_SIXTEENTH) {
                                    org.herac.tuxguitar.graphics.control.painters.TGTripletFeelPainter.paintTripletFeelNone16(painter, x1, y1, scale);
                                    org.herac.tuxguitar.graphics.control.painters.TGTripletFeelPainter.paintTripletFeel16(painter, x2, y2, scale);
                                }
                            }
                        };
                        TGMeasureImpl.prototype.paintLoopMarker$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter = function (layout, painter) {
                            if (layout.hasLoopMarker$org_herac_tuxguitar_song_models_TGMeasure(this)) {
                                var size = Math.round(layout.getLoopMarkerSpacing() - (1.0 * layout.getScale()));
                                if (layout.getComponent().isLoopSHeader(this.getHeader())) {
                                    var x = (this.getPosX() + Math.round(size / 2.0));
                                    var y = (this.getPosY() + this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_LOOP_MARKER));
                                    layout.setLoopSMarkerStyle(painter);
                                    this.paintLoopMarker$org_herac_tuxguitar_graphics_TGPainter$float$float$float(painter, x, y, size);
                                }
                                if (layout.getComponent().isLoopEHeader(this.getHeader())) {
                                    var x = (this.getPosX() + this.getWidth(layout) + this.getSpacing() - size);
                                    var y = (this.getPosY() + this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_LOOP_MARKER));
                                    layout.setLoopEMarkerStyle(painter);
                                    this.paintLoopMarker$org_herac_tuxguitar_graphics_TGPainter$float$float$float(painter, x, y, size);
                                }
                            }
                        };
                        TGMeasureImpl.prototype.paintLoopMarker$org_herac_tuxguitar_graphics_TGPainter$float$float$float = function (painter, x, y, size) {
                            painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                            painter.addRectangle(x, y, size, size);
                            painter.closePath();
                        };
                        TGMeasureImpl.prototype.paintLoopMarker = function (painter, x, y, size) {
                            if (((painter != null && (painter["__interfaces"] != null && painter["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0 || painter.constructor != null && painter.constructor["__interfaces"] != null && painter.constructor["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0)) || painter === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof size === 'number') || size === null)) {
                                return this.paintLoopMarker$org_herac_tuxguitar_graphics_TGPainter$float$float$float(painter, x, y, size);
                            }
                            else if (((painter != null && painter instanceof org.herac.tuxguitar.graphics.control.TGLayout) || painter === null) && ((x != null && (x["__interfaces"] != null && x["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0 || x.constructor != null && x.constructor["__interfaces"] != null && x.constructor["__interfaces"].indexOf("org.herac.tuxguitar.graphics.TGPainter") >= 0)) || x === null) && y === undefined && size === undefined) {
                                return this.paintLoopMarker$org_herac_tuxguitar_graphics_control_TGLayout$org_herac_tuxguitar_graphics_TGPainter(painter, x);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGMeasureImpl.prototype.paintMarker = function (layout, painter) {
                            if (this.hasMarker()) {
                                var x = (this.getPosX() + this.getHeaderImpl().getLeftSpacing(layout) + this.getFirstNoteSpacing(layout));
                                var y = (this.getPosY() + this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_MARKER));
                                layout.setMarkerStyle(painter, this.getMarkerColor(layout.getResourceBuffer(), painter));
                                painter['drawString$java_lang_String$float$float'](this.getMarker().getTitle(), x, y);
                            }
                        };
                        TGMeasureImpl.prototype.paintTexts = function (layout, painter) {
                            var it = this.getBeats().iterator();
                            while ((it.hasNext())) {
                                var beat = it.next();
                                if (beat.isTextBeat()) {
                                    var text = beat.getText();
                                    text.paint(layout, painter, (this.getPosX() + this.getHeaderImpl().getLeftSpacing(layout)), this.getPosY());
                                }
                            }
                            ;
                        };
                        TGMeasureImpl.prototype.paintPlayMode = function (layout, painter) {
                            if (layout.isPlayModeEnabled() && this.isPlaying(layout)) {
                                var scale = layout.getScale();
                                var width = this.getWidth(layout) + this.getSpacing();
                                var y1 = this.getPosY();
                                var y2 = this.getPosY();
                                var style = layout.getStyle();
                                if ((style & (org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE | org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE)) === (org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE | org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE)) {
                                    y1 += (this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES) - layout.getScoreLineSpacing());
                                    y2 += (this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE) + this.getTrackImpl().getTabHeight() + layout.getStringSpacing());
                                }
                                else if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                    y1 += (this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES) - layout.getScoreLineSpacing());
                                    y2 += (this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES) + (layout.getScoreLineSpacing() * 5));
                                }
                                else if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0) {
                                    y1 += (this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE) - layout.getStringSpacing());
                                    y2 += (this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE) + this.getTrackImpl().getTabHeight() + layout.getStringSpacing());
                                }
                                layout.setMeasurePlayingStyle(painter);
                                painter.setLineWidth(layout.getLineWidth(1));
                                painter.initPath();
                                painter.setAntialias(false);
                                painter.addRectangle(this.getPosX() + (5.0 * scale), y1, width - (10.0 * scale), (y2 - y1));
                                painter.closePath();
                            }
                        };
                        /**
                         * Retorna true si se esta reproduciendo y la posicion del player esta en este compas.
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         * @return {boolean}
                         */
                        TGMeasureImpl.prototype.isPlaying = function (layout) {
                            return layout.getComponent()['isRunning$org_herac_tuxguitar_song_models_TGMeasure'](this);
                        };
                        TGMeasureImpl.prototype.getBeatSpacing = function (layout, beat) {
                            var bMargin = this.getFirstNoteSpacing(layout);
                            var mPadding = (bMargin + this.getHeaderImpl().getLeftSpacing(layout) + this.getHeaderImpl().getRightSpacing(layout));
                            var mWidth = (this.getWidth(layout) - mPadding);
                            var mWidthWithSpacing = (mWidth + this.getSpacing());
                            var minimumDurationWidth = layout.getMinimumDurationWidth();
                            if (mWidthWithSpacing < minimumDurationWidth) {
                                mWidthWithSpacing = minimumDurationWidth;
                            }
                            var beatX = (beat.getPosX() - bMargin);
                            var moveX = (mWidthWithSpacing * beatX / mWidth);
                            return (moveX - beatX);
                        };
                        TGMeasureImpl.prototype.hasTrack = function (number) {
                            return (this.getTrack().getNumber() === number);
                        };
                        /**
                         * Retorna el ancho del Compas
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         * @return {number}
                         */
                        TGMeasureImpl.prototype.getWidth = function (layout) {
                            return ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_MULTITRACK) !== 0 ? this.getHeaderImpl().getMaxWidth() : this.width);
                        };
                        TGMeasureImpl.prototype.calculateClefSpacing = function (layout) {
                            return (Math.round(TGMeasureImpl.DEFAULT_CLEF_WIDTH * layout.getScale()) + Math.round(layout.getClefSpacing()));
                        };
                        TGMeasureImpl.prototype.calculateKeySignatureSpacing = function (layout) {
                            var spacing = 0;
                            if (this.__paintKeySignature) {
                                if (this.getKeySignature() <= 7) {
                                    spacing += Math.round((6.0 * layout.getScale()) * this.getKeySignature());
                                }
                                else {
                                    spacing += Math.round((6.0 * layout.getScale()) * (this.getKeySignature() - 7));
                                }
                                if (this.prevMeasure != null) {
                                    if (this.prevMeasure.getKeySignature() <= 7) {
                                        spacing += Math.round((6.0 * layout.getScale()) * this.prevMeasure.getKeySignature());
                                    }
                                    else {
                                        spacing += Math.round((6.0 * layout.getScale()) * (this.prevMeasure.getKeySignature() - 7));
                                    }
                                }
                                if (spacing > 0) {
                                    spacing += layout.getKeySignatureSpacing();
                                }
                            }
                            return spacing;
                        };
                        TGMeasureImpl.prototype.getFirstNoteSpacing = function (layout) {
                            return this.getHeaderImpl().getFirstNoteSpacing(layout, this);
                        };
                        TGMeasureImpl.prototype.getClefSpacing = function (layout) {
                            return this.getHeaderImpl().getClefSpacing(layout, this);
                        };
                        TGMeasureImpl.prototype.getKeySignatureSpacing = function (layout) {
                            return this.getHeaderImpl().getKeySignatureSpacing(layout, this);
                        };
                        TGMeasureImpl.prototype.getDivisionLength = function () {
                            return this.divisionLength;
                        };
                        TGMeasureImpl.prototype.isBufferCreated = function () {
                            return this.bufferCreated;
                        };
                        TGMeasureImpl.prototype.setBufferCreated = function (bufferCreated) {
                            this.bufferCreated = bufferCreated;
                        };
                        /**
                         * Retorna la posicion X dentro del compas
                         * @return {number}
                         */
                        TGMeasureImpl.prototype.getPosX = function () {
                            return this.posX;
                        };
                        /**
                         * Asigna la posicion X dentro del compas
                         * @param {number} posX
                         */
                        TGMeasureImpl.prototype.setPosX = function (posX) {
                            this.posX = posX;
                        };
                        /**
                         * Retorna la posicion Y dentro del compas
                         * @return {number}
                         */
                        TGMeasureImpl.prototype.getPosY = function () {
                            return this.posY;
                        };
                        /**
                         * Asigna la posicion Y dentro del compas
                         * @param {number} posY
                         */
                        TGMeasureImpl.prototype.setPosY = function (posY) {
                            this.posY = posY;
                        };
                        /**
                         * Retorna el spacing de negras
                         * @return {number}
                         * @private
                         */
                        TGMeasureImpl.prototype.getQuarterSpacing = function () {
                            return this.quarterSpacing;
                        };
                        /**
                         * Retorna el spacing de negras
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         * @return {number}
                         * @private
                         */
                        TGMeasureImpl.prototype.getMaxQuarterSpacing = function (layout) {
                            return (((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_MULTITRACK) !== 0) ? this.getHeaderImpl().getMaxQuarterSpacing() : this.quarterSpacing);
                        };
                        TGMeasureImpl.prototype.getHeaderImpl = function () {
                            return _super.prototype.getHeader.call(this);
                        };
                        TGMeasureImpl.prototype.getSpacing = function () {
                            return this.spacing;
                        };
                        TGMeasureImpl.prototype.setSpacing = function (spacing) {
                            if (spacing !== this.spacing) {
                                this.setBufferCreated(false);
                            }
                            this.spacing = spacing;
                        };
                        TGMeasureImpl.prototype.isOutOfBounds = function () {
                            return this.outOfBounds;
                        };
                        TGMeasureImpl.prototype.setOutOfBounds = function (outOfBounds) {
                            this.outOfBounds = outOfBounds;
                        };
                        TGMeasureImpl.prototype.isFirstOfLine = function () {
                            return this.firstOfLine;
                        };
                        TGMeasureImpl.prototype.setFirstOfLine = function (firstOfLine) {
                            this.firstOfLine = firstOfLine;
                        };
                        TGMeasureImpl.prototype.getTrackImpl = function () {
                            return _super.prototype.getTrack.call(this);
                        };
                        TGMeasureImpl.prototype.getTs = function () {
                            return this.ts;
                        };
                        TGMeasureImpl.prototype.setTs = function (ts) {
                            if (this.getTs() == null) {
                                this.setBufferCreated(false);
                            }
                            else if (this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES) !== ts.getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES)) {
                                this.setBufferCreated(false);
                            }
                            else if (this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE) !== ts.getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE)) {
                                this.setBufferCreated(false);
                            }
                            else if (this.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_EFFECTS) !== ts.getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_EFFECTS)) {
                                this.setBufferCreated(false);
                            }
                            this.ts = ts;
                        };
                        TGMeasureImpl.prototype.getMaxY = function () {
                            return this.maxY;
                        };
                        TGMeasureImpl.prototype.getMinY = function () {
                            return this.minY;
                        };
                        TGMeasureImpl.prototype.getNotEmptyBeats = function () {
                            return this.notEmptyBeats;
                        };
                        TGMeasureImpl.prototype.getNotEmptyVoices = function () {
                            return this.notEmptyVoices;
                        };
                        TGMeasureImpl.prototype.getLyricBeatIndex = function () {
                            return this.lyricBeatIndex;
                        };
                        TGMeasureImpl.prototype.setLyricBeatIndex = function (lyricBeatIndex) {
                            this.lyricBeatIndex = lyricBeatIndex;
                        };
                        TGMeasureImpl.prototype.isPaintClef = function () {
                            return this.__paintClef;
                        };
                        TGMeasureImpl.prototype.isPaintKeySignature = function () {
                            return this.__paintKeySignature;
                        };
                        TGMeasureImpl.prototype.getBuffer = function () {
                            if (this.buffer == null) {
                                this.buffer = new org.herac.tuxguitar.graphics.control.TGMeasureBuffer();
                            }
                            return this.buffer;
                        };
                        TGMeasureImpl.prototype.getMarkerRegistryKey = function () {
                            return ((function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGMarker) + "-" + this.getHeader().getNumber());
                        };
                        TGMeasureImpl.prototype.getMarkerColor = function (buffer, painter) {
                            var resourceKey = this.getMarkerRegistryKey();
                            var m = this.getMarker();
                            var markerColor = buffer.getResource(resourceKey);
                            if (markerColor != null && !markerColor.isDisposed()) {
                                if (markerColor.getRed() !== m.getColor().getR() || markerColor.getGreen() !== m.getColor().getG() || markerColor.getBlue() !== m.getColor().getB()) {
                                    buffer.disposeResource(resourceKey);
                                }
                            }
                            if (markerColor == null || markerColor.isDisposed()) {
                                markerColor = painter['createColor$int$int$int'](m.getColor().getR(), m.getColor().getG(), m.getColor().getB());
                                buffer.setResource(resourceKey, markerColor);
                            }
                            return markerColor;
                        };
                        return TGMeasureImpl;
                    }(org.herac.tuxguitar.song.models.TGMeasure));
                    TGMeasureImpl.NATURAL = 1;
                    TGMeasureImpl.SHARP = 2;
                    TGMeasureImpl.FLAT = 3;
                    /**
                     * Espacio por defecto de la clave
                     */
                    TGMeasureImpl.DEFAULT_CLEF_WIDTH = 16;
                    control.TGMeasureImpl = TGMeasureImpl;
                    TGMeasureImpl["__class"] = "org.herac.tuxguitar.graphics.control.TGMeasureImpl";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGMeasureHeaderImpl = (function (_super) {
                        __extends(TGMeasureHeaderImpl, _super);
                        function TGMeasureHeaderImpl(factory) {
                            var _this = _super.call(this, factory) || this;
                            _this.paintFlags = 0;
                            _this.maxQuarterSpacing = 0;
                            _this.maxClefSpacing = 0;
                            _this.maxKeySignatureSpacing = 0;
                            _this.maxWidth = 0;
                            return _this;
                        }
                        TGMeasureHeaderImpl.prototype.reset = function () {
                            this.maxWidth = 0;
                            this.paintFlags = 0;
                            this.maxQuarterSpacing = 0;
                            this.maxClefSpacing = 0;
                            this.maxKeySignatureSpacing = 0;
                        };
                        TGMeasureHeaderImpl.prototype.update = function (layout, index) {
                            this.reset();
                            this.calculateMeasureChanges(layout);
                            var trackCount = this.getSong().countTracks();
                            for (var trackIdx = 0; trackIdx < trackCount; trackIdx++) {
                                var track = this.getSong().getTrack(trackIdx);
                                var measure = track.getMeasure(index);
                                measure.calculateMeasureChanges(layout);
                            }
                        };
                        TGMeasureHeaderImpl.prototype.calculateMeasureChanges = function (layout) {
                            var previous = layout.getSongManager().getPrevMeasureHeader(layout.getSong(), this);
                            if (previous == null) {
                                this.paintFlags |= TGMeasureHeaderImpl.PAINT_TEMPO;
                                this.paintFlags |= ((this.getTripletFeel() !== org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_NONE) ? TGMeasureHeaderImpl.PAINT_TRIPLET_FEEL : 0);
                                this.paintFlags |= TGMeasureHeaderImpl.PAINT_TIME_SIGNATURE;
                            }
                            else {
                                if (this.getTempo().getValue() !== previous.getTempo().getValue()) {
                                    this.paintFlags |= TGMeasureHeaderImpl.PAINT_TEMPO;
                                }
                                if (this.getTripletFeel() !== previous.getTripletFeel()) {
                                    this.paintFlags |= TGMeasureHeaderImpl.PAINT_TRIPLET_FEEL;
                                }
                                var thisNumerator = this.getTimeSignature().getNumerator();
                                var thisValue = this.getTimeSignature().getDenominator().getValue();
                                var prevNumerator = previous.getTimeSignature().getNumerator();
                                var prevValue = previous.getTimeSignature().getDenominator().getValue();
                                if (thisNumerator !== prevNumerator || thisValue !== prevValue) {
                                    this.paintFlags |= TGMeasureHeaderImpl.PAINT_TIME_SIGNATURE;
                                }
                            }
                        };
                        TGMeasureHeaderImpl.prototype.shouldPaintTempo = function () {
                            return ((this.paintFlags & TGMeasureHeaderImpl.PAINT_TEMPO) !== 0);
                        };
                        TGMeasureHeaderImpl.prototype.shouldPaintTripletFeel = function () {
                            return ((this.paintFlags & TGMeasureHeaderImpl.PAINT_TRIPLET_FEEL) !== 0);
                        };
                        TGMeasureHeaderImpl.prototype.shouldPaintTimeSignature = function () {
                            return ((this.paintFlags & TGMeasureHeaderImpl.PAINT_TIME_SIGNATURE) !== 0);
                        };
                        TGMeasureHeaderImpl.prototype.getMaxQuarterSpacing = function () {
                            return this.maxQuarterSpacing;
                        };
                        TGMeasureHeaderImpl.prototype.notifyQuarterSpacing = function (spacing) {
                            this.maxQuarterSpacing = ((spacing > this.maxQuarterSpacing) ? spacing : this.maxQuarterSpacing);
                        };
                        TGMeasureHeaderImpl.prototype.getClefSpacing = function (layout, measure) {
                            return (!measure.isPaintClef() && (layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_MULTITRACK) === 0 ? 0 : this.maxClefSpacing);
                        };
                        TGMeasureHeaderImpl.prototype.getKeySignatureSpacing = function (layout, measure) {
                            return (!measure.isPaintKeySignature() && (layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_MULTITRACK) === 0 ? 0 : this.maxKeySignatureSpacing);
                        };
                        TGMeasureHeaderImpl.prototype.getTempoSpacing = function (layout) {
                            return (this.shouldPaintTempo() ? Math.round(TGMeasureHeaderImpl.DEFAULT_TEMPO_WIDTH * layout.getScale()) : 0);
                        };
                        TGMeasureHeaderImpl.prototype.getTripletFeelSpacing = function (layout) {
                            return (this.shouldPaintTripletFeel() ? Math.round(TGMeasureHeaderImpl.DEFAULT_TRIPLET_FEEL_WIDTH * layout.getScale()) : 0);
                        };
                        TGMeasureHeaderImpl.prototype.getTimeSignatureSpacing = function (layout) {
                            return (this.shouldPaintTimeSignature() ? Math.round((TGMeasureHeaderImpl.DEFAULT_TIME_SIGNATURE_WIDTH * layout.getScale()) + layout.getTimeSignatureSpacing()) : 0);
                        };
                        TGMeasureHeaderImpl.prototype.getLeftSpacing = function (layout) {
                            return layout.getMeasureLeftSpacing();
                        };
                        TGMeasureHeaderImpl.prototype.getRightSpacing = function (layout) {
                            return layout.getMeasureRightSpacing();
                        };
                        TGMeasureHeaderImpl.prototype.getFirstNoteSpacing = function (layout, measure) {
                            var topSpacing = (this.getTempoSpacing(layout) + this.getTripletFeelSpacing(layout));
                            var middleSpacing = (this.getClefSpacing(layout, measure) + this.getKeySignatureSpacing(layout, measure) + this.getTimeSignatureSpacing(layout) + layout.getFirstNoteSpacing());
                            return Math.round(Math.max(topSpacing, middleSpacing));
                        };
                        TGMeasureHeaderImpl.prototype.notifyClefSpacing = function (spacing) {
                            this.maxClefSpacing = ((spacing > this.maxClefSpacing) ? spacing : this.maxClefSpacing);
                        };
                        TGMeasureHeaderImpl.prototype.notifyKeySignatureSpacing = function (spacing) {
                            this.maxKeySignatureSpacing = ((spacing > this.maxKeySignatureSpacing) ? spacing : this.maxKeySignatureSpacing);
                        };
                        TGMeasureHeaderImpl.prototype.notifyWidth = function (width) {
                            this.maxWidth = ((width > this.maxWidth) ? width : this.maxWidth);
                        };
                        TGMeasureHeaderImpl.prototype.getMaxWidth = function () {
                            return this.maxWidth;
                        };
                        return TGMeasureHeaderImpl;
                    }(org.herac.tuxguitar.song.models.TGMeasureHeader));
                    TGMeasureHeaderImpl.DEFAULT_TEMPO_WIDTH = 45;
                    TGMeasureHeaderImpl.DEFAULT_TRIPLET_FEEL_WIDTH = 55;
                    TGMeasureHeaderImpl.DEFAULT_TIME_SIGNATURE_WIDTH = 10;
                    TGMeasureHeaderImpl.PAINT_TEMPO = 1;
                    TGMeasureHeaderImpl.PAINT_TRIPLET_FEEL = 2;
                    TGMeasureHeaderImpl.PAINT_TIME_SIGNATURE = 4;
                    control.TGMeasureHeaderImpl = TGMeasureHeaderImpl;
                    TGMeasureHeaderImpl["__class"] = "org.herac.tuxguitar.graphics.control.TGMeasureHeaderImpl";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGNoteImpl = (function (_super) {
                        __extends(TGNoteImpl, _super);
                        function TGNoteImpl(factory) {
                            var _this = _super.call(this, factory) || this;
                            _this.noteOrientation = null;
                            _this.tabPosY = 0;
                            _this.scorePosY = 0;
                            _this.accidental = 0;
                            _this.noteOrientation = new org.herac.tuxguitar.graphics.TGRectangle();
                            return _this;
                        }
                        /**
                         * Actualiza los valores para dibujar
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         */
                        TGNoteImpl.prototype.update = function (layout) {
                            this.accidental = this.getMeasureImpl().getNoteAccidental(this.getRealValue());
                            this.tabPosY = ((this.getString() * layout.getStringSpacing()) - layout.getStringSpacing());
                            this.scorePosY = this.getVoiceImpl().getBeatGroup().getY1(layout, this, this.getMeasureImpl().getKeySignature(), this.getMeasureImpl().getClef());
                        };
                        /**
                         * Pinta la nota
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         * @param {org.herac.tuxguitar.graphics.TGPainter} painter
                         * @param {number} fromX
                         * @param {number} fromY
                         */
                        TGNoteImpl.prototype.paint = function (layout, painter, fromX, fromY) {
                            var spacing = this.getBeatImpl().getSpacing(layout);
                            this.paintScoreNote(layout, painter, fromX, fromY + this.getPaintPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES), spacing);
                            if (!layout.isPlayModeEnabled()) {
                                this.paintOfflineEffects(layout, painter, fromX, fromY, spacing);
                            }
                            this.paintTablatureNote(layout, painter, fromX, fromY + this.getPaintPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE), spacing);
                        };
                        TGNoteImpl.prototype.paintOfflineEffects = function (layout, painter, fromX, fromY, spacing) {
                            var bs = this.getBeatImpl().getBs();
                            var ts = this.getMeasureImpl().getTs();
                            var effect = this.getEffect();
                            var scale = layout.getScale();
                            var tsY = (fromY + ts.getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_EFFECTS));
                            var bsY = (tsY + (ts.getSize$int(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_EFFECTS) - bs.getSize()));
                            layout.setOfflineEffectStyle(painter);
                            if (effect.isAccentuatedNote()) {
                                var x = fromX + this.getPosX() + spacing;
                                var y = (bsY + bs.getPosition(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_ACCENTUATED_EFFECT));
                                this.paintAccentuated(layout, painter, x, y);
                            }
                            if (effect.isHeavyAccentuatedNote()) {
                                var x = fromX + this.getPosX() + spacing;
                                var y = (bsY + bs.getPosition(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_HEAVY_ACCENTUATED_EFFECT));
                                this.paintHeavyAccentuated(layout, painter, x, y);
                            }
                            if (effect.isFadeIn()) {
                                var x = fromX + this.getPosX() + spacing;
                                var y = (bsY + bs.getPosition(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_FADE_IN));
                                this.paintFadeIn(layout, painter, x, y);
                            }
                            if (effect.isHarmonic() && (layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) === 0) {
                                var x = fromX + this.getPosX() + spacing;
                                var y = (bsY + bs.getPosition(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_HARMONIC_EFFEC));
                                var key = new String();
                                key = effect.getHarmonic().isNatural() ? org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.KEY_NATURAL : key;
                                key = effect.getHarmonic().isArtificial() ? org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.KEY_ARTIFICIAL : key;
                                key = effect.getHarmonic().isTapped() ? org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.KEY_TAPPED : key;
                                key = effect.getHarmonic().isPinch() ? org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.KEY_PINCH : key;
                                key = effect.getHarmonic().isSemi() ? org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.KEY_SEMI : key;
                                painter['drawString$java_lang_String$float$float'](key, x, (y + painter.getFMTopLine() + (2.0 * scale)));
                            }
                            if (effect.isTapping()) {
                                var x = fromX + this.getPosX() + spacing;
                                var y = (bsY + bs.getPosition(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_TAPPING_EFFEC));
                                painter['drawString$java_lang_String$float$float']("T", x, (y + painter.getFMTopLine() + (2.0 * scale)));
                            }
                            if (effect.isSlapping()) {
                                var x = fromX + this.getPosX() + spacing;
                                var y = (bsY + bs.getPosition(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_SLAPPING_EFFEC));
                                painter['drawString$java_lang_String$float$float']("S", x, (y + painter.getFMTopLine() + (2.0 * scale)));
                            }
                            if (effect.isPopping()) {
                                var x = fromX + this.getPosX() + spacing;
                                var y = (bsY + bs.getPosition(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_POPPING_EFFEC));
                                painter['drawString$java_lang_String$float$float']("P", x, (y + painter.getFMTopLine() + (2.0 * scale)));
                            }
                            if (effect.isPalmMute()) {
                                var x = fromX + this.getPosX() + spacing;
                                var y = (bsY + bs.getPosition(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_PALM_MUTE_EFFEC));
                                painter['drawString$java_lang_String$float$float']("P.M", x, (y + painter.getFMTopLine() + (2.0 * scale)));
                            }
                            if (effect.isLetRing()) {
                                var x = fromX + this.getPosX() + spacing;
                                var y = (bsY + bs.getPosition(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_LET_RING_EFFEC));
                                painter['drawString$java_lang_String$float$float']("L.R", x, (y + painter.getFMTopLine() + (2.0 * scale)));
                            }
                            if (effect.isVibrato()) {
                                var x = fromX + this.getPosX() + spacing;
                                var y = (bsY + bs.getPosition(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_VIBRATO_EFFEC));
                                this.paintVibrato(layout, painter, x, y);
                            }
                            if (effect.isTrill()) {
                                var x = fromX + this.getPosX() + spacing;
                                var y = (bsY + bs.getPosition(org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITION_TRILL_EFFEC));
                                this.paintTrill(layout, painter, x, y);
                            }
                        };
                        /**
                         * Pinta la nota en la tablatura
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         * @param {org.herac.tuxguitar.graphics.TGPainter} painter
                         * @param {number} fromX
                         * @param {number} fromY
                         * @param {number} spacing
                         */
                        TGNoteImpl.prototype.paintTablatureNote = function (layout, painter, fromX, fromY, spacing) {
                            var style = layout.getStyle();
                            if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0) {
                                var scale = layout.getScale();
                                var xMove = (2 * scale);
                                var x = (fromX + this.getPosX() + spacing + xMove);
                                var y = (fromY + this.getTabPosY());
                                var stringSpacing = layout.getStringSpacing();
                                this.noteOrientation.setX(Math.round(x));
                                this.noteOrientation.setY(Math.round(y));
                                this.noteOrientation.setWidth(1);
                                this.noteOrientation.setHeight(1);
                                var running = (layout.isPlayModeEnabled() && this.getBeatImpl().isPlaying(layout));
                                if (this.isTiedNote() && (style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) === 0) {
                                    var tX = 0;
                                    var tY = (fromY + this.getTabPosY() + (stringSpacing / 2.0));
                                    var noteForTie = this.getNoteForTie();
                                    if (noteForTie != null) {
                                        tX = (fromX + noteForTie.getPosX() + noteForTie.getBeatImpl().getSpacing(layout) + (5.0 * scale));
                                    }
                                    else {
                                        tX = (fromX + this.getPosX() + this.getBeatImpl().getSpacing(layout) - (stringSpacing * 2));
                                    }
                                    var tWidth = (x - tX);
                                    var tHeight1 = (stringSpacing / 3.0);
                                    var tHeight2 = (tHeight1 + (scale * 2.0));
                                    layout.setTiedStyle(painter, running);
                                    painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                    painter.moveTo(tX, tY);
                                    painter.cubicTo(tX, tY + tHeight1, tX + tWidth, tY + tHeight1, tX + tWidth, tY);
                                    painter.cubicTo(tX + tWidth, tY + tHeight2, tX, tY + tHeight2, tX, tY);
                                    painter.closePath();
                                }
                                else if (!this.isTiedNote()) {
                                    layout.setTabNoteStyle(painter, running);
                                    var r = layout.getNoteOrientation(painter, x, y, this);
                                    this.noteOrientation.setX(r.getX());
                                    this.noteOrientation.setY(r.getY());
                                    this.noteOrientation.setWidth(r.getWidth());
                                    this.noteOrientation.setHeight(r.getHeight());
                                    var visualNote = (this.getEffect().isDeadNote()) ? "X" : ('' + (this.getValue()));
                                    visualNote = (this.getEffect().isGhostNote()) ? "(" + visualNote + ")" : visualNote;
                                    painter['drawString$java_lang_String$float$float'](visualNote, this.noteOrientation.getX(), this.noteOrientation.getY());
                                }
                                if (!layout.isPlayModeEnabled()) {
                                    this.paintEffects(layout, painter, fromX, fromY, spacing);
                                    if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) === 0) {
                                        if (this.getEffect().isTremoloPicking()) {
                                            var y1 = (fromY + this.getMeasureImpl().getTrackImpl().getTabHeight() + (stringSpacing / 2));
                                            var y2 = (fromY + this.getMeasureImpl().getTrackImpl().getTabHeight() + ((stringSpacing / 2) * 5));
                                            layout.setTabEffectStyle(painter);
                                            painter.setLineWidth(layout.getLineWidth(2));
                                            painter.initPath();
                                            var posy = (y1 + ((y2 - y1) / 2));
                                            for (var i = org.herac.tuxguitar.song.models.TGDuration.EIGHTH; i <= this.getEffect().getTremoloPicking().getDuration().getValue(); i += i) {
                                                painter.moveTo(x - (3.0 * scale), posy - (1.0 * scale));
                                                painter.lineTo(x + (4.0 * scale), posy + (1.0 * scale));
                                                posy += (4.0 * scale);
                                            }
                                            painter.closePath();
                                            painter.setLineWidth(layout.getLineWidth(1));
                                        }
                                    }
                                }
                            }
                        };
                        /**
                         * Pinta la nota en la partitura
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         * @param {org.herac.tuxguitar.graphics.TGPainter} painter
                         * @param {number} fromX
                         * @param {number} fromY
                         * @param {number} spacing
                         * @private
                         */
                        TGNoteImpl.prototype.paintScoreNote = function (layout, painter, fromX, fromY, spacing) {
                            if ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                var scale = layout.getScoreLineSpacing();
                                var layoutScale = layout.getScale();
                                var direction = this.getVoiceImpl().getBeatGroup().getDirection();
                                var key = this.getMeasureImpl().getKeySignature();
                                var clef = this.getMeasureImpl().getClef();
                                var x = (fromX + this.getPosX() + spacing);
                                var y1 = (fromY + this.getScorePosY());
                                var playing = (layout.isPlayModeEnabled() && this.getBeatImpl().isPlaying(layout));
                                if (this.isTiedNote()) {
                                    var noteForTie = this.getNoteForTie();
                                    var tX = x - (20.0 * layoutScale);
                                    var tY = (y1 + (layout.getScoreLineSpacing() / 2.0));
                                    if (noteForTie != null) {
                                        var tNoteX = (fromX + noteForTie.getPosX() + noteForTie.getBeatImpl().getSpacing(layout));
                                        var tNoteY = (fromY + this.getScorePosY());
                                        tX = tNoteX + (10.0 * layoutScale);
                                        tY = (tNoteY + (layout.getScoreLineSpacing() / 2.0));
                                    }
                                    var tWidth = (x - tX) - (3.0 * layoutScale);
                                    var tHeight1 = (layout.getScoreLineSpacing() / 2.0);
                                    var tHeight2 = (tHeight1 - (layoutScale * 2.0));
                                    layout.setTiedStyle(painter, playing);
                                    painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                    painter.moveTo(tX, tY);
                                    painter.cubicTo(tX, tY - tHeight1, tX + tWidth, tY - tHeight1, tX + tWidth, tY);
                                    painter.cubicTo(tX + tWidth, tY - tHeight2, tX, tY - tHeight2, tX, tY);
                                    painter.closePath();
                                }
                                layout.setScoreNoteStyle(painter, playing);
                                if (this.accidental === org.herac.tuxguitar.graphics.control.TGMeasureImpl.NATURAL) {
                                    painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                    painter.setLineWidth(layout.getLineWidth(0));
                                    org.herac.tuxguitar.graphics.control.painters.TGKeySignaturePainter.paintNatural(painter, (x - (scale - (scale / 4))), (y1 + (scale / 2)), scale);
                                    painter.closePath();
                                }
                                else if (this.accidental === org.herac.tuxguitar.graphics.control.TGMeasureImpl.SHARP) {
                                    painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                    painter.setLineWidth(layout.getLineWidth(0));
                                    org.herac.tuxguitar.graphics.control.painters.TGKeySignaturePainter.paintSharp(painter, (x - (scale - (scale / 4))), (y1 + (scale / 2)), scale);
                                    painter.closePath();
                                }
                                else if (this.accidental === org.herac.tuxguitar.graphics.control.TGMeasureImpl.FLAT) {
                                    painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                    painter.setLineWidth(layout.getLineWidth(0));
                                    org.herac.tuxguitar.graphics.control.painters.TGKeySignaturePainter.paintFlat(painter, (x - (scale - (scale / 4))), (y1 + (scale / 2)), scale);
                                    painter.closePath();
                                }
                                if (this.getEffect().isHarmonic()) {
                                    var fill = (this.getVoice().getDuration().getValue() >= org.herac.tuxguitar.song.models.TGDuration.QUARTER);
                                    painter.setLineWidth(layout.getLineWidth(1));
                                    painter['initPath$int']((fill ? (org.herac.tuxguitar.graphics.TGPainter.PATH_FILL | org.herac.tuxguitar.graphics.TGPainter.PATH_DRAW) : org.herac.tuxguitar.graphics.TGPainter.PATH_DRAW));
                                    org.herac.tuxguitar.graphics.control.painters.TGNotePainter.paintHarmonic(painter, x, y1 + (1.0 * (scale / 10.0)), (layout.getScoreLineSpacing() - ((scale / 10.0) * 2.0)));
                                    painter.closePath();
                                }
                                else {
                                    var fill = (this.getVoice().getDuration().getValue() >= org.herac.tuxguitar.song.models.TGDuration.QUARTER);
                                    var noteX = (fill ? (x - (0.6 * (scale / 10.0))) : x);
                                    var noteY = (fill ? (y1 + (0.6 * (scale / 10.0))) : (y1 + (1.0 * (scale / 10.0))));
                                    var noteScale = (fill ? ((layout.getScoreLineSpacing() - ((scale / 10.0) * 1.0))) : ((layout.getScoreLineSpacing() - ((scale / 10.0) * 2.0))));
                                    painter.setLineWidth(layout.getLineWidth(1));
                                    painter['initPath$int']((fill ? org.herac.tuxguitar.graphics.TGPainter.PATH_FILL : org.herac.tuxguitar.graphics.TGPainter.PATH_DRAW));
                                    org.herac.tuxguitar.graphics.control.painters.TGNotePainter.paintNote(painter, noteX, noteY, noteScale);
                                    painter.closePath();
                                }
                                if (!layout.isPlayModeEnabled()) {
                                    var scoreNoteWidth = layout.getScoreNoteWidth();
                                    if (this.getEffect().isGrace()) {
                                        this.paintGrace(layout, painter, x, y1);
                                    }
                                    if (this.getVoice().getDuration().isDotted() || this.getVoice().getDuration().isDoubleDotted()) {
                                        this.getVoiceImpl().paintDot(layout, painter, (x + (12.0 * (scale / 8.0))), (y1 + (layout.getScoreLineSpacing() / 2)), (scale / 10.0));
                                    }
                                    if (this.getVoice().getDuration().getValue() >= org.herac.tuxguitar.song.models.TGDuration.HALF) {
                                        layout.setScoreNoteFooterStyle(painter);
                                        var xMove = ((direction === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_UP ? scoreNoteWidth : 0));
                                        var y2 = (fromY + this.getVoiceImpl().getBeatGroup().getY2(layout, this.getPosX() + spacing, key, clef));
                                        if (this.getEffect().isStaccato()) {
                                            var size = (3.0 * layoutScale);
                                            var sX = x + xMove;
                                            var sY = (y2 + ((4.0 * layoutScale) * ((direction === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_UP) ? -1 : 1)));
                                            layout.setScoreEffectStyle(painter);
                                            painter.setLineWidth(layout.getLineWidth(1));
                                            painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                            painter.moveTo(sX, sY);
                                            painter.addCircle(sX, sY, size);
                                            painter.closePath();
                                        }
                                        if (this.getEffect().isTremoloPicking()) {
                                            layout.setScoreEffectStyle(painter);
                                            painter.setLineWidth(layout.getLineWidth(2));
                                            painter.initPath();
                                            var tpY = fromY;
                                            if ((direction === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_UP)) {
                                                tpY += (this.getVoiceImpl().getBeatGroup().getMaxNote().getScorePosY() - layout.getScoreLineSpacing() - (4.0 * layoutScale));
                                            }
                                            else {
                                                tpY += (this.getVoiceImpl().getBeatGroup().getMinNote().getScorePosY() + layout.getScoreLineSpacing() + (4.0 * layoutScale));
                                            }
                                            for (var i = org.herac.tuxguitar.song.models.TGDuration.EIGHTH; i <= this.getEffect().getTremoloPicking().getDuration().getValue(); i += i) {
                                                painter.moveTo(x + xMove - (3.0 * layoutScale), tpY + (1.0 * layoutScale));
                                                painter.lineTo(x + xMove + (4.0 * layoutScale), tpY - (1.0 * layoutScale));
                                                tpY += (4.0 * layoutScale);
                                            }
                                            painter.closePath();
                                            painter.setLineWidth(layout.getLineWidth(1));
                                        }
                                    }
                                    else {
                                        if (this.getEffect().isStaccato()) {
                                            var size = (3.0 * layoutScale);
                                            var sX = (x + (scoreNoteWidth / 2));
                                            var sY = (fromY + this.getVoiceImpl().getBeatGroup().getMinNote().getScorePosY() + layout.getScoreLineSpacing()) + (2.0 * layoutScale);
                                            layout.setScoreEffectStyle(painter);
                                            painter.setLineWidth(layout.getLineWidth(1));
                                            painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                            painter.moveTo(sX, sY);
                                            painter.addCircle(sX, sY, size);
                                            painter.closePath();
                                        }
                                        if (this.getEffect().isTremoloPicking()) {
                                            layout.setScoreEffectStyle(painter);
                                            painter.setLineWidth(layout.getLineWidth(2));
                                            painter.initPath();
                                            var tpX = ((x + (scoreNoteWidth / 2)));
                                            var tpY = (fromY + (this.getVoiceImpl().getBeatGroup().getMaxNote().getScorePosY() - layout.getScoreLineSpacing() - (4.0 * layoutScale)));
                                            for (var i = org.herac.tuxguitar.song.models.TGDuration.EIGHTH; i <= this.getEffect().getTremoloPicking().getDuration().getValue(); i += i) {
                                                painter.moveTo(tpX - (3.0 * layoutScale), tpY + (1.0 * layoutScale));
                                                painter.lineTo(tpX + (4.0 * layoutScale), tpY - (1.0 * layoutScale));
                                                tpY += (4.0 * layoutScale);
                                            }
                                            painter.closePath();
                                            painter.setLineWidth(layout.getLineWidth(1));
                                        }
                                    }
                                }
                            }
                        };
                        /**
                         * Encuentra la nota a la que esta ligada
                         * @return {org.herac.tuxguitar.graphics.control.TGNoteImpl}
                         * @private
                         */
                        TGNoteImpl.prototype.getNoteForTie = function () {
                            for (var i = this.getMeasureImpl().countBeats() - 1; i >= 0; i--) {
                                var beat = this.getMeasureImpl().getBeat(i);
                                var voice = beat.getVoice(this.getVoice().getIndex());
                                if (beat.getStart() < this.getBeatImpl().getStart() && !voice.isRestVoice()) {
                                    var it = voice.getNotes().iterator();
                                    while ((it.hasNext())) {
                                        var note = it.next();
                                        if (note.getString() === this.getString()) {
                                            return note;
                                        }
                                    }
                                    ;
                                }
                            }
                            return null;
                        };
                        /**
                         * Pinta los efectos
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         * @param {org.herac.tuxguitar.graphics.TGPainter} painter
                         * @param {number} fromX
                         * @param {number} fromY
                         * @param {number} spacing
                         * @private
                         */
                        TGNoteImpl.prototype.paintEffects = function (layout, painter, fromX, fromY, spacing) {
                            var x = fromX + this.getPosX() + spacing;
                            var y = fromY + this.getTabPosY();
                            var effect = this.getEffect();
                            if (effect.isGrace()) {
                                layout.setTabGraceStyle(painter);
                                var value = ('' + (effect.getGrace().getFret()));
                                painter['drawString$java_lang_String$float$float'](value, (this.noteOrientation.getX() - painter.getFMWidth(value) - 2), this.noteOrientation.getY());
                            }
                            if (effect.isBend()) {
                                this.paintBend(layout, painter, (this.noteOrientation.getX() + this.noteOrientation.getWidth()), y);
                            }
                            else if (effect.isTremoloBar()) {
                                this.paintTremoloBar(layout, painter, (this.noteOrientation.getX() + this.noteOrientation.getWidth()), y);
                            }
                            else if (effect.isSlide() || effect.isHammer()) {
                                var nextFromX = fromX;
                                var nextNote = layout.getSongManager().getMeasureManager().getNextNote(this.getMeasureImpl(), this.getBeatImpl().getStart(), this.getVoice().getIndex(), this.getString());
                                if (effect.isSlide()) {
                                    this.paintSlide(layout, painter, nextNote, x, y, nextFromX);
                                }
                                else if (effect.isHammer()) {
                                    this.paintHammer(layout, painter, nextNote, x, y, nextFromX);
                                }
                            }
                        };
                        TGNoteImpl.prototype.paintBend = function (layout, painter, fromX, fromY) {
                            var scale = layout.getScale();
                            var x = (fromX + (1.0 * scale));
                            var y = (fromY - (2.0 * scale));
                            layout.setTabEffectStyle(painter);
                            painter.setLineWidth(layout.getLineWidth(1));
                            painter.initPath();
                            painter.moveTo(x, y);
                            painter.lineTo(x + (1.0 * scale), y);
                            painter.cubicTo(x + (1.0 * scale), y, x + (3.0 * scale), y, x + (3.0 * scale), y - (2.0 * scale));
                            painter.moveTo(x + (3.0 * scale), y - (2.0 * scale));
                            painter.lineTo(x + (3.0 * scale), y - (12.0 * scale));
                            painter.moveTo(x + (3.0 * scale), y - (12.0 * scale));
                            painter.lineTo(x + (1.0 * scale), y - (10.0 * scale));
                            painter.moveTo(x + (3.0 * scale), y - (12.0 * scale));
                            painter.lineTo(x + (5.0 * scale), y - (10.0 * scale));
                            painter.closePath();
                        };
                        TGNoteImpl.prototype.paintTremoloBar = function (layout, painter, fromX, fromY) {
                            var scale = layout.getScale();
                            var x1 = fromX + (1.0 * scale);
                            var x2 = x1 + (8.0 * scale);
                            var y1 = fromY;
                            var y2 = y1 + (9.0 * scale);
                            layout.setTabEffectStyle(painter);
                            painter.setLineWidth(layout.getLineWidth(1));
                            painter.initPath();
                            painter.moveTo(x1, y1);
                            painter.lineTo(x1 + ((x2 - x1) / 2), y2);
                            painter.moveTo(x1 + ((x2 - x1) / 2), y2);
                            painter.lineTo(x2, y1);
                            painter.closePath();
                        };
                        TGNoteImpl.prototype.paintSlide = function (layout, painter, nextNote, fromX, fromY, nextFromX) {
                            var xScale = layout.getScale();
                            var yScale = (layout.getStringSpacing() / 10.0);
                            var yMove = (3.0 * yScale);
                            var x = fromX;
                            var y = fromY;
                            layout.setTabEffectStyle(painter);
                            painter.setLineWidth(layout.getLineWidth(1));
                            if (nextNote != null) {
                                var nextX = nextNote.getPosX() + nextFromX + nextNote.getBeatImpl().getSpacing(layout);
                                var nextY = y;
                                if (nextNote.getValue() < this.getValue()) {
                                    y -= yMove;
                                    nextY += yMove;
                                }
                                else if (nextNote.getValue() > this.getValue()) {
                                    y += yMove;
                                    nextY -= yMove;
                                }
                                else {
                                    y -= yMove;
                                    nextY -= yMove;
                                }
                                painter.initPath();
                                painter.moveTo(x + (6.0 * xScale), y);
                                painter.lineTo(nextX - (3.0 * xScale), nextY);
                                painter.closePath();
                            }
                            else {
                                painter.initPath();
                                painter.moveTo(x + (6.0 * xScale), y - yMove);
                                painter.lineTo(x + (17.0 * xScale), y - yMove);
                                painter.closePath();
                            }
                        };
                        TGNoteImpl.prototype.paintHammer = function (layout, painter, nextNote, fromX, fromY, nextFromX) {
                            var scale = layout.getScale();
                            var x = (fromX + (7.0 * scale));
                            var y = fromY;
                            var width = (nextNote != null) ? ((nextNote.getPosX() + nextFromX + nextNote.getBeatImpl().getSpacing(layout)) - (4.0 * scale) - x) : (10.0 * scale);
                            var height1 = (layout.getStringSpacing() / 2.0);
                            var height2 = (height1 - (scale * 2.0));
                            layout.setTabEffectStyle(painter);
                            painter.setLineWidth(layout.getLineWidth(1));
                            painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                            painter.moveTo(x, y);
                            painter.cubicTo(x, y - height1, x + width, y - height1, x + width, y);
                            painter.cubicTo(x + width, y - height2, x, y - height2, x, y);
                            painter.closePath();
                        };
                        TGNoteImpl.prototype.paintGrace = function (layout, painter, fromX, fromY) {
                            var scale = (layout.getScoreLineSpacing() / 2.25);
                            var x = fromX - (2.0 * scale);
                            var y = fromY + (scale / 3);
                            layout.setScoreEffectStyle(painter);
                            painter.setLineWidth(layout.getLineWidth(1));
                            painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                            org.herac.tuxguitar.graphics.control.painters.TGNotePainter.paintFooter(painter, x, y, -1, scale);
                            painter.closePath();
                            painter.initPath();
                            painter.moveTo(x, y - (2.0 * scale));
                            painter.lineTo(x, y + (2.0 * scale) - (scale / 4.0));
                            painter.closePath();
                            painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_DRAW | org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                            org.herac.tuxguitar.graphics.control.painters.TGNotePainter.paintNote(painter, x - scale * 1.33, y + scale + (scale / 4.0), scale);
                            painter.closePath();
                            painter.initPath();
                            painter.moveTo(x - scale, y);
                            painter.lineTo(x + scale, y - scale);
                            painter.closePath();
                        };
                        TGNoteImpl.prototype.paintVibrato = function (layout, painter, fromX, fromY) {
                            var scale = layout.getScale();
                            var x = fromX;
                            var y = fromY + (2.0 * scale);
                            var width = (this.getVoiceImpl().getWidth() - (2.0 * scale));
                            var loops = Math.round(width / (6.0 * scale));
                            if (loops > 0) {
                                layout.setTabEffectStyle(painter);
                                painter.setLineWidth(layout.getLineWidth(1));
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                painter.moveTo((x + ((2.0) * scale)), (y + (1.0 * scale)));
                                for (var i = 0; i < loops; i++) {
                                    x = (fromX + ((6.0 * scale) * i));
                                    painter.lineTo((x + (2.0 * scale)), (y + (1.0 * scale)));
                                    painter.cubicTo((x + (2.0 * scale)), (y + (1.0 * scale)), (x + (3.0 * scale)), y, (x + (4.0 * scale)), (y + (1.0 * scale)));
                                    painter.lineTo((x + (6.0 * scale)), (y + (3.0 * scale)));
                                }
                                painter.lineTo((x + (7.0 * scale)), (y + (2.0 * scale)));
                                painter.cubicTo((x + (7.0 * scale)), (y + (2.0 * scale)), (x + (8.0 * scale)), (y + (2.0 * scale)), (x + (7.0 * scale)), (y + (3.0 * scale)));
                                for (var i = (loops - 1); i >= 0; i--) {
                                    x = (fromX + ((6.0 * scale) * i));
                                    painter.lineTo((x + (6.0 * scale)), (y + (4.0 * scale)));
                                    painter.cubicTo((x + (6.0 * scale)), (y + (4.0 * scale)), (x + (5.0 * scale)), (y + (5.0 * scale)), (x + (4.0 * scale)), (y + (4.0 * scale)));
                                    painter.lineTo((x + (2.0 * scale)), (y + (2.0 * scale)));
                                    painter.lineTo((x + (1.0 * scale)), (y + (3.0 * scale)));
                                }
                                painter.cubicTo((x + (1.0 * scale)), (y + (3.0 * scale)), x, (y + (3.0 * scale)), (x + (1.0 * scale)), (y + (2.0 * scale)));
                                painter.lineTo((x + (2.0 * scale)), (y + (1.0 * scale)));
                                painter.closePath();
                            }
                        };
                        TGNoteImpl.prototype.paintTrill = function (layout, painter, fromX, fromY) {
                            var string = "Tr";
                            var fmWidth = painter.getFMWidth(string);
                            var scale = layout.getScale();
                            var x = fromX + fmWidth;
                            var y = fromY + (4.0 * scale);
                            var textY = (fromY + (2.0 * scale) + painter.getFMTopLine());
                            var width = (this.getVoiceImpl().getWidth() - fmWidth - (2.0 * scale));
                            var loops = Math.round(width / (6.0 * scale));
                            if (loops > 0) {
                                painter['drawString$java_lang_String$float$float'](string, fromX, textY);
                                layout.setTabEffectStyle(painter);
                                painter.setLineWidth(layout.getLineWidth(1));
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                painter.moveTo((x + (2.0 * scale)), (y + (1.0 * scale)));
                                for (var i = 0; i < loops; i++) {
                                    x = (fromX + fmWidth + ((6.0 * scale) * i));
                                    painter.lineTo((x + (2.0 * scale)), (y + (1.0 * scale)));
                                    painter.cubicTo((x + (2.0 * scale)), (y + (1.0 * scale)), (x + (3.0 * scale)), y, (x + (4.0 * scale)), (y + (1.0 * scale)));
                                    painter.lineTo((x + (6.0 * scale)), (y + (3.0 * scale)));
                                }
                                painter.lineTo((x + (7.0 * scale)), (y + (2.0 * scale)));
                                painter.cubicTo((x + (7.0 * scale)), (y + (2.0 * scale)), (x + (8.0 * scale)), (y + (2.0 * scale)), (x + (7.0 * scale)), (y + (3.0 * scale)));
                                for (var i = (loops - 1); i >= 0; i--) {
                                    x = (fromX + fmWidth + ((6.0 * scale) * i));
                                    painter.lineTo((x + (6.0 * scale)), (y + (4.0 * scale)));
                                    painter.cubicTo((x + (6.0 * scale)), (y + (4.0 * scale)), (x + (5.0 * scale)), (y + (5.0 * scale)), (x + (4.0 * scale)), (y + (4.0 * scale)));
                                    painter.lineTo((x + (2.0 * scale)), (y + (2.0 * scale)));
                                    painter.lineTo((x + (1.0 * scale)), (y + (3.0 * scale)));
                                }
                                painter.cubicTo((x + (1.0 * scale)), (y + (3.0 * scale)), x, (y + (3.0 * scale)), (x + (1.0 * scale)), (y + (2.0 * scale)));
                                painter.lineTo((x + (2.0 * scale)), (y + (1.0 * scale)));
                                painter.closePath();
                            }
                        };
                        TGNoteImpl.prototype.paintFadeIn = function (layout, painter, fromX, fromY) {
                            var scale = layout.getScale();
                            var x = fromX;
                            var y = fromY + (4.0 * scale);
                            var width = this.getVoiceImpl().getWidth();
                            painter.setLineWidth(layout.getLineWidth(1));
                            painter.initPath();
                            painter.moveTo(x, y);
                            painter.cubicTo(x, y, x + width, y, x + width, y - (4.0 * scale));
                            painter.moveTo(x, y);
                            painter.cubicTo(x, y, x + width, y, x + width, y + (4.0 * scale));
                            painter.moveTo(x + width, y + (4.0 * scale));
                            painter.closePath();
                        };
                        TGNoteImpl.prototype.paintAccentuated = function (layout, painter, fromX, fromY) {
                            var scale = layout.getScale();
                            var x = fromX;
                            var y = fromY + (2.0 * scale);
                            painter.setLineWidth(layout.getLineWidth(1));
                            painter.initPath();
                            painter.moveTo(x, y);
                            painter.lineTo(x + (6.0 * scale), y + (2.5 * scale));
                            painter.moveTo(x + (6.0 * scale), y + (2.5 * scale));
                            painter.lineTo(x, y + (5.0 * scale));
                            painter.closePath();
                        };
                        TGNoteImpl.prototype.paintHeavyAccentuated = function (layout, painter, fromX, fromY) {
                            var scale = layout.getScale();
                            var x = fromX;
                            var y = fromY;
                            painter.setLineWidth(layout.getLineWidth(1));
                            painter.initPath();
                            painter.moveTo(x, y + (5.0 * scale));
                            painter.lineTo(x + (3.0 * scale), y + (1.0 * scale));
                            painter.moveTo(x + (3.0 * scale), y + (1.0 * scale));
                            painter.lineTo(x + (6.0 * scale), y + (5.0 * scale));
                            painter.closePath();
                        };
                        TGNoteImpl.prototype.getRealValue = function () {
                            return (this.getValue() + this.getMeasureImpl().getTrack().getString(this.getString()).getValue());
                        };
                        TGNoteImpl.prototype.getScorePosY = function () {
                            return this.scorePosY;
                        };
                        TGNoteImpl.prototype.getTabPosY = function () {
                            return this.tabPosY;
                        };
                        TGNoteImpl.prototype.getMeasureImpl = function () {
                            return this.getBeatImpl().getMeasureImpl();
                        };
                        TGNoteImpl.prototype.getPaintPosition = function (index) {
                            return this.getMeasureImpl().getTs().getPosition(index);
                        };
                        TGNoteImpl.prototype.getBeatImpl = function () {
                            return this.getVoiceImpl().getBeatImpl();
                        };
                        TGNoteImpl.prototype.getVoiceImpl = function () {
                            return _super.prototype.getVoice.call(this);
                        };
                        TGNoteImpl.prototype.getPosX = function () {
                            return this.getBeatImpl().getPosX();
                        };
                        return TGNoteImpl;
                    }(org.herac.tuxguitar.song.models.TGNote));
                    control.TGNoteImpl = TGNoteImpl;
                    TGNoteImpl["__class"] = "org.herac.tuxguitar.graphics.control.TGNoteImpl";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGTextImpl = (function (_super) {
                        __extends(TGTextImpl, _super);
                        function TGTextImpl() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        }
                        TGTextImpl.prototype.paint = function (layout, painter, fromX, fromY) {
                            var beat = this.getBeat();
                            var measure = beat.getMeasureImpl();
                            var x = fromX + beat.getSpacing(layout) + beat.getPosX();
                            var y = fromY + measure.getTs().getPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TEXT);
                            layout.setTextStyle(painter);
                            painter['drawString$java_lang_String$float$float'](this.getValue(), x, y);
                        };
                        return TGTextImpl;
                    }(org.herac.tuxguitar.song.models.TGText));
                    control.TGTextImpl = TGTextImpl;
                    TGTextImpl["__class"] = "org.herac.tuxguitar.graphics.control.TGTextImpl";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    /**
                     * @author julian
                     *
                     * TODO To change the template for this generated type comment go to Window - Preferences - Java - Code Style - Code Templates
                     * @extends org.herac.tuxguitar.song.models.TGTrack
                     */
                    var TGTrackImpl = (function (_super) {
                        __extends(TGTrackImpl, _super);
                        function TGTrackImpl(factory) {
                            var _this = _super.call(this, factory) || this;
                            _this.tabHeight = 0;
                            _this.scoreHeight = 0;
                            return _this;
                        }
                        TGTrackImpl.prototype.update = function (layout) {
                            this.calculateTabHeight(layout);
                            this.calculateScoreHeight(layout);
                        };
                        /**
                         * Calcula el el ancho de la tablatura
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         */
                        TGTrackImpl.prototype.calculateTabHeight = function (layout) {
                            this.tabHeight = ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0 ? ((this.stringCount() - 1) * layout.getStringSpacing()) : 0);
                        };
                        /**
                         * Calcula el el ancho de la partitura
                         * @param {org.herac.tuxguitar.graphics.control.TGLayout} layout
                         */
                        TGTrackImpl.prototype.calculateScoreHeight = function (layout) {
                            this.scoreHeight = ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0 ? (layout.getScoreLineSpacing() * 4) : 0);
                        };
                        TGTrackImpl.prototype.getTabHeight = function () {
                            return this.tabHeight;
                        };
                        TGTrackImpl.prototype.getScoreHeight = function () {
                            return this.scoreHeight;
                        };
                        TGTrackImpl.prototype.setTabHeight = function (tabHeight) {
                            this.tabHeight = tabHeight;
                        };
                        return TGTrackImpl;
                    }(org.herac.tuxguitar.song.models.TGTrack));
                    control.TGTrackImpl = TGTrackImpl;
                    TGTrackImpl["__class"] = "org.herac.tuxguitar.graphics.control.TGTrackImpl";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGVoiceImpl = (function (_super) {
                        __extends(TGVoiceImpl, _super);
                        function TGVoiceImpl(factory, index) {
                            var _this = _super.call(this, factory, index) || this;
                            _this.width = 0;
                            _this.maxNote = null;
                            _this.minNote = null;
                            _this.usedStrings = null;
                            _this.joinedType = 0;
                            _this.joinedGreaterThanQuarter = false;
                            _this.join1 = null;
                            _this.join2 = null;
                            _this.previous = null;
                            _this.next = null;
                            _this.group = null;
                            _this.hiddenSilence = false;
                            _this.maxY = 0;
                            _this.minY = 0;
                            _this.silenceY = 0;
                            _this.silenceHeight = 0;
                            _this.maxString = 0;
                            _this.minString = 0;
                            return _this;
                        }
                        TGVoiceImpl.prototype.getPosX = function () {
                            return this.getBeatImpl().getPosX();
                        };
                        TGVoiceImpl.prototype.getWidth = function () {
                            return this.width;
                        };
                        TGVoiceImpl.prototype.setWidth = function (width) {
                            this.width = width;
                        };
                        TGVoiceImpl.prototype.getMinNote = function () {
                            return this.minNote;
                        };
                        TGVoiceImpl.prototype.getMaxNote = function () {
                            return this.maxNote;
                        };
                        TGVoiceImpl.prototype.getBeatImpl = function () {
                            return this.getBeat();
                        };
                        TGVoiceImpl.prototype.getMeasureImpl = function () {
                            return this.getBeat().getMeasure();
                        };
                        TGVoiceImpl.prototype.getUsedStrings = function () {
                            if (this.usedStrings == null) {
                                this.usedStrings = new Array(this.getBeat().getMeasure().getTrack().stringCount());
                            }
                            return this.usedStrings;
                        };
                        TGVoiceImpl.prototype.getJoin1 = function () {
                            return this.join1;
                        };
                        TGVoiceImpl.prototype.setJoin1 = function (join1) {
                            this.join1 = join1;
                        };
                        TGVoiceImpl.prototype.getJoin2 = function () {
                            return this.join2;
                        };
                        TGVoiceImpl.prototype.setJoin2 = function (join2) {
                            this.join2 = join2;
                        };
                        TGVoiceImpl.prototype.isJoinedGreaterThanQuarter = function () {
                            return this.joinedGreaterThanQuarter;
                        };
                        TGVoiceImpl.prototype.setJoinedGreaterThanQuarter = function (joinedGreaterThanQuarter) {
                            this.joinedGreaterThanQuarter = joinedGreaterThanQuarter;
                        };
                        TGVoiceImpl.prototype.getJoinedType = function () {
                            return this.joinedType;
                        };
                        TGVoiceImpl.prototype.setJoinedType = function (joinedType) {
                            this.joinedType = joinedType;
                        };
                        TGVoiceImpl.prototype.setPreviousBeat = function (previous) {
                            this.previous = previous;
                        };
                        TGVoiceImpl.prototype.setNextBeat = function (next) {
                            this.next = next;
                        };
                        TGVoiceImpl.prototype.getBeatGroup = function () {
                            return this.group;
                        };
                        TGVoiceImpl.prototype.setBeatGroup = function (group) {
                            this.group = group;
                        };
                        TGVoiceImpl.prototype.isPlaying = function (layout) {
                            return layout.getComponent()['isRunning$org_herac_tuxguitar_song_models_TGBeat'](this.getBeat());
                        };
                        TGVoiceImpl.prototype.reset = function () {
                            this.maxNote = null;
                            this.minNote = null;
                            this.hiddenSilence = false;
                            this.usedStrings = new Array(this.getBeat().getMeasure().getTrack().stringCount());
                            this.maxString = 1;
                            this.minString = this.getBeat().getMeasure().getTrack().stringCount();
                            this.group = null;
                            this.previous = null;
                            this.next = null;
                        };
                        TGVoiceImpl.prototype.check = function (note) {
                            var value = note.getRealValue();
                            if (this.maxNote == null || value > this.maxNote.getRealValue()) {
                                this.maxNote = note;
                            }
                            if (this.minNote == null || value < this.minNote.getRealValue()) {
                                this.minNote = note;
                            }
                            this.getUsedStrings();
                            this.usedStrings[note.getString() - 1] = true;
                            if (note.getString() > this.maxString) {
                                this.maxString = note.getString();
                            }
                            if (note.getString() < this.minString) {
                                this.minString = note.getString();
                            }
                        };
                        TGVoiceImpl.prototype.update = function (layout) {
                            this.minY = 0;
                            this.maxY = 0;
                            if (this.isRestVoice()) {
                                this.updateSilenceSpacing(layout);
                            }
                            else {
                                this.updateNoteVoice(layout);
                            }
                        };
                        TGVoiceImpl.prototype.updateNoteVoice = function (layout) {
                            this.joinedType = TGVoiceImpl.JOINED_TYPE_NONE_RIGHT;
                            this.joinedGreaterThanQuarter = false;
                            this.setJoin1(this);
                            this.setJoin2(this);
                            var noteJoined = false;
                            var withPrev = false;
                            if (this.previous != null && !this.previous.isRestVoice()) {
                                if (this.getMeasureImpl().canJoin(layout.getSongManager(), this, this.previous)) {
                                    withPrev = true;
                                    if (this.previous.getDuration().getValue() >= this.getDuration().getValue()) {
                                        this.setJoin1(this.previous);
                                        this.setJoin2(this);
                                        this.joinedType = TGVoiceImpl.JOINED_TYPE_LEFT;
                                        noteJoined = true;
                                    }
                                    if (this.previous.getDuration().getValue() > org.herac.tuxguitar.song.models.TGDuration.QUARTER) {
                                        this.joinedGreaterThanQuarter = true;
                                    }
                                }
                            }
                            if (this.next != null && !this.next.isRestVoice()) {
                                if (this.getMeasureImpl().canJoin(layout.getSongManager(), this, this.next)) {
                                    if (this.next.getDuration().getValue() >= this.getDuration().getValue()) {
                                        this.setJoin2(this.next);
                                        if (this.previous == null || this.previous.isRestVoice() || this.previous.getDuration().getValue() < this.getDuration().getValue()) {
                                            this.setJoin1(this);
                                        }
                                        noteJoined = true;
                                        this.joinedType = TGVoiceImpl.JOINED_TYPE_RIGHT;
                                    }
                                    if (this.next.getDuration().getValue() > org.herac.tuxguitar.song.models.TGDuration.QUARTER) {
                                        this.joinedGreaterThanQuarter = true;
                                    }
                                }
                            }
                            if (!noteJoined && withPrev) {
                                this.joinedType = TGVoiceImpl.JOINED_TYPE_NONE_LEFT;
                            }
                            if ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0 && (layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) === 0) {
                                this.minY = 0;
                                this.maxY = this.getBeatImpl().getMeasureImpl().getTrackImpl().getTabHeight();
                                if (this.getBeatGroup().getDirection() === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_DOWN) {
                                    this.maxY += (((layout.getStringSpacing() / 2) * 5) + 1);
                                }
                                else {
                                    this.minY -= (((layout.getStringSpacing() / 2) * 5) + 1);
                                }
                            }
                        };
                        TGVoiceImpl.prototype.updateSilenceSpacing = function (layout) {
                            this.silenceY = 0;
                            this.silenceHeight = 0;
                            if (!this.isHiddenSilence()) {
                                var style = layout.getStyle();
                                var lineCount = 0;
                                var scale = 0;
                                var lineSpacing = 0;
                                if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                    lineSpacing = layout.getScoreLineSpacing();
                                    lineCount = 5;
                                    scale = (lineSpacing / 9.0);
                                }
                                else {
                                    lineSpacing = layout.getStringSpacing();
                                    lineCount = this.getBeat().getMeasure().getTrack().stringCount();
                                    scale = (lineSpacing / 10.0);
                                }
                                var duration = this.getDuration().getValue();
                                if (duration === org.herac.tuxguitar.song.models.TGDuration.WHOLE) {
                                    this.silenceHeight = (scale * 3.6513581);
                                    this.silenceY = (lineCount <= 5 ? lineSpacing : lineSpacing * 2);
                                }
                                else if (duration === org.herac.tuxguitar.song.models.TGDuration.HALF) {
                                    this.silenceHeight = (scale * 3.6513581);
                                    this.silenceY = (lineCount <= 5 ? lineSpacing * 2 : lineSpacing * 3) - this.silenceHeight;
                                }
                                else if (duration === org.herac.tuxguitar.song.models.TGDuration.QUARTER) {
                                    this.silenceHeight = (scale * 16);
                                    this.silenceY = ((lineSpacing * (lineCount - 1)) / 2) - (this.silenceHeight / 2);
                                }
                                else if (duration === org.herac.tuxguitar.song.models.TGDuration.EIGHTH) {
                                    this.silenceHeight = (scale * 12);
                                    this.silenceY = ((lineSpacing * (lineCount - 1)) / 2) - (this.silenceHeight / 2);
                                }
                                else if (duration === org.herac.tuxguitar.song.models.TGDuration.SIXTEENTH) {
                                    this.silenceHeight = (scale * 16);
                                    this.silenceY = ((lineSpacing * (lineCount - 1)) / 2) - (this.silenceHeight / 2);
                                }
                                else if (duration === org.herac.tuxguitar.song.models.TGDuration.THIRTY_SECOND) {
                                    this.silenceHeight = (scale * 24);
                                    this.silenceY = ((lineSpacing * (lineCount - 1)) / 2) - (this.silenceHeight / 2);
                                }
                                else if (duration === org.herac.tuxguitar.song.models.TGDuration.SIXTY_FOURTH) {
                                    this.silenceHeight = (scale * 28);
                                    this.silenceY = ((lineSpacing * (lineCount - 1)) / 2) - (this.silenceHeight / 2);
                                }
                                for (var v = 0; v < this.getBeat().countVoices(); v++) {
                                    if (v !== this.getIndex()) {
                                        var voice = this.getBeatImpl().getVoiceImpl(v);
                                        if (!voice.isEmpty()) {
                                            if (voice.isRestVoice()) {
                                                if (!voice.isHiddenSilence()) {
                                                    var maxSilenceHeight = (lineSpacing * 3);
                                                    var firstPosition = (this.silenceY - (maxSilenceHeight / this.getBeat().countVoices()));
                                                    this.silenceY = (firstPosition + (maxSilenceHeight * this.getIndex()));
                                                }
                                            }
                                            else if ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                                var direction = voice.getBeatGroup().getDirection();
                                                var y1 = voice.getBeatGroup().getY1(layout, voice.getMinNote(), this.getMeasureImpl().getKeySignature(), this.getMeasureImpl().getClef());
                                                var y2 = voice.getBeatGroup().getY1(layout, voice.getMaxNote(), this.getMeasureImpl().getKeySignature(), this.getMeasureImpl().getClef());
                                                if (direction === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_UP) {
                                                    var position = (y1 + (lineSpacing * 2));
                                                    if (position > this.silenceY) {
                                                        this.silenceY = position;
                                                    }
                                                }
                                                else if (direction === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_DOWN) {
                                                    var position = (y2 - (this.silenceHeight + lineSpacing));
                                                    if (position < this.silenceY) {
                                                        this.silenceY = position;
                                                    }
                                                }
                                            }
                                            else if ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0) {
                                                var direction = voice.getBeatGroup().getDirection();
                                                if (direction === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_UP) {
                                                    var position = (lineSpacing * voice.getMaxString());
                                                    if (position > this.silenceY) {
                                                        this.silenceY = position;
                                                    }
                                                }
                                                else if (direction === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_DOWN) {
                                                    var position = ((lineSpacing * (voice.getMinString() - 1)) - (this.silenceHeight + lineSpacing));
                                                    if (position < this.silenceY) {
                                                        this.silenceY = position;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                this.minY = this.silenceY;
                                this.maxY = (this.silenceY + this.silenceHeight);
                            }
                        };
                        TGVoiceImpl.prototype.paint = function (layout, painter, fromX, fromY) {
                            if (!this.isEmpty()) {
                                if (this.isRestVoice() && !this.isHiddenSilence()) {
                                    this.paintSilence(layout, painter, fromX, fromY);
                                }
                                else {
                                    var notes = this.getNotes().iterator();
                                    while ((notes.hasNext())) {
                                        var note = notes.next();
                                        note.paint(layout, painter, fromX, fromY);
                                    }
                                    ;
                                    if (!layout.isPlayModeEnabled()) {
                                        this.paintBeat(layout, painter, fromX, fromY);
                                    }
                                }
                            }
                        };
                        TGVoiceImpl.prototype.paintSilence = function (layout, painter, fromX, fromY) {
                            var style = layout.getStyle();
                            var x = 0;
                            var lineSpacing = 0;
                            var y = 0;
                            var scale = 0;
                            var layoutScale = layout.getScale();
                            if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                x = fromX + this.getPosX() + this.getBeatImpl().getSpacing(layout);
                                y = fromY + this.getPaintPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES) + this.silenceY;
                                lineSpacing = layout.getScoreLineSpacing();
                                scale = (lineSpacing / 9.0);
                            }
                            else {
                                x = fromX + this.getPosX() + this.getBeatImpl().getSpacing(layout) - 1;
                                y = fromY + this.getPaintPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE) + this.silenceY;
                                lineSpacing = layout.getStringSpacing();
                                scale = (lineSpacing / 10.0);
                            }
                            this.setStyle(layout, painter, (layout.isPlayModeEnabled() && this.isPlaying(layout)));
                            painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                            var duration = this.getDuration().getValue();
                            if (duration === org.herac.tuxguitar.song.models.TGDuration.WHOLE) {
                                org.herac.tuxguitar.graphics.control.painters.TGSilencePainter.paintWhole(painter, x, y, scale);
                            }
                            else if (duration === org.herac.tuxguitar.song.models.TGDuration.HALF) {
                                org.herac.tuxguitar.graphics.control.painters.TGSilencePainter.paintHalf(painter, x, y, scale);
                            }
                            else if (duration === org.herac.tuxguitar.song.models.TGDuration.QUARTER) {
                                org.herac.tuxguitar.graphics.control.painters.TGSilencePainter.paintQuarter(painter, x, y, scale);
                            }
                            else if (duration === org.herac.tuxguitar.song.models.TGDuration.EIGHTH) {
                                org.herac.tuxguitar.graphics.control.painters.TGSilencePainter.paintEighth(painter, x, y, scale);
                            }
                            else if (duration === org.herac.tuxguitar.song.models.TGDuration.SIXTEENTH) {
                                org.herac.tuxguitar.graphics.control.painters.TGSilencePainter.paintSixteenth(painter, x, y, scale);
                            }
                            else if (duration === org.herac.tuxguitar.song.models.TGDuration.THIRTY_SECOND) {
                                org.herac.tuxguitar.graphics.control.painters.TGSilencePainter.paintThirtySecond(painter, x, y, scale);
                            }
                            else if (duration === org.herac.tuxguitar.song.models.TGDuration.SIXTY_FOURTH) {
                                org.herac.tuxguitar.graphics.control.painters.TGSilencePainter.paintSixtyFourth(painter, x, y, scale);
                            }
                            painter.closePath();
                            if (this.getDuration().isDotted() || this.getDuration().isDoubleDotted()) {
                                this.paintDot(layout, painter, (x + 10.0 * layoutScale), (y + 2.0 * layoutScale), layoutScale);
                            }
                        };
                        TGVoiceImpl.prototype.setStyle = function (layout, painter, playMode) {
                            if ((layout.getStyle() & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                layout.setScoreSilenceStyle(painter, playMode);
                            }
                            else {
                                layout.setTabSilenceStyle(painter, playMode);
                            }
                        };
                        TGVoiceImpl.prototype.paintBeat = function (layout, painter, fromX, fromY) {
                            if (!this.isRestVoice()) {
                                var style = layout.getStyle();
                                var spacing = this.getBeatImpl().getSpacing(layout);
                                if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) !== 0) {
                                    this.paintScoreBeat(layout, painter, fromX, fromY + this.getPaintPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_SCORE_MIDDLE_LINES), spacing);
                                }
                                if ((style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_TABLATURE) !== 0 && (style & org.herac.tuxguitar.graphics.control.TGLayout.DISPLAY_SCORE) === 0) {
                                    this.paintTablatureBeat(layout, painter, fromX, fromY + this.getPaintPosition(org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITION_TABLATURE), spacing);
                                }
                            }
                        };
                        TGVoiceImpl.prototype.paintTablatureBeat = function (layout, painter, fromX, fromY, spacing) {
                            if (!this.isRestVoice()) {
                                var scale = layout.getScale();
                                var xMove = (2.0 * scale);
                                var x = (fromX + this.getPosX() + spacing + xMove);
                                var y1 = 0;
                                var y2 = 0;
                                var verticalLineWidth = layout.getLineWidth(1);
                                var horizontalLineWidth = layout.getLineWidth(2);
                                var stringSpacing = layout.getStringSpacing();
                                var direction = (this.getBeatGroup().getDirection() === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_DOWN ? 1.0 : -1.0);
                                if (this.getBeatGroup().getDirection() === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_DOWN) {
                                    y1 = (fromY + this.getMeasureImpl().getTrackImpl().getTabHeight() + (stringSpacing / 2));
                                    y2 = (fromY + this.getMeasureImpl().getTrackImpl().getTabHeight() + ((stringSpacing / 2) * 5));
                                }
                                else {
                                    y1 = (fromY - (stringSpacing / 2) - horizontalLineWidth);
                                    y2 = (fromY - ((stringSpacing / 2) * 5));
                                }
                                if (this.getDuration().getValue() >= org.herac.tuxguitar.song.models.TGDuration.QUARTER) {
                                    layout.setTabNoteFooterStyle(painter);
                                    painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_DRAW | org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                    painter.setAntialias(false);
                                    painter.setLineWidth(verticalLineWidth);
                                    painter.moveTo(x, y1);
                                    painter.lineTo(x, y2);
                                    if (this.getDuration().getValue() >= org.herac.tuxguitar.song.models.TGDuration.EIGHTH) {
                                        var x1 = 0;
                                        var x2 = 0;
                                        var joinedType = this.getJoinedType();
                                        if (joinedType === TGVoiceImpl.JOINED_TYPE_NONE_RIGHT) {
                                            x1 = this.getPosX() + xMove + spacing;
                                            x2 = this.getPosX() + xMove + spacing + (6 * scale);
                                        }
                                        else if (joinedType === TGVoiceImpl.JOINED_TYPE_NONE_LEFT) {
                                            x1 = this.getPosX() + xMove + spacing - (5 * scale);
                                            x2 = this.getPosX() + xMove + spacing;
                                        }
                                        else {
                                            x1 = this.getJoin1().getPosX() + xMove + this.getJoin1().getBeatImpl().getSpacing(layout);
                                            x2 = this.getJoin2().getPosX() + xMove + this.getJoin2().getBeatImpl().getSpacing(layout);
                                        }
                                        var index = (this.getDuration().getIndex() - 2);
                                        if (index > 0) {
                                            var height = (layout.getStringSpacing() / 2);
                                            for (var i = index; i > 0; i--) {
                                                painter.moveTo(fromX + x1, y2 + ((height - (i * height)) * direction));
                                                painter.lineTo(fromX + x2, y2 + ((height - (i * height)) * direction));
                                                painter.lineTo(fromX + x2, y2 + ((height - (i * height)) * direction) + (horizontalLineWidth * direction));
                                                painter.lineTo(fromX + x1, y2 + ((height - (i * height)) * direction) + (horizontalLineWidth * direction));
                                                painter.lineTo(fromX + x1, y2 + ((height - (i * height)) * direction));
                                            }
                                        }
                                    }
                                    painter.closePath();
                                }
                                else if (this.getDuration().getValue() === org.herac.tuxguitar.song.models.TGDuration.HALF) {
                                    layout.setTabNoteFooterStyle(painter);
                                    painter.initPath();
                                    painter.setAntialias(false);
                                    painter.setLineWidth(verticalLineWidth);
                                    painter.moveTo(x, (y1 + ((y2 - y1) / 2)));
                                    painter.lineTo(x, y2);
                                    painter.closePath();
                                }
                                if (this.getDuration().isDotted() || this.getDuration().isDoubleDotted()) {
                                    var joinedType = this.getJoinedType();
                                    var posX = ((this.getDuration().getValue() > org.herac.tuxguitar.song.models.TGDuration.WHOLE) ? ((joinedType === TGVoiceImpl.JOINED_TYPE_NONE_RIGHT || joinedType === TGVoiceImpl.JOINED_TYPE_RIGHT) ? (x + (4.0 * scale)) : (x - (5.0 * scale))) : x);
                                    var posY = (y2 - ((this.getDuration().getValue() >= org.herac.tuxguitar.song.models.TGDuration.EIGHTH ? ((stringSpacing / 2.0) * (this.getDuration().getIndex() - 2)) : scale) * direction));
                                    this.paintDot(layout, painter, posX, posY, scale);
                                }
                            }
                        };
                        TGVoiceImpl.prototype.paintScoreBeat = function (layout, painter, fromX, fromY, spacing) {
                            var vX = (fromX + this.getPosX() + spacing);
                            if (this.getDuration().getValue() >= org.herac.tuxguitar.song.models.TGDuration.HALF) {
                                layout.setScoreNoteFooterStyle(painter);
                                var scale = layout.getScale();
                                var lineSpacing = layout.getScoreLineSpacing();
                                var direction = this.group.getDirection();
                                var dir = (direction === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_DOWN ? 1 : -1);
                                var key = this.getBeat().getMeasure().getKeySignature();
                                var clef = this.getBeat().getMeasure().getClef();
                                var scoreNoteWidth = layout.getScoreNoteWidth();
                                var xMove = (direction === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_UP ? scoreNoteWidth : 0.0);
                                var yMove = ((lineSpacing / 2.0) + (((lineSpacing / 10.0) * 1.2)) * dir);
                                var vY1 = fromY + (direction === org.herac.tuxguitar.graphics.control.TGBeatGroup.DIRECTION_DOWN ? this.maxNote.getScorePosY() : this.minNote.getScorePosY());
                                var vY2 = fromY + this.group.getY2(layout, this.getPosX() + spacing, key, clef);
                                painter.setLineWidth(layout.getLineWidth(0));
                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                painter.moveTo(vX + xMove - (0.5 * scale), vY1 + yMove);
                                painter.lineTo(vX + xMove + (0.5 * scale), vY1 + yMove);
                                painter.lineTo(vX + xMove + (0.5 * scale), vY2);
                                painter.lineTo(vX + xMove - (0.5 * scale), vY2);
                                painter.moveTo(vX + xMove - (0.5 * scale), vY1 + yMove);
                                painter.closePath();
                                if (this.getDuration().getValue() >= org.herac.tuxguitar.song.models.TGDuration.EIGHTH) {
                                    var index = (this.getDuration().getIndex() - 3);
                                    if (index >= 0) {
                                        var joinedType = this.getJoinedType();
                                        var joinedGreaterThanQuarter = this.isJoinedGreaterThanQuarter();
                                        if ((joinedType === TGVoiceImpl.JOINED_TYPE_NONE_LEFT || joinedType === TGVoiceImpl.JOINED_TYPE_NONE_RIGHT) && !joinedGreaterThanQuarter) {
                                            var hX = (fromX + xMove + this.getPosX() + spacing - (0.5 * scale));
                                            var hY = ((fromY + this.group.getY2(layout, this.getPosX() + spacing, key, clef)) - ((lineSpacing * 2) * dir));
                                            for (var i = 0; i <= index; i++) {
                                                painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                                org.herac.tuxguitar.graphics.control.painters.TGNotePainter.paintFooter(painter, hX, (hY - ((i * (lineSpacing / 2.0)) * dir)), dir, lineSpacing);
                                                painter.closePath();
                                            }
                                        }
                                        else {
                                            var hX = (this.getPosX() + spacing);
                                            var hX1 = 0;
                                            var hX2 = 0;
                                            var hY1 = 0;
                                            var hY2 = 0;
                                            var currHX1 = 0;
                                            var currHX2 = 0;
                                            var hLineWidth = layout.getLineWidth(2);
                                            var hLineMargin = hLineWidth;
                                            var nIndex = (this.next != null ? this.next.getDuration().getIndex() - 3 : -1);
                                            var pIndex = (this.previous != null ? this.previous.getDuration().getIndex() - 3 : -1);
                                            var pathInitialized = false;
                                            if (joinedType === TGVoiceImpl.JOINED_TYPE_NONE_RIGHT) {
                                                hX1 = hX;
                                                hX2 = this.getPosX() + spacing + (6.0 * scale);
                                            }
                                            else if (joinedType === TGVoiceImpl.JOINED_TYPE_NONE_LEFT) {
                                                hX1 = this.getPosX() + spacing - (5.0 * scale);
                                                hX2 = hX;
                                            }
                                            else {
                                                hX1 = this.getJoin1().getPosX() + this.getJoin1().getBeatImpl().getSpacing(layout);
                                                hX2 = this.getJoin2().getPosX() + this.getJoin2().getBeatImpl().getSpacing(layout);
                                            }
                                            for (var i = 0; i <= index; i++) {
                                                currHX1 = hX1;
                                                currHX2 = hX2;
                                                if (this.previous != null && this.previous.getJoin2() != null && (function (o1, o2) { if (o1.equals) {
                                                    return o1.equals(o2);
                                                }
                                                else {
                                                    return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                                } })(this.previous.getJoin2(), this)) {
                                                    if ((this.getJoin1() != null && (function (o1, o2) { if (o1.equals) {
                                                        return o1.equals(o2);
                                                    }
                                                    else {
                                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                                    } })(this.getJoin1(), this.previous)) || i <= pIndex) {
                                                        currHX1 = hX;
                                                    }
                                                }
                                                if (this.next != null && this.next.getJoin1() != null && (function (o1, o2) { if (o1.equals) {
                                                    return o1.equals(o2);
                                                }
                                                else {
                                                    return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                                } })(this.next.getJoin1(), this)) {
                                                    if ((this.getJoin1() == null || !(function (o1, o2) { if (o1.equals) {
                                                        return o1.equals(o2);
                                                    }
                                                    else {
                                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                                    } })(this.getJoin2(), this.next)) && i <= nIndex) {
                                                        currHX2 = hX;
                                                    }
                                                }
                                                if (currHX1 !== currHX2) {
                                                    if (!pathInitialized) {
                                                        pathInitialized = true;
                                                        painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                                                    }
                                                    hY1 = fromY + this.group.getY2(layout, currHX1, key, clef);
                                                    hY2 = fromY + this.group.getY2(layout, currHX2, key, clef);
                                                    painter.moveTo(fromX + xMove + currHX1 - (0.5 * scale), hY1 - ((i * ((hLineWidth * 2.0) + hLineMargin)) * dir) - hLineWidth);
                                                    painter.lineTo(fromX + xMove + currHX1 - (0.5 * scale), hY1 - ((i * ((hLineWidth * 2.0) + hLineMargin)) * dir) + hLineWidth);
                                                    painter.lineTo(fromX + xMove + currHX2 + (0.5 * scale), hY2 - ((i * ((hLineWidth * 2.0) + hLineMargin)) * dir) + hLineWidth);
                                                    painter.lineTo(fromX + xMove + currHX2 + (0.5 * scale), hY2 - ((i * ((hLineWidth * 2.0) + hLineMargin)) * dir) - hLineWidth);
                                                    painter.lineTo(fromX + xMove + currHX1 - (0.5 * scale), hY1 - ((i * ((hLineWidth * 2.0) + hLineMargin)) * dir) - hLineWidth);
                                                }
                                            }
                                            if (pathInitialized) {
                                                painter.closePath();
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        TGVoiceImpl.prototype.paintDot = function (layout, painter, fromX, fromY, scale) {
                            var dotSize = (3.0 * scale);
                            var posX = fromX;
                            var posY = fromY;
                            layout.setDotStyle(painter);
                            painter.setLineWidth(layout.getLineWidth(0));
                            painter['initPath$int'](org.herac.tuxguitar.graphics.TGPainter.PATH_FILL);
                            painter.moveTo(posX, posY);
                            painter.addCircle(posX, posY, dotSize);
                            if (this.getDuration().isDoubleDotted()) {
                                painter.moveTo(posX + (dotSize + (2.0 * scale)), posY);
                                painter.addCircle(posX + (dotSize + (2.0 * scale)), posY, dotSize);
                            }
                            painter.closePath();
                        };
                        TGVoiceImpl.prototype.getPaintPosition = function (index) {
                            return this.getMeasureImpl().getTs().getPosition(index);
                        };
                        TGVoiceImpl.prototype.getMaxString = function () {
                            return this.maxString;
                        };
                        TGVoiceImpl.prototype.getMinString = function () {
                            return this.minString;
                        };
                        TGVoiceImpl.prototype.getMaxY = function () {
                            return this.maxY;
                        };
                        TGVoiceImpl.prototype.getMinY = function () {
                            return this.minY;
                        };
                        TGVoiceImpl.prototype.isHiddenSilence = function () {
                            return this.hiddenSilence;
                        };
                        TGVoiceImpl.prototype.setHiddenSilence = function (hiddenSilence) {
                            this.hiddenSilence = hiddenSilence;
                        };
                        return TGVoiceImpl;
                    }(org.herac.tuxguitar.song.models.TGVoice));
                    /**
                     * desviacion a la izquierda
                     */
                    TGVoiceImpl.JOINED_TYPE_NONE_LEFT = 1;
                    /**
                     * desviacion a la derecha
                     */
                    TGVoiceImpl.JOINED_TYPE_NONE_RIGHT = 2;
                    /**
                     * Union a la izquierda
                     */
                    TGVoiceImpl.JOINED_TYPE_LEFT = 3;
                    /**
                     * Union a la derecha
                     */
                    TGVoiceImpl.JOINED_TYPE_RIGHT = 4;
                    control.TGVoiceImpl = TGVoiceImpl;
                    TGVoiceImpl["__class"] = "org.herac.tuxguitar.graphics.control.TGVoiceImpl";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var action;
            (function (action) {
                var TGActionContext = (function (_super) {
                    __extends(TGActionContext, _super);
                    function TGActionContext() {
                        return _super.call(this) || this;
                    }
                    return TGActionContext;
                }(org.herac.tuxguitar.util.TGAbstractContext));
                action.TGActionContext = TGActionContext;
                TGActionContext["__class"] = "org.herac.tuxguitar.action.TGActionContext";
            })(action = tuxguitar.action || (tuxguitar.action = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var event;
            (function (event) {
                var TGEvent = (function (_super) {
                    __extends(TGEvent, _super);
                    function TGEvent(eventType, sourceContext) {
                        var _this = this;
                        if (((typeof eventType === 'string') || eventType === null) && ((sourceContext != null && sourceContext instanceof org.herac.tuxguitar.util.TGAbstractContext) || sourceContext === null)) {
                            var __args = Array.prototype.slice.call(arguments);
                            _this = _super.call(this) || this;
                            _this.eventType = null;
                            _this.eventType = null;
                            (function () {
                                _this.eventType = eventType;
                                _this.setAttribute(TGEvent.ATTRIBUTE_SOURCE_CONTEXT, sourceContext);
                            })();
                        }
                        else if (((typeof eventType === 'string') || eventType === null) && sourceContext === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            {
                                var __args_16 = Array.prototype.slice.call(arguments);
                                var sourceContext_1 = null;
                                _this = _super.call(this) || this;
                                _this.eventType = null;
                                _this.eventType = null;
                                (function () {
                                    _this.eventType = eventType;
                                    _this.setAttribute(TGEvent.ATTRIBUTE_SOURCE_CONTEXT, sourceContext_1);
                                })();
                            }
                        }
                        else
                            throw new Error('invalid overload');
                        return _this;
                    }
                    TGEvent.prototype.getEventType = function () {
                        return this.eventType;
                    };
                    return TGEvent;
                }(org.herac.tuxguitar.util.TGAbstractContext));
                TGEvent.ATTRIBUTE_SOURCE_CONTEXT = "sourceContext";
                event.TGEvent = TGEvent;
                TGEvent["__class"] = "org.herac.tuxguitar.event.TGEvent";
            })(event = tuxguitar.event || (tuxguitar.event = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var base;
                (function (base) {
                    var TGSongStreamContext = (function (_super) {
                        __extends(TGSongStreamContext, _super);
                        function TGSongStreamContext() {
                            return _super.call(this) || this;
                        }
                        return TGSongStreamContext;
                    }(org.herac.tuxguitar.util.TGAbstractContext));
                    base.TGSongStreamContext = TGSongStreamContext;
                    TGSongStreamContext["__class"] = "org.herac.tuxguitar.io.base.TGSongStreamContext";
                })(base = io.base || (io.base = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var TGContext = (function (_super) {
                    __extends(TGContext, _super);
                    function TGContext() {
                        return _super.call(this) || this;
                    }
                    return TGContext;
                }(org.herac.tuxguitar.util.TGAbstractContext));
                util.TGContext = TGContext;
                TGContext["__class"] = "org.herac.tuxguitar.util.TGContext";
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var exception;
                (function (exception) {
                    var TGWebRuntimeException = (function (_super) {
                        __extends(TGWebRuntimeException, _super);
                        function TGWebRuntimeException(message, cause) {
                            var _this = this;
                            if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this, message, cause) || this;
                            }
                            else if (((typeof message === 'string') || message === null) && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this, message) || this;
                            }
                            else if (((message != null && message instanceof Error) || message === null) && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                var cause_3 = __args[0];
                                _this = _super.call(this, cause_3.message, cause_3) || this;
                            }
                            else if (message === undefined && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this) || this;
                            }
                            else
                                throw new Error('invalid overload');
                            return _this;
                        }
                        return TGWebRuntimeException;
                    }(org.herac.tuxguitar.util.TGException));
                    TGWebRuntimeException.serialVersionUID = 7678108131867164344;
                    exception.TGWebRuntimeException = TGWebRuntimeException;
                    TGWebRuntimeException["__class"] = "org.herac.tg.webapp.exception.TGWebRuntimeException";
                    TGWebRuntimeException["__interfaces"] = ["java.io.Serializable"];
                })(exception = webapp.exception || (webapp.exception = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var action;
            (function (action) {
                var TGActionException = (function (_super) {
                    __extends(TGActionException, _super);
                    function TGActionException(message, cause) {
                        var _this = this;
                        if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {
                            var __args = Array.prototype.slice.call(arguments);
                            _this = _super.call(this, message, cause) || this;
                        }
                        else if (((typeof message === 'string') || message === null) && cause === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            _this = _super.call(this, message) || this;
                        }
                        else if (((message != null && message instanceof Error) || message === null) && cause === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            var cause_4 = __args[0];
                            _this = _super.call(this, cause_4) || this;
                        }
                        else
                            throw new Error('invalid overload');
                        return _this;
                    }
                    return TGActionException;
                }(org.herac.tuxguitar.util.TGException));
                TGActionException.serialVersionUID = 8298443126251976034;
                action.TGActionException = TGActionException;
                TGActionException["__class"] = "org.herac.tuxguitar.action.TGActionException";
                TGActionException["__interfaces"] = ["java.io.Serializable"];
            })(action = tuxguitar.action || (tuxguitar.action = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var event;
            (function (event) {
                var TGEventException = (function (_super) {
                    __extends(TGEventException, _super);
                    function TGEventException(message, cause) {
                        var _this = this;
                        if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {
                            var __args = Array.prototype.slice.call(arguments);
                            _this = _super.call(this, message, cause) || this;
                        }
                        else if (((typeof message === 'string') || message === null) && cause === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            _this = _super.call(this, message) || this;
                        }
                        else if (((message != null && message instanceof Error) || message === null) && cause === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            var cause_5 = __args[0];
                            _this = _super.call(this, cause_5) || this;
                        }
                        else
                            throw new Error('invalid overload');
                        return _this;
                    }
                    return TGEventException;
                }(org.herac.tuxguitar.util.TGException));
                TGEventException.serialVersionUID = 658339308041498112;
                event.TGEventException = TGEventException;
                TGEventException["__class"] = "org.herac.tuxguitar.event.TGEventException";
                TGEventException["__interfaces"] = ["java.io.Serializable"];
            })(event = tuxguitar.event || (tuxguitar.event = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var base;
                (function (base) {
                    var TGFileFormatException = (function (_super) {
                        __extends(TGFileFormatException, _super);
                        function TGFileFormatException(message, cause) {
                            var _this = this;
                            if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this, message, cause) || this;
                            }
                            else if (((typeof message === 'string') || message === null) && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this, message) || this;
                            }
                            else if (((message != null && message instanceof Error) || message === null) && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                var cause_6 = __args[0];
                                _this = _super.call(this, cause_6) || this;
                            }
                            else if (message === undefined && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this) || this;
                            }
                            else
                                throw new Error('invalid overload');
                            return _this;
                        }
                        return TGFileFormatException;
                    }(org.herac.tuxguitar.util.TGException));
                    TGFileFormatException.serialVersionUID = 1;
                    base.TGFileFormatException = TGFileFormatException;
                    TGFileFormatException["__class"] = "org.herac.tuxguitar.io.base.TGFileFormatException";
                    TGFileFormatException["__interfaces"] = ["java.io.Serializable"];
                })(base = io.base || (io.base = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var resource;
            (function (resource) {
                var TGResourceException = (function (_super) {
                    __extends(TGResourceException, _super);
                    function TGResourceException(message, cause) {
                        var _this = this;
                        if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {
                            var __args = Array.prototype.slice.call(arguments);
                            _this = _super.call(this, message, cause) || this;
                        }
                        else if (((typeof message === 'string') || message === null) && cause === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            _this = _super.call(this, message) || this;
                        }
                        else if (((message != null && message instanceof Error) || message === null) && cause === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            var cause_7 = __args[0];
                            _this = _super.call(this, cause_7) || this;
                        }
                        else if (message === undefined && cause === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            _this = _super.call(this) || this;
                        }
                        else
                            throw new Error('invalid overload');
                        return _this;
                    }
                    return TGResourceException;
                }(org.herac.tuxguitar.util.TGException));
                TGResourceException.serialVersionUID = -7010825375252091761;
                resource.TGResourceException = TGResourceException;
                TGResourceException["__class"] = "org.herac.tuxguitar.resource.TGResourceException";
                TGResourceException["__interfaces"] = ["java.io.Serializable"];
            })(resource = tuxguitar.resource || (tuxguitar.resource = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var plugin;
                (function (plugin) {
                    var TGPluginException = (function (_super) {
                        __extends(TGPluginException, _super);
                        function TGPluginException(message, cause) {
                            var _this = this;
                            if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this, message, cause) || this;
                            }
                            else if (((typeof message === 'string') || message === null) && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this, message) || this;
                            }
                            else if (((message != null && message instanceof Error) || message === null) && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                var cause_8 = __args[0];
                                _this = _super.call(this, cause_8) || this;
                            }
                            else if (message === undefined && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this) || this;
                            }
                            else
                                throw new Error('invalid overload');
                            return _this;
                        }
                        return TGPluginException;
                    }(org.herac.tuxguitar.util.TGException));
                    TGPluginException.serialVersionUID = 1;
                    plugin.TGPluginException = TGPluginException;
                    TGPluginException["__class"] = "org.herac.tuxguitar.util.plugin.TGPluginException";
                    TGPluginException["__interfaces"] = ["java.io.Serializable"];
                })(plugin = util.plugin || (util.plugin = {}));
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var util;
            (function (util) {
                var properties;
                (function (properties) {
                    var TGPropertiesException = (function (_super) {
                        __extends(TGPropertiesException, _super);
                        function TGPropertiesException(message, cause) {
                            var _this = this;
                            if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this, message, cause) || this;
                            }
                            else if (((typeof message === 'string') || message === null) && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this, message) || this;
                            }
                            else if (((message != null && message instanceof Error) || message === null) && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                var cause_9 = __args[0];
                                _this = _super.call(this, cause_9) || this;
                            }
                            else
                                throw new Error('invalid overload');
                            return _this;
                        }
                        return TGPropertiesException;
                    }(org.herac.tuxguitar.util.TGException));
                    TGPropertiesException.serialVersionUID = 8298443126251976034;
                    properties.TGPropertiesException = TGPropertiesException;
                    TGPropertiesException["__class"] = "org.herac.tuxguitar.util.properties.TGPropertiesException";
                    TGPropertiesException["__interfaces"] = ["java.io.Serializable"];
                })(properties = util.properties || (util.properties = {}));
            })(util = tuxguitar.util || (tuxguitar.util = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var dev;
                    (function (dev) {
                        var TGStream = (function () {
                            function TGStream() {
                            }
                            TGStream.TG_FORMAT_NAME_$LI$ = function () { if (TGStream.TG_FORMAT_NAME == null)
                                TGStream.TG_FORMAT_NAME = ("TuxGuitar File Format"); return TGStream.TG_FORMAT_NAME; };
                            ;
                            TGStream.TG_FORMAT_VERSION_$LI$ = function () { if (TGStream.TG_FORMAT_VERSION == null)
                                TGStream.TG_FORMAT_VERSION = (TGStream.TG_FORMAT_NAME_$LI$() + " - " + new org.herac.tuxguitar.util.TGVersion(1, 2, 20111001).getVersion()); return TGStream.TG_FORMAT_VERSION; };
                            ;
                            TGStream.TG_FORMAT_CODE_$LI$ = function () { if (TGStream.TG_FORMAT_CODE == null)
                                TGStream.TG_FORMAT_CODE = ("tg"); return TGStream.TG_FORMAT_CODE; };
                            ;
                            TGStream.TG_FORMAT_$LI$ = function () { if (TGStream.TG_FORMAT == null)
                                TGStream.TG_FORMAT = new org.herac.tuxguitar.io.base.TGFileFormat("TuxGuitar", "audio/x-tuxguitar", [TGStream.TG_FORMAT_CODE_$LI$()]); return TGStream.TG_FORMAT; };
                            ;
                            return TGStream;
                        }());
                        TGStream.TRACK_SOLO = 1;
                        TGStream.TRACK_MUTE = 2;
                        TGStream.TRACK_LYRICS = 4;
                        TGStream.MEASURE_HEADER_TIMESIGNATURE = 1;
                        TGStream.MEASURE_HEADER_TEMPO = 2;
                        TGStream.MEASURE_HEADER_REPEAT_OPEN = 4;
                        TGStream.MEASURE_HEADER_REPEAT_CLOSE = 8;
                        TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE = 16;
                        TGStream.MEASURE_HEADER_MARKER = 32;
                        TGStream.MEASURE_HEADER_TRIPLET_FEEL = 64;
                        TGStream.MEASURE_CLEF = 1;
                        TGStream.MEASURE_KEYSIGNATURE = 2;
                        TGStream.BEAT_HAS_NEXT = 1;
                        TGStream.BEAT_HAS_STROKE = 2;
                        TGStream.BEAT_HAS_CHORD = 4;
                        TGStream.BEAT_HAS_TEXT = 8;
                        TGStream.BEAT_HAS_VOICE = 16;
                        TGStream.BEAT_HAS_VOICE_CHANGES = 32;
                        TGStream.VOICE_HAS_NOTES = 1;
                        TGStream.VOICE_NEXT_DURATION = 2;
                        TGStream.VOICE_DIRECTION_UP = 4;
                        TGStream.VOICE_DIRECTION_DOWN = 8;
                        TGStream.NOTE_HAS_NEXT = 1;
                        TGStream.NOTE_TIED = 2;
                        TGStream.NOTE_EFFECT = 4;
                        TGStream.NOTE_VELOCITY = 8;
                        TGStream.DURATION_DOTTED = 1;
                        TGStream.DURATION_DOUBLE_DOTTED = 2;
                        TGStream.DURATION_NO_TUPLET = 4;
                        TGStream.EFFECT_BEND = 1;
                        TGStream.EFFECT_TREMOLO_BAR = 2;
                        TGStream.EFFECT_HARMONIC = 4;
                        TGStream.EFFECT_GRACE = 8;
                        TGStream.EFFECT_TRILL = 16;
                        TGStream.EFFECT_TREMOLO_PICKING = 32;
                        TGStream.EFFECT_VIBRATO = 64;
                        TGStream.EFFECT_DEAD = 128;
                        TGStream.EFFECT_SLIDE = 256;
                        TGStream.EFFECT_HAMMER = 512;
                        TGStream.EFFECT_GHOST = 1024;
                        TGStream.EFFECT_ACCENTUATED = 2048;
                        TGStream.EFFECT_HEAVY_ACCENTUATED = 4096;
                        TGStream.EFFECT_PALM_MUTE = 8192;
                        TGStream.EFFECT_STACCATO = 16384;
                        TGStream.EFFECT_TAPPING = 32768;
                        TGStream.EFFECT_SLAPPING = 65536;
                        TGStream.EFFECT_POPPING = 131072;
                        TGStream.EFFECT_FADE_IN = 262144;
                        TGStream.EFFECT_LET_RING = 524288;
                        TGStream.GRACE_FLAG_DEAD = 1;
                        TGStream.GRACE_FLAG_ON_BEAT = 2;
                        dev.TGStream = TGStream;
                        TGStream["__class"] = "org.herac.tuxguitar.io.tg.dev.TGStream";
                        (function (TGStream) {
                            var TGBeatData = (function () {
                                function TGBeatData(__parent, measure) {
                                    this.__parent = __parent;
                                    this.currentStart = 0;
                                    this.voices = null;
                                    this.init(measure);
                                }
                                TGBeatData.prototype.init = function (measure) {
                                    this.currentStart = measure.getStart();
                                    this.voices = new Array(org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES);
                                    for (var i = 0; i < this.voices.length; i++) {
                                        this.voices[i] = new TGStream.TGVoiceData(this.__parent, measure);
                                    }
                                };
                                TGBeatData.prototype.getVoice = function (index) {
                                    return this.voices[index];
                                };
                                TGBeatData.prototype.getCurrentStart = function () {
                                    var minimumStart = -1;
                                    for (var i = 0; i < this.voices.length; i++) {
                                        if (this.voices[i].getStart() > this.currentStart) {
                                            if (minimumStart < 0 || this.voices[i].getStart() < minimumStart) {
                                                minimumStart = this.voices[i].getStart();
                                            }
                                        }
                                    }
                                    if (minimumStart > this.currentStart) {
                                        this.currentStart = minimumStart;
                                    }
                                    return this.currentStart;
                                };
                                return TGBeatData;
                            }());
                            TGStream.TGBeatData = TGBeatData;
                            TGBeatData["__class"] = "org.herac.tuxguitar.io.tg.dev.TGStream.TGBeatData";
                            var TGVoiceData = (function () {
                                function TGVoiceData(__parent, measure) {
                                    this.__parent = __parent;
                                    this.start = 0;
                                    this.velocity = 0;
                                    this.flags = 0;
                                    this.duration = null;
                                    this.init(measure);
                                }
                                TGVoiceData.prototype.init = function (measure) {
                                    this.flags = 0;
                                    this.setStart(measure.getStart());
                                    this.setVelocity(org.herac.tuxguitar.song.models.TGVelocities.DEFAULT_$LI$());
                                    this.setDuration(new org.herac.tuxguitar.song.factory.TGFactory().newDuration());
                                };
                                TGVoiceData.prototype.getDuration = function () {
                                    return this.duration;
                                };
                                TGVoiceData.prototype.setDuration = function (duration) {
                                    this.duration = duration;
                                };
                                TGVoiceData.prototype.getStart = function () {
                                    return this.start;
                                };
                                TGVoiceData.prototype.setStart = function (start) {
                                    this.start = start;
                                };
                                TGVoiceData.prototype.getVelocity = function () {
                                    return this.velocity;
                                };
                                TGVoiceData.prototype.setVelocity = function (velocity) {
                                    this.velocity = velocity;
                                };
                                TGVoiceData.prototype.getFlags = function () {
                                    return this.flags;
                                };
                                TGVoiceData.prototype.setFlags = function (flags) {
                                    this.flags = flags;
                                };
                                return TGVoiceData;
                            }());
                            TGStream.TGVoiceData = TGVoiceData;
                            TGVoiceData["__class"] = "org.herac.tuxguitar.io.tg.dev.TGStream.TGVoiceData";
                        })(TGStream = dev.TGStream || (dev.TGStream = {}));
                    })(dev = tg.dev || (tg.dev = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v10;
                    (function (v10) {
                        var TGStream = (function () {
                            function TGStream() {
                            }
                            TGStream.TG_FORMAT_NAME_$LI$ = function () { if (TGStream.TG_FORMAT_NAME == null)
                                TGStream.TG_FORMAT_NAME = ("TuxGuitar File Format"); return TGStream.TG_FORMAT_NAME; };
                            ;
                            TGStream.TG_FORMAT_VERSION_$LI$ = function () { if (TGStream.TG_FORMAT_VERSION == null)
                                TGStream.TG_FORMAT_VERSION = (TGStream.TG_FORMAT_NAME_$LI$() + " - " + new org.herac.tuxguitar.util.TGVersion(1, 0, 0).getVersion()); return TGStream.TG_FORMAT_VERSION; };
                            ;
                            TGStream.TG_FORMAT_EXTENSION_$LI$ = function () { if (TGStream.TG_FORMAT_EXTENSION == null)
                                TGStream.TG_FORMAT_EXTENSION = (".tg"); return TGStream.TG_FORMAT_EXTENSION; };
                            ;
                            TGStream.TG_FORMAT_$LI$ = function () { if (TGStream.TG_FORMAT == null)
                                TGStream.TG_FORMAT = new org.herac.tuxguitar.io.base.TGFileFormat("TuxGuitar 1.0", "audio/x-tuxguitar", ["tg"]); return TGStream.TG_FORMAT; };
                            ;
                            TGStream.prototype.getFileFormat = function () {
                                return TGStream.TG_FORMAT_$LI$();
                            };
                            return TGStream;
                        }());
                        TGStream.TRACK_LYRICS = 1;
                        TGStream.CHANNEL_SOLO = 1;
                        TGStream.CHANNEL_MUTE = 2;
                        TGStream.MEASURE_HEADER_TIMESIGNATURE = 1;
                        TGStream.MEASURE_HEADER_TEMPO = 2;
                        TGStream.MEASURE_HEADER_REPEAT_OPEN = 4;
                        TGStream.MEASURE_HEADER_REPEAT_CLOSE = 8;
                        TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE = 16;
                        TGStream.MEASURE_HEADER_MARKER = 32;
                        TGStream.MEASURE_HEADER_TRIPLET_FEEL = 64;
                        TGStream.MEASURE_CLEF = 1;
                        TGStream.MEASURE_KEYSIGNATURE = 2;
                        TGStream.BEAT_HAS_NEXT = 1;
                        TGStream.BEAT_NEXT_DURATION = 2;
                        TGStream.BEAT_HAS_NOTES = 4;
                        TGStream.BEAT_HAS_CHORD = 8;
                        TGStream.BEAT_HAS_TEXT = 16;
                        TGStream.NOTE_HAS_NEXT = 1;
                        TGStream.NOTE_TIED = 2;
                        TGStream.NOTE_EFFECT = 4;
                        TGStream.NOTE_VELOCITY = 8;
                        TGStream.DURATION_DOTTED = 1;
                        TGStream.DURATION_DOUBLE_DOTTED = 2;
                        TGStream.DURATION_NO_TUPLET = 4;
                        TGStream.EFFECT_BEND = 1;
                        TGStream.EFFECT_TREMOLO_BAR = 2;
                        TGStream.EFFECT_HARMONIC = 4;
                        TGStream.EFFECT_GRACE = 8;
                        TGStream.EFFECT_TRILL = 16;
                        TGStream.EFFECT_TREMOLO_PICKING = 32;
                        TGStream.EFFECT_VIBRATO = 64;
                        TGStream.EFFECT_DEAD = 128;
                        TGStream.EFFECT_SLIDE = 256;
                        TGStream.EFFECT_HAMMER = 512;
                        TGStream.EFFECT_GHOST = 1024;
                        TGStream.EFFECT_ACCENTUATED = 2048;
                        TGStream.EFFECT_HEAVY_ACCENTUATED = 4096;
                        TGStream.EFFECT_PALM_MUTE = 8192;
                        TGStream.EFFECT_STACCATO = 16384;
                        TGStream.EFFECT_TAPPING = 32768;
                        TGStream.EFFECT_SLAPPING = 65536;
                        TGStream.EFFECT_POPPING = 131072;
                        TGStream.EFFECT_FADE_IN = 262144;
                        TGStream.GRACE_FLAG_DEAD = 1;
                        TGStream.GRACE_FLAG_ON_BEAT = 2;
                        v10.TGStream = TGStream;
                        TGStream["__class"] = "org.herac.tuxguitar.io.tg.v10.TGStream";
                        (function (TGStream) {
                            var TGBeatData = (function () {
                                function TGBeatData(__parent, measure) {
                                    this.__parent = __parent;
                                    this.start = 0;
                                    this.velocity = 0;
                                    this.duration = null;
                                    this.init(measure);
                                }
                                TGBeatData.prototype.init = function (measure) {
                                    this.setStart(measure.getStart());
                                    this.setVelocity(org.herac.tuxguitar.song.models.TGVelocities.DEFAULT_$LI$());
                                    this.setDuration(new org.herac.tuxguitar.song.factory.TGFactory().newDuration());
                                };
                                TGBeatData.prototype.getDuration = function () {
                                    return this.duration;
                                };
                                TGBeatData.prototype.setDuration = function (duration) {
                                    this.duration = duration;
                                };
                                TGBeatData.prototype.getStart = function () {
                                    return this.start;
                                };
                                TGBeatData.prototype.setStart = function (start) {
                                    this.start = start;
                                };
                                TGBeatData.prototype.getVelocity = function () {
                                    return this.velocity;
                                };
                                TGBeatData.prototype.setVelocity = function (velocity) {
                                    this.velocity = velocity;
                                };
                                return TGBeatData;
                            }());
                            TGStream.TGBeatData = TGBeatData;
                            TGBeatData["__class"] = "org.herac.tuxguitar.io.tg.v10.TGStream.TGBeatData";
                        })(TGStream = v10.TGStream || (v10.TGStream = {}));
                    })(v10 = tg.v10 || (tg.v10 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v11;
                    (function (v11) {
                        var TGStream = (function () {
                            function TGStream() {
                            }
                            TGStream.TG_FORMAT_NAME_$LI$ = function () { if (TGStream.TG_FORMAT_NAME == null)
                                TGStream.TG_FORMAT_NAME = ("TuxGuitar File Format"); return TGStream.TG_FORMAT_NAME; };
                            ;
                            TGStream.TG_FORMAT_VERSION_$LI$ = function () { if (TGStream.TG_FORMAT_VERSION == null)
                                TGStream.TG_FORMAT_VERSION = (TGStream.TG_FORMAT_NAME_$LI$() + " - " + new org.herac.tuxguitar.util.TGVersion(1, 1, 0).getVersion()); return TGStream.TG_FORMAT_VERSION; };
                            ;
                            TGStream.TG_FORMAT_EXTENSION_$LI$ = function () { if (TGStream.TG_FORMAT_EXTENSION == null)
                                TGStream.TG_FORMAT_EXTENSION = (".tg"); return TGStream.TG_FORMAT_EXTENSION; };
                            ;
                            TGStream.TG_FORMAT_$LI$ = function () { if (TGStream.TG_FORMAT == null)
                                TGStream.TG_FORMAT = new org.herac.tuxguitar.io.base.TGFileFormat("TuxGuitar 1.1", "audio/x-tuxguitar", ["tg"]); return TGStream.TG_FORMAT; };
                            ;
                            TGStream.prototype.getFileFormat = function () {
                                return TGStream.TG_FORMAT_$LI$();
                            };
                            return TGStream;
                        }());
                        TGStream.TRACK_SOLO = 1;
                        TGStream.TRACK_MUTE = 2;
                        TGStream.TRACK_LYRICS = 4;
                        TGStream.MEASURE_HEADER_TIMESIGNATURE = 1;
                        TGStream.MEASURE_HEADER_TEMPO = 2;
                        TGStream.MEASURE_HEADER_REPEAT_OPEN = 4;
                        TGStream.MEASURE_HEADER_REPEAT_CLOSE = 8;
                        TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE = 16;
                        TGStream.MEASURE_HEADER_MARKER = 32;
                        TGStream.MEASURE_HEADER_TRIPLET_FEEL = 64;
                        TGStream.MEASURE_CLEF = 1;
                        TGStream.MEASURE_KEYSIGNATURE = 2;
                        TGStream.BEAT_HAS_NEXT = 1;
                        TGStream.BEAT_HAS_STROKE = 2;
                        TGStream.BEAT_HAS_CHORD = 4;
                        TGStream.BEAT_HAS_TEXT = 8;
                        TGStream.BEAT_HAS_VOICE = 16;
                        TGStream.BEAT_HAS_VOICE_CHANGES = 32;
                        TGStream.VOICE_HAS_NOTES = 1;
                        TGStream.VOICE_NEXT_DURATION = 2;
                        TGStream.VOICE_DIRECTION_UP = 4;
                        TGStream.VOICE_DIRECTION_DOWN = 8;
                        TGStream.NOTE_HAS_NEXT = 1;
                        TGStream.NOTE_TIED = 2;
                        TGStream.NOTE_EFFECT = 4;
                        TGStream.NOTE_VELOCITY = 8;
                        TGStream.DURATION_DOTTED = 1;
                        TGStream.DURATION_DOUBLE_DOTTED = 2;
                        TGStream.DURATION_NO_TUPLET = 4;
                        TGStream.EFFECT_BEND = 1;
                        TGStream.EFFECT_TREMOLO_BAR = 2;
                        TGStream.EFFECT_HARMONIC = 4;
                        TGStream.EFFECT_GRACE = 8;
                        TGStream.EFFECT_TRILL = 16;
                        TGStream.EFFECT_TREMOLO_PICKING = 32;
                        TGStream.EFFECT_VIBRATO = 64;
                        TGStream.EFFECT_DEAD = 128;
                        TGStream.EFFECT_SLIDE = 256;
                        TGStream.EFFECT_HAMMER = 512;
                        TGStream.EFFECT_GHOST = 1024;
                        TGStream.EFFECT_ACCENTUATED = 2048;
                        TGStream.EFFECT_HEAVY_ACCENTUATED = 4096;
                        TGStream.EFFECT_PALM_MUTE = 8192;
                        TGStream.EFFECT_STACCATO = 16384;
                        TGStream.EFFECT_TAPPING = 32768;
                        TGStream.EFFECT_SLAPPING = 65536;
                        TGStream.EFFECT_POPPING = 131072;
                        TGStream.EFFECT_FADE_IN = 262144;
                        TGStream.GRACE_FLAG_DEAD = 1;
                        TGStream.GRACE_FLAG_ON_BEAT = 2;
                        v11.TGStream = TGStream;
                        TGStream["__class"] = "org.herac.tuxguitar.io.tg.v11.TGStream";
                        (function (TGStream) {
                            var TGBeatData = (function () {
                                function TGBeatData(__parent, measure) {
                                    this.__parent = __parent;
                                    this.currentStart = 0;
                                    this.voices = null;
                                    this.init(measure);
                                }
                                TGBeatData.prototype.init = function (measure) {
                                    this.currentStart = measure.getStart();
                                    this.voices = new Array(org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES);
                                    for (var i = 0; i < this.voices.length; i++) {
                                        this.voices[i] = new TGStream.TGVoiceData(this.__parent, measure);
                                    }
                                };
                                TGBeatData.prototype.getVoice = function (index) {
                                    return this.voices[index];
                                };
                                TGBeatData.prototype.getCurrentStart = function () {
                                    var minimumStart = -1;
                                    for (var i = 0; i < this.voices.length; i++) {
                                        if (this.voices[i].getStart() > this.currentStart) {
                                            if (minimumStart < 0 || this.voices[i].getStart() < minimumStart) {
                                                minimumStart = this.voices[i].getStart();
                                            }
                                        }
                                    }
                                    if (minimumStart > this.currentStart) {
                                        this.currentStart = minimumStart;
                                    }
                                    return this.currentStart;
                                };
                                return TGBeatData;
                            }());
                            TGStream.TGBeatData = TGBeatData;
                            TGBeatData["__class"] = "org.herac.tuxguitar.io.tg.v11.TGStream.TGBeatData";
                            var TGVoiceData = (function () {
                                function TGVoiceData(__parent, measure) {
                                    this.__parent = __parent;
                                    this.start = 0;
                                    this.velocity = 0;
                                    this.flags = 0;
                                    this.duration = null;
                                    this.init(measure);
                                }
                                TGVoiceData.prototype.init = function (measure) {
                                    this.flags = 0;
                                    this.setStart(measure.getStart());
                                    this.setVelocity(org.herac.tuxguitar.song.models.TGVelocities.DEFAULT_$LI$());
                                    this.setDuration(new org.herac.tuxguitar.song.factory.TGFactory().newDuration());
                                };
                                TGVoiceData.prototype.getDuration = function () {
                                    return this.duration;
                                };
                                TGVoiceData.prototype.setDuration = function (duration) {
                                    this.duration = duration;
                                };
                                TGVoiceData.prototype.getStart = function () {
                                    return this.start;
                                };
                                TGVoiceData.prototype.setStart = function (start) {
                                    this.start = start;
                                };
                                TGVoiceData.prototype.getVelocity = function () {
                                    return this.velocity;
                                };
                                TGVoiceData.prototype.setVelocity = function (velocity) {
                                    this.velocity = velocity;
                                };
                                TGVoiceData.prototype.getFlags = function () {
                                    return this.flags;
                                };
                                TGVoiceData.prototype.setFlags = function (flags) {
                                    this.flags = flags;
                                };
                                return TGVoiceData;
                            }());
                            TGStream.TGVoiceData = TGVoiceData;
                            TGVoiceData["__class"] = "org.herac.tuxguitar.io.tg.v11.TGStream.TGVoiceData";
                        })(TGStream = v11.TGStream || (v11.TGStream = {}));
                    })(v11 = tg.v11 || (tg.v11 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v12;
                    (function (v12) {
                        var TGStream = (function () {
                            function TGStream() {
                            }
                            TGStream.TG_FORMAT_NAME_$LI$ = function () { if (TGStream.TG_FORMAT_NAME == null)
                                TGStream.TG_FORMAT_NAME = ("TuxGuitar File Format"); return TGStream.TG_FORMAT_NAME; };
                            ;
                            TGStream.TG_FORMAT_VERSION_$LI$ = function () { if (TGStream.TG_FORMAT_VERSION == null)
                                TGStream.TG_FORMAT_VERSION = (TGStream.TG_FORMAT_NAME_$LI$() + " - " + new org.herac.tuxguitar.util.TGVersion(1, 2, 0).getVersion()); return TGStream.TG_FORMAT_VERSION; };
                            ;
                            TGStream.TG_FORMAT_EXTENSION_$LI$ = function () { if (TGStream.TG_FORMAT_EXTENSION == null)
                                TGStream.TG_FORMAT_EXTENSION = (".tg"); return TGStream.TG_FORMAT_EXTENSION; };
                            ;
                            TGStream.TG_FORMAT_$LI$ = function () { if (TGStream.TG_FORMAT == null)
                                TGStream.TG_FORMAT = new org.herac.tuxguitar.io.base.TGFileFormat("TuxGuitar 1.2", "audio/x-tuxguitar", ["tg"]); return TGStream.TG_FORMAT; };
                            ;
                            TGStream.prototype.getFileFormat = function () {
                                return TGStream.TG_FORMAT_$LI$();
                            };
                            return TGStream;
                        }());
                        TGStream.TRACK_SOLO = 1;
                        TGStream.TRACK_MUTE = 2;
                        TGStream.TRACK_LYRICS = 4;
                        TGStream.MEASURE_HEADER_TIMESIGNATURE = 1;
                        TGStream.MEASURE_HEADER_TEMPO = 2;
                        TGStream.MEASURE_HEADER_REPEAT_OPEN = 4;
                        TGStream.MEASURE_HEADER_REPEAT_CLOSE = 8;
                        TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE = 16;
                        TGStream.MEASURE_HEADER_MARKER = 32;
                        TGStream.MEASURE_HEADER_TRIPLET_FEEL = 64;
                        TGStream.MEASURE_CLEF = 1;
                        TGStream.MEASURE_KEYSIGNATURE = 2;
                        TGStream.BEAT_HAS_NEXT = 1;
                        TGStream.BEAT_HAS_STROKE = 2;
                        TGStream.BEAT_HAS_CHORD = 4;
                        TGStream.BEAT_HAS_TEXT = 8;
                        TGStream.BEAT_HAS_VOICE = 16;
                        TGStream.BEAT_HAS_VOICE_CHANGES = 32;
                        TGStream.VOICE_HAS_NOTES = 1;
                        TGStream.VOICE_NEXT_DURATION = 2;
                        TGStream.VOICE_DIRECTION_UP = 4;
                        TGStream.VOICE_DIRECTION_DOWN = 8;
                        TGStream.NOTE_HAS_NEXT = 1;
                        TGStream.NOTE_TIED = 2;
                        TGStream.NOTE_EFFECT = 4;
                        TGStream.NOTE_VELOCITY = 8;
                        TGStream.DURATION_DOTTED = 1;
                        TGStream.DURATION_DOUBLE_DOTTED = 2;
                        TGStream.DURATION_NO_TUPLET = 4;
                        TGStream.EFFECT_BEND = 1;
                        TGStream.EFFECT_TREMOLO_BAR = 2;
                        TGStream.EFFECT_HARMONIC = 4;
                        TGStream.EFFECT_GRACE = 8;
                        TGStream.EFFECT_TRILL = 16;
                        TGStream.EFFECT_TREMOLO_PICKING = 32;
                        TGStream.EFFECT_VIBRATO = 64;
                        TGStream.EFFECT_DEAD = 128;
                        TGStream.EFFECT_SLIDE = 256;
                        TGStream.EFFECT_HAMMER = 512;
                        TGStream.EFFECT_GHOST = 1024;
                        TGStream.EFFECT_ACCENTUATED = 2048;
                        TGStream.EFFECT_HEAVY_ACCENTUATED = 4096;
                        TGStream.EFFECT_PALM_MUTE = 8192;
                        TGStream.EFFECT_STACCATO = 16384;
                        TGStream.EFFECT_TAPPING = 32768;
                        TGStream.EFFECT_SLAPPING = 65536;
                        TGStream.EFFECT_POPPING = 131072;
                        TGStream.EFFECT_FADE_IN = 262144;
                        TGStream.EFFECT_LET_RING = 524288;
                        TGStream.GRACE_FLAG_DEAD = 1;
                        TGStream.GRACE_FLAG_ON_BEAT = 2;
                        v12.TGStream = TGStream;
                        TGStream["__class"] = "org.herac.tuxguitar.io.tg.v12.TGStream";
                        (function (TGStream) {
                            var TGBeatData = (function () {
                                function TGBeatData(__parent, measure) {
                                    this.__parent = __parent;
                                    this.currentStart = 0;
                                    this.voices = null;
                                    this.init(measure);
                                }
                                TGBeatData.prototype.init = function (measure) {
                                    this.currentStart = measure.getStart();
                                    this.voices = new Array(org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES);
                                    for (var i = 0; i < this.voices.length; i++) {
                                        this.voices[i] = new TGStream.TGVoiceData(this.__parent, measure);
                                    }
                                };
                                TGBeatData.prototype.getVoice = function (index) {
                                    return this.voices[index];
                                };
                                TGBeatData.prototype.getCurrentStart = function () {
                                    var minimumStart = -1;
                                    for (var i = 0; i < this.voices.length; i++) {
                                        if (this.voices[i].getStart() > this.currentStart) {
                                            if (minimumStart < 0 || this.voices[i].getStart() < minimumStart) {
                                                minimumStart = this.voices[i].getStart();
                                            }
                                        }
                                    }
                                    if (minimumStart > this.currentStart) {
                                        this.currentStart = minimumStart;
                                    }
                                    return this.currentStart;
                                };
                                return TGBeatData;
                            }());
                            TGStream.TGBeatData = TGBeatData;
                            TGBeatData["__class"] = "org.herac.tuxguitar.io.tg.v12.TGStream.TGBeatData";
                            var TGVoiceData = (function () {
                                function TGVoiceData(__parent, measure) {
                                    this.__parent = __parent;
                                    this.start = 0;
                                    this.velocity = 0;
                                    this.flags = 0;
                                    this.duration = null;
                                    this.init(measure);
                                }
                                TGVoiceData.prototype.init = function (measure) {
                                    this.flags = 0;
                                    this.setStart(measure.getStart());
                                    this.setVelocity(org.herac.tuxguitar.song.models.TGVelocities.DEFAULT_$LI$());
                                    this.setDuration(new org.herac.tuxguitar.song.factory.TGFactory().newDuration());
                                };
                                TGVoiceData.prototype.getDuration = function () {
                                    return this.duration;
                                };
                                TGVoiceData.prototype.setDuration = function (duration) {
                                    this.duration = duration;
                                };
                                TGVoiceData.prototype.getStart = function () {
                                    return this.start;
                                };
                                TGVoiceData.prototype.setStart = function (start) {
                                    this.start = start;
                                };
                                TGVoiceData.prototype.getVelocity = function () {
                                    return this.velocity;
                                };
                                TGVoiceData.prototype.setVelocity = function (velocity) {
                                    this.velocity = velocity;
                                };
                                TGVoiceData.prototype.getFlags = function () {
                                    return this.flags;
                                };
                                TGVoiceData.prototype.setFlags = function (flags) {
                                    this.flags = flags;
                                };
                                return TGVoiceData;
                            }());
                            TGStream.TGVoiceData = TGVoiceData;
                            TGVoiceData["__class"] = "org.herac.tuxguitar.io.tg.v12.TGStream.TGVoiceData";
                        })(TGStream = v12.TGStream || (v12.TGStream = {}));
                    })(v12 = tg.v12 || (tg.v12 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var TGStream = (function () {
                        function TGStream() {
                        }
                        TGStream.TG_FORMAT_NAME_$LI$ = function () { if (TGStream.TG_FORMAT_NAME == null)
                            TGStream.TG_FORMAT_NAME = ("TuxGuitar File Format"); return TGStream.TG_FORMAT_NAME; };
                        ;
                        TGStream.TG_FORMAT_VERSION_$LI$ = function () { if (TGStream.TG_FORMAT_VERSION == null)
                            TGStream.TG_FORMAT_VERSION = (TGStream.TG_FORMAT_NAME_$LI$() + " - " + new org.herac.tuxguitar.util.TGVersion(1, 3, 0).getVersion()); return TGStream.TG_FORMAT_VERSION; };
                        ;
                        TGStream.TG_FORMAT_CODE_$LI$ = function () { if (TGStream.TG_FORMAT_CODE == null)
                            TGStream.TG_FORMAT_CODE = ("tg"); return TGStream.TG_FORMAT_CODE; };
                        ;
                        TGStream.TG_FORMAT_$LI$ = function () { if (TGStream.TG_FORMAT == null)
                            TGStream.TG_FORMAT = new org.herac.tuxguitar.io.base.TGFileFormat("TuxGuitar", "audio/x-tuxguitar", [TGStream.TG_FORMAT_CODE_$LI$()]); return TGStream.TG_FORMAT; };
                        ;
                        return TGStream;
                    }());
                    TGStream.TRACK_SOLO = 1;
                    TGStream.TRACK_MUTE = 2;
                    TGStream.TRACK_LYRICS = 4;
                    TGStream.MEASURE_HEADER_TIMESIGNATURE = 1;
                    TGStream.MEASURE_HEADER_TEMPO = 2;
                    TGStream.MEASURE_HEADER_REPEAT_OPEN = 4;
                    TGStream.MEASURE_HEADER_REPEAT_CLOSE = 8;
                    TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE = 16;
                    TGStream.MEASURE_HEADER_MARKER = 32;
                    TGStream.MEASURE_HEADER_TRIPLET_FEEL = 64;
                    TGStream.MEASURE_CLEF = 1;
                    TGStream.MEASURE_KEYSIGNATURE = 2;
                    TGStream.BEAT_HAS_NEXT = 1;
                    TGStream.BEAT_HAS_STROKE = 2;
                    TGStream.BEAT_HAS_CHORD = 4;
                    TGStream.BEAT_HAS_TEXT = 8;
                    TGStream.BEAT_HAS_VOICE = 16;
                    TGStream.BEAT_HAS_VOICE_CHANGES = 32;
                    TGStream.VOICE_HAS_NOTES = 1;
                    TGStream.VOICE_NEXT_DURATION = 2;
                    TGStream.VOICE_DIRECTION_UP = 4;
                    TGStream.VOICE_DIRECTION_DOWN = 8;
                    TGStream.NOTE_HAS_NEXT = 1;
                    TGStream.NOTE_TIED = 2;
                    TGStream.NOTE_EFFECT = 4;
                    TGStream.NOTE_VELOCITY = 8;
                    TGStream.DURATION_DOTTED = 1;
                    TGStream.DURATION_DOUBLE_DOTTED = 2;
                    TGStream.DURATION_NO_TUPLET = 4;
                    TGStream.EFFECT_BEND = 1;
                    TGStream.EFFECT_TREMOLO_BAR = 2;
                    TGStream.EFFECT_HARMONIC = 4;
                    TGStream.EFFECT_GRACE = 8;
                    TGStream.EFFECT_TRILL = 16;
                    TGStream.EFFECT_TREMOLO_PICKING = 32;
                    TGStream.EFFECT_VIBRATO = 64;
                    TGStream.EFFECT_DEAD = 128;
                    TGStream.EFFECT_SLIDE = 256;
                    TGStream.EFFECT_HAMMER = 512;
                    TGStream.EFFECT_GHOST = 1024;
                    TGStream.EFFECT_ACCENTUATED = 2048;
                    TGStream.EFFECT_HEAVY_ACCENTUATED = 4096;
                    TGStream.EFFECT_PALM_MUTE = 8192;
                    TGStream.EFFECT_STACCATO = 16384;
                    TGStream.EFFECT_TAPPING = 32768;
                    TGStream.EFFECT_SLAPPING = 65536;
                    TGStream.EFFECT_POPPING = 131072;
                    TGStream.EFFECT_FADE_IN = 262144;
                    TGStream.EFFECT_LET_RING = 524288;
                    TGStream.GRACE_FLAG_DEAD = 1;
                    TGStream.GRACE_FLAG_ON_BEAT = 2;
                    tg.TGStream = TGStream;
                    TGStream["__class"] = "org.herac.tuxguitar.io.tg.TGStream";
                    (function (TGStream) {
                        var TGBeatData = (function () {
                            function TGBeatData(__parent, measure) {
                                this.__parent = __parent;
                                this.currentStart = 0;
                                this.voices = null;
                                this.init(measure);
                            }
                            TGBeatData.prototype.init = function (measure) {
                                this.currentStart = measure.getStart();
                                this.voices = new Array(org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES);
                                for (var i = 0; i < this.voices.length; i++) {
                                    this.voices[i] = new TGStream.TGVoiceData(this.__parent, measure);
                                }
                            };
                            TGBeatData.prototype.getVoice = function (index) {
                                return this.voices[index];
                            };
                            TGBeatData.prototype.getCurrentStart = function () {
                                var minimumStart = -1;
                                for (var i = 0; i < this.voices.length; i++) {
                                    if (this.voices[i].getStart() > this.currentStart) {
                                        if (minimumStart < 0 || this.voices[i].getStart() < minimumStart) {
                                            minimumStart = this.voices[i].getStart();
                                        }
                                    }
                                }
                                if (minimumStart > this.currentStart) {
                                    this.currentStart = minimumStart;
                                }
                                return this.currentStart;
                            };
                            return TGBeatData;
                        }());
                        TGStream.TGBeatData = TGBeatData;
                        TGBeatData["__class"] = "org.herac.tuxguitar.io.tg.TGStream.TGBeatData";
                        var TGVoiceData = (function () {
                            function TGVoiceData(__parent, measure) {
                                this.__parent = __parent;
                                this.start = 0;
                                this.velocity = 0;
                                this.flags = 0;
                                this.duration = null;
                                this.init(measure);
                            }
                            TGVoiceData.prototype.init = function (measure) {
                                this.flags = 0;
                                this.setStart(measure.getStart());
                                this.setVelocity(org.herac.tuxguitar.song.models.TGVelocities.DEFAULT_$LI$());
                                this.setDuration(new org.herac.tuxguitar.song.factory.TGFactory().newDuration());
                            };
                            TGVoiceData.prototype.getDuration = function () {
                                return this.duration;
                            };
                            TGVoiceData.prototype.setDuration = function (duration) {
                                this.duration = duration;
                            };
                            TGVoiceData.prototype.getStart = function () {
                                return this.start;
                            };
                            TGVoiceData.prototype.setStart = function (start) {
                                this.start = start;
                            };
                            TGVoiceData.prototype.getVelocity = function () {
                                return this.velocity;
                            };
                            TGVoiceData.prototype.setVelocity = function (velocity) {
                                this.velocity = velocity;
                            };
                            TGVoiceData.prototype.getFlags = function () {
                                return this.flags;
                            };
                            TGVoiceData.prototype.setFlags = function (flags) {
                                this.flags = flags;
                            };
                            return TGVoiceData;
                        }());
                        TGStream.TGVoiceData = TGVoiceData;
                        TGVoiceData["__class"] = "org.herac.tuxguitar.io.tg.TGStream.TGVoiceData";
                    })(TGStream = tg.TGStream || (tg.TGStream = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v08;
                    (function (v08) {
                        var TGSongReaderImpl = (function (_super) {
                            __extends(TGSongReaderImpl, _super);
                            function TGSongReaderImpl() {
                                var _this = _super.call(this) || this;
                                _this.dataInputStream = null;
                                _this.factory = null;
                                return _this;
                            }
                            TGSongReaderImpl.SUPPORTED_FORMAT_$LI$ = function () { if (TGSongReaderImpl.SUPPORTED_FORMAT == null)
                                TGSongReaderImpl.SUPPORTED_FORMAT = new org.herac.tuxguitar.io.tg.TGFileFormatVersion(org.herac.tuxguitar.io.tg.v08.TGStream.TG_FORMAT_$LI$(), org.herac.tuxguitar.io.tg.v08.TGStream.TG_VERSION_$LI$()); return TGSongReaderImpl.SUPPORTED_FORMAT; };
                            ;
                            TGSongReaderImpl.prototype.getFileFormat = function () {
                                return org.herac.tuxguitar.io.tg.v08.TGStream.TG_FORMAT_$LI$();
                            };
                            TGSongReaderImpl.prototype.read$org_herac_tuxguitar_io_base_TGSongReaderHandle = function (handle) {
                                try {
                                    this.factory = handle.getFactory();
                                    this.dataInputStream = new java.io.DataInputStream(handle.getInputStream());
                                    var fileFormat = new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(TGSongReaderImpl.SUPPORTED_FORMAT_$LI$()).getFileFormat(this.dataInputStream);
                                    if (fileFormat == null || !(function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(fileFormat, this.getFileFormat())) {
                                        throw new org.herac.tuxguitar.io.base.TGFileFormatException("Unsupported Version");
                                    }
                                    var song_7 = this.read();
                                    this.dataInputStream.close();
                                    handle.setSong(song_7);
                                }
                                catch (throwable) {
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException(throwable);
                                }
                                ;
                            };
                            TGSongReaderImpl.prototype.read = function (handle) {
                                if (((handle != null && handle instanceof org.herac.tuxguitar.io.base.TGSongReaderHandle) || handle === null)) {
                                    return this.read$org_herac_tuxguitar_io_base_TGSongReaderHandle(handle);
                                }
                                else if (handle === undefined) {
                                    return this.read$();
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongReaderImpl.prototype.read$ = function () {
                                var song = this.factory.newSong();
                                song.setName(this.readString());
                                song.setArtist(this.readString());
                                song.setAlbum(this.readString());
                                song.setAuthor(this.readString());
                                var headerCount = this.readShort();
                                var headerStart = org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME;
                                var lastHeader = null;
                                for (var i = 0; i < headerCount; i++) {
                                    var header = this.readMeasureHeader(i + 1, headerStart, lastHeader);
                                    song.addMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader(header);
                                    headerStart += header.getLength();
                                    lastHeader = header;
                                }
                                var trackCount = this.readByte();
                                for (var i = 0; i < trackCount; i++) {
                                    song.addTrack$org_herac_tuxguitar_song_models_TGTrack(this.readTrack(i + 1, song));
                                }
                                return song;
                            };
                            TGSongReaderImpl.prototype.readTrack = function (number, song) {
                                var track = this.factory.newTrack();
                                track.setNumber(number);
                                track.setName(this.readString());
                                this.readChannel(song, track);
                                var measureCount = song.countMeasureHeaders();
                                var lastMeasure = null;
                                for (var i = 0; i < measureCount; i++) {
                                    var measure = this.readMeasure(song.getMeasureHeader(i), lastMeasure);
                                    track.addMeasure$org_herac_tuxguitar_song_models_TGMeasure(measure);
                                    lastMeasure = measure;
                                }
                                var stringCount = this.readByte();
                                for (var i = 0; i < stringCount; i++) {
                                    track.getStrings().add(this.readInstrumentString(i + 1));
                                }
                                track.setOffset((org.herac.tuxguitar.song.models.TGTrack.MIN_OFFSET + this.readByte()));
                                this.readColor(track.getColor());
                                return track;
                            };
                            TGSongReaderImpl.prototype.readMeasureHeader = function (number, start, lastMeasureHeader) {
                                var header = this.readHeader();
                                var measureHeader = this.factory.newHeader();
                                measureHeader.setNumber(number);
                                measureHeader.setStart(start);
                                if (((header & org.herac.tuxguitar.io.tg.v08.TGStream.MEASURE_HEADER_TIMESIGNATURE) !== 0)) {
                                    this.readTimeSignature(measureHeader.getTimeSignature());
                                }
                                else if (lastMeasureHeader != null) {
                                    measureHeader.getTimeSignature().copyFrom(lastMeasureHeader.getTimeSignature());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v08.TGStream.MEASURE_HEADER_TEMPO) !== 0)) {
                                    this.readTempo(measureHeader.getTempo());
                                }
                                else if (lastMeasureHeader != null) {
                                    measureHeader.getTempo().copyFrom(lastMeasureHeader.getTempo());
                                }
                                measureHeader.setRepeatOpen(((header & org.herac.tuxguitar.io.tg.v08.TGStream.MEASURE_HEADER_OPEN_REPEAT) !== 0));
                                if (((header & org.herac.tuxguitar.io.tg.v08.TGStream.MEASURE_HEADER_CLOSE_REPEAT) !== 0)) {
                                    measureHeader.setRepeatClose(this.readShort());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v08.TGStream.MEASURE_HEADER_MARKER) !== 0)) {
                                    measureHeader.setMarker(this.readMarker(number));
                                }
                                measureHeader.setTripletFeel(((lastMeasureHeader != null) ? lastMeasureHeader.getTripletFeel() : org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_NONE));
                                if (((header & org.herac.tuxguitar.io.tg.v08.TGStream.MEASURE_HEADER_TRIPLET_FEEL) !== 0)) {
                                    measureHeader.setTripletFeel(this.readByte());
                                }
                                return measureHeader;
                            };
                            TGSongReaderImpl.prototype.readMeasure = function (measureHeader, lastMeasure) {
                                var header = this.readHeader();
                                var measure = this.factory.newMeasure(measureHeader);
                                var previous = null;
                                var componentCount = this.readShort();
                                for (var i = 0; i < componentCount; i++) {
                                    previous = this.readComponent(measure, previous);
                                }
                                measure.setClef((lastMeasure == null) ? org.herac.tuxguitar.song.models.TGMeasure.CLEF_TREBLE : lastMeasure.getClef());
                                if (((header & org.herac.tuxguitar.io.tg.v08.TGStream.MEASURE_CLEF) !== 0)) {
                                    measure.setClef(this.readByte());
                                }
                                measure.setKeySignature((lastMeasure == null) ? 0 : lastMeasure.getKeySignature());
                                if (((header & org.herac.tuxguitar.io.tg.v08.TGStream.MEASURE_KEYSIGNATURE) !== 0)) {
                                    measure.setKeySignature(this.readByte());
                                }
                                return measure;
                            };
                            TGSongReaderImpl.prototype.readChannel = function (song, track) {
                                var header = this.readHeader();
                                var channel = this.factory.newChannel();
                                var gmChannel1Param = this.factory.newChannelParameter();
                                var gmChannel2Param = this.factory.newChannelParameter();
                                var channel1 = (this.readByte() & 255);
                                gmChannel1Param.setKey(org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_1);
                                gmChannel1Param.setValue(/* toString */ ('' + (channel1)));
                                var channel2 = (this.readByte() & 255);
                                gmChannel2Param.setKey(org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_2);
                                gmChannel2Param.setValue(/* toString */ ('' + (channel2)));
                                channel.setBank(channel1 === 9 ? org.herac.tuxguitar.song.models.TGChannel.DEFAULT_PERCUSSION_BANK : org.herac.tuxguitar.song.models.TGChannel.DEFAULT_BANK);
                                channel.setProgram((this.readByte() | 0));
                                channel.setVolume((this.readByte() | 0));
                                channel.setBalance((this.readByte() | 0));
                                channel.setChorus((this.readByte() | 0));
                                channel.setReverb((this.readByte() | 0));
                                channel.setPhaser((this.readByte() | 0));
                                channel.setTremolo((this.readByte() | 0));
                                track.setSolo(((header & org.herac.tuxguitar.io.tg.v08.TGStream.CHANNEL_SOLO) !== 0));
                                track.setMute(((header & org.herac.tuxguitar.io.tg.v08.TGStream.CHANNEL_MUTE) !== 0));
                                for (var i = 0; i < song.countChannels(); i++) {
                                    var channelAux = song.getChannel(i);
                                    for (var n = 0; n < channelAux.countParameters(); n++) {
                                        var channelParameter = channelAux.getParameter(n);
                                        if ((function (o1, o2) { if (o1.equals) {
                                            return o1.equals(o2);
                                        }
                                        else {
                                            return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                        } })(channelParameter.getKey(), org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_1)) {
                                            if ((function (o1, o2) { if (o1.equals) {
                                                return o1.equals(o2);
                                            }
                                            else {
                                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                            } })(/* toString */ ('' + (channel1)), channelParameter.getValue())) {
                                                channel.setChannelId(channelAux.getChannelId());
                                            }
                                        }
                                    }
                                }
                                if (channel.getChannelId() <= 0) {
                                    channel.setChannelId(song.countChannels() + 1);
                                    channel.setName(new org.herac.tuxguitar.song.managers.TGSongManager(this.factory).createChannelNameFromProgram(song, channel));
                                    channel.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(gmChannel1Param);
                                    channel.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(gmChannel2Param);
                                    song.addChannel$org_herac_tuxguitar_song_models_TGChannel(channel);
                                }
                                track.setChannelId(channel.getChannelId());
                            };
                            TGSongReaderImpl.prototype.readComponent = function (measure, previous) {
                                var beat = previous;
                                var header = this.readHeader();
                                if (beat == null) {
                                    beat = this.factory.newBeat();
                                    beat.setStart(measure.getStart());
                                    measure.addBeat(beat);
                                }
                                else if (((header & org.herac.tuxguitar.io.tg.v08.TGStream.COMPONENT_NEXT_BEAT) !== 0)) {
                                    beat = this.factory.newBeat();
                                    beat.setStart(previous.getStart() + previous.getVoice(0).getDuration().getTime());
                                    measure.addBeat(beat);
                                }
                                var voice = beat.getVoice(0);
                                voice.setEmpty(false);
                                if (((header & org.herac.tuxguitar.io.tg.v08.TGStream.COMPONENT_NEXT_DURATION) !== 0)) {
                                    this.readDuration(voice.getDuration());
                                }
                                else if (previous != null && !(function (o1, o2) { if (o1.equals) {
                                    return o1.equals(o2);
                                }
                                else {
                                    return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                } })(previous, beat)) {
                                    voice.getDuration().copyFrom(previous.getVoice(0).getDuration());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v08.TGStream.COMPONENT_NOTE) !== 0)) {
                                    var note = this.factory.newNote();
                                    note.setValue(this.readByte());
                                    note.setVelocity(this.readByte());
                                    note.setString(this.readByte());
                                    note.setTiedNote(((header & org.herac.tuxguitar.io.tg.v08.TGStream.COMPONENT_TIEDNOTE) !== 0));
                                    if (((header & org.herac.tuxguitar.io.tg.v08.TGStream.COMPONENT_EFFECT) !== 0)) {
                                        this.readNoteEffect(note.getEffect());
                                    }
                                    voice.addNote(note);
                                }
                                return beat;
                            };
                            TGSongReaderImpl.prototype.readInstrumentString = function (number) {
                                var string = this.factory.newString();
                                string.setNumber(number);
                                string.setValue(this.readByte());
                                return string;
                            };
                            TGSongReaderImpl.prototype.readTempo = function (tempo) {
                                tempo.setValue(this.readShort());
                            };
                            TGSongReaderImpl.prototype.readTimeSignature = function (timeSignature) {
                                timeSignature.setNumerator(this.readByte());
                                this.readDuration(timeSignature.getDenominator());
                            };
                            TGSongReaderImpl.prototype.readDuration = function (duration) {
                                var header = this.readHeader();
                                duration.setDotted((header & org.herac.tuxguitar.io.tg.v08.TGStream.DURATION_DOTTED) !== 0);
                                duration.setDoubleDotted((header & org.herac.tuxguitar.io.tg.v08.TGStream.DURATION_DOUBLE_DOTTED) !== 0);
                                duration.setValue(this.readByte());
                                if (((header & org.herac.tuxguitar.io.tg.v08.TGStream.DURATION_TUPLETO) !== 0)) {
                                    this.readDivisionType(duration.getDivision());
                                }
                            };
                            TGSongReaderImpl.prototype.readDivisionType = function (divisionType) {
                                divisionType.setEnters(this.readByte());
                                divisionType.setTimes(this.readByte());
                            };
                            TGSongReaderImpl.prototype.readNoteEffect = function (effect) {
                                var header = this.readHeader();
                                effect.setVibrato(((header & org.herac.tuxguitar.io.tg.v08.TGStream.EFFECT_VIBRATO) !== 0));
                                effect.setDeadNote(((header & org.herac.tuxguitar.io.tg.v08.TGStream.EFFECT_DEAD_NOTE) !== 0));
                                effect.setSlide(((header & org.herac.tuxguitar.io.tg.v08.TGStream.EFFECT_SLIDE) !== 0));
                                effect.setHammer(((header & org.herac.tuxguitar.io.tg.v08.TGStream.EFFECT_HAMMER) !== 0));
                                if (((header & org.herac.tuxguitar.io.tg.v08.TGStream.EFFECT_BEND) !== 0)) {
                                    effect.setBend(this.readBendEffect());
                                }
                            };
                            TGSongReaderImpl.prototype.readBendEffect = function () {
                                var bend = this.factory.newEffectBend();
                                var count = this.readByte();
                                for (var i = 0; i < count; i++) {
                                    var position = this.readByte();
                                    var value = this.readByte();
                                    bend.addPoint(position, ((value > 0) ? (value / 2 | 0) : value));
                                }
                                return bend;
                            };
                            TGSongReaderImpl.prototype.readMarker = function (measure) {
                                var marker = this.factory.newMarker();
                                marker.setMeasure(measure);
                                marker.setTitle(this.readString());
                                this.readColor(marker.getColor());
                                return marker;
                            };
                            TGSongReaderImpl.prototype.readColor = function (color) {
                                color.setR(this.readShort());
                                color.setG(this.readShort());
                                color.setB(this.readShort());
                            };
                            TGSongReaderImpl.prototype.readByte = function () {
                                try {
                                    return this.dataInputStream.read();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readHeader = function () {
                                try {
                                    return this.dataInputStream.read();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readShort = function () {
                                try {
                                    return this.dataInputStream.readShort();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readString = function () {
                                try {
                                    var length_6 = this.dataInputStream.read();
                                    var chars = new Array(length_6);
                                    for (var i = 0; i < chars.length; i++) {
                                        chars[i] = this.dataInputStream.readChar();
                                    }
                                    return javaemul.internal.StringHelper.copyValueOf(chars);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return null;
                            };
                            return TGSongReaderImpl;
                        }(org.herac.tuxguitar.io.tg.v08.TGStream));
                        v08.TGSongReaderImpl = TGSongReaderImpl;
                        TGSongReaderImpl["__class"] = "org.herac.tuxguitar.io.tg.v08.TGSongReaderImpl";
                        TGSongReaderImpl["__interfaces"] = ["org.herac.tuxguitar.io.base.TGSongReader", "org.herac.tuxguitar.io.base.TGSongPersistenceHandler"];
                    })(v08 = tg.v08 || (tg.v08 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v09;
                    (function (v09) {
                        var TGSongReaderImpl = (function (_super) {
                            __extends(TGSongReaderImpl, _super);
                            function TGSongReaderImpl() {
                                var _this = _super.call(this) || this;
                                _this.dataInputStream = null;
                                _this.factory = null;
                                _this.velocity = 0;
                                return _this;
                            }
                            TGSongReaderImpl.SUPPORTED_FORMAT_$LI$ = function () { if (TGSongReaderImpl.SUPPORTED_FORMAT == null)
                                TGSongReaderImpl.SUPPORTED_FORMAT = new org.herac.tuxguitar.io.tg.TGFileFormatVersion(org.herac.tuxguitar.io.tg.v09.TGStream.TG_FORMAT_$LI$(), org.herac.tuxguitar.io.tg.v09.TGStream.TG_VERSION_$LI$()); return TGSongReaderImpl.SUPPORTED_FORMAT; };
                            ;
                            TGSongReaderImpl.prototype.getFileFormat = function () {
                                return org.herac.tuxguitar.io.tg.v09.TGStream.TG_FORMAT_$LI$();
                            };
                            TGSongReaderImpl.prototype.read$org_herac_tuxguitar_io_base_TGSongReaderHandle = function (handle) {
                                try {
                                    this.factory = handle.getFactory();
                                    this.dataInputStream = new java.io.DataInputStream(handle.getInputStream());
                                    var fileFormat = new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(TGSongReaderImpl.SUPPORTED_FORMAT_$LI$()).getFileFormat(this.dataInputStream);
                                    if (fileFormat == null || !(function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(fileFormat, this.getFileFormat())) {
                                        throw new org.herac.tuxguitar.io.base.TGFileFormatException("Unsupported Version");
                                    }
                                    var song_8 = this.read();
                                    this.dataInputStream.close();
                                    handle.setSong(song_8);
                                }
                                catch (throwable) {
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException(throwable);
                                }
                                ;
                            };
                            TGSongReaderImpl.prototype.read = function (handle) {
                                if (((handle != null && handle instanceof org.herac.tuxguitar.io.base.TGSongReaderHandle) || handle === null)) {
                                    return this.read$org_herac_tuxguitar_io_base_TGSongReaderHandle(handle);
                                }
                                else if (handle === undefined) {
                                    return this.read$();
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongReaderImpl.prototype.read$ = function () {
                                var song = this.factory.newSong();
                                song.setName(this.readString());
                                song.setArtist(this.readString());
                                song.setAlbum(this.readString());
                                song.setAuthor(this.readString());
                                var headerCount = this.readShort();
                                var headerStart = org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME;
                                var lastHeader = null;
                                for (var i = 0; i < headerCount; i++) {
                                    var header = this.readMeasureHeader(i + 1, headerStart, lastHeader);
                                    song.addMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader(header);
                                    headerStart += header.getLength();
                                    lastHeader = header;
                                }
                                var trackCount = this.readByte();
                                for (var i = 0; i < trackCount; i++) {
                                    song.addTrack$org_herac_tuxguitar_song_models_TGTrack(this.readTrack(i + 1, song));
                                }
                                return song;
                            };
                            TGSongReaderImpl.prototype.readTrack = function (number, song) {
                                var header = this.readHeader();
                                var track = this.factory.newTrack();
                                track.setNumber(number);
                                track.setName(this.readString());
                                this.readChannel(song, track);
                                var measureCount = song.countMeasureHeaders();
                                var lastMeasure = null;
                                for (var i = 0; i < measureCount; i++) {
                                    var measure = this.readMeasure(song.getMeasureHeader(i), lastMeasure);
                                    track.addMeasure$org_herac_tuxguitar_song_models_TGMeasure(measure);
                                    lastMeasure = measure;
                                }
                                var stringCount = this.readByte();
                                for (var i = 0; i < stringCount; i++) {
                                    track.getStrings().add(this.readInstrumentString(i + 1));
                                }
                                track.setOffset((org.herac.tuxguitar.song.models.TGTrack.MIN_OFFSET + this.readByte()));
                                this.readColor(track.getColor());
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.TRACK_LYRICS) !== 0)) {
                                    this.readLyrics(track.getLyrics());
                                }
                                return track;
                            };
                            TGSongReaderImpl.prototype.readMeasureHeader = function (number, start, lastMeasureHeader) {
                                var header = this.readHeader();
                                var measureHeader = this.factory.newHeader();
                                measureHeader.setNumber(number);
                                measureHeader.setStart(start);
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.MEASURE_HEADER_TIMESIGNATURE) !== 0)) {
                                    this.readTimeSignature(measureHeader.getTimeSignature());
                                }
                                else if (lastMeasureHeader != null) {
                                    measureHeader.getTimeSignature().copyFrom(lastMeasureHeader.getTimeSignature());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.MEASURE_HEADER_TEMPO) !== 0)) {
                                    this.readTempo(measureHeader.getTempo());
                                }
                                else if (lastMeasureHeader != null) {
                                    measureHeader.getTempo().copyFrom(lastMeasureHeader.getTempo());
                                }
                                measureHeader.setRepeatOpen((header & org.herac.tuxguitar.io.tg.v09.TGStream.MEASURE_HEADER_OPEN_REPEAT) !== 0);
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.MEASURE_HEADER_CLOSE_REPEAT) !== 0)) {
                                    measureHeader.setRepeatClose(this.readShort());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.MEASURE_HEADER_MARKER) !== 0)) {
                                    measureHeader.setMarker(this.readMarker(number));
                                }
                                measureHeader.setTripletFeel((lastMeasureHeader != null) ? lastMeasureHeader.getTripletFeel() : org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_NONE);
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.MEASURE_HEADER_TRIPLET_FEEL) !== 0)) {
                                    measureHeader.setTripletFeel(this.readByte());
                                }
                                return measureHeader;
                            };
                            TGSongReaderImpl.prototype.readMeasure = function (measureHeader, lastMeasure) {
                                this.velocity = org.herac.tuxguitar.song.models.TGVelocities.DEFAULT_$LI$();
                                var header = this.readHeader();
                                var measure = this.factory.newMeasure(measureHeader);
                                var previous = null;
                                var componentCount = this.readShort();
                                for (var i = 0; i < componentCount; i++) {
                                    previous = this.readComponent(measure, previous);
                                }
                                measure.setClef((lastMeasure == null) ? org.herac.tuxguitar.song.models.TGMeasure.CLEF_TREBLE : lastMeasure.getClef());
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.MEASURE_CLEF) !== 0)) {
                                    measure.setClef(this.readByte());
                                }
                                measure.setKeySignature((lastMeasure == null) ? 0 : lastMeasure.getKeySignature());
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.MEASURE_KEYSIGNATURE) !== 0)) {
                                    measure.setKeySignature(this.readByte());
                                }
                                return measure;
                            };
                            TGSongReaderImpl.prototype.readChannel = function (song, track) {
                                var header = this.readHeader();
                                var channel = this.factory.newChannel();
                                var gmChannel1Param = this.factory.newChannelParameter();
                                var gmChannel2Param = this.factory.newChannelParameter();
                                var channel1 = (this.readByte() & 255);
                                gmChannel1Param.setKey(org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_1);
                                gmChannel1Param.setValue(/* toString */ ('' + (channel1)));
                                var channel2 = (this.readByte() & 255);
                                gmChannel2Param.setKey(org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_2);
                                gmChannel2Param.setValue(/* toString */ ('' + (channel2)));
                                channel.setBank(channel1 === 9 ? org.herac.tuxguitar.song.models.TGChannel.DEFAULT_PERCUSSION_BANK : org.herac.tuxguitar.song.models.TGChannel.DEFAULT_BANK);
                                channel.setProgram((this.readByte() | 0));
                                channel.setVolume((this.readByte() | 0));
                                channel.setBalance((this.readByte() | 0));
                                channel.setChorus((this.readByte() | 0));
                                channel.setReverb((this.readByte() | 0));
                                channel.setPhaser((this.readByte() | 0));
                                channel.setTremolo((this.readByte() | 0));
                                track.setSolo(((header & org.herac.tuxguitar.io.tg.v09.TGStream.CHANNEL_SOLO) !== 0));
                                track.setMute(((header & org.herac.tuxguitar.io.tg.v09.TGStream.CHANNEL_MUTE) !== 0));
                                for (var i = 0; i < song.countChannels(); i++) {
                                    var channelAux = song.getChannel(i);
                                    for (var n = 0; n < channelAux.countParameters(); n++) {
                                        var channelParameter = channelAux.getParameter(n);
                                        if ((function (o1, o2) { if (o1.equals) {
                                            return o1.equals(o2);
                                        }
                                        else {
                                            return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                        } })(channelParameter.getKey(), org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_1)) {
                                            if ((function (o1, o2) { if (o1.equals) {
                                                return o1.equals(o2);
                                            }
                                            else {
                                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                            } })(/* toString */ ('' + (channel1)), channelParameter.getValue())) {
                                                channel.setChannelId(channelAux.getChannelId());
                                            }
                                        }
                                    }
                                }
                                if (channel.getChannelId() <= 0) {
                                    channel.setChannelId(song.countChannels() + 1);
                                    channel.setName(new org.herac.tuxguitar.song.managers.TGSongManager(this.factory).createChannelNameFromProgram(song, channel));
                                    channel.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(gmChannel1Param);
                                    channel.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(gmChannel2Param);
                                    song.addChannel$org_herac_tuxguitar_song_models_TGChannel(channel);
                                }
                                track.setChannelId(channel.getChannelId());
                            };
                            TGSongReaderImpl.prototype.readComponent = function (measure, previous) {
                                var beat = previous;
                                var header = this.readHeader();
                                if (beat == null) {
                                    beat = this.factory.newBeat();
                                    beat.setStart(measure.getStart());
                                    measure.addBeat(beat);
                                }
                                else if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.COMPONENT_NEXT_BEAT) !== 0)) {
                                    beat = this.factory.newBeat();
                                    beat.setStart(previous.getStart() + previous.getVoice(0).getDuration().getTime());
                                    measure.addBeat(beat);
                                }
                                var voice = beat.getVoice(0);
                                voice.setEmpty(false);
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.COMPONENT_NEXT_DURATION) !== 0)) {
                                    this.readDuration(voice.getDuration());
                                }
                                else if (previous != null && !(function (o1, o2) { if (o1.equals) {
                                    return o1.equals(o2);
                                }
                                else {
                                    return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                } })(previous, beat)) {
                                    voice.getDuration().copyFrom(previous.getVoice(0).getDuration());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.COMPONENT_NOTE) !== 0)) {
                                    var note = this.factory.newNote();
                                    note.setValue(this.readByte());
                                    note.setString(this.readByte());
                                    note.setTiedNote((header & org.herac.tuxguitar.io.tg.v09.TGStream.COMPONENT_TIEDNOTE) !== 0);
                                    if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.COMPONENT_VELOCITY) !== 0)) {
                                        this.velocity = this.readByte();
                                    }
                                    note.setVelocity(this.velocity);
                                    if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.COMPONENT_EFFECT) !== 0)) {
                                        this.readNoteEffect(note.getEffect());
                                    }
                                    voice.addNote(note);
                                }
                                return beat;
                            };
                            TGSongReaderImpl.prototype.readInstrumentString = function (number) {
                                var string = this.factory.newString();
                                string.setNumber(number);
                                string.setValue(this.readByte());
                                return string;
                            };
                            TGSongReaderImpl.prototype.readTempo = function (tempo) {
                                tempo.setValue(this.readShort());
                            };
                            TGSongReaderImpl.prototype.readTimeSignature = function (timeSignature) {
                                timeSignature.setNumerator(this.readByte());
                                this.readDuration(timeSignature.getDenominator());
                            };
                            TGSongReaderImpl.prototype.readDuration = function (duration) {
                                var header = this.readHeader();
                                duration.setDotted((header & org.herac.tuxguitar.io.tg.v09.TGStream.DURATION_DOTTED) !== 0);
                                duration.setDoubleDotted((header & org.herac.tuxguitar.io.tg.v09.TGStream.DURATION_DOUBLE_DOTTED) !== 0);
                                duration.setValue(this.readByte());
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.DURATION_NO_TUPLET) !== 0)) {
                                    this.readDivisionType(duration.getDivision());
                                }
                            };
                            TGSongReaderImpl.prototype.readDivisionType = function (divisionType) {
                                divisionType.setEnters(this.readByte());
                                divisionType.setTimes(this.readByte());
                            };
                            TGSongReaderImpl.prototype.readNoteEffect = function (effect) {
                                var header = this.readHeader$int(3);
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_BEND) !== 0)) {
                                    effect.setBend(this.readBendEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_TREMOLO_BAR) !== 0)) {
                                    effect.setTremoloBar(this.readTremoloBarEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_HARMONIC) !== 0)) {
                                    effect.setHarmonic(this.readHarmonicEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_GRACE) !== 0)) {
                                    effect.setGrace(this.readGraceEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_TRILL) !== 0)) {
                                    effect.setTrill(this.readTrillEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_TREMOLO_PICKING) !== 0)) {
                                    effect.setTremoloPicking(this.readTremoloPickingEffect());
                                }
                                effect.setVibrato(((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_VIBRATO) !== 0));
                                effect.setDeadNote(((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_DEAD) !== 0));
                                effect.setSlide(((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_SLIDE) !== 0));
                                effect.setHammer(((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_HAMMER) !== 0));
                                effect.setGhostNote(((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_GHOST) !== 0));
                                effect.setAccentuatedNote(((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_ACCENTUATED) !== 0));
                                effect.setHeavyAccentuatedNote(((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_HEAVY_ACCENTUATED) !== 0));
                                effect.setPalmMute(((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_PALM_MUTE) !== 0));
                                effect.setStaccato(((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_STACCATO) !== 0));
                                effect.setTapping(((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_TAPPING) !== 0));
                                effect.setSlapping(((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_SLAPPING) !== 0));
                                effect.setPopping(((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_POPPING) !== 0));
                                effect.setFadeIn(((header & org.herac.tuxguitar.io.tg.v09.TGStream.EFFECT_FADE_IN) !== 0));
                            };
                            TGSongReaderImpl.prototype.readBendEffect = function () {
                                var bend = this.factory.newEffectBend();
                                var count = this.readByte();
                                for (var i = 0; i < count; i++) {
                                    var position = this.readByte();
                                    var value = this.readByte();
                                    bend.addPoint(position, value);
                                }
                                return bend;
                            };
                            TGSongReaderImpl.prototype.readTremoloBarEffect = function () {
                                var tremoloBar = this.factory.newEffectTremoloBar();
                                var count = this.readByte();
                                for (var i = 0; i < count; i++) {
                                    var position = this.readByte();
                                    var value = (this.readByte() - org.herac.tuxguitar.song.models.effects.TGEffectTremoloBar.MAX_VALUE_LENGTH);
                                    tremoloBar.addPoint(position, value);
                                }
                                return tremoloBar;
                            };
                            TGSongReaderImpl.prototype.readHarmonicEffect = function () {
                                var harmonic = this.factory.newEffectHarmonic();
                                harmonic.setType(this.readByte());
                                if (harmonic.getType() === org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.TYPE_ARTIFICIAL) {
                                    harmonic.setData(org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.MIN_ARTIFICIAL_OFFSET + this.readByte());
                                }
                                else if (harmonic.getType() === org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.TYPE_TAPPED) {
                                    harmonic.setData(this.readByte());
                                }
                                return harmonic;
                            };
                            TGSongReaderImpl.prototype.readGraceEffect = function () {
                                var grace = this.factory.newEffectGrace();
                                var header = this.readHeader();
                                grace.setDead(((header & org.herac.tuxguitar.io.tg.v09.TGStream.GRACE_FLAG_DEAD) !== 0));
                                grace.setOnBeat(((header & org.herac.tuxguitar.io.tg.v09.TGStream.GRACE_FLAG_ON_BEAT) !== 0));
                                grace.setFret(this.readByte());
                                grace.setDuration(this.readByte());
                                grace.setDynamic(this.readByte());
                                grace.setTransition(this.readByte());
                                return grace;
                            };
                            TGSongReaderImpl.prototype.readTremoloPickingEffect = function () {
                                var tremoloPicking = this.factory.newEffectTremoloPicking();
                                tremoloPicking.getDuration().setValue(this.readByte());
                                return tremoloPicking;
                            };
                            TGSongReaderImpl.prototype.readTrillEffect = function () {
                                var trill = this.factory.newEffectTrill();
                                trill.setFret(this.readByte());
                                trill.getDuration().setValue(this.readByte());
                                return trill;
                            };
                            TGSongReaderImpl.prototype.readMarker = function (measure) {
                                var marker = this.factory.newMarker();
                                marker.setMeasure(measure);
                                marker.setTitle(this.readString());
                                this.readColor(marker.getColor());
                                return marker;
                            };
                            TGSongReaderImpl.prototype.readColor = function (color) {
                                color.setR(this.readShort());
                                color.setG(this.readShort());
                                color.setB(this.readShort());
                            };
                            TGSongReaderImpl.prototype.readLyrics = function (lyrics) {
                                lyrics.setFrom(this.readShort());
                                lyrics.setLyrics(this.readString());
                            };
                            TGSongReaderImpl.prototype.readByte = function () {
                                try {
                                    return this.dataInputStream.read();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readHeader$ = function () {
                                try {
                                    return this.dataInputStream.read();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readHeader$int = function (bCount) {
                                var header = 0;
                                for (var i = bCount; i > 0; i--) {
                                    header += (this.readHeader() << ((8 * i) - 8));
                                }
                                return header;
                            };
                            TGSongReaderImpl.prototype.readHeader = function (bCount) {
                                if (((typeof bCount === 'number') || bCount === null)) {
                                    return this.readHeader$int(bCount);
                                }
                                else if (bCount === undefined) {
                                    return this.readHeader$();
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongReaderImpl.prototype.readShort = function () {
                                try {
                                    return this.dataInputStream.readShort();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readString = function () {
                                try {
                                    var length_7 = this.dataInputStream.read();
                                    var chars = new Array(length_7);
                                    for (var i = 0; i < chars.length; i++) {
                                        chars[i] = this.dataInputStream.readChar();
                                    }
                                    return javaemul.internal.StringHelper.copyValueOf(chars);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return null;
                            };
                            return TGSongReaderImpl;
                        }(org.herac.tuxguitar.io.tg.v09.TGStream));
                        v09.TGSongReaderImpl = TGSongReaderImpl;
                        TGSongReaderImpl["__class"] = "org.herac.tuxguitar.io.tg.v09.TGSongReaderImpl";
                        TGSongReaderImpl["__interfaces"] = ["org.herac.tuxguitar.io.base.TGSongReader", "org.herac.tuxguitar.io.base.TGSongPersistenceHandler"];
                    })(v09 = tg.v09 || (tg.v09 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var dev;
                    (function (dev) {
                        var TGSongReaderPluginImpl = (function (_super) {
                            __extends(TGSongReaderPluginImpl, _super);
                            function TGSongReaderPluginImpl() {
                                return _super.call(this) || this;
                            }
                            TGSongReaderPluginImpl.prototype.createInputStream = function (context) {
                                return new org.herac.tuxguitar.io.tg.dev.TGSongReaderImpl();
                            };
                            TGSongReaderPluginImpl.prototype.createFileFormatDetector = function (context) {
                                return new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(org.herac.tuxguitar.io.tg.dev.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$());
                            };
                            return TGSongReaderPluginImpl;
                        }(org.herac.tuxguitar.io.tg.TGAbstractSongReaderPlugin));
                        dev.TGSongReaderPluginImpl = TGSongReaderPluginImpl;
                        TGSongReaderPluginImpl["__class"] = "org.herac.tuxguitar.io.tg.dev.TGSongReaderPluginImpl";
                        TGSongReaderPluginImpl["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                    })(dev = tg.dev || (tg.dev = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v07;
                    (function (v07) {
                        var TGSongReaderPluginImpl = (function (_super) {
                            __extends(TGSongReaderPluginImpl, _super);
                            function TGSongReaderPluginImpl() {
                                return _super.call(this) || this;
                            }
                            TGSongReaderPluginImpl.prototype.createInputStream = function (context) {
                                return new org.herac.tuxguitar.io.tg.v07.TGSongReaderImpl();
                            };
                            TGSongReaderPluginImpl.prototype.createFileFormatDetector = function (context) {
                                return new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(org.herac.tuxguitar.io.tg.v07.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$());
                            };
                            return TGSongReaderPluginImpl;
                        }(org.herac.tuxguitar.io.tg.TGAbstractSongReaderPlugin));
                        v07.TGSongReaderPluginImpl = TGSongReaderPluginImpl;
                        TGSongReaderPluginImpl["__class"] = "org.herac.tuxguitar.io.tg.v07.TGSongReaderPluginImpl";
                        TGSongReaderPluginImpl["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                    })(v07 = tg.v07 || (tg.v07 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v08;
                    (function (v08) {
                        var TGSongReaderPluginImpl = (function (_super) {
                            __extends(TGSongReaderPluginImpl, _super);
                            function TGSongReaderPluginImpl() {
                                return _super.call(this) || this;
                            }
                            TGSongReaderPluginImpl.prototype.createInputStream = function (context) {
                                return new org.herac.tuxguitar.io.tg.v08.TGSongReaderImpl();
                            };
                            TGSongReaderPluginImpl.prototype.createFileFormatDetector = function (context) {
                                return new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(org.herac.tuxguitar.io.tg.v08.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$());
                            };
                            return TGSongReaderPluginImpl;
                        }(org.herac.tuxguitar.io.tg.TGAbstractSongReaderPlugin));
                        v08.TGSongReaderPluginImpl = TGSongReaderPluginImpl;
                        TGSongReaderPluginImpl["__class"] = "org.herac.tuxguitar.io.tg.v08.TGSongReaderPluginImpl";
                        TGSongReaderPluginImpl["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                    })(v08 = tg.v08 || (tg.v08 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v09;
                    (function (v09) {
                        var TGSongReaderPluginImpl = (function (_super) {
                            __extends(TGSongReaderPluginImpl, _super);
                            function TGSongReaderPluginImpl() {
                                return _super.call(this) || this;
                            }
                            TGSongReaderPluginImpl.prototype.createInputStream = function (context) {
                                return new org.herac.tuxguitar.io.tg.v09.TGSongReaderImpl();
                            };
                            TGSongReaderPluginImpl.prototype.createFileFormatDetector = function (context) {
                                return new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(org.herac.tuxguitar.io.tg.v09.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$());
                            };
                            return TGSongReaderPluginImpl;
                        }(org.herac.tuxguitar.io.tg.TGAbstractSongReaderPlugin));
                        v09.TGSongReaderPluginImpl = TGSongReaderPluginImpl;
                        TGSongReaderPluginImpl["__class"] = "org.herac.tuxguitar.io.tg.v09.TGSongReaderPluginImpl";
                        TGSongReaderPluginImpl["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                    })(v09 = tg.v09 || (tg.v09 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v10;
                    (function (v10) {
                        var TGSongReaderPluginImpl = (function (_super) {
                            __extends(TGSongReaderPluginImpl, _super);
                            function TGSongReaderPluginImpl() {
                                return _super.call(this) || this;
                            }
                            TGSongReaderPluginImpl.prototype.createInputStream = function (context) {
                                return new org.herac.tuxguitar.io.tg.v10.TGSongReaderImpl();
                            };
                            TGSongReaderPluginImpl.prototype.createFileFormatDetector = function (context) {
                                return new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(org.herac.tuxguitar.io.tg.v10.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$());
                            };
                            return TGSongReaderPluginImpl;
                        }(org.herac.tuxguitar.io.tg.TGAbstractSongReaderPlugin));
                        v10.TGSongReaderPluginImpl = TGSongReaderPluginImpl;
                        TGSongReaderPluginImpl["__class"] = "org.herac.tuxguitar.io.tg.v10.TGSongReaderPluginImpl";
                        TGSongReaderPluginImpl["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                    })(v10 = tg.v10 || (tg.v10 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v11;
                    (function (v11) {
                        var TGSongReaderPluginImpl = (function (_super) {
                            __extends(TGSongReaderPluginImpl, _super);
                            function TGSongReaderPluginImpl() {
                                return _super.call(this) || this;
                            }
                            TGSongReaderPluginImpl.prototype.createInputStream = function (context) {
                                return new org.herac.tuxguitar.io.tg.v11.TGSongReaderImpl();
                            };
                            TGSongReaderPluginImpl.prototype.createFileFormatDetector = function (context) {
                                return new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(org.herac.tuxguitar.io.tg.v11.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$());
                            };
                            return TGSongReaderPluginImpl;
                        }(org.herac.tuxguitar.io.tg.TGAbstractSongReaderPlugin));
                        v11.TGSongReaderPluginImpl = TGSongReaderPluginImpl;
                        TGSongReaderPluginImpl["__class"] = "org.herac.tuxguitar.io.tg.v11.TGSongReaderPluginImpl";
                        TGSongReaderPluginImpl["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                    })(v11 = tg.v11 || (tg.v11 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v12;
                    (function (v12) {
                        var TGSongReaderPluginImpl = (function (_super) {
                            __extends(TGSongReaderPluginImpl, _super);
                            function TGSongReaderPluginImpl() {
                                return _super.call(this) || this;
                            }
                            TGSongReaderPluginImpl.prototype.createInputStream = function (context) {
                                return new org.herac.tuxguitar.io.tg.v12.TGSongReaderImpl();
                            };
                            TGSongReaderPluginImpl.prototype.createFileFormatDetector = function (context) {
                                return new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(org.herac.tuxguitar.io.tg.v12.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$());
                            };
                            return TGSongReaderPluginImpl;
                        }(org.herac.tuxguitar.io.tg.TGAbstractSongReaderPlugin));
                        v12.TGSongReaderPluginImpl = TGSongReaderPluginImpl;
                        TGSongReaderPluginImpl["__class"] = "org.herac.tuxguitar.io.tg.v12.TGSongReaderPluginImpl";
                        TGSongReaderPluginImpl["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                    })(v12 = tg.v12 || (tg.v12 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v10;
                    (function (v10) {
                        var TGSongWriterPluginImpl = (function (_super) {
                            __extends(TGSongWriterPluginImpl, _super);
                            function TGSongWriterPluginImpl() {
                                return _super.call(this) || this;
                            }
                            TGSongWriterPluginImpl.prototype.createOutputStream = function (context) {
                                return new org.herac.tuxguitar.io.tg.v10.TGSongWriterImpl();
                            };
                            return TGSongWriterPluginImpl;
                        }(org.herac.tuxguitar.io.tg.TGAbstractSongWriterPlugin));
                        v10.TGSongWriterPluginImpl = TGSongWriterPluginImpl;
                        TGSongWriterPluginImpl["__class"] = "org.herac.tuxguitar.io.tg.v10.TGSongWriterPluginImpl";
                        TGSongWriterPluginImpl["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                    })(v10 = tg.v10 || (tg.v10 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v11;
                    (function (v11) {
                        var TGSongWriterPluginImpl = (function (_super) {
                            __extends(TGSongWriterPluginImpl, _super);
                            function TGSongWriterPluginImpl() {
                                return _super.call(this) || this;
                            }
                            TGSongWriterPluginImpl.prototype.createOutputStream = function (context) {
                                return new org.herac.tuxguitar.io.tg.v11.TGSongWriterImpl();
                            };
                            return TGSongWriterPluginImpl;
                        }(org.herac.tuxguitar.io.tg.TGAbstractSongWriterPlugin));
                        v11.TGSongWriterPluginImpl = TGSongWriterPluginImpl;
                        TGSongWriterPluginImpl["__class"] = "org.herac.tuxguitar.io.tg.v11.TGSongWriterPluginImpl";
                        TGSongWriterPluginImpl["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                    })(v11 = tg.v11 || (tg.v11 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v12;
                    (function (v12) {
                        var TGSongWriterPluginImpl = (function (_super) {
                            __extends(TGSongWriterPluginImpl, _super);
                            function TGSongWriterPluginImpl() {
                                return _super.call(this) || this;
                            }
                            TGSongWriterPluginImpl.prototype.createOutputStream = function (context) {
                                return new org.herac.tuxguitar.io.tg.v12.TGSongWriterImpl();
                            };
                            return TGSongWriterPluginImpl;
                        }(org.herac.tuxguitar.io.tg.TGAbstractSongWriterPlugin));
                        v12.TGSongWriterPluginImpl = TGSongWriterPluginImpl;
                        TGSongWriterPluginImpl["__class"] = "org.herac.tuxguitar.io.tg.v12.TGSongWriterPluginImpl";
                        TGSongWriterPluginImpl["__interfaces"] = ["org.herac.tuxguitar.util.plugin.TGPlugin"];
                    })(v12 = tg.v12 || (tg.v12 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var document;
            (function (document) {
                var TGDocumentContextAttributes = (function () {
                    function TGDocumentContextAttributes() {
                    }
                    TGDocumentContextAttributes.ATTRIBUTE_SONG_MANAGER_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_SONG_MANAGER == null)
                        TGDocumentContextAttributes.ATTRIBUTE_SONG_MANAGER = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.managers.TGSongManager); return TGDocumentContextAttributes.ATTRIBUTE_SONG_MANAGER; };
                    ;
                    TGDocumentContextAttributes.ATTRIBUTE_SONG_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_SONG == null)
                        TGDocumentContextAttributes.ATTRIBUTE_SONG = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGSong); return TGDocumentContextAttributes.ATTRIBUTE_SONG; };
                    ;
                    TGDocumentContextAttributes.ATTRIBUTE_TRACK_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_TRACK == null)
                        TGDocumentContextAttributes.ATTRIBUTE_TRACK = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGTrack); return TGDocumentContextAttributes.ATTRIBUTE_TRACK; };
                    ;
                    TGDocumentContextAttributes.ATTRIBUTE_HEADER_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_HEADER == null)
                        TGDocumentContextAttributes.ATTRIBUTE_HEADER = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGMeasureHeader); return TGDocumentContextAttributes.ATTRIBUTE_HEADER; };
                    ;
                    TGDocumentContextAttributes.ATTRIBUTE_MEASURE_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_MEASURE == null)
                        TGDocumentContextAttributes.ATTRIBUTE_MEASURE = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGMeasure); return TGDocumentContextAttributes.ATTRIBUTE_MEASURE; };
                    ;
                    TGDocumentContextAttributes.ATTRIBUTE_BEAT_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_BEAT == null)
                        TGDocumentContextAttributes.ATTRIBUTE_BEAT = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGBeat); return TGDocumentContextAttributes.ATTRIBUTE_BEAT; };
                    ;
                    TGDocumentContextAttributes.ATTRIBUTE_VOICE_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_VOICE == null)
                        TGDocumentContextAttributes.ATTRIBUTE_VOICE = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGVoice); return TGDocumentContextAttributes.ATTRIBUTE_VOICE; };
                    ;
                    TGDocumentContextAttributes.ATTRIBUTE_NOTE_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_NOTE == null)
                        TGDocumentContextAttributes.ATTRIBUTE_NOTE = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGNote); return TGDocumentContextAttributes.ATTRIBUTE_NOTE; };
                    ;
                    TGDocumentContextAttributes.ATTRIBUTE_STRING_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_STRING == null)
                        TGDocumentContextAttributes.ATTRIBUTE_STRING = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGString); return TGDocumentContextAttributes.ATTRIBUTE_STRING; };
                    ;
                    TGDocumentContextAttributes.ATTRIBUTE_DURATION_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_DURATION == null)
                        TGDocumentContextAttributes.ATTRIBUTE_DURATION = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGDuration); return TGDocumentContextAttributes.ATTRIBUTE_DURATION; };
                    ;
                    TGDocumentContextAttributes.ATTRIBUTE_CHANNEL_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_CHANNEL == null)
                        TGDocumentContextAttributes.ATTRIBUTE_CHANNEL = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGChannel); return TGDocumentContextAttributes.ATTRIBUTE_CHANNEL; };
                    ;
                    TGDocumentContextAttributes.ATTRIBUTE_TEMPO_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_TEMPO == null)
                        TGDocumentContextAttributes.ATTRIBUTE_TEMPO = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGTempo); return TGDocumentContextAttributes.ATTRIBUTE_TEMPO; };
                    ;
                    TGDocumentContextAttributes.ATTRIBUTE_TIME_SIGNATURE_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_TIME_SIGNATURE == null)
                        TGDocumentContextAttributes.ATTRIBUTE_TIME_SIGNATURE = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGTimeSignature); return TGDocumentContextAttributes.ATTRIBUTE_TIME_SIGNATURE; };
                    ;
                    TGDocumentContextAttributes.ATTRIBUTE_LYRIC_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_LYRIC == null)
                        TGDocumentContextAttributes.ATTRIBUTE_LYRIC = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGLyric); return TGDocumentContextAttributes.ATTRIBUTE_LYRIC; };
                    ;
                    TGDocumentContextAttributes.ATTRIBUTE_CHORD_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_CHORD == null)
                        TGDocumentContextAttributes.ATTRIBUTE_CHORD = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGChord); return TGDocumentContextAttributes.ATTRIBUTE_CHORD; };
                    ;
                    TGDocumentContextAttributes.ATTRIBUTE_MARKER_$LI$ = function () { if (TGDocumentContextAttributes.ATTRIBUTE_MARKER == null)
                        TGDocumentContextAttributes.ATTRIBUTE_MARKER = (function (c) { return c["__class"] ? c["__class"] : c["name"]; })(org.herac.tuxguitar.song.models.TGMarker); return TGDocumentContextAttributes.ATTRIBUTE_MARKER; };
                    ;
                    return TGDocumentContextAttributes;
                }());
                TGDocumentContextAttributes.ATTRIBUTE_VELOCITY = "velocity";
                TGDocumentContextAttributes.ATTRIBUTE_POSITION = "position";
                TGDocumentContextAttributes.ATTRIBUTE_FRET = "fret";
                TGDocumentContextAttributes.ATTRIBUTE_VALUE = "value";
                document.TGDocumentContextAttributes = TGDocumentContextAttributes;
                TGDocumentContextAttributes["__class"] = "org.herac.tuxguitar.document.TGDocumentContextAttributes";
            })(document = tuxguitar.document || (tuxguitar.document = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var song;
            (function (song) {
                var factory;
                (function (factory) {
                    var TGFactory = (function () {
                        function TGFactory() {
                        }
                        TGFactory.prototype.newSong = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGSong());
                        };
                        TGFactory.prototype.newLyric = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGLyric());
                        };
                        TGFactory.prototype.newMarker = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGMarker(this));
                        };
                        TGFactory.prototype.newChord = function (length) {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGChord(length));
                        };
                        TGFactory.prototype.newScale = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGScale());
                        };
                        TGFactory.prototype.newColor = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGColor());
                        };
                        TGFactory.prototype.newDuration = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGDuration(this));
                        };
                        TGFactory.prototype.newDivisionType = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGDivisionType());
                        };
                        TGFactory.prototype.newTimeSignature = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGTimeSignature(this));
                        };
                        TGFactory.prototype.newTempo = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGTempo());
                        };
                        TGFactory.prototype.newChannel = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGChannel());
                        };
                        TGFactory.prototype.newChannelParameter = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGChannelParameter());
                        };
                        TGFactory.prototype.newTrack = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGTrack(this));
                        };
                        TGFactory.prototype.newHeader = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGMeasureHeader(this));
                        };
                        TGFactory.prototype.newMeasure = function (header) {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGMeasure(header));
                        };
                        TGFactory.prototype.newBeat = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGBeat(this));
                        };
                        TGFactory.prototype.newVoice = function (index) {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGVoice(this, index));
                        };
                        TGFactory.prototype.newNote = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGNote(this));
                        };
                        TGFactory.prototype.newString = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGString());
                        };
                        TGFactory.prototype.newStroke = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGStroke());
                        };
                        TGFactory.prototype.newText = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGText());
                        };
                        TGFactory.prototype.newEffect = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.TGNoteEffect());
                        };
                        TGFactory.prototype.newEffectBend = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.effects.TGEffectBend());
                        };
                        TGFactory.prototype.newEffectTremoloBar = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.effects.TGEffectTremoloBar());
                        };
                        TGFactory.prototype.newEffectGrace = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.effects.TGEffectGrace());
                        };
                        TGFactory.prototype.newEffectHarmonic = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.effects.TGEffectHarmonic());
                        };
                        TGFactory.prototype.newEffectTrill = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.effects.TGEffectTrill(this));
                        };
                        TGFactory.prototype.newEffectTremoloPicking = function () {
                            return (function (target) {
                                return target;
                            })(new org.herac.tuxguitar.song.models.effects.TGEffectTremoloPicking(this));
                        };
                        return TGFactory;
                    }());
                    factory.TGFactory = TGFactory;
                    TGFactory["__class"] = "org.herac.tuxguitar.song.factory.TGFactory";
                })(factory = song.factory || (song.factory = {}));
            })(song = tuxguitar.song || (tuxguitar.song = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var action;
                (function (action) {
                    var TGActionContextImpl = (function (_super) {
                        __extends(TGActionContextImpl, _super);
                        function TGActionContextImpl() {
                            return _super.call(this) || this;
                        }
                        return TGActionContextImpl;
                    }(org.herac.tuxguitar.action.TGActionContext));
                    action.TGActionContextImpl = TGActionContextImpl;
                    TGActionContextImpl["__class"] = "org.herac.tg.webapp.action.TGActionContextImpl";
                })(action = webapp.action || (webapp.action = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var event;
                (function (event) {
                    var TGDestroyEvent = (function (_super) {
                        __extends(TGDestroyEvent, _super);
                        function TGDestroyEvent(sourceContext) {
                            return _super.call(this, TGDestroyEvent.EVENT_TYPE, sourceContext) || this;
                        }
                        return TGDestroyEvent;
                    }(org.herac.tuxguitar.event.TGEvent));
                    TGDestroyEvent.EVENT_TYPE = "ui-destroy";
                    event.TGDestroyEvent = TGDestroyEvent;
                    TGDestroyEvent["__class"] = "org.herac.tg.webapp.event.TGDestroyEvent";
                })(event = webapp.event || (webapp.event = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var event;
                (function (event) {
                    var TGRedrawEvent = (function (_super) {
                        __extends(TGRedrawEvent, _super);
                        function TGRedrawEvent(redrawMode, sourceContext) {
                            var _this = _super.call(this, TGRedrawEvent.EVENT_TYPE, sourceContext) || this;
                            _this.setAttribute(TGRedrawEvent.PROPERTY_REDRAW_MODE, javaemul.internal.IntegerHelper.valueOf(redrawMode));
                            return _this;
                        }
                        return TGRedrawEvent;
                    }(org.herac.tuxguitar.event.TGEvent));
                    TGRedrawEvent.EVENT_TYPE = "ui-redraw";
                    TGRedrawEvent.PROPERTY_REDRAW_MODE = "redrawMode";
                    TGRedrawEvent.NORMAL = 1;
                    TGRedrawEvent.PLAYING_THREAD = 2;
                    TGRedrawEvent.PLAYING_NEW_BEAT = 3;
                    event.TGRedrawEvent = TGRedrawEvent;
                    TGRedrawEvent["__class"] = "org.herac.tg.webapp.event.TGRedrawEvent";
                })(event = webapp.event || (webapp.event = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var event;
                (function (event) {
                    var TGUpdateEvent = (function (_super) {
                        __extends(TGUpdateEvent, _super);
                        function TGUpdateEvent(updateMode, context) {
                            var _this = _super.call(this, TGUpdateEvent.EVENT_TYPE, context) || this;
                            _this.setAttribute(TGUpdateEvent.PROPERTY_UPDATE_MODE, javaemul.internal.IntegerHelper.valueOf(updateMode));
                            return _this;
                        }
                        return TGUpdateEvent;
                    }(org.herac.tuxguitar.event.TGEvent));
                    TGUpdateEvent.EVENT_TYPE = "ui-update";
                    TGUpdateEvent.PROPERTY_UPDATE_MODE = "updateMode";
                    TGUpdateEvent.SELECTION = 1;
                    TGUpdateEvent.MEASURE_UPDATED = 2;
                    TGUpdateEvent.SONG_UPDATED = 3;
                    TGUpdateEvent.SONG_LOADED = 4;
                    TGUpdateEvent.SONG_SAVED = 5;
                    event.TGUpdateEvent = TGUpdateEvent;
                    TGUpdateEvent["__class"] = "org.herac.tg.webapp.event.TGUpdateEvent";
                })(event = webapp.event || (webapp.event = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var action;
            (function (action) {
                var TGActionEvent = (function (_super) {
                    __extends(TGActionEvent, _super);
                    function TGActionEvent(eventType, actionId, actionContext) {
                        var _this = _super.call(this, eventType, actionContext) || this;
                        _this.setAttribute(TGActionEvent.ATTRIBUTE_ACTION_ID, actionId);
                        return _this;
                    }
                    return TGActionEvent;
                }(org.herac.tuxguitar.event.TGEvent));
                TGActionEvent.ATTRIBUTE_ACTION_ID = "actionId";
                action.TGActionEvent = TGActionEvent;
                TGActionEvent["__class"] = "org.herac.tuxguitar.action.TGActionEvent";
            })(action = tuxguitar.action || (tuxguitar.action = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var base;
                (function (base) {
                    var TGFileFormatAvailabilityEvent = (function (_super) {
                        __extends(TGFileFormatAvailabilityEvent, _super);
                        function TGFileFormatAvailabilityEvent() {
                            return _super.call(this, TGFileFormatAvailabilityEvent.EVENT_TYPE) || this;
                        }
                        return TGFileFormatAvailabilityEvent;
                    }(org.herac.tuxguitar.event.TGEvent));
                    TGFileFormatAvailabilityEvent.EVENT_TYPE = "file-format-availability";
                    base.TGFileFormatAvailabilityEvent = TGFileFormatAvailabilityEvent;
                    TGFileFormatAvailabilityEvent["__class"] = "org.herac.tuxguitar.io.base.TGFileFormatAvailabilityEvent";
                })(base = io.base || (io.base = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var player;
            (function (player) {
                var base;
                (function (base) {
                    var MidiPlayerEvent = (function (_super) {
                        __extends(MidiPlayerEvent, _super);
                        function MidiPlayerEvent(notificationType) {
                            var _this = _super.call(this, MidiPlayerEvent.EVENT_TYPE) || this;
                            _this.setAttribute(MidiPlayerEvent.PROPERTY_NOTIFICATION_TYPE, javaemul.internal.IntegerHelper.valueOf(notificationType));
                            return _this;
                        }
                        return MidiPlayerEvent;
                    }(org.herac.tuxguitar.event.TGEvent));
                    MidiPlayerEvent.EVENT_TYPE = "midi-player-notification";
                    MidiPlayerEvent.PROPERTY_NOTIFICATION_TYPE = "notificationType";
                    MidiPlayerEvent.NOTIFY_STARTED = 1;
                    MidiPlayerEvent.NOTIFY_STOPPED = 2;
                    MidiPlayerEvent.NOTIFY_COUNT_DOWN_STARTED = 3;
                    MidiPlayerEvent.NOTIFY_COUNT_DOWN_STOPPED = 4;
                    MidiPlayerEvent.NOTIFY_LOOP = 5;
                    base.MidiPlayerEvent = MidiPlayerEvent;
                    MidiPlayerEvent["__class"] = "org.herac.tuxguitar.player.base.MidiPlayerEvent";
                })(base = player.base || (player.base = {}));
            })(player = tuxguitar.player || (tuxguitar.player = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var exception;
                (function (exception) {
                    var TGWebUnsupportedOperationException = (function (_super) {
                        __extends(TGWebUnsupportedOperationException, _super);
                        function TGWebUnsupportedOperationException(message, cause) {
                            var _this = this;
                            if (((typeof message === 'string') || message === null) && ((cause != null && cause instanceof Error) || cause === null)) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this, message, cause) || this;
                            }
                            else if (((typeof message === 'string') || message === null) && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this, message) || this;
                            }
                            else if (((message != null && message instanceof Error) || message === null) && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                var cause_10 = __args[0];
                                _this = _super.call(this, cause_10.message, cause_10) || this;
                            }
                            else if (message === undefined && cause === undefined) {
                                var __args = Array.prototype.slice.call(arguments);
                                _this = _super.call(this) || this;
                            }
                            else
                                throw new Error('invalid overload');
                            return _this;
                        }
                        return TGWebUnsupportedOperationException;
                    }(org.herac.tg.webapp.exception.TGWebRuntimeException));
                    TGWebUnsupportedOperationException.serialVersionUID = 6288731180146551079;
                    exception.TGWebUnsupportedOperationException = TGWebUnsupportedOperationException;
                    TGWebUnsupportedOperationException["__class"] = "org.herac.tg.webapp.exception.TGWebUnsupportedOperationException";
                    TGWebUnsupportedOperationException["__interfaces"] = ["java.io.Serializable"];
                })(exception = webapp.exception || (webapp.exception = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var dev;
                    (function (dev) {
                        var TGSongReaderImpl = (function (_super) {
                            __extends(TGSongReaderImpl, _super);
                            function TGSongReaderImpl() {
                                var _this = _super.call(this) || this;
                                _this.dataInputStream = null;
                                _this.factory = null;
                                return _this;
                            }
                            TGSongReaderImpl.SUPPORTED_FORMAT_$LI$ = function () { if (TGSongReaderImpl.SUPPORTED_FORMAT == null)
                                TGSongReaderImpl.SUPPORTED_FORMAT = new org.herac.tuxguitar.io.tg.TGFileFormatVersion(org.herac.tuxguitar.io.tg.dev.TGStream.TG_FORMAT_$LI$(), org.herac.tuxguitar.io.tg.dev.TGStream.TG_FORMAT_VERSION_$LI$()); return TGSongReaderImpl.SUPPORTED_FORMAT; };
                            ;
                            TGSongReaderImpl.prototype.getFileFormat = function () {
                                return org.herac.tuxguitar.io.tg.dev.TGStream.TG_FORMAT_$LI$();
                            };
                            TGSongReaderImpl.prototype.read$org_herac_tuxguitar_io_base_TGSongReaderHandle = function (handle) {
                                try {
                                    this.factory = handle.getFactory();
                                    this.dataInputStream = new java.io.DataInputStream(handle.getInputStream());
                                    var fileFormat = new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(TGSongReaderImpl.SUPPORTED_FORMAT_$LI$()).getFileFormat(this.dataInputStream);
                                    if (fileFormat == null || !(function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(fileFormat, this.getFileFormat())) {
                                        throw new org.herac.tuxguitar.io.base.TGFileFormatException("Unsupported Version");
                                    }
                                    var song_9 = this.read();
                                    this.dataInputStream.close();
                                    handle.setSong(song_9);
                                }
                                catch (throwable) {
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException(throwable);
                                }
                                ;
                            };
                            TGSongReaderImpl.prototype.read = function (handle) {
                                if (((handle != null && handle instanceof org.herac.tuxguitar.io.base.TGSongReaderHandle) || handle === null)) {
                                    return this.read$org_herac_tuxguitar_io_base_TGSongReaderHandle(handle);
                                }
                                else if (handle === undefined) {
                                    return this.read$();
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongReaderImpl.prototype.read$ = function () {
                                var song = this.factory.newSong();
                                song.setName(this.readUnsignedByteString());
                                song.setArtist(this.readUnsignedByteString());
                                song.setAlbum(this.readUnsignedByteString());
                                song.setAuthor(this.readUnsignedByteString());
                                song.setDate(this.readUnsignedByteString());
                                song.setCopyright(this.readUnsignedByteString());
                                song.setWriter(this.readUnsignedByteString());
                                song.setTranscriber(this.readUnsignedByteString());
                                song.setComments(this.readIntegerString());
                                var channelCount = this.readByte();
                                for (var i = 0; i < channelCount; i++) {
                                    song.addChannel$org_herac_tuxguitar_song_models_TGChannel(this.readChannel());
                                }
                                var headerCount = this.readShort();
                                var lastHeader = null;
                                var headerStart = org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME;
                                for (var i = 0; i < headerCount; i++) {
                                    var header = this.readMeasureHeader(i + 1, headerStart, lastHeader);
                                    song.addMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader(header);
                                    headerStart += header.getLength();
                                    lastHeader = header;
                                }
                                var trackCount = this.readByte();
                                for (var i = 0; i < trackCount; i++) {
                                    song.addTrack$org_herac_tuxguitar_song_models_TGTrack(this.readTrack(i + 1, song));
                                }
                                return song;
                            };
                            TGSongReaderImpl.prototype.readTrack = function (number, song) {
                                var header = this.readHeader();
                                var track = this.factory.newTrack();
                                track.setNumber(number);
                                track.setName(this.readUnsignedByteString());
                                track.setSolo((header & org.herac.tuxguitar.io.tg.dev.TGStream.TRACK_SOLO) !== 0);
                                track.setMute((header & org.herac.tuxguitar.io.tg.dev.TGStream.TRACK_MUTE) !== 0);
                                track.setChannelId(this.readShort());
                                var measureCount = song.countMeasureHeaders();
                                var lastMeasure = null;
                                for (var i = 0; i < measureCount; i++) {
                                    var measure = this.readMeasure(song.getMeasureHeader(i), lastMeasure);
                                    track.addMeasure$org_herac_tuxguitar_song_models_TGMeasure(measure);
                                    lastMeasure = measure;
                                }
                                var stringCount = this.readByte();
                                for (var i = 0; i < stringCount; i++) {
                                    track.getStrings().add(this.readInstrumentString(i + 1));
                                }
                                track.setOffset(org.herac.tuxguitar.song.models.TGTrack.MIN_OFFSET + this.readByte());
                                this.readRGBColor(track.getColor());
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.TRACK_LYRICS) !== 0)) {
                                    this.readLyrics(track.getLyrics());
                                }
                                return track;
                            };
                            TGSongReaderImpl.prototype.readMeasureHeader = function (number, start, lastMeasureHeader) {
                                var header = this.readHeader();
                                var measureHeader = this.factory.newHeader();
                                measureHeader.setNumber(number);
                                measureHeader.setStart(start);
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.MEASURE_HEADER_TIMESIGNATURE) !== 0)) {
                                    this.readTimeSignature(measureHeader.getTimeSignature());
                                }
                                else if (lastMeasureHeader != null) {
                                    measureHeader.getTimeSignature().copyFrom(lastMeasureHeader.getTimeSignature());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.MEASURE_HEADER_TEMPO) !== 0)) {
                                    this.readTempo(measureHeader.getTempo());
                                }
                                else if (lastMeasureHeader != null) {
                                    measureHeader.getTempo().copyFrom(lastMeasureHeader.getTempo());
                                }
                                measureHeader.setRepeatOpen((header & org.herac.tuxguitar.io.tg.dev.TGStream.MEASURE_HEADER_REPEAT_OPEN) !== 0);
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.MEASURE_HEADER_REPEAT_CLOSE) !== 0)) {
                                    measureHeader.setRepeatClose(this.readShort());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE) !== 0)) {
                                    measureHeader.setRepeatAlternative(this.readByte());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.MEASURE_HEADER_MARKER) !== 0)) {
                                    measureHeader.setMarker(this.readMarker(number));
                                }
                                measureHeader.setTripletFeel((lastMeasureHeader != null) ? lastMeasureHeader.getTripletFeel() : org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_NONE);
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.MEASURE_HEADER_TRIPLET_FEEL) !== 0)) {
                                    measureHeader.setTripletFeel(this.readByte());
                                }
                                return measureHeader;
                            };
                            TGSongReaderImpl.prototype.readMeasure = function (measureHeader, lastMeasure) {
                                var header = this.readHeader();
                                var measure = this.factory.newMeasure(measureHeader);
                                var data = new dev.TGStream.TGBeatData(this.__parent, measure);
                                this.readBeats(measure, data);
                                measure.setClef((lastMeasure == null) ? org.herac.tuxguitar.song.models.TGMeasure.CLEF_TREBLE : lastMeasure.getClef());
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.MEASURE_CLEF) !== 0)) {
                                    measure.setClef(this.readByte());
                                }
                                measure.setKeySignature((lastMeasure == null) ? 0 : lastMeasure.getKeySignature());
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.MEASURE_KEYSIGNATURE) !== 0)) {
                                    measure.setKeySignature(this.readByte());
                                }
                                return measure;
                            };
                            TGSongReaderImpl.prototype.readChannel = function () {
                                var channel = this.factory.newChannel();
                                channel.setChannelId(this.readShort());
                                var channel1 = (this.readByte() & 255);
                                var gmChannel1Param = this.factory.newChannelParameter();
                                gmChannel1Param.setKey(org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_1);
                                gmChannel1Param.setValue(/* toString */ ('' + (channel1)));
                                channel.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(gmChannel1Param);
                                var channel2 = (this.readByte() & 255);
                                var gmChannel2Param = this.factory.newChannelParameter();
                                gmChannel2Param.setKey(org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_2);
                                gmChannel2Param.setValue(/* toString */ ('' + (channel2)));
                                channel.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(gmChannel2Param);
                                channel.setBank(((this.readByte() & 255) | 0));
                                channel.setProgram(((this.readByte() & 255) | 0));
                                channel.setVolume(((this.readByte() & 255) | 0));
                                channel.setBalance(((this.readByte() & 255) | 0));
                                channel.setChorus(((this.readByte() & 255) | 0));
                                channel.setReverb(((this.readByte() & 255) | 0));
                                channel.setPhaser(((this.readByte() & 255) | 0));
                                channel.setTremolo(((this.readByte() & 255) | 0));
                                channel.setName(this.readUnsignedByteString());
                                return channel;
                            };
                            TGSongReaderImpl.prototype.readBeats = function (measure, data) {
                                var header = org.herac.tuxguitar.io.tg.dev.TGStream.BEAT_HAS_NEXT;
                                while ((((header & org.herac.tuxguitar.io.tg.dev.TGStream.BEAT_HAS_NEXT) !== 0))) {
                                    header = this.readHeader();
                                    this.readBeat(header, measure, data);
                                }
                                ;
                            };
                            TGSongReaderImpl.prototype.readBeat = function (header, measure, data) {
                                var beat = this.factory.newBeat();
                                beat.setStart(data.getCurrentStart());
                                this.readVoices(header, beat, data);
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.BEAT_HAS_STROKE) !== 0)) {
                                    this.readStroke(beat.getStroke());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.BEAT_HAS_CHORD) !== 0)) {
                                    this.readChord(beat);
                                }
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.BEAT_HAS_TEXT) !== 0)) {
                                    this.readText(beat);
                                }
                                measure.addBeat(beat);
                            };
                            TGSongReaderImpl.prototype.readVoices = function (header, beat, data) {
                                for (var i = 0; i < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; i++) {
                                    var shift = (i * 2);
                                    beat.getVoice(i).setEmpty(true);
                                    if (((header & (org.herac.tuxguitar.io.tg.dev.TGStream.BEAT_HAS_VOICE << shift)) !== 0)) {
                                        if (((header & (org.herac.tuxguitar.io.tg.dev.TGStream.BEAT_HAS_VOICE_CHANGES << shift)) !== 0)) {
                                            data.getVoice(i).setFlags(this.readHeader());
                                        }
                                        var flags = data.getVoice(i).getFlags();
                                        if (((flags & org.herac.tuxguitar.io.tg.dev.TGStream.VOICE_NEXT_DURATION) !== 0)) {
                                            this.readDuration(data.getVoice(i).getDuration());
                                        }
                                        if (((flags & org.herac.tuxguitar.io.tg.dev.TGStream.VOICE_HAS_NOTES) !== 0)) {
                                            this.readNotes(beat.getVoice(i), data);
                                        }
                                        if (((flags & org.herac.tuxguitar.io.tg.dev.TGStream.VOICE_DIRECTION_UP) !== 0)) {
                                            beat.getVoice(i).setDirection(org.herac.tuxguitar.song.models.TGVoice.DIRECTION_UP);
                                        }
                                        else if (((flags & org.herac.tuxguitar.io.tg.dev.TGStream.VOICE_DIRECTION_DOWN) !== 0)) {
                                            beat.getVoice(i).setDirection(org.herac.tuxguitar.song.models.TGVoice.DIRECTION_DOWN);
                                        }
                                        beat.getVoice(i).getDuration().copyFrom(data.getVoice(i).getDuration());
                                        data.getVoice(i).setStart(data.getVoice(i).getStart() + beat.getVoice(i).getDuration().getTime());
                                        beat.getVoice(i).setEmpty(false);
                                    }
                                }
                            };
                            TGSongReaderImpl.prototype.readNotes = function (voice, data) {
                                var header = org.herac.tuxguitar.io.tg.dev.TGStream.NOTE_HAS_NEXT;
                                while ((((header & org.herac.tuxguitar.io.tg.dev.TGStream.NOTE_HAS_NEXT) !== 0))) {
                                    header = this.readHeader();
                                    this.readNote(header, voice, data);
                                }
                                ;
                            };
                            TGSongReaderImpl.prototype.readNote = function (header, voice, data) {
                                var note = this.factory.newNote();
                                note.setValue(this.readByte());
                                note.setString(this.readByte());
                                note.setTiedNote((header & org.herac.tuxguitar.io.tg.dev.TGStream.NOTE_TIED) !== 0);
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.NOTE_VELOCITY) !== 0)) {
                                    data.getVoice(voice.getIndex()).setVelocity(this.readByte());
                                }
                                note.setVelocity(data.getVoice(voice.getIndex()).getVelocity());
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.NOTE_EFFECT) !== 0)) {
                                    this.readNoteEffect(note.getEffect());
                                }
                                voice.addNote(note);
                            };
                            TGSongReaderImpl.prototype.readChord = function (beat) {
                                var chord = this.factory.newChord(this.readByte());
                                chord.setName(this.readUnsignedByteString());
                                chord.setFirstFret(this.readByte());
                                for (var string = 0; string < chord.countStrings(); string++) {
                                    chord.addFretValue(string, this.readByte());
                                }
                                beat.setChord(chord);
                            };
                            TGSongReaderImpl.prototype.readText = function (beat) {
                                var text = this.factory.newText();
                                text.setValue(this.readUnsignedByteString());
                                beat.setText(text);
                            };
                            TGSongReaderImpl.prototype.readInstrumentString = function (number) {
                                var string = this.factory.newString();
                                string.setNumber(number);
                                string.setValue(this.readByte());
                                return string;
                            };
                            TGSongReaderImpl.prototype.readTempo = function (tempo) {
                                tempo.setValue(this.readShort());
                            };
                            TGSongReaderImpl.prototype.readTimeSignature = function (timeSignature) {
                                timeSignature.setNumerator(this.readByte());
                                this.readDuration(timeSignature.getDenominator());
                            };
                            TGSongReaderImpl.prototype.readDuration = function (duration) {
                                var header = this.readHeader();
                                duration.setDotted((header & org.herac.tuxguitar.io.tg.dev.TGStream.DURATION_DOTTED) !== 0);
                                duration.setDoubleDotted((header & org.herac.tuxguitar.io.tg.dev.TGStream.DURATION_DOUBLE_DOTTED) !== 0);
                                duration.setValue(this.readByte());
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.DURATION_NO_TUPLET) !== 0)) {
                                    this.readDivisionType(duration.getDivision());
                                }
                                else {
                                    duration.getDivision().copyFrom(org.herac.tuxguitar.song.models.TGDivisionType.NORMAL_$LI$());
                                }
                            };
                            TGSongReaderImpl.prototype.readDivisionType = function (divisionType) {
                                divisionType.setEnters(this.readByte());
                                divisionType.setTimes(this.readByte());
                            };
                            TGSongReaderImpl.prototype.readStroke = function (stroke) {
                                stroke.setDirection(this.readByte());
                                stroke.setValue(this.readByte());
                            };
                            TGSongReaderImpl.prototype.readNoteEffect = function (effect) {
                                var header = this.readHeader$int(3);
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_BEND) !== 0)) {
                                    effect.setBend(this.readBendEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_TREMOLO_BAR) !== 0)) {
                                    effect.setTremoloBar(this.readTremoloBarEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_HARMONIC) !== 0)) {
                                    effect.setHarmonic(this.readHarmonicEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_GRACE) !== 0)) {
                                    effect.setGrace(this.readGraceEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_TRILL) !== 0)) {
                                    effect.setTrill(this.readTrillEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_TREMOLO_PICKING) !== 0)) {
                                    effect.setTremoloPicking(this.readTremoloPickingEffect());
                                }
                                effect.setVibrato(((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_VIBRATO) !== 0));
                                effect.setDeadNote(((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_DEAD) !== 0));
                                effect.setSlide(((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_SLIDE) !== 0));
                                effect.setHammer(((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_HAMMER) !== 0));
                                effect.setGhostNote(((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_GHOST) !== 0));
                                effect.setAccentuatedNote(((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_ACCENTUATED) !== 0));
                                effect.setHeavyAccentuatedNote(((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_HEAVY_ACCENTUATED) !== 0));
                                effect.setPalmMute(((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_PALM_MUTE) !== 0));
                                effect.setStaccato(((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_STACCATO) !== 0));
                                effect.setTapping(((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_TAPPING) !== 0));
                                effect.setSlapping(((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_SLAPPING) !== 0));
                                effect.setPopping(((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_POPPING) !== 0));
                                effect.setFadeIn(((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_FADE_IN) !== 0));
                                effect.setLetRing(((header & org.herac.tuxguitar.io.tg.dev.TGStream.EFFECT_LET_RING) !== 0));
                            };
                            TGSongReaderImpl.prototype.readBendEffect = function () {
                                var bend = this.factory.newEffectBend();
                                var count = this.readByte();
                                for (var i = 0; i < count; i++) {
                                    var position = this.readByte();
                                    var value = this.readByte();
                                    bend.addPoint(position, value);
                                }
                                return bend;
                            };
                            TGSongReaderImpl.prototype.readTremoloBarEffect = function () {
                                var tremoloBar = this.factory.newEffectTremoloBar();
                                var count = this.readByte();
                                for (var i = 0; i < count; i++) {
                                    var position = this.readByte();
                                    var value = (this.readByte() - org.herac.tuxguitar.song.models.effects.TGEffectTremoloBar.MAX_VALUE_LENGTH);
                                    tremoloBar.addPoint(position, value);
                                }
                                return tremoloBar;
                            };
                            TGSongReaderImpl.prototype.readHarmonicEffect = function () {
                                var effect = this.factory.newEffectHarmonic();
                                effect.setType(this.readByte());
                                if (effect.getType() !== org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.TYPE_NATURAL) {
                                    effect.setData(this.readByte());
                                }
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readGraceEffect = function () {
                                var header = this.readHeader();
                                var effect = this.factory.newEffectGrace();
                                effect.setDead((header & org.herac.tuxguitar.io.tg.dev.TGStream.GRACE_FLAG_DEAD) !== 0);
                                effect.setOnBeat((header & org.herac.tuxguitar.io.tg.dev.TGStream.GRACE_FLAG_ON_BEAT) !== 0);
                                effect.setFret(this.readByte());
                                effect.setDuration(this.readByte());
                                effect.setDynamic(this.readByte());
                                effect.setTransition(this.readByte());
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readTremoloPickingEffect = function () {
                                var effect = this.factory.newEffectTremoloPicking();
                                effect.getDuration().setValue(this.readByte());
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readTrillEffect = function () {
                                var effect = this.factory.newEffectTrill();
                                effect.setFret(this.readByte());
                                effect.getDuration().setValue(this.readByte());
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readMarker = function (measure) {
                                var marker = this.factory.newMarker();
                                marker.setMeasure(measure);
                                marker.setTitle(this.readUnsignedByteString());
                                this.readRGBColor(marker.getColor());
                                return marker;
                            };
                            TGSongReaderImpl.prototype.readRGBColor = function (color) {
                                color.setR((this.readByte() & 255));
                                color.setG((this.readByte() & 255));
                                color.setB((this.readByte() & 255));
                            };
                            TGSongReaderImpl.prototype.readLyrics = function (lyrics) {
                                lyrics.setFrom(this.readShort());
                                lyrics.setLyrics(this.readIntegerString());
                            };
                            TGSongReaderImpl.prototype.readByte = function () {
                                return (this.dataInputStream.read() | 0);
                            };
                            TGSongReaderImpl.prototype.readHeader$ = function () {
                                return this.dataInputStream.read();
                            };
                            TGSongReaderImpl.prototype.readHeader$int = function (bCount) {
                                var header = 0;
                                for (var i = bCount; i > 0; i--) {
                                    header += (this.readHeader() << ((8 * i) - 8));
                                }
                                return header;
                            };
                            TGSongReaderImpl.prototype.readHeader = function (bCount) {
                                if (((typeof bCount === 'number') || bCount === null)) {
                                    return this.readHeader$int(bCount);
                                }
                                else if (bCount === undefined) {
                                    return this.readHeader$();
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongReaderImpl.prototype.readShort = function () {
                                return this.dataInputStream.readShort();
                            };
                            TGSongReaderImpl.prototype.readUnsignedByteString = function () {
                                return this.readString((this.dataInputStream.read() & 255));
                            };
                            TGSongReaderImpl.prototype.readIntegerString = function () {
                                return this.readString(this.dataInputStream.readInt());
                            };
                            TGSongReaderImpl.prototype.readString = function (length) {
                                var sb = new java.lang.StringBuilder();
                                for (var i = 0; i < length; i++) {
                                    sb.append(this.dataInputStream.readChar());
                                }
                                return sb.toString();
                            };
                            return TGSongReaderImpl;
                        }(org.herac.tuxguitar.io.tg.dev.TGStream));
                        dev.TGSongReaderImpl = TGSongReaderImpl;
                        TGSongReaderImpl["__class"] = "org.herac.tuxguitar.io.tg.dev.TGSongReaderImpl";
                        TGSongReaderImpl["__interfaces"] = ["org.herac.tuxguitar.io.base.TGSongReader", "org.herac.tuxguitar.io.base.TGSongPersistenceHandler"];
                    })(dev = tg.dev || (tg.dev = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v10;
                    (function (v10) {
                        var TGSongReaderImpl = (function (_super) {
                            __extends(TGSongReaderImpl, _super);
                            function TGSongReaderImpl() {
                                var _this = _super.call(this) || this;
                                _this.dataInputStream = null;
                                _this.factory = null;
                                return _this;
                            }
                            TGSongReaderImpl.SUPPORTED_FORMAT_$LI$ = function () { if (TGSongReaderImpl.SUPPORTED_FORMAT == null)
                                TGSongReaderImpl.SUPPORTED_FORMAT = new org.herac.tuxguitar.io.tg.TGFileFormatVersion(org.herac.tuxguitar.io.tg.v10.TGStream.TG_FORMAT_$LI$(), org.herac.tuxguitar.io.tg.v10.TGStream.TG_FORMAT_VERSION_$LI$()); return TGSongReaderImpl.SUPPORTED_FORMAT; };
                            ;
                            TGSongReaderImpl.prototype.read$org_herac_tuxguitar_io_base_TGSongReaderHandle = function (handle) {
                                try {
                                    this.factory = handle.getFactory();
                                    this.dataInputStream = new java.io.DataInputStream(handle.getInputStream());
                                    var fileFormat = new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(TGSongReaderImpl.SUPPORTED_FORMAT_$LI$()).getFileFormat(this.dataInputStream);
                                    if (fileFormat == null || !(function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(fileFormat, this.getFileFormat())) {
                                        throw new org.herac.tuxguitar.io.base.TGFileFormatException("Unsupported Version");
                                    }
                                    var song_10 = this.read();
                                    this.dataInputStream.close();
                                    handle.setSong(song_10);
                                }
                                catch (throwable) {
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException(throwable);
                                }
                                ;
                            };
                            TGSongReaderImpl.prototype.read = function (handle) {
                                if (((handle != null && handle instanceof org.herac.tuxguitar.io.base.TGSongReaderHandle) || handle === null)) {
                                    return this.read$org_herac_tuxguitar_io_base_TGSongReaderHandle(handle);
                                }
                                else if (handle === undefined) {
                                    return this.read$();
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongReaderImpl.prototype.read$ = function () {
                                var song = this.factory.newSong();
                                song.setName(this.readUnsignedByteString());
                                song.setArtist(this.readUnsignedByteString());
                                song.setAlbum(this.readUnsignedByteString());
                                song.setAuthor(this.readUnsignedByteString());
                                var headerCount = this.readShort();
                                var lastHeader = null;
                                var headerStart = org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME;
                                for (var i = 0; i < headerCount; i++) {
                                    var header = this.readMeasureHeader(i + 1, headerStart, lastHeader);
                                    song.addMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader(header);
                                    headerStart += header.getLength();
                                    lastHeader = header;
                                }
                                var trackCount = this.readByte();
                                for (var i = 0; i < trackCount; i++) {
                                    song.addTrack$org_herac_tuxguitar_song_models_TGTrack(this.readTrack(i + 1, song));
                                }
                                return song;
                            };
                            TGSongReaderImpl.prototype.readTrack = function (number, song) {
                                var header = this.readHeader();
                                var track = this.factory.newTrack();
                                track.setNumber(number);
                                track.setName(this.readUnsignedByteString());
                                this.readChannel(song, track);
                                var measureCount = song.countMeasureHeaders();
                                var lastMeasure = null;
                                for (var i = 0; i < measureCount; i++) {
                                    var measure = this.readMeasure(song.getMeasureHeader(i), lastMeasure);
                                    track.addMeasure$org_herac_tuxguitar_song_models_TGMeasure(measure);
                                    lastMeasure = measure;
                                }
                                var stringCount = this.readByte();
                                for (var i = 0; i < stringCount; i++) {
                                    track.getStrings().add(this.readInstrumentString(i + 1));
                                }
                                track.setOffset(org.herac.tuxguitar.song.models.TGTrack.MIN_OFFSET + this.readByte());
                                this.readRGBColor(track.getColor());
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.TRACK_LYRICS) !== 0)) {
                                    this.readLyrics(track.getLyrics());
                                }
                                return track;
                            };
                            TGSongReaderImpl.prototype.readMeasureHeader = function (number, start, lastMeasureHeader) {
                                var header = this.readHeader();
                                var measureHeader = this.factory.newHeader();
                                measureHeader.setNumber(number);
                                measureHeader.setStart(start);
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_TIMESIGNATURE) !== 0)) {
                                    this.readTimeSignature(measureHeader.getTimeSignature());
                                }
                                else if (lastMeasureHeader != null) {
                                    measureHeader.getTimeSignature().copyFrom(lastMeasureHeader.getTimeSignature());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_TEMPO) !== 0)) {
                                    this.readTempo(measureHeader.getTempo());
                                }
                                else if (lastMeasureHeader != null) {
                                    measureHeader.getTempo().copyFrom(lastMeasureHeader.getTempo());
                                }
                                measureHeader.setRepeatOpen((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_REPEAT_OPEN) !== 0);
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_REPEAT_CLOSE) !== 0)) {
                                    measureHeader.setRepeatClose(this.readShort());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE) !== 0)) {
                                    measureHeader.setRepeatAlternative(this.readByte());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_MARKER) !== 0)) {
                                    measureHeader.setMarker(this.readMarker(number));
                                }
                                measureHeader.setTripletFeel((lastMeasureHeader != null) ? lastMeasureHeader.getTripletFeel() : org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_NONE);
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_TRIPLET_FEEL) !== 0)) {
                                    measureHeader.setTripletFeel(this.readByte());
                                }
                                return measureHeader;
                            };
                            TGSongReaderImpl.prototype.readMeasure = function (measureHeader, lastMeasure) {
                                var header = this.readHeader();
                                var measure = this.factory.newMeasure(measureHeader);
                                var data = new v10.TGStream.TGBeatData(this.__parent, measure);
                                this.readBeats(measure, data);
                                measure.setClef((lastMeasure == null) ? org.herac.tuxguitar.song.models.TGMeasure.CLEF_TREBLE : lastMeasure.getClef());
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_CLEF) !== 0)) {
                                    measure.setClef(this.readByte());
                                }
                                measure.setKeySignature((lastMeasure == null) ? 0 : lastMeasure.getKeySignature());
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_KEYSIGNATURE) !== 0)) {
                                    measure.setKeySignature(this.readByte());
                                }
                                return measure;
                            };
                            TGSongReaderImpl.prototype.readChannel = function (song, track) {
                                var header = this.readHeader();
                                var channel = this.factory.newChannel();
                                var gmChannel1Param = this.factory.newChannelParameter();
                                var gmChannel2Param = this.factory.newChannelParameter();
                                var channel1 = (this.readByte() & 255);
                                gmChannel1Param.setKey(org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_1);
                                gmChannel1Param.setValue(/* toString */ ('' + (channel1)));
                                var channel2 = (this.readByte() & 255);
                                gmChannel2Param.setKey(org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_2);
                                gmChannel2Param.setValue(/* toString */ ('' + (channel2)));
                                channel.setBank(channel1 === 9 ? org.herac.tuxguitar.song.models.TGChannel.DEFAULT_PERCUSSION_BANK : org.herac.tuxguitar.song.models.TGChannel.DEFAULT_BANK);
                                channel.setProgram(this.readByte());
                                channel.setVolume(this.readByte());
                                channel.setBalance(this.readByte());
                                channel.setChorus(this.readByte());
                                channel.setReverb(this.readByte());
                                channel.setPhaser(this.readByte());
                                channel.setTremolo(this.readByte());
                                track.setSolo((header & org.herac.tuxguitar.io.tg.v10.TGStream.CHANNEL_SOLO) !== 0);
                                track.setMute((header & org.herac.tuxguitar.io.tg.v10.TGStream.CHANNEL_MUTE) !== 0);
                                for (var i = 0; i < song.countChannels(); i++) {
                                    var channelAux = song.getChannel(i);
                                    for (var n = 0; n < channelAux.countParameters(); n++) {
                                        var channelParameter = channelAux.getParameter(n);
                                        if ((function (o1, o2) { if (o1.equals) {
                                            return o1.equals(o2);
                                        }
                                        else {
                                            return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                        } })(channelParameter.getKey(), org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_1)) {
                                            if ((function (o1, o2) { if (o1.equals) {
                                                return o1.equals(o2);
                                            }
                                            else {
                                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                            } })(/* toString */ ('' + (channel1)), channelParameter.getValue())) {
                                                channel.setChannelId(channelAux.getChannelId());
                                            }
                                        }
                                    }
                                }
                                if (channel.getChannelId() <= 0) {
                                    channel.setChannelId(song.countChannels() + 1);
                                    channel.setName(new org.herac.tuxguitar.song.managers.TGSongManager(this.factory).createChannelNameFromProgram(song, channel));
                                    channel.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(gmChannel1Param);
                                    channel.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(gmChannel2Param);
                                    song.addChannel$org_herac_tuxguitar_song_models_TGChannel(channel);
                                }
                                track.setChannelId(channel.getChannelId());
                            };
                            TGSongReaderImpl.prototype.readBeats = function (measure, data) {
                                var header = org.herac.tuxguitar.io.tg.v10.TGStream.BEAT_HAS_NEXT;
                                while ((((header & org.herac.tuxguitar.io.tg.v10.TGStream.BEAT_HAS_NEXT) !== 0))) {
                                    header = this.readHeader();
                                    this.readBeat(header, measure, data);
                                }
                                ;
                            };
                            TGSongReaderImpl.prototype.readBeat = function (header, measure, data) {
                                var beat = this.factory.newBeat();
                                var voice = beat.getVoice(0);
                                beat.setStart(data.getStart());
                                voice.setEmpty(false);
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.BEAT_NEXT_DURATION) !== 0)) {
                                    this.readDuration(data.getDuration());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.BEAT_HAS_NOTES) !== 0)) {
                                    this.readNotes(beat, data);
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.BEAT_HAS_CHORD) !== 0)) {
                                    this.readChord(beat);
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.BEAT_HAS_TEXT) !== 0)) {
                                    this.readText(beat);
                                }
                                voice.getDuration().copyFrom(data.getDuration());
                                measure.addBeat(beat);
                                data.setStart(data.getStart() + data.getDuration().getTime());
                            };
                            TGSongReaderImpl.prototype.readNotes = function (beat, data) {
                                var header = org.herac.tuxguitar.io.tg.v10.TGStream.NOTE_HAS_NEXT;
                                while ((((header & org.herac.tuxguitar.io.tg.v10.TGStream.NOTE_HAS_NEXT) !== 0))) {
                                    header = this.readHeader();
                                    this.readNote(header, beat, data);
                                }
                                ;
                            };
                            TGSongReaderImpl.prototype.readNote = function (header, beat, data) {
                                var note = this.factory.newNote();
                                var voice = beat.getVoice(0);
                                note.setValue(this.readByte());
                                note.setString(this.readByte());
                                note.setTiedNote((header & org.herac.tuxguitar.io.tg.v10.TGStream.NOTE_TIED) !== 0);
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.NOTE_VELOCITY) !== 0)) {
                                    data.setVelocity(this.readByte());
                                }
                                note.setVelocity(data.getVelocity());
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.NOTE_EFFECT) !== 0)) {
                                    this.readNoteEffect(note.getEffect());
                                }
                                voice.addNote(note);
                            };
                            TGSongReaderImpl.prototype.readChord = function (beat) {
                                var chord = this.factory.newChord(this.readByte());
                                chord.setName(this.readUnsignedByteString());
                                chord.setFirstFret(this.readByte());
                                for (var string = 0; string < chord.countStrings(); string++) {
                                    chord.addFretValue(string, this.readByte());
                                }
                                beat.setChord(chord);
                            };
                            TGSongReaderImpl.prototype.readText = function (beat) {
                                var text = this.factory.newText();
                                text.setValue(this.readUnsignedByteString());
                                beat.setText(text);
                            };
                            TGSongReaderImpl.prototype.readInstrumentString = function (number) {
                                var string = this.factory.newString();
                                string.setNumber(number);
                                string.setValue(this.readByte());
                                return string;
                            };
                            TGSongReaderImpl.prototype.readTempo = function (tempo) {
                                tempo.setValue(this.readShort());
                            };
                            TGSongReaderImpl.prototype.readTimeSignature = function (timeSignature) {
                                timeSignature.setNumerator(this.readByte());
                                this.readDuration(timeSignature.getDenominator());
                            };
                            TGSongReaderImpl.prototype.readDuration = function (duration) {
                                var header = this.readHeader();
                                duration.setDotted((header & org.herac.tuxguitar.io.tg.v10.TGStream.DURATION_DOTTED) !== 0);
                                duration.setDoubleDotted((header & org.herac.tuxguitar.io.tg.v10.TGStream.DURATION_DOUBLE_DOTTED) !== 0);
                                duration.setValue(this.readByte());
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.DURATION_NO_TUPLET) !== 0)) {
                                    this.readDivisionType(duration.getDivision());
                                }
                                else {
                                    duration.getDivision().copyFrom(org.herac.tuxguitar.song.models.TGDivisionType.NORMAL_$LI$());
                                }
                            };
                            TGSongReaderImpl.prototype.readDivisionType = function (divisionType) {
                                divisionType.setEnters(this.readByte());
                                divisionType.setTimes(this.readByte());
                            };
                            TGSongReaderImpl.prototype.readNoteEffect = function (effect) {
                                var header = this.readHeader$int(3);
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_BEND) !== 0)) {
                                    effect.setBend(this.readBendEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_TREMOLO_BAR) !== 0)) {
                                    effect.setTremoloBar(this.readTremoloBarEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_HARMONIC) !== 0)) {
                                    effect.setHarmonic(this.readHarmonicEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_GRACE) !== 0)) {
                                    effect.setGrace(this.readGraceEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_TRILL) !== 0)) {
                                    effect.setTrill(this.readTrillEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_TREMOLO_PICKING) !== 0)) {
                                    effect.setTremoloPicking(this.readTremoloPickingEffect());
                                }
                                effect.setVibrato(((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_VIBRATO) !== 0));
                                effect.setDeadNote(((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_DEAD) !== 0));
                                effect.setSlide(((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_SLIDE) !== 0));
                                effect.setHammer(((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_HAMMER) !== 0));
                                effect.setGhostNote(((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_GHOST) !== 0));
                                effect.setAccentuatedNote(((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_ACCENTUATED) !== 0));
                                effect.setHeavyAccentuatedNote(((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_HEAVY_ACCENTUATED) !== 0));
                                effect.setPalmMute(((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_PALM_MUTE) !== 0));
                                effect.setStaccato(((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_STACCATO) !== 0));
                                effect.setTapping(((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_TAPPING) !== 0));
                                effect.setSlapping(((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_SLAPPING) !== 0));
                                effect.setPopping(((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_POPPING) !== 0));
                                effect.setFadeIn(((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_FADE_IN) !== 0));
                            };
                            TGSongReaderImpl.prototype.readBendEffect = function () {
                                var bend = this.factory.newEffectBend();
                                var count = this.readByte();
                                for (var i = 0; i < count; i++) {
                                    var position = this.readByte();
                                    var value = this.readByte();
                                    bend.addPoint(position, value);
                                }
                                return bend;
                            };
                            TGSongReaderImpl.prototype.readTremoloBarEffect = function () {
                                var tremoloBar = this.factory.newEffectTremoloBar();
                                var count = this.readByte();
                                for (var i = 0; i < count; i++) {
                                    var position = this.readByte();
                                    var value = (this.readByte() - org.herac.tuxguitar.song.models.effects.TGEffectTremoloBar.MAX_VALUE_LENGTH);
                                    tremoloBar.addPoint(position, value);
                                }
                                return tremoloBar;
                            };
                            TGSongReaderImpl.prototype.readHarmonicEffect = function () {
                                var effect = this.factory.newEffectHarmonic();
                                effect.setType(this.readByte());
                                if (effect.getType() !== org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.TYPE_NATURAL) {
                                    effect.setData(this.readByte());
                                }
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readGraceEffect = function () {
                                var header = this.readHeader();
                                var effect = this.factory.newEffectGrace();
                                effect.setDead((header & org.herac.tuxguitar.io.tg.v10.TGStream.GRACE_FLAG_DEAD) !== 0);
                                effect.setOnBeat((header & org.herac.tuxguitar.io.tg.v10.TGStream.GRACE_FLAG_ON_BEAT) !== 0);
                                effect.setFret(this.readByte());
                                effect.setDuration(this.readByte());
                                effect.setDynamic(this.readByte());
                                effect.setTransition(this.readByte());
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readTremoloPickingEffect = function () {
                                var effect = this.factory.newEffectTremoloPicking();
                                effect.getDuration().setValue(this.readByte());
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readTrillEffect = function () {
                                var effect = this.factory.newEffectTrill();
                                effect.setFret(this.readByte());
                                effect.getDuration().setValue(this.readByte());
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readMarker = function (measure) {
                                var marker = this.factory.newMarker();
                                marker.setMeasure(measure);
                                marker.setTitle(this.readUnsignedByteString());
                                this.readRGBColor(marker.getColor());
                                return marker;
                            };
                            TGSongReaderImpl.prototype.readRGBColor = function (color) {
                                color.setR((this.readByte() & 255));
                                color.setG((this.readByte() & 255));
                                color.setB((this.readByte() & 255));
                            };
                            TGSongReaderImpl.prototype.readLyrics = function (lyrics) {
                                lyrics.setFrom(this.readShort());
                                lyrics.setLyrics(this.readIntegerString());
                            };
                            TGSongReaderImpl.prototype.readByte = function () {
                                try {
                                    return (this.dataInputStream.read() | 0);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readHeader$ = function () {
                                try {
                                    return this.dataInputStream.read();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readHeader$int = function (bCount) {
                                var header = 0;
                                for (var i = bCount; i > 0; i--) {
                                    header += (this.readHeader() << ((8 * i) - 8));
                                }
                                return header;
                            };
                            TGSongReaderImpl.prototype.readHeader = function (bCount) {
                                if (((typeof bCount === 'number') || bCount === null)) {
                                    return this.readHeader$int(bCount);
                                }
                                else if (bCount === undefined) {
                                    return this.readHeader$();
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongReaderImpl.prototype.readShort = function () {
                                try {
                                    return this.dataInputStream.readShort();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readUnsignedByteString = function () {
                                try {
                                    return this.readString((this.dataInputStream.read() & 255));
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return null;
                            };
                            TGSongReaderImpl.prototype.readIntegerString = function () {
                                try {
                                    return this.readString(this.dataInputStream.readInt());
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return null;
                            };
                            TGSongReaderImpl.prototype.readString = function (length) {
                                var sb = new java.lang.StringBuilder();
                                for (var i = 0; i < length; i++) {
                                    sb.append(this.dataInputStream.readChar());
                                }
                                return sb.toString();
                            };
                            return TGSongReaderImpl;
                        }(org.herac.tuxguitar.io.tg.v10.TGStream));
                        v10.TGSongReaderImpl = TGSongReaderImpl;
                        TGSongReaderImpl["__class"] = "org.herac.tuxguitar.io.tg.v10.TGSongReaderImpl";
                        TGSongReaderImpl["__interfaces"] = ["org.herac.tuxguitar.io.base.TGSongReader", "org.herac.tuxguitar.io.base.TGSongPersistenceHandler"];
                    })(v10 = tg.v10 || (tg.v10 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v10;
                    (function (v10) {
                        var TGSongWriterImpl = (function (_super) {
                            __extends(TGSongWriterImpl, _super);
                            function TGSongWriterImpl() {
                                var _this = _super.call(this) || this;
                                _this.factory = null;
                                _this.channelRouter = null;
                                _this.dataOutputStream = null;
                                return _this;
                            }
                            TGSongWriterImpl.prototype.write$org_herac_tuxguitar_io_base_TGSongWriterHandle = function (handle) {
                                try {
                                    var songManager = new org.herac.tuxguitar.song.managers.TGSongManager(handle.getFactory());
                                    var song_11 = handle.getSong();
                                    this.factory = songManager.getFactory();
                                    this.dataOutputStream = new java.io.DataOutputStream(handle.getOutputStream());
                                    this.configureChannelRouter(song_11);
                                    this.writeVersion();
                                    this.write$org_herac_tuxguitar_song_models_TGSong(song_11);
                                    this.dataOutputStream.flush();
                                    this.dataOutputStream.close();
                                }
                                catch (throwable) {
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException(throwable);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.write = function (handle) {
                                if (((handle != null && handle instanceof org.herac.tuxguitar.io.base.TGSongWriterHandle) || handle === null)) {
                                    return this.write$org_herac_tuxguitar_io_base_TGSongWriterHandle(handle);
                                }
                                else if (((handle != null && handle instanceof org.herac.tuxguitar.song.models.TGSong) || handle === null)) {
                                    return this.write$org_herac_tuxguitar_song_models_TGSong(handle);
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongWriterImpl.prototype.writeVersion = function () {
                                this.writeUnsignedByteString(org.herac.tuxguitar.io.tg.v10.TGStream.TG_FORMAT_VERSION_$LI$());
                            };
                            TGSongWriterImpl.prototype.write$org_herac_tuxguitar_song_models_TGSong = function (song) {
                                this.writeUnsignedByteString(song.getName());
                                this.writeUnsignedByteString(song.getArtist());
                                this.writeUnsignedByteString(song.getAlbum());
                                this.writeUnsignedByteString(song.getAuthor());
                                this.writeShort((song.countMeasureHeaders() | 0));
                                var lastHeader = null;
                                var headers = song.getMeasureHeaders();
                                while ((headers.hasNext())) {
                                    var header = headers.next();
                                    this.writeMeasureHeader(header, lastHeader);
                                    lastHeader = header;
                                }
                                ;
                                this.writeByte(song.countTracks());
                                for (var i = 0; i < song.countTracks(); i++) {
                                    var track = song.getTrack(i);
                                    this.writeTrack(track);
                                }
                            };
                            TGSongWriterImpl.prototype.writeTrack = function (track) {
                                var header = 0;
                                if (!track.getLyrics().isEmpty()) {
                                    header |= org.herac.tuxguitar.io.tg.v10.TGStream.TRACK_LYRICS;
                                }
                                this.writeHeader$int(header);
                                this.writeUnsignedByteString(track.getName());
                                this.writeChannel(track);
                                var lastMeasure = null;
                                var measures = track.getMeasures();
                                while ((measures.hasNext())) {
                                    var measure = measures.next();
                                    this.writeMeasure(measure, lastMeasure);
                                    lastMeasure = measure;
                                }
                                ;
                                this.writeByte(track.getStrings().size());
                                var stringIt = track.getStrings().iterator();
                                while ((stringIt.hasNext())) {
                                    var string = stringIt.next();
                                    this.writeInstrumentString(string);
                                }
                                ;
                                this.writeByte(track.getOffset() - org.herac.tuxguitar.song.models.TGTrack.MIN_OFFSET);
                                this.writeRGBColor(track.getColor());
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.TRACK_LYRICS) !== 0)) {
                                    this.writeLyrics(track.getLyrics());
                                }
                            };
                            TGSongWriterImpl.prototype.writeMeasureHeader = function (measureheader, lastMeasureHeader) {
                                var header = 0;
                                if (lastMeasureHeader == null) {
                                    header |= org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_TIMESIGNATURE;
                                    header |= org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_TEMPO;
                                    if (measureheader.getTripletFeel() !== org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_NONE) {
                                        header |= org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_TRIPLET_FEEL;
                                    }
                                }
                                else {
                                    var numerator = measureheader.getTimeSignature().getNumerator();
                                    var value = measureheader.getTimeSignature().getDenominator().getValue();
                                    var prevNumerator = lastMeasureHeader.getTimeSignature().getNumerator();
                                    var prevValue = lastMeasureHeader.getTimeSignature().getDenominator().getValue();
                                    if (numerator !== prevNumerator || value !== prevValue) {
                                        header |= org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_TIMESIGNATURE;
                                    }
                                    if (measureheader.getTempo().getValue() !== lastMeasureHeader.getTempo().getValue()) {
                                        header |= org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_TEMPO;
                                    }
                                    if (measureheader.getTripletFeel() !== lastMeasureHeader.getTripletFeel()) {
                                        header |= org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_TRIPLET_FEEL;
                                    }
                                }
                                header = (measureheader.isRepeatOpen()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_REPEAT_OPEN : header;
                                header = (measureheader.getRepeatClose() > 0) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_REPEAT_CLOSE : header;
                                header = (measureheader.getRepeatAlternative() > 0) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE : header;
                                header = (measureheader.hasMarker()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_MARKER : header;
                                this.writeHeader$int(header);
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_TIMESIGNATURE) !== 0)) {
                                    this.writeTimeSignature(measureheader.getTimeSignature());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_TEMPO) !== 0)) {
                                    this.writeTempo(measureheader.getTempo());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_REPEAT_CLOSE) !== 0)) {
                                    this.writeShort((measureheader.getRepeatClose() | 0));
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE) !== 0)) {
                                    this.writeByte(measureheader.getRepeatAlternative());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_MARKER) !== 0)) {
                                    this.writeMarker(measureheader.getMarker());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_HEADER_TRIPLET_FEEL) !== 0)) {
                                    this.writeByte(measureheader.getTripletFeel());
                                }
                            };
                            TGSongWriterImpl.prototype.writeMeasure = function (srcMeasure, lastMeasure) {
                                var measure = new TGSongWriterImpl.TGVoiceJoiner(this, new org.herac.tuxguitar.song.factory.TGFactory(), srcMeasure).process();
                                var header = 0;
                                if (lastMeasure == null) {
                                    header |= org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_CLEF;
                                    header |= org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_KEYSIGNATURE;
                                }
                                else {
                                    if (measure.getClef() !== lastMeasure.getClef()) {
                                        header |= org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_CLEF;
                                    }
                                    if (measure.getKeySignature() !== lastMeasure.getKeySignature()) {
                                        header |= org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_KEYSIGNATURE;
                                    }
                                }
                                this.writeHeader$int(header);
                                var data = new v10.TGStream.TGBeatData(this.__parent, measure);
                                this.writeBeats(measure, data);
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_CLEF) !== 0)) {
                                    this.writeByte(measure.getClef());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.MEASURE_KEYSIGNATURE) !== 0)) {
                                    this.writeByte(measure.getKeySignature());
                                }
                            };
                            TGSongWriterImpl.prototype.writeChannel = function (track) {
                                var header = 0;
                                header = (track.isSolo()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.CHANNEL_SOLO : header;
                                header = (track.isMute()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.CHANNEL_MUTE : header;
                                this.writeHeader$int(header);
                                var channel = this.getChannel(track.getSong(), track);
                                var gmChannelRoute = this.getChannelRoute(channel.getChannelId());
                                this.writeByte(gmChannelRoute.getChannel1());
                                this.writeByte(gmChannelRoute.getChannel2());
                                this.writeByte(channel.getProgram());
                                this.writeByte(channel.getVolume());
                                this.writeByte(channel.getBalance());
                                this.writeByte(channel.getChorus());
                                this.writeByte(channel.getReverb());
                                this.writeByte(channel.getPhaser());
                                this.writeByte(channel.getTremolo());
                            };
                            TGSongWriterImpl.prototype.writeBeats = function (measure, data) {
                                var count = measure.countBeats();
                                for (var i = 0; i < count; i++) {
                                    var beat = measure.getBeat(i);
                                    this.writeBeat(beat, data, (i + 1 < count));
                                }
                            };
                            TGSongWriterImpl.prototype.writeBeat = function (beat, data, hasNext) {
                                var voice = beat.getVoice(0);
                                var header = hasNext ? org.herac.tuxguitar.io.tg.v10.TGStream.BEAT_HAS_NEXT : 0;
                                if (!voice.getDuration().isEqual(data.getDuration())) {
                                    header |= org.herac.tuxguitar.io.tg.v10.TGStream.BEAT_NEXT_DURATION;
                                    data.setDuration(voice.getDuration());
                                }
                                if (!beat.isRestBeat()) {
                                    header |= org.herac.tuxguitar.io.tg.v10.TGStream.BEAT_HAS_NOTES;
                                }
                                if (beat.getChord() != null) {
                                    header |= org.herac.tuxguitar.io.tg.v10.TGStream.BEAT_HAS_CHORD;
                                }
                                if (beat.getText() != null) {
                                    header |= org.herac.tuxguitar.io.tg.v10.TGStream.BEAT_HAS_TEXT;
                                }
                                this.writeHeader$int(header);
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.BEAT_NEXT_DURATION) !== 0)) {
                                    this.writeDuration(voice.getDuration());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.BEAT_HAS_NOTES) !== 0)) {
                                    this.writeNotes(voice, data);
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.BEAT_HAS_CHORD) !== 0)) {
                                    this.writeChord(beat.getChord());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.BEAT_HAS_TEXT) !== 0)) {
                                    this.writeText(beat.getText());
                                }
                            };
                            TGSongWriterImpl.prototype.writeNotes = function (voice, data) {
                                for (var i = 0; i < voice.countNotes(); i++) {
                                    var note = voice.getNote(i);
                                    var header = (i + 1 < voice.countNotes() ? org.herac.tuxguitar.io.tg.v10.TGStream.NOTE_HAS_NEXT : 0);
                                    header = (note.isTiedNote()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.NOTE_TIED : header;
                                    if (note.getVelocity() !== data.getVelocity()) {
                                        data.setVelocity(note.getVelocity());
                                        header |= org.herac.tuxguitar.io.tg.v10.TGStream.NOTE_VELOCITY;
                                    }
                                    header = (note.getEffect().hasAnyEffect()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.NOTE_EFFECT : header;
                                    this.writeHeader$int(header);
                                    this.writeNote(header, note);
                                }
                            };
                            TGSongWriterImpl.prototype.writeNote = function (header, note) {
                                this.writeByte(note.getValue());
                                this.writeByte(note.getString());
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.NOTE_VELOCITY) !== 0)) {
                                    this.writeByte(note.getVelocity());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.NOTE_EFFECT) !== 0)) {
                                    this.writeNoteEffect(note.getEffect());
                                }
                            };
                            TGSongWriterImpl.prototype.writeChord = function (chord) {
                                this.writeByte(chord.countStrings());
                                this.writeUnsignedByteString(chord.getName());
                                this.writeByte(chord.getFirstFret());
                                for (var string = 0; string < chord.countStrings(); string++) {
                                    this.writeByte(chord.getFretValue(string));
                                }
                            };
                            TGSongWriterImpl.prototype.writeText = function (text) {
                                this.writeUnsignedByteString(text.getValue());
                            };
                            TGSongWriterImpl.prototype.writeInstrumentString = function (string) {
                                this.writeByte(string.getValue());
                            };
                            TGSongWriterImpl.prototype.writeTempo = function (tempo) {
                                this.writeShort((tempo.getValue() | 0));
                            };
                            TGSongWriterImpl.prototype.writeTimeSignature = function (timeSignature) {
                                this.writeByte(timeSignature.getNumerator());
                                this.writeDuration(timeSignature.getDenominator());
                            };
                            TGSongWriterImpl.prototype.writeDuration = function (duration) {
                                var header = 0;
                                header = (duration.isDotted()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.DURATION_DOTTED : header;
                                header = (duration.isDoubleDotted()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.DURATION_DOUBLE_DOTTED : header;
                                header = (!duration.getDivision().isEqual(org.herac.tuxguitar.song.models.TGDivisionType.NORMAL_$LI$())) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.DURATION_NO_TUPLET : header;
                                this.writeHeader$int(header);
                                this.writeByte(duration.getValue());
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.DURATION_NO_TUPLET) !== 0)) {
                                    this.writeDivisionType(duration.getDivision());
                                }
                            };
                            TGSongWriterImpl.prototype.writeDivisionType = function (divisionType) {
                                this.writeByte(divisionType.getEnters());
                                this.writeByte(divisionType.getTimes());
                            };
                            TGSongWriterImpl.prototype.writeNoteEffect = function (effect) {
                                var header = 0;
                                header = (effect.isBend()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_BEND : header;
                                header = (effect.isTremoloBar()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_TREMOLO_BAR : header;
                                header = (effect.isHarmonic()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_HARMONIC : header;
                                header = (effect.isGrace()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_GRACE : header;
                                header = (effect.isTrill()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_TRILL : header;
                                header = (effect.isTremoloPicking()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_TREMOLO_PICKING : header;
                                header = (effect.isVibrato()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_VIBRATO : header;
                                header = (effect.isDeadNote()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_DEAD : header;
                                header = (effect.isSlide()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_SLIDE : header;
                                header = (effect.isHammer()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_HAMMER : header;
                                header = (effect.isGhostNote()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_GHOST : header;
                                header = (effect.isAccentuatedNote()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_ACCENTUATED : header;
                                header = (effect.isHeavyAccentuatedNote()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_HEAVY_ACCENTUATED : header;
                                header = (effect.isPalmMute()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_PALM_MUTE : header;
                                header = (effect.isStaccato()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_STACCATO : header;
                                header = (effect.isTapping()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_TAPPING : header;
                                header = (effect.isSlapping()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_SLAPPING : header;
                                header = (effect.isPopping()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_POPPING : header;
                                header = (effect.isFadeIn()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_FADE_IN : header;
                                this.writeHeader$int$int(header, 3);
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_BEND) !== 0)) {
                                    this.writeBendEffect(effect.getBend());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_TREMOLO_BAR) !== 0)) {
                                    this.writeTremoloBarEffect(effect.getTremoloBar());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_HARMONIC) !== 0)) {
                                    this.writeHarmonicEffect(effect.getHarmonic());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_GRACE) !== 0)) {
                                    this.writeGraceEffect(effect.getGrace());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_TRILL) !== 0)) {
                                    this.writeTrillEffect(effect.getTrill());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v10.TGStream.EFFECT_TREMOLO_PICKING) !== 0)) {
                                    this.writeTremoloPickingEffect(effect.getTremoloPicking());
                                }
                            };
                            TGSongWriterImpl.prototype.writeBendEffect = function (effect) {
                                this.writeByte(effect.getPoints().size());
                                var it = effect.getPoints().iterator();
                                while ((it.hasNext())) {
                                    var point = it.next();
                                    this.writeByte(point.getPosition());
                                    this.writeByte(point.getValue());
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeTremoloBarEffect = function (effect) {
                                this.writeByte(effect.getPoints().size());
                                var it = effect.getPoints().iterator();
                                while ((it.hasNext())) {
                                    var point = it.next();
                                    this.writeByte(point.getPosition());
                                    this.writeByte((point.getValue() + org.herac.tuxguitar.song.models.effects.TGEffectTremoloBar.MAX_VALUE_LENGTH));
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeHarmonicEffect = function (effect) {
                                this.writeByte(effect.getType());
                                if (effect.getType() !== org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.TYPE_NATURAL) {
                                    this.writeByte(effect.getData());
                                }
                            };
                            TGSongWriterImpl.prototype.writeGraceEffect = function (effect) {
                                var header = 0;
                                header = (effect.isDead()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.GRACE_FLAG_DEAD : header;
                                header = (effect.isOnBeat()) ? header |= org.herac.tuxguitar.io.tg.v10.TGStream.GRACE_FLAG_ON_BEAT : header;
                                this.writeHeader$int(header);
                                this.writeByte(effect.getFret());
                                this.writeByte(effect.getDuration());
                                this.writeByte(effect.getDynamic());
                                this.writeByte(effect.getTransition());
                            };
                            TGSongWriterImpl.prototype.writeTremoloPickingEffect = function (effect) {
                                this.writeByte(effect.getDuration().getValue());
                            };
                            TGSongWriterImpl.prototype.writeTrillEffect = function (effect) {
                                this.writeByte(effect.getFret());
                                this.writeByte(effect.getDuration().getValue());
                            };
                            TGSongWriterImpl.prototype.writeMarker = function (marker) {
                                this.writeUnsignedByteString(marker.getTitle());
                                this.writeRGBColor(marker.getColor());
                            };
                            TGSongWriterImpl.prototype.writeRGBColor = function (color) {
                                this.writeByte(color.getR());
                                this.writeByte(color.getG());
                                this.writeByte(color.getB());
                            };
                            TGSongWriterImpl.prototype.writeLyrics = function (lyrics) {
                                this.writeShort((lyrics.getFrom() | 0));
                                this.writeIntegerString(lyrics.getLyrics());
                            };
                            TGSongWriterImpl.prototype.writeByte = function (v) {
                                try {
                                    this.dataOutputStream.write(v);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeUnsignedByteString = function (v) {
                                try {
                                    var byteString = (v == null ? new String() : ((v.length > 255) ? v.substring(0, 255) : v));
                                    this.dataOutputStream.write(byteString.length);
                                    this.dataOutputStream.writeChars(byteString);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeIntegerString = function (v) {
                                try {
                                    this.dataOutputStream.writeInt(v.length);
                                    this.dataOutputStream.writeChars(v);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeHeader$int = function (v) {
                                try {
                                    this.dataOutputStream.write(v);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeHeader$int$int = function (v, bCount) {
                                for (var i = bCount; i > 0; i--) {
                                    this.writeHeader$int((v >>> ((8 * i) - 8)) & 255);
                                }
                            };
                            TGSongWriterImpl.prototype.writeHeader = function (v, bCount) {
                                if (((typeof v === 'number') || v === null) && ((typeof bCount === 'number') || bCount === null)) {
                                    return this.writeHeader$int$int(v, bCount);
                                }
                                else if (((typeof v === 'number') || v === null) && bCount === undefined) {
                                    return this.writeHeader$int(v);
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongWriterImpl.prototype.writeShort = function (v) {
                                try {
                                    this.dataOutputStream.writeShort(v);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.getChannel = function (song, track) {
                                var tgSongManager = new org.herac.tuxguitar.song.managers.TGSongManager(this.factory);
                                var tgChannel = tgSongManager.getChannel(song, track.getChannelId());
                                if (tgChannel == null) {
                                    tgChannel = this.factory.newChannel();
                                }
                                return tgChannel;
                            };
                            TGSongWriterImpl.prototype.getChannelRoute = function (channelId) {
                                var gmChannelRoute = this.channelRouter.getRoute(channelId);
                                if (gmChannelRoute == null) {
                                    gmChannelRoute = new org.herac.tuxguitar.gm.GMChannelRoute(org.herac.tuxguitar.gm.GMChannelRoute.NULL_VALUE);
                                    gmChannelRoute.setChannel1(15);
                                    gmChannelRoute.setChannel2(15);
                                }
                                return gmChannelRoute;
                            };
                            TGSongWriterImpl.prototype.configureChannelRouter = function (song) {
                                this.channelRouter = new org.herac.tuxguitar.gm.GMChannelRouter();
                                var gmChannelRouterConfigurator = new org.herac.tuxguitar.gm.GMChannelRouterConfigurator(this.channelRouter);
                                gmChannelRouterConfigurator.configureRouter(song.getChannels());
                            };
                            return TGSongWriterImpl;
                        }(org.herac.tuxguitar.io.tg.v10.TGStream));
                        v10.TGSongWriterImpl = TGSongWriterImpl;
                        TGSongWriterImpl["__class"] = "org.herac.tuxguitar.io.tg.v10.TGSongWriterImpl";
                        TGSongWriterImpl["__interfaces"] = ["org.herac.tuxguitar.io.base.TGSongWriter", "org.herac.tuxguitar.io.base.TGSongPersistenceHandler"];
                        (function (TGSongWriterImpl) {
                            var TGVoiceJoiner = (function () {
                                function TGVoiceJoiner(__parent, factory, measure) {
                                    this.__parent = __parent;
                                    this.factory = null;
                                    this.measure = null;
                                    this.factory = factory;
                                    this.measure = measure.clone(factory, measure.getHeader());
                                    this.measure.setTrack(measure.getTrack());
                                }
                                TGVoiceJoiner.prototype.process = function () {
                                    this.orderBeats();
                                    this.joinBeats();
                                    return this.measure;
                                };
                                TGVoiceJoiner.prototype.joinBeats = function () {
                                    var previous = null;
                                    var finish = true;
                                    var measureStart = this.measure.getStart();
                                    var measureEnd = (measureStart + this.measure.getLength());
                                    for (var i = 0; i < this.measure.countBeats(); i++) {
                                        var beat = this.measure.getBeat(i);
                                        var voice = beat.getVoice(0);
                                        for (var v = 1; v < beat.countVoices(); v++) {
                                            var currentVoice = beat.getVoice(v);
                                            if (!currentVoice.isEmpty()) {
                                                for (var n = 0; n < currentVoice.countNotes(); n++) {
                                                    var note = currentVoice.getNote(n);
                                                    voice.addNote(note);
                                                }
                                            }
                                        }
                                        if (voice.isEmpty()) {
                                            this.measure.removeBeat(beat);
                                            finish = false;
                                            break;
                                        }
                                        var beatStart = beat.getStart();
                                        if (previous != null) {
                                            var previousStart = previous.getStart();
                                            var previousBestDuration = null;
                                            for (var v = 0; v < previous.countVoices(); v++) {
                                                var previousVoice = previous.getVoice(v);
                                                if (!previousVoice.isEmpty()) {
                                                    var length_8 = previousVoice.getDuration().getTime();
                                                    if ((previousStart + length_8) <= beatStart) {
                                                        if (previousBestDuration == null || length_8 > previousBestDuration.getTime()) {
                                                            previousBestDuration = previousVoice.getDuration();
                                                        }
                                                    }
                                                }
                                            }
                                            if (previousBestDuration != null) {
                                                previous.getVoice(0).getDuration().copyFrom(previousBestDuration);
                                            }
                                            else {
                                                if (voice.isRestVoice()) {
                                                    this.measure.removeBeat(beat);
                                                    finish = false;
                                                    break;
                                                }
                                                var duration = org.herac.tuxguitar.song.models.TGDuration.fromTime$org_herac_tuxguitar_song_factory_TGFactory$long(this.factory, (beatStart - previousStart));
                                                previous.getVoice(0).getDuration().copyFrom(duration);
                                            }
                                        }
                                        var beatBestDuration = null;
                                        for (var v = 0; v < beat.countVoices(); v++) {
                                            var currentVoice = beat.getVoice(v);
                                            if (!currentVoice.isEmpty()) {
                                                var length_9 = currentVoice.getDuration().getTime();
                                                if ((beatStart + length_9) <= measureEnd) {
                                                    if (beatBestDuration == null || length_9 > beatBestDuration.getTime()) {
                                                        beatBestDuration = currentVoice.getDuration();
                                                    }
                                                }
                                            }
                                        }
                                        if (beatBestDuration == null) {
                                            if (voice.isRestVoice()) {
                                                this.measure.removeBeat(beat);
                                                finish = false;
                                                break;
                                            }
                                            var duration = org.herac.tuxguitar.song.models.TGDuration.fromTime$org_herac_tuxguitar_song_factory_TGFactory$long(this.factory, (measureEnd - beatStart));
                                            voice.getDuration().copyFrom(duration);
                                        }
                                        previous = beat;
                                    }
                                    if (!finish) {
                                        this.joinBeats();
                                    }
                                };
                                TGVoiceJoiner.prototype.orderBeats = function () {
                                    for (var i = 0; i < this.measure.countBeats(); i++) {
                                        var minBeat = null;
                                        for (var j = i; j < this.measure.countBeats(); j++) {
                                            var beat = this.measure.getBeat(j);
                                            if (minBeat == null || beat.getStart() < minBeat.getStart()) {
                                                minBeat = beat;
                                            }
                                        }
                                        this.measure.moveBeat(i, minBeat);
                                    }
                                };
                                return TGVoiceJoiner;
                            }());
                            TGSongWriterImpl.TGVoiceJoiner = TGVoiceJoiner;
                            TGVoiceJoiner["__class"] = "org.herac.tuxguitar.io.tg.v10.TGSongWriterImpl.TGVoiceJoiner";
                        })(TGSongWriterImpl = v10.TGSongWriterImpl || (v10.TGSongWriterImpl = {}));
                    })(v10 = tg.v10 || (tg.v10 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v11;
                    (function (v11) {
                        var TGSongReaderImpl = (function (_super) {
                            __extends(TGSongReaderImpl, _super);
                            function TGSongReaderImpl() {
                                var _this = _super.call(this) || this;
                                _this.dataInputStream = null;
                                _this.factory = null;
                                return _this;
                            }
                            TGSongReaderImpl.SUPPORTED_FORMAT_$LI$ = function () { if (TGSongReaderImpl.SUPPORTED_FORMAT == null)
                                TGSongReaderImpl.SUPPORTED_FORMAT = new org.herac.tuxguitar.io.tg.TGFileFormatVersion(org.herac.tuxguitar.io.tg.v11.TGStream.TG_FORMAT_$LI$(), org.herac.tuxguitar.io.tg.v11.TGStream.TG_FORMAT_VERSION_$LI$()); return TGSongReaderImpl.SUPPORTED_FORMAT; };
                            ;
                            TGSongReaderImpl.prototype.read$org_herac_tuxguitar_io_base_TGSongReaderHandle = function (handle) {
                                try {
                                    this.factory = handle.getFactory();
                                    this.dataInputStream = new java.io.DataInputStream(handle.getInputStream());
                                    var fileFormat = new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(TGSongReaderImpl.SUPPORTED_FORMAT_$LI$()).getFileFormat(this.dataInputStream);
                                    if (fileFormat == null || !(function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(fileFormat, this.getFileFormat())) {
                                        throw new org.herac.tuxguitar.io.base.TGFileFormatException("Unsupported Version");
                                    }
                                    var song_12 = this.read();
                                    this.dataInputStream.close();
                                    handle.setSong(song_12);
                                }
                                catch (throwable) {
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException(throwable);
                                }
                                ;
                            };
                            TGSongReaderImpl.prototype.read = function (handle) {
                                if (((handle != null && handle instanceof org.herac.tuxguitar.io.base.TGSongReaderHandle) || handle === null)) {
                                    return this.read$org_herac_tuxguitar_io_base_TGSongReaderHandle(handle);
                                }
                                else if (handle === undefined) {
                                    return this.read$();
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongReaderImpl.prototype.read$ = function () {
                                var song = this.factory.newSong();
                                song.setName(this.readUnsignedByteString());
                                song.setArtist(this.readUnsignedByteString());
                                song.setAlbum(this.readUnsignedByteString());
                                song.setAuthor(this.readUnsignedByteString());
                                var headerCount = this.readShort();
                                var lastHeader = null;
                                var headerStart = org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME;
                                for (var i = 0; i < headerCount; i++) {
                                    var header = this.readMeasureHeader(i + 1, headerStart, lastHeader);
                                    song.addMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader(header);
                                    headerStart += header.getLength();
                                    lastHeader = header;
                                }
                                var trackCount = this.readByte();
                                for (var i = 0; i < trackCount; i++) {
                                    song.addTrack$org_herac_tuxguitar_song_models_TGTrack(this.readTrack(i + 1, song));
                                }
                                return song;
                            };
                            TGSongReaderImpl.prototype.readTrack = function (number, song) {
                                var header = this.readHeader();
                                var track = this.factory.newTrack();
                                track.setNumber(number);
                                track.setName(this.readUnsignedByteString());
                                track.setSolo((header & org.herac.tuxguitar.io.tg.v11.TGStream.TRACK_SOLO) !== 0);
                                track.setMute((header & org.herac.tuxguitar.io.tg.v11.TGStream.TRACK_MUTE) !== 0);
                                this.readChannel(song, track);
                                var measureCount = song.countMeasureHeaders();
                                var lastMeasure = null;
                                for (var i = 0; i < measureCount; i++) {
                                    var measure = this.readMeasure(song.getMeasureHeader(i), lastMeasure);
                                    track.addMeasure$org_herac_tuxguitar_song_models_TGMeasure(measure);
                                    lastMeasure = measure;
                                }
                                var stringCount = this.readByte();
                                for (var i = 0; i < stringCount; i++) {
                                    track.getStrings().add(this.readInstrumentString(i + 1));
                                }
                                track.setOffset(org.herac.tuxguitar.song.models.TGTrack.MIN_OFFSET + this.readByte());
                                this.readRGBColor(track.getColor());
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.TRACK_LYRICS) !== 0)) {
                                    this.readLyrics(track.getLyrics());
                                }
                                return track;
                            };
                            TGSongReaderImpl.prototype.readMeasureHeader = function (number, start, lastMeasureHeader) {
                                var header = this.readHeader();
                                var measureHeader = this.factory.newHeader();
                                measureHeader.setNumber(number);
                                measureHeader.setStart(start);
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_TIMESIGNATURE) !== 0)) {
                                    this.readTimeSignature(measureHeader.getTimeSignature());
                                }
                                else if (lastMeasureHeader != null) {
                                    measureHeader.getTimeSignature().copyFrom(lastMeasureHeader.getTimeSignature());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_TEMPO) !== 0)) {
                                    this.readTempo(measureHeader.getTempo());
                                }
                                else if (lastMeasureHeader != null) {
                                    measureHeader.getTempo().copyFrom(lastMeasureHeader.getTempo());
                                }
                                measureHeader.setRepeatOpen((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_REPEAT_OPEN) !== 0);
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_REPEAT_CLOSE) !== 0)) {
                                    measureHeader.setRepeatClose(this.readShort());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE) !== 0)) {
                                    measureHeader.setRepeatAlternative(this.readByte());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_MARKER) !== 0)) {
                                    measureHeader.setMarker(this.readMarker(number));
                                }
                                measureHeader.setTripletFeel((lastMeasureHeader != null) ? lastMeasureHeader.getTripletFeel() : org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_NONE);
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_TRIPLET_FEEL) !== 0)) {
                                    measureHeader.setTripletFeel(this.readByte());
                                }
                                return measureHeader;
                            };
                            TGSongReaderImpl.prototype.readMeasure = function (measureHeader, lastMeasure) {
                                var header = this.readHeader();
                                var measure = this.factory.newMeasure(measureHeader);
                                var data = new v11.TGStream.TGBeatData(this.__parent, measure);
                                this.readBeats(measure, data);
                                measure.setClef((lastMeasure == null) ? org.herac.tuxguitar.song.models.TGMeasure.CLEF_TREBLE : lastMeasure.getClef());
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_CLEF) !== 0)) {
                                    measure.setClef(this.readByte());
                                }
                                measure.setKeySignature((lastMeasure == null) ? 0 : lastMeasure.getKeySignature());
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_KEYSIGNATURE) !== 0)) {
                                    measure.setKeySignature(this.readByte());
                                }
                                return measure;
                            };
                            TGSongReaderImpl.prototype.readChannel = function (song, track) {
                                var channel = this.factory.newChannel();
                                var gmChannel1Param = this.factory.newChannelParameter();
                                var gmChannel2Param = this.factory.newChannelParameter();
                                var channel1 = (this.readByte() & 255);
                                gmChannel1Param.setKey(org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_1);
                                gmChannel1Param.setValue(/* toString */ ('' + (channel1)));
                                var channel2 = (this.readByte() & 255);
                                gmChannel2Param.setKey(org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_2);
                                gmChannel2Param.setValue(/* toString */ ('' + (channel2)));
                                channel.setBank(channel1 === 9 ? org.herac.tuxguitar.song.models.TGChannel.DEFAULT_PERCUSSION_BANK : org.herac.tuxguitar.song.models.TGChannel.DEFAULT_BANK);
                                channel.setProgram(this.readByte());
                                channel.setVolume(this.readByte());
                                channel.setBalance(this.readByte());
                                channel.setChorus(this.readByte());
                                channel.setReverb(this.readByte());
                                channel.setPhaser(this.readByte());
                                channel.setTremolo(this.readByte());
                                for (var i = 0; i < song.countChannels(); i++) {
                                    var channelAux = song.getChannel(i);
                                    for (var n = 0; n < channelAux.countParameters(); n++) {
                                        var channelParameter = channelAux.getParameter(n);
                                        if ((function (o1, o2) { if (o1.equals) {
                                            return o1.equals(o2);
                                        }
                                        else {
                                            return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                        } })(channelParameter.getKey(), org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_1)) {
                                            if ((function (o1, o2) { if (o1.equals) {
                                                return o1.equals(o2);
                                            }
                                            else {
                                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                            } })(/* toString */ ('' + (channel1)), channelParameter.getValue())) {
                                                channel.setChannelId(channelAux.getChannelId());
                                            }
                                        }
                                    }
                                }
                                if (channel.getChannelId() <= 0) {
                                    channel.setChannelId(song.countChannels() + 1);
                                    channel.setName(new org.herac.tuxguitar.song.managers.TGSongManager(this.factory).createChannelNameFromProgram(song, channel));
                                    channel.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(gmChannel1Param);
                                    channel.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(gmChannel2Param);
                                    song.addChannel$org_herac_tuxguitar_song_models_TGChannel(channel);
                                }
                                track.setChannelId(channel.getChannelId());
                            };
                            TGSongReaderImpl.prototype.readBeats = function (measure, data) {
                                var header = org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_NEXT;
                                while ((((header & org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_NEXT) !== 0))) {
                                    header = this.readHeader();
                                    this.readBeat(header, measure, data);
                                }
                                ;
                            };
                            TGSongReaderImpl.prototype.readBeat = function (header, measure, data) {
                                var beat = this.factory.newBeat();
                                beat.setStart(data.getCurrentStart());
                                this.readVoices(header, beat, data);
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_STROKE) !== 0)) {
                                    this.readStroke(beat.getStroke());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_CHORD) !== 0)) {
                                    this.readChord(beat);
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_TEXT) !== 0)) {
                                    this.readText(beat);
                                }
                                measure.addBeat(beat);
                            };
                            TGSongReaderImpl.prototype.readVoices = function (header, beat, data) {
                                for (var i = 0; i < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; i++) {
                                    var shift = (i * 2);
                                    beat.getVoice(i).setEmpty(true);
                                    if (((header & (org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_VOICE << shift)) !== 0)) {
                                        if (((header & (org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_VOICE_CHANGES << shift)) !== 0)) {
                                            data.getVoice(i).setFlags(this.readHeader());
                                        }
                                        var flags = data.getVoice(i).getFlags();
                                        if (((flags & org.herac.tuxguitar.io.tg.v11.TGStream.VOICE_NEXT_DURATION) !== 0)) {
                                            this.readDuration(data.getVoice(i).getDuration());
                                        }
                                        if (((flags & org.herac.tuxguitar.io.tg.v11.TGStream.VOICE_HAS_NOTES) !== 0)) {
                                            this.readNotes(beat.getVoice(i), data);
                                        }
                                        if (((flags & org.herac.tuxguitar.io.tg.v11.TGStream.VOICE_DIRECTION_UP) !== 0)) {
                                            beat.getVoice(i).setDirection(org.herac.tuxguitar.song.models.TGVoice.DIRECTION_UP);
                                        }
                                        else if (((flags & org.herac.tuxguitar.io.tg.v11.TGStream.VOICE_DIRECTION_DOWN) !== 0)) {
                                            beat.getVoice(i).setDirection(org.herac.tuxguitar.song.models.TGVoice.DIRECTION_DOWN);
                                        }
                                        beat.getVoice(i).getDuration().copyFrom(data.getVoice(i).getDuration());
                                        data.getVoice(i).setStart(data.getVoice(i).getStart() + beat.getVoice(i).getDuration().getTime());
                                        beat.getVoice(i).setEmpty(false);
                                    }
                                }
                            };
                            TGSongReaderImpl.prototype.readNotes = function (voice, data) {
                                var header = org.herac.tuxguitar.io.tg.v11.TGStream.NOTE_HAS_NEXT;
                                while ((((header & org.herac.tuxguitar.io.tg.v11.TGStream.NOTE_HAS_NEXT) !== 0))) {
                                    header = this.readHeader();
                                    this.readNote(header, voice, data);
                                }
                                ;
                            };
                            TGSongReaderImpl.prototype.readNote = function (header, voice, data) {
                                var note = this.factory.newNote();
                                note.setValue(this.readByte());
                                note.setString(this.readByte());
                                note.setTiedNote((header & org.herac.tuxguitar.io.tg.v11.TGStream.NOTE_TIED) !== 0);
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.NOTE_VELOCITY) !== 0)) {
                                    data.getVoice(voice.getIndex()).setVelocity(this.readByte());
                                }
                                note.setVelocity(data.getVoice(voice.getIndex()).getVelocity());
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.NOTE_EFFECT) !== 0)) {
                                    this.readNoteEffect(note.getEffect());
                                }
                                voice.addNote(note);
                            };
                            TGSongReaderImpl.prototype.readChord = function (beat) {
                                var chord = this.factory.newChord(this.readByte());
                                chord.setName(this.readUnsignedByteString());
                                chord.setFirstFret(this.readByte());
                                for (var string = 0; string < chord.countStrings(); string++) {
                                    chord.addFretValue(string, this.readByte());
                                }
                                beat.setChord(chord);
                            };
                            TGSongReaderImpl.prototype.readText = function (beat) {
                                var text = this.factory.newText();
                                text.setValue(this.readUnsignedByteString());
                                beat.setText(text);
                            };
                            TGSongReaderImpl.prototype.readInstrumentString = function (number) {
                                var string = this.factory.newString();
                                string.setNumber(number);
                                string.setValue(this.readByte());
                                return string;
                            };
                            TGSongReaderImpl.prototype.readTempo = function (tempo) {
                                tempo.setValue(this.readShort());
                            };
                            TGSongReaderImpl.prototype.readTimeSignature = function (timeSignature) {
                                timeSignature.setNumerator(this.readByte());
                                this.readDuration(timeSignature.getDenominator());
                            };
                            TGSongReaderImpl.prototype.readDuration = function (duration) {
                                var header = this.readHeader();
                                duration.setDotted((header & org.herac.tuxguitar.io.tg.v11.TGStream.DURATION_DOTTED) !== 0);
                                duration.setDoubleDotted((header & org.herac.tuxguitar.io.tg.v11.TGStream.DURATION_DOUBLE_DOTTED) !== 0);
                                duration.setValue(this.readByte());
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.DURATION_NO_TUPLET) !== 0)) {
                                    this.readDivisionType(duration.getDivision());
                                }
                                else {
                                    duration.getDivision().copyFrom(org.herac.tuxguitar.song.models.TGDivisionType.NORMAL_$LI$());
                                }
                            };
                            TGSongReaderImpl.prototype.readDivisionType = function (divisionType) {
                                divisionType.setEnters(this.readByte());
                                divisionType.setTimes(this.readByte());
                            };
                            TGSongReaderImpl.prototype.readStroke = function (stroke) {
                                stroke.setDirection(this.readByte());
                                stroke.setValue(this.readByte());
                            };
                            TGSongReaderImpl.prototype.readNoteEffect = function (effect) {
                                var header = this.readHeader$int(3);
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_BEND) !== 0)) {
                                    effect.setBend(this.readBendEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_TREMOLO_BAR) !== 0)) {
                                    effect.setTremoloBar(this.readTremoloBarEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_HARMONIC) !== 0)) {
                                    effect.setHarmonic(this.readHarmonicEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_GRACE) !== 0)) {
                                    effect.setGrace(this.readGraceEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_TRILL) !== 0)) {
                                    effect.setTrill(this.readTrillEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_TREMOLO_PICKING) !== 0)) {
                                    effect.setTremoloPicking(this.readTremoloPickingEffect());
                                }
                                effect.setVibrato(((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_VIBRATO) !== 0));
                                effect.setDeadNote(((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_DEAD) !== 0));
                                effect.setSlide(((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_SLIDE) !== 0));
                                effect.setHammer(((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_HAMMER) !== 0));
                                effect.setGhostNote(((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_GHOST) !== 0));
                                effect.setAccentuatedNote(((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_ACCENTUATED) !== 0));
                                effect.setHeavyAccentuatedNote(((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_HEAVY_ACCENTUATED) !== 0));
                                effect.setPalmMute(((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_PALM_MUTE) !== 0));
                                effect.setStaccato(((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_STACCATO) !== 0));
                                effect.setTapping(((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_TAPPING) !== 0));
                                effect.setSlapping(((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_SLAPPING) !== 0));
                                effect.setPopping(((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_POPPING) !== 0));
                                effect.setFadeIn(((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_FADE_IN) !== 0));
                            };
                            TGSongReaderImpl.prototype.readBendEffect = function () {
                                var bend = this.factory.newEffectBend();
                                var count = this.readByte();
                                for (var i = 0; i < count; i++) {
                                    var position = this.readByte();
                                    var value = this.readByte();
                                    bend.addPoint(position, value);
                                }
                                return bend;
                            };
                            TGSongReaderImpl.prototype.readTremoloBarEffect = function () {
                                var tremoloBar = this.factory.newEffectTremoloBar();
                                var count = this.readByte();
                                for (var i = 0; i < count; i++) {
                                    var position = this.readByte();
                                    var value = (this.readByte() - org.herac.tuxguitar.song.models.effects.TGEffectTremoloBar.MAX_VALUE_LENGTH);
                                    tremoloBar.addPoint(position, value);
                                }
                                return tremoloBar;
                            };
                            TGSongReaderImpl.prototype.readHarmonicEffect = function () {
                                var effect = this.factory.newEffectHarmonic();
                                effect.setType(this.readByte());
                                if (effect.getType() !== org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.TYPE_NATURAL) {
                                    effect.setData(this.readByte());
                                }
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readGraceEffect = function () {
                                var header = this.readHeader();
                                var effect = this.factory.newEffectGrace();
                                effect.setDead((header & org.herac.tuxguitar.io.tg.v11.TGStream.GRACE_FLAG_DEAD) !== 0);
                                effect.setOnBeat((header & org.herac.tuxguitar.io.tg.v11.TGStream.GRACE_FLAG_ON_BEAT) !== 0);
                                effect.setFret(this.readByte());
                                effect.setDuration(this.readByte());
                                effect.setDynamic(this.readByte());
                                effect.setTransition(this.readByte());
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readTremoloPickingEffect = function () {
                                var effect = this.factory.newEffectTremoloPicking();
                                effect.getDuration().setValue(this.readByte());
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readTrillEffect = function () {
                                var effect = this.factory.newEffectTrill();
                                effect.setFret(this.readByte());
                                effect.getDuration().setValue(this.readByte());
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readMarker = function (measure) {
                                var marker = this.factory.newMarker();
                                marker.setMeasure(measure);
                                marker.setTitle(this.readUnsignedByteString());
                                this.readRGBColor(marker.getColor());
                                return marker;
                            };
                            TGSongReaderImpl.prototype.readRGBColor = function (color) {
                                color.setR((this.readByte() & 255));
                                color.setG((this.readByte() & 255));
                                color.setB((this.readByte() & 255));
                            };
                            TGSongReaderImpl.prototype.readLyrics = function (lyrics) {
                                lyrics.setFrom(this.readShort());
                                lyrics.setLyrics(this.readIntegerString());
                            };
                            TGSongReaderImpl.prototype.readByte = function () {
                                try {
                                    return (this.dataInputStream.read() | 0);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readHeader$ = function () {
                                try {
                                    return this.dataInputStream.read();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readHeader$int = function (bCount) {
                                var header = 0;
                                for (var i = bCount; i > 0; i--) {
                                    header += (this.readHeader() << ((8 * i) - 8));
                                }
                                return header;
                            };
                            TGSongReaderImpl.prototype.readHeader = function (bCount) {
                                if (((typeof bCount === 'number') || bCount === null)) {
                                    return this.readHeader$int(bCount);
                                }
                                else if (bCount === undefined) {
                                    return this.readHeader$();
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongReaderImpl.prototype.readShort = function () {
                                try {
                                    return this.dataInputStream.readShort();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readUnsignedByteString = function () {
                                try {
                                    return this.readString((this.dataInputStream.read() & 255));
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return null;
                            };
                            TGSongReaderImpl.prototype.readIntegerString = function () {
                                try {
                                    return this.readString(this.dataInputStream.readInt());
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return null;
                            };
                            TGSongReaderImpl.prototype.readString = function (length) {
                                var sb = new java.lang.StringBuilder();
                                for (var i = 0; i < length; i++) {
                                    sb.append(this.dataInputStream.readChar());
                                }
                                return sb.toString();
                            };
                            return TGSongReaderImpl;
                        }(org.herac.tuxguitar.io.tg.v11.TGStream));
                        v11.TGSongReaderImpl = TGSongReaderImpl;
                        TGSongReaderImpl["__class"] = "org.herac.tuxguitar.io.tg.v11.TGSongReaderImpl";
                        TGSongReaderImpl["__interfaces"] = ["org.herac.tuxguitar.io.base.TGSongReader", "org.herac.tuxguitar.io.base.TGSongPersistenceHandler"];
                    })(v11 = tg.v11 || (tg.v11 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v11;
                    (function (v11) {
                        var TGSongWriterImpl = (function (_super) {
                            __extends(TGSongWriterImpl, _super);
                            function TGSongWriterImpl() {
                                var _this = _super.call(this) || this;
                                _this.factory = null;
                                _this.channelRouter = null;
                                _this.dataOutputStream = null;
                                return _this;
                            }
                            TGSongWriterImpl.prototype.write$org_herac_tuxguitar_io_base_TGSongWriterHandle = function (handle) {
                                try {
                                    var songManager = new org.herac.tuxguitar.song.managers.TGSongManager(handle.getFactory());
                                    var song_13 = handle.getSong();
                                    this.factory = songManager.getFactory();
                                    this.dataOutputStream = new java.io.DataOutputStream(handle.getOutputStream());
                                    this.configureChannelRouter(song_13);
                                    this.writeVersion();
                                    this.write$org_herac_tuxguitar_song_models_TGSong(song_13);
                                    this.dataOutputStream.flush();
                                    this.dataOutputStream.close();
                                }
                                catch (throwable) {
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException(throwable);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.write = function (handle) {
                                if (((handle != null && handle instanceof org.herac.tuxguitar.io.base.TGSongWriterHandle) || handle === null)) {
                                    return this.write$org_herac_tuxguitar_io_base_TGSongWriterHandle(handle);
                                }
                                else if (((handle != null && handle instanceof org.herac.tuxguitar.song.models.TGSong) || handle === null)) {
                                    return this.write$org_herac_tuxguitar_song_models_TGSong(handle);
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongWriterImpl.prototype.writeVersion = function () {
                                this.writeUnsignedByteString(org.herac.tuxguitar.io.tg.v11.TGStream.TG_FORMAT_VERSION_$LI$());
                            };
                            TGSongWriterImpl.prototype.write$org_herac_tuxguitar_song_models_TGSong = function (song) {
                                this.writeUnsignedByteString(song.getName());
                                this.writeUnsignedByteString(song.getArtist());
                                this.writeUnsignedByteString(song.getAlbum());
                                this.writeUnsignedByteString(song.getAuthor());
                                this.writeShort((song.countMeasureHeaders() | 0));
                                var lastHeader = null;
                                var headers = song.getMeasureHeaders();
                                while ((headers.hasNext())) {
                                    var header = headers.next();
                                    this.writeMeasureHeader(header, lastHeader);
                                    lastHeader = header;
                                }
                                ;
                                this.writeByte(song.countTracks());
                                for (var i = 0; i < song.countTracks(); i++) {
                                    var track = song.getTrack(i);
                                    this.writeTrack(track);
                                }
                            };
                            TGSongWriterImpl.prototype.writeTrack = function (track) {
                                var header = 0;
                                if (track.isSolo()) {
                                    header |= org.herac.tuxguitar.io.tg.v11.TGStream.TRACK_SOLO;
                                }
                                if (track.isMute()) {
                                    header |= org.herac.tuxguitar.io.tg.v11.TGStream.TRACK_MUTE;
                                }
                                if (!track.getLyrics().isEmpty()) {
                                    header |= org.herac.tuxguitar.io.tg.v11.TGStream.TRACK_LYRICS;
                                }
                                this.writeHeader$int(header);
                                this.writeUnsignedByteString(track.getName());
                                this.writeChannel(this.getChannel(track.getSong(), track));
                                var lastMeasure = null;
                                var measures = track.getMeasures();
                                while ((measures.hasNext())) {
                                    var measure = measures.next();
                                    this.writeMeasure(measure, lastMeasure);
                                    lastMeasure = measure;
                                }
                                ;
                                this.writeByte(track.getStrings().size());
                                var stringIt = track.getStrings().iterator();
                                while ((stringIt.hasNext())) {
                                    var string = stringIt.next();
                                    this.writeInstrumentString(string);
                                }
                                ;
                                this.writeByte(track.getOffset() - org.herac.tuxguitar.song.models.TGTrack.MIN_OFFSET);
                                this.writeRGBColor(track.getColor());
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.TRACK_LYRICS) !== 0)) {
                                    this.writeLyrics(track.getLyrics());
                                }
                            };
                            TGSongWriterImpl.prototype.writeMeasureHeader = function (measureheader, lastMeasureHeader) {
                                var header = 0;
                                if (lastMeasureHeader == null) {
                                    header |= org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_TIMESIGNATURE;
                                    header |= org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_TEMPO;
                                    if (measureheader.getTripletFeel() !== org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_NONE) {
                                        header |= org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_TRIPLET_FEEL;
                                    }
                                }
                                else {
                                    var numerator = measureheader.getTimeSignature().getNumerator();
                                    var value = measureheader.getTimeSignature().getDenominator().getValue();
                                    var prevNumerator = lastMeasureHeader.getTimeSignature().getNumerator();
                                    var prevValue = lastMeasureHeader.getTimeSignature().getDenominator().getValue();
                                    if (numerator !== prevNumerator || value !== prevValue) {
                                        header |= org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_TIMESIGNATURE;
                                    }
                                    if (measureheader.getTempo().getValue() !== lastMeasureHeader.getTempo().getValue()) {
                                        header |= org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_TEMPO;
                                    }
                                    if (measureheader.getTripletFeel() !== lastMeasureHeader.getTripletFeel()) {
                                        header |= org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_TRIPLET_FEEL;
                                    }
                                }
                                header = (measureheader.isRepeatOpen()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_REPEAT_OPEN : header;
                                header = (measureheader.getRepeatClose() > 0) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_REPEAT_CLOSE : header;
                                header = (measureheader.getRepeatAlternative() > 0) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE : header;
                                header = (measureheader.hasMarker()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_MARKER : header;
                                this.writeHeader$int(header);
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_TIMESIGNATURE) !== 0)) {
                                    this.writeTimeSignature(measureheader.getTimeSignature());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_TEMPO) !== 0)) {
                                    this.writeTempo(measureheader.getTempo());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_REPEAT_CLOSE) !== 0)) {
                                    this.writeShort((measureheader.getRepeatClose() | 0));
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE) !== 0)) {
                                    this.writeByte(measureheader.getRepeatAlternative());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_MARKER) !== 0)) {
                                    this.writeMarker(measureheader.getMarker());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_HEADER_TRIPLET_FEEL) !== 0)) {
                                    this.writeByte(measureheader.getTripletFeel());
                                }
                            };
                            TGSongWriterImpl.prototype.writeMeasure = function (measure, lastMeasure) {
                                var header = 0;
                                if (lastMeasure == null) {
                                    header |= org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_CLEF;
                                    header |= org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_KEYSIGNATURE;
                                }
                                else {
                                    if (measure.getClef() !== lastMeasure.getClef()) {
                                        header |= org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_CLEF;
                                    }
                                    if (measure.getKeySignature() !== lastMeasure.getKeySignature()) {
                                        header |= org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_KEYSIGNATURE;
                                    }
                                }
                                this.writeHeader$int(header);
                                var data = new v11.TGStream.TGBeatData(this.__parent, measure);
                                this.writeBeats(measure, data);
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_CLEF) !== 0)) {
                                    this.writeByte(measure.getClef());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.MEASURE_KEYSIGNATURE) !== 0)) {
                                    this.writeByte(measure.getKeySignature());
                                }
                            };
                            TGSongWriterImpl.prototype.writeChannel = function (channel) {
                                var gmChannelRoute = this.getChannelRoute(channel.getChannelId());
                                this.writeByte(gmChannelRoute.getChannel1());
                                this.writeByte(gmChannelRoute.getChannel2());
                                this.writeByte(channel.getProgram());
                                this.writeByte(channel.getVolume());
                                this.writeByte(channel.getBalance());
                                this.writeByte(channel.getChorus());
                                this.writeByte(channel.getReverb());
                                this.writeByte(channel.getPhaser());
                                this.writeByte(channel.getTremolo());
                            };
                            TGSongWriterImpl.prototype.writeBeats = function (measure, data) {
                                var count = measure.countBeats();
                                for (var i = 0; i < count; i++) {
                                    var beat = measure.getBeat(i);
                                    this.writeBeat(beat, data, (i + 1 < count));
                                }
                            };
                            TGSongWriterImpl.prototype.writeBeat = function (beat, data, hasNext) {
                                var header = hasNext ? org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_NEXT : 0;
                                for (var i = 0; i < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; i++) {
                                    var shift = (i * 2);
                                    if (!beat.getVoice(i).isEmpty()) {
                                        header |= (org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_VOICE << shift);
                                        var flags = (beat.getVoice(i).isRestVoice() ? 0 : org.herac.tuxguitar.io.tg.v11.TGStream.VOICE_HAS_NOTES);
                                        if (!beat.getVoice(i).getDuration().isEqual(data.getVoice(i).getDuration())) {
                                            flags |= org.herac.tuxguitar.io.tg.v11.TGStream.VOICE_NEXT_DURATION;
                                            data.getVoice(i).setDuration(beat.getVoice(i).getDuration());
                                        }
                                        if (beat.getVoice(i).getDirection() !== org.herac.tuxguitar.song.models.TGVoice.DIRECTION_NONE) {
                                            if (beat.getVoice(i).getDirection() === org.herac.tuxguitar.song.models.TGVoice.DIRECTION_UP) {
                                                flags |= org.herac.tuxguitar.io.tg.v11.TGStream.VOICE_DIRECTION_UP;
                                            }
                                            else if (beat.getVoice(i).getDirection() === org.herac.tuxguitar.song.models.TGVoice.DIRECTION_DOWN) {
                                                flags |= org.herac.tuxguitar.io.tg.v11.TGStream.VOICE_DIRECTION_DOWN;
                                            }
                                        }
                                        if (data.getVoice(i).getFlags() !== flags) {
                                            header |= (org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_VOICE_CHANGES << shift);
                                            data.getVoice(i).setFlags(flags);
                                        }
                                    }
                                }
                                if (beat.getStroke().getDirection() !== org.herac.tuxguitar.song.models.TGStroke.STROKE_NONE) {
                                    header |= org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_STROKE;
                                }
                                if (beat.getChord() != null) {
                                    header |= org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_CHORD;
                                }
                                if (beat.getText() != null) {
                                    header |= org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_TEXT;
                                }
                                this.writeHeader$int(header);
                                this.writeVoices(header, beat, data);
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_STROKE) !== 0)) {
                                    this.writeStroke(beat.getStroke());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_CHORD) !== 0)) {
                                    this.writeChord(beat.getChord());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_TEXT) !== 0)) {
                                    this.writeText(beat.getText());
                                }
                            };
                            TGSongWriterImpl.prototype.writeVoices = function (header, beat, data) {
                                for (var i = 0; i < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; i++) {
                                    var shift = (i * 2);
                                    if (((header & (org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_VOICE << shift)) !== 0)) {
                                        if (((header & (org.herac.tuxguitar.io.tg.v11.TGStream.BEAT_HAS_VOICE_CHANGES << shift)) !== 0)) {
                                            this.writeHeader$int(data.getVoice(i).getFlags());
                                        }
                                        if (((data.getVoice(i).getFlags() & org.herac.tuxguitar.io.tg.v11.TGStream.VOICE_NEXT_DURATION) !== 0)) {
                                            this.writeDuration(beat.getVoice(i).getDuration());
                                        }
                                        if (((data.getVoice(i).getFlags() & org.herac.tuxguitar.io.tg.v11.TGStream.VOICE_HAS_NOTES) !== 0)) {
                                            this.writeNotes(beat.getVoice(i), data);
                                        }
                                    }
                                }
                            };
                            TGSongWriterImpl.prototype.writeNotes = function (voice, data) {
                                for (var i = 0; i < voice.countNotes(); i++) {
                                    var note = voice.getNote(i);
                                    var header = (i + 1 < voice.countNotes() ? org.herac.tuxguitar.io.tg.v11.TGStream.NOTE_HAS_NEXT : 0);
                                    header = (note.isTiedNote()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.NOTE_TIED : header;
                                    if (note.getVelocity() !== data.getVoice(voice.getIndex()).getVelocity()) {
                                        data.getVoice(voice.getIndex()).setVelocity(note.getVelocity());
                                        header |= org.herac.tuxguitar.io.tg.v11.TGStream.NOTE_VELOCITY;
                                    }
                                    header = (note.getEffect().hasAnyEffect()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.NOTE_EFFECT : header;
                                    this.writeHeader$int(header);
                                    this.writeNote(header, note);
                                }
                            };
                            TGSongWriterImpl.prototype.writeNote = function (header, note) {
                                this.writeByte(note.getValue());
                                this.writeByte(note.getString());
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.NOTE_VELOCITY) !== 0)) {
                                    this.writeByte(note.getVelocity());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.NOTE_EFFECT) !== 0)) {
                                    this.writeNoteEffect(note.getEffect());
                                }
                            };
                            TGSongWriterImpl.prototype.writeStroke = function (stroke) {
                                this.writeByte(stroke.getDirection());
                                this.writeByte(stroke.getValue());
                            };
                            TGSongWriterImpl.prototype.writeChord = function (chord) {
                                this.writeByte(chord.countStrings());
                                this.writeUnsignedByteString(chord.getName());
                                this.writeByte(chord.getFirstFret());
                                for (var string = 0; string < chord.countStrings(); string++) {
                                    this.writeByte(chord.getFretValue(string));
                                }
                            };
                            TGSongWriterImpl.prototype.writeText = function (text) {
                                this.writeUnsignedByteString(text.getValue());
                            };
                            TGSongWriterImpl.prototype.writeInstrumentString = function (string) {
                                this.writeByte(string.getValue());
                            };
                            TGSongWriterImpl.prototype.writeTempo = function (tempo) {
                                this.writeShort((tempo.getValue() | 0));
                            };
                            TGSongWriterImpl.prototype.writeTimeSignature = function (timeSignature) {
                                this.writeByte(timeSignature.getNumerator());
                                this.writeDuration(timeSignature.getDenominator());
                            };
                            TGSongWriterImpl.prototype.writeDuration = function (duration) {
                                var header = 0;
                                header = (duration.isDotted()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.DURATION_DOTTED : header;
                                header = (duration.isDoubleDotted()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.DURATION_DOUBLE_DOTTED : header;
                                header = (!duration.getDivision().isEqual(org.herac.tuxguitar.song.models.TGDivisionType.NORMAL_$LI$())) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.DURATION_NO_TUPLET : header;
                                this.writeHeader$int(header);
                                this.writeByte(duration.getValue());
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.DURATION_NO_TUPLET) !== 0)) {
                                    this.writeDivisionType(duration.getDivision());
                                }
                            };
                            TGSongWriterImpl.prototype.writeDivisionType = function (divisionType) {
                                this.writeByte(divisionType.getEnters());
                                this.writeByte(divisionType.getTimes());
                            };
                            TGSongWriterImpl.prototype.writeNoteEffect = function (effect) {
                                var header = 0;
                                header = (effect.isBend()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_BEND : header;
                                header = (effect.isTremoloBar()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_TREMOLO_BAR : header;
                                header = (effect.isHarmonic()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_HARMONIC : header;
                                header = (effect.isGrace()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_GRACE : header;
                                header = (effect.isTrill()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_TRILL : header;
                                header = (effect.isTremoloPicking()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_TREMOLO_PICKING : header;
                                header = (effect.isVibrato()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_VIBRATO : header;
                                header = (effect.isDeadNote()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_DEAD : header;
                                header = (effect.isSlide()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_SLIDE : header;
                                header = (effect.isHammer()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_HAMMER : header;
                                header = (effect.isGhostNote()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_GHOST : header;
                                header = (effect.isAccentuatedNote()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_ACCENTUATED : header;
                                header = (effect.isHeavyAccentuatedNote()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_HEAVY_ACCENTUATED : header;
                                header = (effect.isPalmMute()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_PALM_MUTE : header;
                                header = (effect.isStaccato()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_STACCATO : header;
                                header = (effect.isTapping()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_TAPPING : header;
                                header = (effect.isSlapping()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_SLAPPING : header;
                                header = (effect.isPopping()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_POPPING : header;
                                header = (effect.isFadeIn()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_FADE_IN : header;
                                this.writeHeader$int$int(header, 3);
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_BEND) !== 0)) {
                                    this.writeBendEffect(effect.getBend());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_TREMOLO_BAR) !== 0)) {
                                    this.writeTremoloBarEffect(effect.getTremoloBar());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_HARMONIC) !== 0)) {
                                    this.writeHarmonicEffect(effect.getHarmonic());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_GRACE) !== 0)) {
                                    this.writeGraceEffect(effect.getGrace());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_TRILL) !== 0)) {
                                    this.writeTrillEffect(effect.getTrill());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v11.TGStream.EFFECT_TREMOLO_PICKING) !== 0)) {
                                    this.writeTremoloPickingEffect(effect.getTremoloPicking());
                                }
                            };
                            TGSongWriterImpl.prototype.writeBendEffect = function (effect) {
                                this.writeByte(effect.getPoints().size());
                                var it = effect.getPoints().iterator();
                                while ((it.hasNext())) {
                                    var point = it.next();
                                    this.writeByte(point.getPosition());
                                    this.writeByte(point.getValue());
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeTremoloBarEffect = function (effect) {
                                this.writeByte(effect.getPoints().size());
                                var it = effect.getPoints().iterator();
                                while ((it.hasNext())) {
                                    var point = it.next();
                                    this.writeByte(point.getPosition());
                                    this.writeByte((point.getValue() + org.herac.tuxguitar.song.models.effects.TGEffectTremoloBar.MAX_VALUE_LENGTH));
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeHarmonicEffect = function (effect) {
                                this.writeByte(effect.getType());
                                if (effect.getType() !== org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.TYPE_NATURAL) {
                                    this.writeByte(effect.getData());
                                }
                            };
                            TGSongWriterImpl.prototype.writeGraceEffect = function (effect) {
                                var header = 0;
                                header = (effect.isDead()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.GRACE_FLAG_DEAD : header;
                                header = (effect.isOnBeat()) ? header |= org.herac.tuxguitar.io.tg.v11.TGStream.GRACE_FLAG_ON_BEAT : header;
                                this.writeHeader$int(header);
                                this.writeByte(effect.getFret());
                                this.writeByte(effect.getDuration());
                                this.writeByte(effect.getDynamic());
                                this.writeByte(effect.getTransition());
                            };
                            TGSongWriterImpl.prototype.writeTremoloPickingEffect = function (effect) {
                                this.writeByte(effect.getDuration().getValue());
                            };
                            TGSongWriterImpl.prototype.writeTrillEffect = function (effect) {
                                this.writeByte(effect.getFret());
                                this.writeByte(effect.getDuration().getValue());
                            };
                            TGSongWriterImpl.prototype.writeMarker = function (marker) {
                                this.writeUnsignedByteString(marker.getTitle());
                                this.writeRGBColor(marker.getColor());
                            };
                            TGSongWriterImpl.prototype.writeRGBColor = function (color) {
                                this.writeByte(color.getR());
                                this.writeByte(color.getG());
                                this.writeByte(color.getB());
                            };
                            TGSongWriterImpl.prototype.writeLyrics = function (lyrics) {
                                this.writeShort((lyrics.getFrom() | 0));
                                this.writeIntegerString(lyrics.getLyrics());
                            };
                            TGSongWriterImpl.prototype.writeByte = function (v) {
                                try {
                                    this.dataOutputStream.write(v);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeUnsignedByteString = function (v) {
                                try {
                                    var byteString = (v == null ? new String() : ((v.length > 255) ? v.substring(0, 255) : v));
                                    this.dataOutputStream.write(byteString.length);
                                    this.dataOutputStream.writeChars(byteString);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeIntegerString = function (v) {
                                try {
                                    this.dataOutputStream.writeInt(v.length);
                                    this.dataOutputStream.writeChars(v);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeHeader$int = function (v) {
                                try {
                                    this.dataOutputStream.write(v);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeHeader$int$int = function (v, bCount) {
                                for (var i = bCount; i > 0; i--) {
                                    this.writeHeader$int((v >>> ((8 * i) - 8)) & 255);
                                }
                            };
                            TGSongWriterImpl.prototype.writeHeader = function (v, bCount) {
                                if (((typeof v === 'number') || v === null) && ((typeof bCount === 'number') || bCount === null)) {
                                    return this.writeHeader$int$int(v, bCount);
                                }
                                else if (((typeof v === 'number') || v === null) && bCount === undefined) {
                                    return this.writeHeader$int(v);
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongWriterImpl.prototype.writeShort = function (v) {
                                try {
                                    this.dataOutputStream.writeShort(v);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.getChannel = function (song, track) {
                                var tgSongManager = new org.herac.tuxguitar.song.managers.TGSongManager(this.factory);
                                var tgChannel = tgSongManager.getChannel(song, track.getChannelId());
                                if (tgChannel == null) {
                                    tgChannel = this.factory.newChannel();
                                }
                                return tgChannel;
                            };
                            TGSongWriterImpl.prototype.getChannelRoute = function (channelId) {
                                var gmChannelRoute = this.channelRouter.getRoute(channelId);
                                if (gmChannelRoute == null) {
                                    gmChannelRoute = new org.herac.tuxguitar.gm.GMChannelRoute(org.herac.tuxguitar.gm.GMChannelRoute.NULL_VALUE);
                                    gmChannelRoute.setChannel1(15);
                                    gmChannelRoute.setChannel2(15);
                                }
                                return gmChannelRoute;
                            };
                            TGSongWriterImpl.prototype.configureChannelRouter = function (song) {
                                this.channelRouter = new org.herac.tuxguitar.gm.GMChannelRouter();
                                var gmChannelRouterConfigurator = new org.herac.tuxguitar.gm.GMChannelRouterConfigurator(this.channelRouter);
                                gmChannelRouterConfigurator.configureRouter(song.getChannels());
                            };
                            return TGSongWriterImpl;
                        }(org.herac.tuxguitar.io.tg.v11.TGStream));
                        v11.TGSongWriterImpl = TGSongWriterImpl;
                        TGSongWriterImpl["__class"] = "org.herac.tuxguitar.io.tg.v11.TGSongWriterImpl";
                        TGSongWriterImpl["__interfaces"] = ["org.herac.tuxguitar.io.base.TGSongWriter", "org.herac.tuxguitar.io.base.TGSongPersistenceHandler"];
                    })(v11 = tg.v11 || (tg.v11 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v12;
                    (function (v12) {
                        var TGSongReaderImpl = (function (_super) {
                            __extends(TGSongReaderImpl, _super);
                            function TGSongReaderImpl() {
                                var _this = _super.call(this) || this;
                                _this.dataInputStream = null;
                                _this.factory = null;
                                return _this;
                            }
                            TGSongReaderImpl.SUPPORTED_FORMAT_$LI$ = function () { if (TGSongReaderImpl.SUPPORTED_FORMAT == null)
                                TGSongReaderImpl.SUPPORTED_FORMAT = new org.herac.tuxguitar.io.tg.TGFileFormatVersion(org.herac.tuxguitar.io.tg.v12.TGStream.TG_FORMAT_$LI$(), org.herac.tuxguitar.io.tg.v12.TGStream.TG_FORMAT_VERSION_$LI$()); return TGSongReaderImpl.SUPPORTED_FORMAT; };
                            ;
                            TGSongReaderImpl.prototype.read$org_herac_tuxguitar_io_base_TGSongReaderHandle = function (handle) {
                                try {
                                    this.factory = handle.getFactory();
                                    this.dataInputStream = new java.io.DataInputStream(handle.getInputStream());
                                    var fileFormat = new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(TGSongReaderImpl.SUPPORTED_FORMAT_$LI$()).getFileFormat(this.dataInputStream);
                                    if (fileFormat == null || !(function (o1, o2) { if (o1.equals) {
                                        return o1.equals(o2);
                                    }
                                    else {
                                        return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                    } })(fileFormat, this.getFileFormat())) {
                                        throw new org.herac.tuxguitar.io.base.TGFileFormatException("Unsupported Version");
                                    }
                                    var song_14 = this.read();
                                    this.dataInputStream.close();
                                    handle.setSong(song_14);
                                }
                                catch (throwable) {
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException(throwable);
                                }
                                ;
                            };
                            TGSongReaderImpl.prototype.read = function (handle) {
                                if (((handle != null && handle instanceof org.herac.tuxguitar.io.base.TGSongReaderHandle) || handle === null)) {
                                    return this.read$org_herac_tuxguitar_io_base_TGSongReaderHandle(handle);
                                }
                                else if (handle === undefined) {
                                    return this.read$();
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongReaderImpl.prototype.read$ = function () {
                                var song = this.factory.newSong();
                                song.setName(this.readUnsignedByteString());
                                song.setArtist(this.readUnsignedByteString());
                                song.setAlbum(this.readUnsignedByteString());
                                song.setAuthor(this.readUnsignedByteString());
                                song.setDate(this.readUnsignedByteString());
                                song.setCopyright(this.readUnsignedByteString());
                                song.setWriter(this.readUnsignedByteString());
                                song.setTranscriber(this.readUnsignedByteString());
                                song.setComments(this.readIntegerString());
                                var headerCount = this.readShort();
                                var lastHeader = null;
                                var headerStart = org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME;
                                for (var i = 0; i < headerCount; i++) {
                                    var header = this.readMeasureHeader(i + 1, headerStart, lastHeader);
                                    song.addMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader(header);
                                    headerStart += header.getLength();
                                    lastHeader = header;
                                }
                                var trackCount = this.readByte();
                                for (var i = 0; i < trackCount; i++) {
                                    song.addTrack$org_herac_tuxguitar_song_models_TGTrack(this.readTrack(i + 1, song));
                                }
                                return song;
                            };
                            TGSongReaderImpl.prototype.readTrack = function (number, song) {
                                var header = this.readHeader();
                                var track = this.factory.newTrack();
                                track.setNumber(number);
                                track.setName(this.readUnsignedByteString());
                                track.setSolo((header & org.herac.tuxguitar.io.tg.v12.TGStream.TRACK_SOLO) !== 0);
                                track.setMute((header & org.herac.tuxguitar.io.tg.v12.TGStream.TRACK_MUTE) !== 0);
                                this.readChannel(song, track);
                                var measureCount = song.countMeasureHeaders();
                                var lastMeasure = null;
                                for (var i = 0; i < measureCount; i++) {
                                    var measure = this.readMeasure(song.getMeasureHeader(i), lastMeasure);
                                    track.addMeasure$org_herac_tuxguitar_song_models_TGMeasure(measure);
                                    lastMeasure = measure;
                                }
                                var stringCount = this.readByte();
                                for (var i = 0; i < stringCount; i++) {
                                    track.getStrings().add(this.readInstrumentString(i + 1));
                                }
                                track.setOffset(org.herac.tuxguitar.song.models.TGTrack.MIN_OFFSET + this.readByte());
                                this.readRGBColor(track.getColor());
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.TRACK_LYRICS) !== 0)) {
                                    this.readLyrics(track.getLyrics());
                                }
                                return track;
                            };
                            TGSongReaderImpl.prototype.readMeasureHeader = function (number, start, lastMeasureHeader) {
                                var header = this.readHeader();
                                var measureHeader = this.factory.newHeader();
                                measureHeader.setNumber(number);
                                measureHeader.setStart(start);
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_TIMESIGNATURE) !== 0)) {
                                    this.readTimeSignature(measureHeader.getTimeSignature());
                                }
                                else if (lastMeasureHeader != null) {
                                    measureHeader.getTimeSignature().copyFrom(lastMeasureHeader.getTimeSignature());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_TEMPO) !== 0)) {
                                    this.readTempo(measureHeader.getTempo());
                                }
                                else if (lastMeasureHeader != null) {
                                    measureHeader.getTempo().copyFrom(lastMeasureHeader.getTempo());
                                }
                                measureHeader.setRepeatOpen((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_REPEAT_OPEN) !== 0);
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_REPEAT_CLOSE) !== 0)) {
                                    measureHeader.setRepeatClose(this.readShort());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE) !== 0)) {
                                    measureHeader.setRepeatAlternative(this.readByte());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_MARKER) !== 0)) {
                                    measureHeader.setMarker(this.readMarker(number));
                                }
                                measureHeader.setTripletFeel((lastMeasureHeader != null) ? lastMeasureHeader.getTripletFeel() : org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_NONE);
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_TRIPLET_FEEL) !== 0)) {
                                    measureHeader.setTripletFeel(this.readByte());
                                }
                                return measureHeader;
                            };
                            TGSongReaderImpl.prototype.readMeasure = function (measureHeader, lastMeasure) {
                                var header = this.readHeader();
                                var measure = this.factory.newMeasure(measureHeader);
                                var data = new v12.TGStream.TGBeatData(this.__parent, measure);
                                this.readBeats(measure, data);
                                measure.setClef((lastMeasure == null) ? org.herac.tuxguitar.song.models.TGMeasure.CLEF_TREBLE : lastMeasure.getClef());
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_CLEF) !== 0)) {
                                    measure.setClef(this.readByte());
                                }
                                measure.setKeySignature((lastMeasure == null) ? 0 : lastMeasure.getKeySignature());
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_KEYSIGNATURE) !== 0)) {
                                    measure.setKeySignature(this.readByte());
                                }
                                return measure;
                            };
                            TGSongReaderImpl.prototype.readChannel = function (song, track) {
                                var channel = this.factory.newChannel();
                                var gmChannel1Param = this.factory.newChannelParameter();
                                var gmChannel2Param = this.factory.newChannelParameter();
                                var channel1 = (this.readByte() & 255);
                                gmChannel1Param.setKey(org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_1);
                                gmChannel1Param.setValue(/* toString */ ('' + (channel1)));
                                var channel2 = (this.readByte() & 255);
                                gmChannel2Param.setKey(org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_2);
                                gmChannel2Param.setValue(/* toString */ ('' + (channel2)));
                                channel.setBank(channel1 === 9 ? org.herac.tuxguitar.song.models.TGChannel.DEFAULT_PERCUSSION_BANK : org.herac.tuxguitar.song.models.TGChannel.DEFAULT_BANK);
                                channel.setProgram(this.readByte());
                                channel.setVolume(this.readByte());
                                channel.setBalance(this.readByte());
                                channel.setChorus(this.readByte());
                                channel.setReverb(this.readByte());
                                channel.setPhaser(this.readByte());
                                channel.setTremolo(this.readByte());
                                for (var i = 0; i < song.countChannels(); i++) {
                                    var channelAux = song.getChannel(i);
                                    for (var n = 0; n < channelAux.countParameters(); n++) {
                                        var channelParameter = channelAux.getParameter(n);
                                        if ((function (o1, o2) { if (o1.equals) {
                                            return o1.equals(o2);
                                        }
                                        else {
                                            return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                        } })(channelParameter.getKey(), org.herac.tuxguitar.gm.GMChannelRoute.PARAMETER_GM_CHANNEL_1)) {
                                            if ((function (o1, o2) { if (o1.equals) {
                                                return o1.equals(o2);
                                            }
                                            else {
                                                return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                            } })(/* toString */ ('' + (channel1)), channelParameter.getValue())) {
                                                channel.setChannelId(channelAux.getChannelId());
                                            }
                                        }
                                    }
                                }
                                if (channel.getChannelId() <= 0) {
                                    channel.setChannelId(song.countChannels() + 1);
                                    channel.setName(new org.herac.tuxguitar.song.managers.TGSongManager(this.factory).createChannelNameFromProgram(song, channel));
                                    channel.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(gmChannel1Param);
                                    channel.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(gmChannel2Param);
                                    song.addChannel$org_herac_tuxguitar_song_models_TGChannel(channel);
                                }
                                track.setChannelId(channel.getChannelId());
                            };
                            TGSongReaderImpl.prototype.readBeats = function (measure, data) {
                                var header = org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_NEXT;
                                while ((((header & org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_NEXT) !== 0))) {
                                    header = this.readHeader();
                                    this.readBeat(header, measure, data);
                                }
                                ;
                            };
                            TGSongReaderImpl.prototype.readBeat = function (header, measure, data) {
                                var beat = this.factory.newBeat();
                                beat.setStart(data.getCurrentStart());
                                this.readVoices(header, beat, data);
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_STROKE) !== 0)) {
                                    this.readStroke(beat.getStroke());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_CHORD) !== 0)) {
                                    this.readChord(beat);
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_TEXT) !== 0)) {
                                    this.readText(beat);
                                }
                                measure.addBeat(beat);
                            };
                            TGSongReaderImpl.prototype.readVoices = function (header, beat, data) {
                                for (var i = 0; i < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; i++) {
                                    var shift = (i * 2);
                                    beat.getVoice(i).setEmpty(true);
                                    if (((header & (org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_VOICE << shift)) !== 0)) {
                                        if (((header & (org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_VOICE_CHANGES << shift)) !== 0)) {
                                            data.getVoice(i).setFlags(this.readHeader());
                                        }
                                        var flags = data.getVoice(i).getFlags();
                                        if (((flags & org.herac.tuxguitar.io.tg.v12.TGStream.VOICE_NEXT_DURATION) !== 0)) {
                                            this.readDuration(data.getVoice(i).getDuration());
                                        }
                                        if (((flags & org.herac.tuxguitar.io.tg.v12.TGStream.VOICE_HAS_NOTES) !== 0)) {
                                            this.readNotes(beat.getVoice(i), data);
                                        }
                                        if (((flags & org.herac.tuxguitar.io.tg.v12.TGStream.VOICE_DIRECTION_UP) !== 0)) {
                                            beat.getVoice(i).setDirection(org.herac.tuxguitar.song.models.TGVoice.DIRECTION_UP);
                                        }
                                        else if (((flags & org.herac.tuxguitar.io.tg.v12.TGStream.VOICE_DIRECTION_DOWN) !== 0)) {
                                            beat.getVoice(i).setDirection(org.herac.tuxguitar.song.models.TGVoice.DIRECTION_DOWN);
                                        }
                                        beat.getVoice(i).getDuration().copyFrom(data.getVoice(i).getDuration());
                                        data.getVoice(i).setStart(data.getVoice(i).getStart() + beat.getVoice(i).getDuration().getTime());
                                        beat.getVoice(i).setEmpty(false);
                                    }
                                }
                            };
                            TGSongReaderImpl.prototype.readNotes = function (voice, data) {
                                var header = org.herac.tuxguitar.io.tg.v12.TGStream.NOTE_HAS_NEXT;
                                while ((((header & org.herac.tuxguitar.io.tg.v12.TGStream.NOTE_HAS_NEXT) !== 0))) {
                                    header = this.readHeader();
                                    this.readNote(header, voice, data);
                                }
                                ;
                            };
                            TGSongReaderImpl.prototype.readNote = function (header, voice, data) {
                                var note = this.factory.newNote();
                                note.setValue(this.readByte());
                                note.setString(this.readByte());
                                note.setTiedNote((header & org.herac.tuxguitar.io.tg.v12.TGStream.NOTE_TIED) !== 0);
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.NOTE_VELOCITY) !== 0)) {
                                    data.getVoice(voice.getIndex()).setVelocity(this.readByte());
                                }
                                note.setVelocity(data.getVoice(voice.getIndex()).getVelocity());
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.NOTE_EFFECT) !== 0)) {
                                    this.readNoteEffect(note.getEffect());
                                }
                                voice.addNote(note);
                            };
                            TGSongReaderImpl.prototype.readChord = function (beat) {
                                var chord = this.factory.newChord(this.readByte());
                                chord.setName(this.readUnsignedByteString());
                                chord.setFirstFret(this.readByte());
                                for (var string = 0; string < chord.countStrings(); string++) {
                                    chord.addFretValue(string, this.readByte());
                                }
                                beat.setChord(chord);
                            };
                            TGSongReaderImpl.prototype.readText = function (beat) {
                                var text = this.factory.newText();
                                text.setValue(this.readUnsignedByteString());
                                beat.setText(text);
                            };
                            TGSongReaderImpl.prototype.readInstrumentString = function (number) {
                                var string = this.factory.newString();
                                string.setNumber(number);
                                string.setValue(this.readByte());
                                return string;
                            };
                            TGSongReaderImpl.prototype.readTempo = function (tempo) {
                                tempo.setValue(this.readShort());
                            };
                            TGSongReaderImpl.prototype.readTimeSignature = function (timeSignature) {
                                timeSignature.setNumerator(this.readByte());
                                this.readDuration(timeSignature.getDenominator());
                            };
                            TGSongReaderImpl.prototype.readDuration = function (duration) {
                                var header = this.readHeader();
                                duration.setDotted((header & org.herac.tuxguitar.io.tg.v12.TGStream.DURATION_DOTTED) !== 0);
                                duration.setDoubleDotted((header & org.herac.tuxguitar.io.tg.v12.TGStream.DURATION_DOUBLE_DOTTED) !== 0);
                                duration.setValue(this.readByte());
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.DURATION_NO_TUPLET) !== 0)) {
                                    this.readDivisionType(duration.getDivision());
                                }
                                else {
                                    duration.getDivision().copyFrom(org.herac.tuxguitar.song.models.TGDivisionType.NORMAL_$LI$());
                                }
                            };
                            TGSongReaderImpl.prototype.readDivisionType = function (divisionType) {
                                divisionType.setEnters(this.readByte());
                                divisionType.setTimes(this.readByte());
                            };
                            TGSongReaderImpl.prototype.readStroke = function (stroke) {
                                stroke.setDirection(this.readByte());
                                stroke.setValue(this.readByte());
                            };
                            TGSongReaderImpl.prototype.readNoteEffect = function (effect) {
                                var header = this.readHeader$int(3);
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_BEND) !== 0)) {
                                    effect.setBend(this.readBendEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_TREMOLO_BAR) !== 0)) {
                                    effect.setTremoloBar(this.readTremoloBarEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_HARMONIC) !== 0)) {
                                    effect.setHarmonic(this.readHarmonicEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_GRACE) !== 0)) {
                                    effect.setGrace(this.readGraceEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_TRILL) !== 0)) {
                                    effect.setTrill(this.readTrillEffect());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_TREMOLO_PICKING) !== 0)) {
                                    effect.setTremoloPicking(this.readTremoloPickingEffect());
                                }
                                effect.setVibrato(((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_VIBRATO) !== 0));
                                effect.setDeadNote(((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_DEAD) !== 0));
                                effect.setSlide(((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_SLIDE) !== 0));
                                effect.setHammer(((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_HAMMER) !== 0));
                                effect.setGhostNote(((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_GHOST) !== 0));
                                effect.setAccentuatedNote(((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_ACCENTUATED) !== 0));
                                effect.setHeavyAccentuatedNote(((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_HEAVY_ACCENTUATED) !== 0));
                                effect.setPalmMute(((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_PALM_MUTE) !== 0));
                                effect.setStaccato(((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_STACCATO) !== 0));
                                effect.setTapping(((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_TAPPING) !== 0));
                                effect.setSlapping(((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_SLAPPING) !== 0));
                                effect.setPopping(((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_POPPING) !== 0));
                                effect.setFadeIn(((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_FADE_IN) !== 0));
                                effect.setLetRing(((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_LET_RING) !== 0));
                            };
                            TGSongReaderImpl.prototype.readBendEffect = function () {
                                var bend = this.factory.newEffectBend();
                                var count = this.readByte();
                                for (var i = 0; i < count; i++) {
                                    var position = this.readByte();
                                    var value = this.readByte();
                                    bend.addPoint(position, value);
                                }
                                return bend;
                            };
                            TGSongReaderImpl.prototype.readTremoloBarEffect = function () {
                                var tremoloBar = this.factory.newEffectTremoloBar();
                                var count = this.readByte();
                                for (var i = 0; i < count; i++) {
                                    var position = this.readByte();
                                    var value = (this.readByte() - org.herac.tuxguitar.song.models.effects.TGEffectTremoloBar.MAX_VALUE_LENGTH);
                                    tremoloBar.addPoint(position, value);
                                }
                                return tremoloBar;
                            };
                            TGSongReaderImpl.prototype.readHarmonicEffect = function () {
                                var effect = this.factory.newEffectHarmonic();
                                effect.setType(this.readByte());
                                if (effect.getType() !== org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.TYPE_NATURAL) {
                                    effect.setData(this.readByte());
                                }
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readGraceEffect = function () {
                                var header = this.readHeader();
                                var effect = this.factory.newEffectGrace();
                                effect.setDead((header & org.herac.tuxguitar.io.tg.v12.TGStream.GRACE_FLAG_DEAD) !== 0);
                                effect.setOnBeat((header & org.herac.tuxguitar.io.tg.v12.TGStream.GRACE_FLAG_ON_BEAT) !== 0);
                                effect.setFret(this.readByte());
                                effect.setDuration(this.readByte());
                                effect.setDynamic(this.readByte());
                                effect.setTransition(this.readByte());
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readTremoloPickingEffect = function () {
                                var effect = this.factory.newEffectTremoloPicking();
                                effect.getDuration().setValue(this.readByte());
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readTrillEffect = function () {
                                var effect = this.factory.newEffectTrill();
                                effect.setFret(this.readByte());
                                effect.getDuration().setValue(this.readByte());
                                return effect;
                            };
                            TGSongReaderImpl.prototype.readMarker = function (measure) {
                                var marker = this.factory.newMarker();
                                marker.setMeasure(measure);
                                marker.setTitle(this.readUnsignedByteString());
                                this.readRGBColor(marker.getColor());
                                return marker;
                            };
                            TGSongReaderImpl.prototype.readRGBColor = function (color) {
                                color.setR((this.readByte() & 255));
                                color.setG((this.readByte() & 255));
                                color.setB((this.readByte() & 255));
                            };
                            TGSongReaderImpl.prototype.readLyrics = function (lyrics) {
                                lyrics.setFrom(this.readShort());
                                lyrics.setLyrics(this.readIntegerString());
                            };
                            TGSongReaderImpl.prototype.readByte = function () {
                                try {
                                    return (this.dataInputStream.read() | 0);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readHeader$ = function () {
                                try {
                                    return this.dataInputStream.read();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readHeader$int = function (bCount) {
                                var header = 0;
                                for (var i = bCount; i > 0; i--) {
                                    header += (this.readHeader() << ((8 * i) - 8));
                                }
                                return header;
                            };
                            TGSongReaderImpl.prototype.readHeader = function (bCount) {
                                if (((typeof bCount === 'number') || bCount === null)) {
                                    return this.readHeader$int(bCount);
                                }
                                else if (bCount === undefined) {
                                    return this.readHeader$();
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongReaderImpl.prototype.readShort = function () {
                                try {
                                    return this.dataInputStream.readShort();
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return 0;
                            };
                            TGSongReaderImpl.prototype.readUnsignedByteString = function () {
                                try {
                                    return this.readString((this.dataInputStream.read() & 255));
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return null;
                            };
                            TGSongReaderImpl.prototype.readIntegerString = function () {
                                try {
                                    return this.readString(this.dataInputStream.readInt());
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                                return null;
                            };
                            TGSongReaderImpl.prototype.readString = function (length) {
                                var sb = new java.lang.StringBuilder();
                                for (var i = 0; i < length; i++) {
                                    sb.append(this.dataInputStream.readChar());
                                }
                                return sb.toString();
                            };
                            return TGSongReaderImpl;
                        }(org.herac.tuxguitar.io.tg.v12.TGStream));
                        v12.TGSongReaderImpl = TGSongReaderImpl;
                        TGSongReaderImpl["__class"] = "org.herac.tuxguitar.io.tg.v12.TGSongReaderImpl";
                        TGSongReaderImpl["__interfaces"] = ["org.herac.tuxguitar.io.base.TGSongReader", "org.herac.tuxguitar.io.base.TGSongPersistenceHandler"];
                    })(v12 = tg.v12 || (tg.v12 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var v12;
                    (function (v12) {
                        var TGSongWriterImpl = (function (_super) {
                            __extends(TGSongWriterImpl, _super);
                            function TGSongWriterImpl() {
                                var _this = _super.call(this) || this;
                                _this.factory = null;
                                _this.channelRouter = null;
                                _this.dataOutputStream = null;
                                return _this;
                            }
                            TGSongWriterImpl.prototype.write$org_herac_tuxguitar_io_base_TGSongWriterHandle = function (handle) {
                                try {
                                    var songManager = new org.herac.tuxguitar.song.managers.TGSongManager(handle.getFactory());
                                    var song_15 = handle.getSong();
                                    this.factory = songManager.getFactory();
                                    this.dataOutputStream = new java.io.DataOutputStream(handle.getOutputStream());
                                    this.configureChannelRouter(song_15);
                                    this.writeVersion();
                                    this.write$org_herac_tuxguitar_song_models_TGSong(song_15);
                                    this.dataOutputStream.flush();
                                    this.dataOutputStream.close();
                                }
                                catch (throwable) {
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException(throwable);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.write = function (handle) {
                                if (((handle != null && handle instanceof org.herac.tuxguitar.io.base.TGSongWriterHandle) || handle === null)) {
                                    return this.write$org_herac_tuxguitar_io_base_TGSongWriterHandle(handle);
                                }
                                else if (((handle != null && handle instanceof org.herac.tuxguitar.song.models.TGSong) || handle === null)) {
                                    return this.write$org_herac_tuxguitar_song_models_TGSong(handle);
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongWriterImpl.prototype.writeVersion = function () {
                                this.writeUnsignedByteString(org.herac.tuxguitar.io.tg.v12.TGStream.TG_FORMAT_VERSION_$LI$());
                            };
                            TGSongWriterImpl.prototype.write$org_herac_tuxguitar_song_models_TGSong = function (song) {
                                this.writeUnsignedByteString(song.getName());
                                this.writeUnsignedByteString(song.getArtist());
                                this.writeUnsignedByteString(song.getAlbum());
                                this.writeUnsignedByteString(song.getAuthor());
                                this.writeUnsignedByteString(song.getDate());
                                this.writeUnsignedByteString(song.getCopyright());
                                this.writeUnsignedByteString(song.getWriter());
                                this.writeUnsignedByteString(song.getTranscriber());
                                this.writeIntegerString(song.getComments());
                                this.writeShort((song.countMeasureHeaders() | 0));
                                var lastHeader = null;
                                var headers = song.getMeasureHeaders();
                                while ((headers.hasNext())) {
                                    var header = headers.next();
                                    this.writeMeasureHeader(header, lastHeader);
                                    lastHeader = header;
                                }
                                ;
                                this.writeByte(song.countTracks());
                                for (var i = 0; i < song.countTracks(); i++) {
                                    var track = song.getTrack(i);
                                    this.writeTrack(track);
                                }
                            };
                            TGSongWriterImpl.prototype.writeTrack = function (track) {
                                var header = 0;
                                if (track.isSolo()) {
                                    header |= org.herac.tuxguitar.io.tg.v12.TGStream.TRACK_SOLO;
                                }
                                if (track.isMute()) {
                                    header |= org.herac.tuxguitar.io.tg.v12.TGStream.TRACK_MUTE;
                                }
                                if (!track.getLyrics().isEmpty()) {
                                    header |= org.herac.tuxguitar.io.tg.v12.TGStream.TRACK_LYRICS;
                                }
                                this.writeHeader$int(header);
                                this.writeUnsignedByteString(track.getName());
                                this.writeChannel(this.getChannel(track.getSong(), track));
                                var lastMeasure = null;
                                var measures = track.getMeasures();
                                while ((measures.hasNext())) {
                                    var measure = measures.next();
                                    this.writeMeasure(measure, lastMeasure);
                                    lastMeasure = measure;
                                }
                                ;
                                this.writeByte(track.getStrings().size());
                                var stringIt = track.getStrings().iterator();
                                while ((stringIt.hasNext())) {
                                    var string = stringIt.next();
                                    this.writeInstrumentString(string);
                                }
                                ;
                                this.writeByte(track.getOffset() - org.herac.tuxguitar.song.models.TGTrack.MIN_OFFSET);
                                this.writeRGBColor(track.getColor());
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.TRACK_LYRICS) !== 0)) {
                                    this.writeLyrics(track.getLyrics());
                                }
                            };
                            TGSongWriterImpl.prototype.writeMeasureHeader = function (measureheader, lastMeasureHeader) {
                                var header = 0;
                                if (lastMeasureHeader == null) {
                                    header |= org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_TIMESIGNATURE;
                                    header |= org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_TEMPO;
                                    if (measureheader.getTripletFeel() !== org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_NONE) {
                                        header |= org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_TRIPLET_FEEL;
                                    }
                                }
                                else {
                                    var numerator = measureheader.getTimeSignature().getNumerator();
                                    var value = measureheader.getTimeSignature().getDenominator().getValue();
                                    var prevNumerator = lastMeasureHeader.getTimeSignature().getNumerator();
                                    var prevValue = lastMeasureHeader.getTimeSignature().getDenominator().getValue();
                                    if (numerator !== prevNumerator || value !== prevValue) {
                                        header |= org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_TIMESIGNATURE;
                                    }
                                    if (measureheader.getTempo().getValue() !== lastMeasureHeader.getTempo().getValue()) {
                                        header |= org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_TEMPO;
                                    }
                                    if (measureheader.getTripletFeel() !== lastMeasureHeader.getTripletFeel()) {
                                        header |= org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_TRIPLET_FEEL;
                                    }
                                }
                                header = (measureheader.isRepeatOpen()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_REPEAT_OPEN : header;
                                header = (measureheader.getRepeatClose() > 0) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_REPEAT_CLOSE : header;
                                header = (measureheader.getRepeatAlternative() > 0) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE : header;
                                header = (measureheader.hasMarker()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_MARKER : header;
                                this.writeHeader$int(header);
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_TIMESIGNATURE) !== 0)) {
                                    this.writeTimeSignature(measureheader.getTimeSignature());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_TEMPO) !== 0)) {
                                    this.writeTempo(measureheader.getTempo());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_REPEAT_CLOSE) !== 0)) {
                                    this.writeShort((measureheader.getRepeatClose() | 0));
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE) !== 0)) {
                                    this.writeByte(measureheader.getRepeatAlternative());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_MARKER) !== 0)) {
                                    this.writeMarker(measureheader.getMarker());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_HEADER_TRIPLET_FEEL) !== 0)) {
                                    this.writeByte(measureheader.getTripletFeel());
                                }
                            };
                            TGSongWriterImpl.prototype.writeMeasure = function (measure, lastMeasure) {
                                var header = 0;
                                if (lastMeasure == null) {
                                    header |= org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_CLEF;
                                    header |= org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_KEYSIGNATURE;
                                }
                                else {
                                    if (measure.getClef() !== lastMeasure.getClef()) {
                                        header |= org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_CLEF;
                                    }
                                    if (measure.getKeySignature() !== lastMeasure.getKeySignature()) {
                                        header |= org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_KEYSIGNATURE;
                                    }
                                }
                                this.writeHeader$int(header);
                                var data = new v12.TGStream.TGBeatData(this.__parent, measure);
                                this.writeBeats(measure, data);
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_CLEF) !== 0)) {
                                    this.writeByte(measure.getClef());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.MEASURE_KEYSIGNATURE) !== 0)) {
                                    this.writeByte(measure.getKeySignature());
                                }
                            };
                            TGSongWriterImpl.prototype.writeChannel = function (channel) {
                                var gmChannelRoute = this.getChannelRoute(channel.getChannelId());
                                this.writeByte(gmChannelRoute.getChannel1());
                                this.writeByte(gmChannelRoute.getChannel2());
                                this.writeByte(channel.getProgram());
                                this.writeByte(channel.getVolume());
                                this.writeByte(channel.getBalance());
                                this.writeByte(channel.getChorus());
                                this.writeByte(channel.getReverb());
                                this.writeByte(channel.getPhaser());
                                this.writeByte(channel.getTremolo());
                            };
                            TGSongWriterImpl.prototype.writeBeats = function (measure, data) {
                                var count = measure.countBeats();
                                for (var i = 0; i < count; i++) {
                                    var beat = measure.getBeat(i);
                                    this.writeBeat(beat, data, (i + 1 < count));
                                }
                            };
                            TGSongWriterImpl.prototype.writeBeat = function (beat, data, hasNext) {
                                var header = hasNext ? org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_NEXT : 0;
                                for (var i = 0; i < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; i++) {
                                    var shift = (i * 2);
                                    if (!beat.getVoice(i).isEmpty()) {
                                        header |= (org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_VOICE << shift);
                                        var flags = (beat.getVoice(i).isRestVoice() ? 0 : org.herac.tuxguitar.io.tg.v12.TGStream.VOICE_HAS_NOTES);
                                        if (!beat.getVoice(i).getDuration().isEqual(data.getVoice(i).getDuration())) {
                                            flags |= org.herac.tuxguitar.io.tg.v12.TGStream.VOICE_NEXT_DURATION;
                                            data.getVoice(i).setDuration(beat.getVoice(i).getDuration());
                                        }
                                        if (beat.getVoice(i).getDirection() !== org.herac.tuxguitar.song.models.TGVoice.DIRECTION_NONE) {
                                            if (beat.getVoice(i).getDirection() === org.herac.tuxguitar.song.models.TGVoice.DIRECTION_UP) {
                                                flags |= org.herac.tuxguitar.io.tg.v12.TGStream.VOICE_DIRECTION_UP;
                                            }
                                            else if (beat.getVoice(i).getDirection() === org.herac.tuxguitar.song.models.TGVoice.DIRECTION_DOWN) {
                                                flags |= org.herac.tuxguitar.io.tg.v12.TGStream.VOICE_DIRECTION_DOWN;
                                            }
                                        }
                                        if (data.getVoice(i).getFlags() !== flags) {
                                            header |= (org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_VOICE_CHANGES << shift);
                                            data.getVoice(i).setFlags(flags);
                                        }
                                    }
                                }
                                if (beat.getStroke().getDirection() !== org.herac.tuxguitar.song.models.TGStroke.STROKE_NONE) {
                                    header |= org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_STROKE;
                                }
                                if (beat.getChord() != null) {
                                    header |= org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_CHORD;
                                }
                                if (beat.getText() != null) {
                                    header |= org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_TEXT;
                                }
                                this.writeHeader$int(header);
                                this.writeVoices(header, beat, data);
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_STROKE) !== 0)) {
                                    this.writeStroke(beat.getStroke());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_CHORD) !== 0)) {
                                    this.writeChord(beat.getChord());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_TEXT) !== 0)) {
                                    this.writeText(beat.getText());
                                }
                            };
                            TGSongWriterImpl.prototype.writeVoices = function (header, beat, data) {
                                for (var i = 0; i < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; i++) {
                                    var shift = (i * 2);
                                    if (((header & (org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_VOICE << shift)) !== 0)) {
                                        if (((header & (org.herac.tuxguitar.io.tg.v12.TGStream.BEAT_HAS_VOICE_CHANGES << shift)) !== 0)) {
                                            this.writeHeader$int(data.getVoice(i).getFlags());
                                        }
                                        if (((data.getVoice(i).getFlags() & org.herac.tuxguitar.io.tg.v12.TGStream.VOICE_NEXT_DURATION) !== 0)) {
                                            this.writeDuration(beat.getVoice(i).getDuration());
                                        }
                                        if (((data.getVoice(i).getFlags() & org.herac.tuxguitar.io.tg.v12.TGStream.VOICE_HAS_NOTES) !== 0)) {
                                            this.writeNotes(beat.getVoice(i), data);
                                        }
                                    }
                                }
                            };
                            TGSongWriterImpl.prototype.writeNotes = function (voice, data) {
                                for (var i = 0; i < voice.countNotes(); i++) {
                                    var note = voice.getNote(i);
                                    var header = (i + 1 < voice.countNotes() ? org.herac.tuxguitar.io.tg.v12.TGStream.NOTE_HAS_NEXT : 0);
                                    header = (note.isTiedNote()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.NOTE_TIED : header;
                                    if (note.getVelocity() !== data.getVoice(voice.getIndex()).getVelocity()) {
                                        data.getVoice(voice.getIndex()).setVelocity(note.getVelocity());
                                        header |= org.herac.tuxguitar.io.tg.v12.TGStream.NOTE_VELOCITY;
                                    }
                                    header = (note.getEffect().hasAnyEffect()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.NOTE_EFFECT : header;
                                    this.writeHeader$int(header);
                                    this.writeNote(header, note);
                                }
                            };
                            TGSongWriterImpl.prototype.writeNote = function (header, note) {
                                this.writeByte(note.getValue());
                                this.writeByte(note.getString());
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.NOTE_VELOCITY) !== 0)) {
                                    this.writeByte(note.getVelocity());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.NOTE_EFFECT) !== 0)) {
                                    this.writeNoteEffect(note.getEffect());
                                }
                            };
                            TGSongWriterImpl.prototype.writeStroke = function (stroke) {
                                this.writeByte(stroke.getDirection());
                                this.writeByte(stroke.getValue());
                            };
                            TGSongWriterImpl.prototype.writeChord = function (chord) {
                                this.writeByte(chord.countStrings());
                                this.writeUnsignedByteString(chord.getName());
                                this.writeByte(chord.getFirstFret());
                                for (var string = 0; string < chord.countStrings(); string++) {
                                    this.writeByte(chord.getFretValue(string));
                                }
                            };
                            TGSongWriterImpl.prototype.writeText = function (text) {
                                this.writeUnsignedByteString(text.getValue());
                            };
                            TGSongWriterImpl.prototype.writeInstrumentString = function (string) {
                                this.writeByte(string.getValue());
                            };
                            TGSongWriterImpl.prototype.writeTempo = function (tempo) {
                                this.writeShort((tempo.getValue() | 0));
                            };
                            TGSongWriterImpl.prototype.writeTimeSignature = function (timeSignature) {
                                this.writeByte(timeSignature.getNumerator());
                                this.writeDuration(timeSignature.getDenominator());
                            };
                            TGSongWriterImpl.prototype.writeDuration = function (duration) {
                                var header = 0;
                                header = (duration.isDotted()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.DURATION_DOTTED : header;
                                header = (duration.isDoubleDotted()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.DURATION_DOUBLE_DOTTED : header;
                                header = (!duration.getDivision().isEqual(org.herac.tuxguitar.song.models.TGDivisionType.NORMAL_$LI$())) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.DURATION_NO_TUPLET : header;
                                this.writeHeader$int(header);
                                this.writeByte(duration.getValue());
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.DURATION_NO_TUPLET) !== 0)) {
                                    this.writeDivisionType(duration.getDivision());
                                }
                            };
                            TGSongWriterImpl.prototype.writeDivisionType = function (divisionType) {
                                this.writeByte(divisionType.getEnters());
                                this.writeByte(divisionType.getTimes());
                            };
                            TGSongWriterImpl.prototype.writeNoteEffect = function (effect) {
                                var header = 0;
                                header = (effect.isBend()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_BEND : header;
                                header = (effect.isTremoloBar()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_TREMOLO_BAR : header;
                                header = (effect.isHarmonic()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_HARMONIC : header;
                                header = (effect.isGrace()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_GRACE : header;
                                header = (effect.isTrill()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_TRILL : header;
                                header = (effect.isTremoloPicking()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_TREMOLO_PICKING : header;
                                header = (effect.isVibrato()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_VIBRATO : header;
                                header = (effect.isDeadNote()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_DEAD : header;
                                header = (effect.isSlide()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_SLIDE : header;
                                header = (effect.isHammer()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_HAMMER : header;
                                header = (effect.isGhostNote()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_GHOST : header;
                                header = (effect.isAccentuatedNote()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_ACCENTUATED : header;
                                header = (effect.isHeavyAccentuatedNote()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_HEAVY_ACCENTUATED : header;
                                header = (effect.isPalmMute()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_PALM_MUTE : header;
                                header = (effect.isStaccato()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_STACCATO : header;
                                header = (effect.isTapping()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_TAPPING : header;
                                header = (effect.isSlapping()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_SLAPPING : header;
                                header = (effect.isPopping()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_POPPING : header;
                                header = (effect.isFadeIn()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_FADE_IN : header;
                                header = (effect.isLetRing()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_LET_RING : header;
                                this.writeHeader$int$int(header, 3);
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_BEND) !== 0)) {
                                    this.writeBendEffect(effect.getBend());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_TREMOLO_BAR) !== 0)) {
                                    this.writeTremoloBarEffect(effect.getTremoloBar());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_HARMONIC) !== 0)) {
                                    this.writeHarmonicEffect(effect.getHarmonic());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_GRACE) !== 0)) {
                                    this.writeGraceEffect(effect.getGrace());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_TRILL) !== 0)) {
                                    this.writeTrillEffect(effect.getTrill());
                                }
                                if (((header & org.herac.tuxguitar.io.tg.v12.TGStream.EFFECT_TREMOLO_PICKING) !== 0)) {
                                    this.writeTremoloPickingEffect(effect.getTremoloPicking());
                                }
                            };
                            TGSongWriterImpl.prototype.writeBendEffect = function (effect) {
                                this.writeByte(effect.getPoints().size());
                                var it = effect.getPoints().iterator();
                                while ((it.hasNext())) {
                                    var point = it.next();
                                    this.writeByte(point.getPosition());
                                    this.writeByte(point.getValue());
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeTremoloBarEffect = function (effect) {
                                this.writeByte(effect.getPoints().size());
                                var it = effect.getPoints().iterator();
                                while ((it.hasNext())) {
                                    var point = it.next();
                                    this.writeByte(point.getPosition());
                                    this.writeByte((point.getValue() + org.herac.tuxguitar.song.models.effects.TGEffectTremoloBar.MAX_VALUE_LENGTH));
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeHarmonicEffect = function (effect) {
                                this.writeByte(effect.getType());
                                if (effect.getType() !== org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.TYPE_NATURAL) {
                                    this.writeByte(effect.getData());
                                }
                            };
                            TGSongWriterImpl.prototype.writeGraceEffect = function (effect) {
                                var header = 0;
                                header = (effect.isDead()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.GRACE_FLAG_DEAD : header;
                                header = (effect.isOnBeat()) ? header |= org.herac.tuxguitar.io.tg.v12.TGStream.GRACE_FLAG_ON_BEAT : header;
                                this.writeHeader$int(header);
                                this.writeByte(effect.getFret());
                                this.writeByte(effect.getDuration());
                                this.writeByte(effect.getDynamic());
                                this.writeByte(effect.getTransition());
                            };
                            TGSongWriterImpl.prototype.writeTremoloPickingEffect = function (effect) {
                                this.writeByte(effect.getDuration().getValue());
                            };
                            TGSongWriterImpl.prototype.writeTrillEffect = function (effect) {
                                this.writeByte(effect.getFret());
                                this.writeByte(effect.getDuration().getValue());
                            };
                            TGSongWriterImpl.prototype.writeMarker = function (marker) {
                                this.writeUnsignedByteString(marker.getTitle());
                                this.writeRGBColor(marker.getColor());
                            };
                            TGSongWriterImpl.prototype.writeRGBColor = function (color) {
                                this.writeByte(color.getR());
                                this.writeByte(color.getG());
                                this.writeByte(color.getB());
                            };
                            TGSongWriterImpl.prototype.writeLyrics = function (lyrics) {
                                this.writeShort((lyrics.getFrom() | 0));
                                this.writeIntegerString(lyrics.getLyrics());
                            };
                            TGSongWriterImpl.prototype.writeByte = function (v) {
                                try {
                                    this.dataOutputStream.write(v);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeUnsignedByteString = function (v) {
                                try {
                                    var byteString = (v == null ? new String() : ((v.length > 255) ? v.substring(0, 255) : v));
                                    this.dataOutputStream.write(byteString.length);
                                    this.dataOutputStream.writeChars(byteString);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeIntegerString = function (v) {
                                try {
                                    this.dataOutputStream.writeInt(v.length);
                                    this.dataOutputStream.writeChars(v);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeHeader$int = function (v) {
                                try {
                                    this.dataOutputStream.write(v);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.writeHeader$int$int = function (v, bCount) {
                                for (var i = bCount; i > 0; i--) {
                                    this.writeHeader$int((v >>> ((8 * i) - 8)) & 255);
                                }
                            };
                            TGSongWriterImpl.prototype.writeHeader = function (v, bCount) {
                                if (((typeof v === 'number') || v === null) && ((typeof bCount === 'number') || bCount === null)) {
                                    return this.writeHeader$int$int(v, bCount);
                                }
                                else if (((typeof v === 'number') || v === null) && bCount === undefined) {
                                    return this.writeHeader$int(v);
                                }
                                else
                                    throw new Error('invalid overload');
                            };
                            TGSongWriterImpl.prototype.writeShort = function (v) {
                                try {
                                    this.dataOutputStream.writeShort(v);
                                }
                                catch (e) {
                                    console.error(e.message, e);
                                }
                                ;
                            };
                            TGSongWriterImpl.prototype.getChannel = function (song, track) {
                                var tgSongManager = new org.herac.tuxguitar.song.managers.TGSongManager(this.factory);
                                var tgChannel = tgSongManager.getChannel(song, track.getChannelId());
                                if (tgChannel == null) {
                                    tgChannel = this.factory.newChannel();
                                }
                                return tgChannel;
                            };
                            TGSongWriterImpl.prototype.getChannelRoute = function (channelId) {
                                var gmChannelRoute = this.channelRouter.getRoute(channelId);
                                if (gmChannelRoute == null) {
                                    gmChannelRoute = new org.herac.tuxguitar.gm.GMChannelRoute(org.herac.tuxguitar.gm.GMChannelRoute.NULL_VALUE);
                                    gmChannelRoute.setChannel1(15);
                                    gmChannelRoute.setChannel2(15);
                                }
                                return gmChannelRoute;
                            };
                            TGSongWriterImpl.prototype.configureChannelRouter = function (song) {
                                this.channelRouter = new org.herac.tuxguitar.gm.GMChannelRouter();
                                var gmChannelRouterConfigurator = new org.herac.tuxguitar.gm.GMChannelRouterConfigurator(this.channelRouter);
                                gmChannelRouterConfigurator.configureRouter(song.getChannels());
                            };
                            return TGSongWriterImpl;
                        }(org.herac.tuxguitar.io.tg.v12.TGStream));
                        v12.TGSongWriterImpl = TGSongWriterImpl;
                        TGSongWriterImpl["__class"] = "org.herac.tuxguitar.io.tg.v12.TGSongWriterImpl";
                        TGSongWriterImpl["__interfaces"] = ["org.herac.tuxguitar.io.base.TGSongWriter", "org.herac.tuxguitar.io.base.TGSongPersistenceHandler"];
                    })(v12 = tg.v12 || (tg.v12 = {}));
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var base;
                (function (base) {
                    var TGFileFormatUtils = (function () {
                        function TGFileFormatUtils() {
                        }
                        TGFileFormatUtils.DEFAULT_EXTENSION_$LI$ = function () { if (TGFileFormatUtils.DEFAULT_EXTENSION == null)
                            TGFileFormatUtils.DEFAULT_EXTENSION = ("." + org.herac.tuxguitar.io.tg.TGStream.TG_FORMAT_CODE_$LI$()); return TGFileFormatUtils.DEFAULT_EXTENSION; };
                        ;
                        TGFileFormatUtils.getDefaultExtension$org_herac_tuxguitar_io_base_TGFileFormat$java_lang_String = function (format, defaultValue) {
                            var supportedFormats = format.getSupportedFormats();
                            if (supportedFormats != null && supportedFormats.length > 0) {
                                return ("." + supportedFormats[0]);
                            }
                            return defaultValue;
                        };
                        TGFileFormatUtils.getDefaultExtension = function (format, defaultValue) {
                            if (((format != null && format instanceof org.herac.tuxguitar.io.base.TGFileFormat) || format === null) && ((typeof defaultValue === 'string') || defaultValue === null)) {
                                return org.herac.tuxguitar.io.base.TGFileFormatUtils.getDefaultExtension$org_herac_tuxguitar_io_base_TGFileFormat$java_lang_String(format, defaultValue);
                            }
                            else if (((format != null && format instanceof org.herac.tuxguitar.io.base.TGFileFormat) || format === null) && defaultValue === undefined) {
                                return org.herac.tuxguitar.io.base.TGFileFormatUtils.getDefaultExtension$org_herac_tuxguitar_io_base_TGFileFormat(format);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGFileFormatUtils.getDefaultExtension$org_herac_tuxguitar_io_base_TGFileFormat = function (format) {
                            return TGFileFormatUtils.getDefaultExtension$org_herac_tuxguitar_io_base_TGFileFormat$java_lang_String(format, TGFileFormatUtils.DEFAULT_EXTENSION_$LI$());
                        };
                        TGFileFormatUtils.getFileExtension$java_lang_String = function (path) {
                            return TGFileFormatUtils.getFileExtension$java_lang_String$java_lang_String(path, null);
                        };
                        TGFileFormatUtils.getFileExtension$java_lang_String$java_lang_String = function (path, defaultValue) {
                            var index = path.lastIndexOf(".");
                            if (index > 0) {
                                return path.substring(index);
                            }
                            return defaultValue;
                        };
                        TGFileFormatUtils.getFileExtension = function (path, defaultValue) {
                            if (((typeof path === 'string') || path === null) && ((typeof defaultValue === 'string') || defaultValue === null)) {
                                return org.herac.tuxguitar.io.base.TGFileFormatUtils.getFileExtension$java_lang_String$java_lang_String(path, defaultValue);
                            }
                            else if (((typeof path === 'string') || path === null) && defaultValue === undefined) {
                                return org.herac.tuxguitar.io.base.TGFileFormatUtils.getFileExtension$java_lang_String(path);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGFileFormatUtils.getFileFormatCode$java_lang_String = function (path) {
                            return TGFileFormatUtils.getFileFormatCode$java_lang_String$java_lang_String(path, null);
                        };
                        TGFileFormatUtils.getFileFormatCode$java_lang_String$java_lang_String = function (path, defaultValue) {
                            var extension = TGFileFormatUtils.getFileExtension$java_lang_String(path);
                            if (extension != null && extension.length > 1) {
                                return extension.substring(1);
                            }
                            return defaultValue;
                        };
                        TGFileFormatUtils.getFileFormatCode = function (path, defaultValue) {
                            if (((typeof path === 'string') || path === null) && ((typeof defaultValue === 'string') || defaultValue === null)) {
                                return org.herac.tuxguitar.io.base.TGFileFormatUtils.getFileFormatCode$java_lang_String$java_lang_String(path, defaultValue);
                            }
                            else if (((typeof path === 'string') || path === null) && defaultValue === undefined) {
                                return org.herac.tuxguitar.io.base.TGFileFormatUtils.getFileFormatCode$java_lang_String(path);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGFileFormatUtils.isSupportedFormat = function (formats, fileName) {
                            if (fileName != null) {
                                var formatCode = TGFileFormatUtils.getFileFormatCode$java_lang_String(fileName);
                                if (formatCode != null) {
                                    for (var index146 = formats.iterator(); index146.hasNext();) {
                                        var format = index146.next();
                                        {
                                            if (format.isSupportedCode(formatCode)) {
                                                return true;
                                            }
                                        }
                                    }
                                }
                            }
                            return false;
                        };
                        TGFileFormatUtils.getInputStream = function (__in) {
                            var out = new java.io.ByteArrayOutputStream();
                            var read = 0;
                            while (((read = __in.read()) !== -1)) {
                                out.write(read);
                            }
                            ;
                            var bytes = out.toByteArray();
                            __in.close();
                            out.close();
                            out.flush();
                            return new java.io.ByteArrayInputStream(bytes);
                        };
                        return TGFileFormatUtils;
                    }());
                    base.TGFileFormatUtils = TGFileFormatUtils;
                    TGFileFormatUtils["__class"] = "org.herac.tuxguitar.io.base.TGFileFormatUtils";
                })(base = io.base || (io.base = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var TGSongReaderImpl = (function (_super) {
                        __extends(TGSongReaderImpl, _super);
                        function TGSongReaderImpl() {
                            var _this = _super.call(this) || this;
                            _this.dataInputStream = null;
                            _this.factory = null;
                            return _this;
                        }
                        TGSongReaderImpl.SUPPORTED_FORMAT_$LI$ = function () { if (TGSongReaderImpl.SUPPORTED_FORMAT == null)
                            TGSongReaderImpl.SUPPORTED_FORMAT = new org.herac.tuxguitar.io.tg.TGFileFormatVersion(org.herac.tuxguitar.io.tg.TGStream.TG_FORMAT_$LI$(), org.herac.tuxguitar.io.tg.TGStream.TG_FORMAT_VERSION_$LI$()); return TGSongReaderImpl.SUPPORTED_FORMAT; };
                        ;
                        TGSongReaderImpl.prototype.getFileFormat = function () {
                            return org.herac.tuxguitar.io.tg.TGStream.TG_FORMAT_$LI$();
                        };
                        TGSongReaderImpl.prototype.read$org_herac_tuxguitar_io_base_TGSongReaderHandle = function (handle) {
                            try {
                                this.factory = handle.getFactory();
                                this.dataInputStream = new java.io.DataInputStream(handle.getInputStream());
                                var fileFormat = new org.herac.tuxguitar.io.tg.TGFileFormatDetectorImpl(TGSongReaderImpl.SUPPORTED_FORMAT_$LI$()).getFileFormat(this.dataInputStream);
                                if (fileFormat == null || !(function (o1, o2) { if (o1.equals) {
                                    return o1.equals(o2);
                                }
                                else {
                                    return (o1.valueOf ? o1.valueOf() : o1) === (o2 !== null && o2 !== undefined && o2.valueOf ? o2.valueOf() : o2);
                                } })(fileFormat, this.getFileFormat())) {
                                    throw new org.herac.tuxguitar.io.base.TGFileFormatException("Unsupported Version");
                                }
                                var song_16 = this.read();
                                this.dataInputStream.close();
                                handle.setSong(song_16);
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.io.base.TGFileFormatException(throwable);
                            }
                            ;
                        };
                        TGSongReaderImpl.prototype.read = function (handle) {
                            if (((handle != null && handle instanceof org.herac.tuxguitar.io.base.TGSongReaderHandle) || handle === null)) {
                                return this.read$org_herac_tuxguitar_io_base_TGSongReaderHandle(handle);
                            }
                            else if (handle === undefined) {
                                return this.read$();
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongReaderImpl.prototype.read$ = function () {
                            var song = this.factory.newSong();
                            song.setName(this.readUnsignedByteString());
                            song.setArtist(this.readUnsignedByteString());
                            song.setAlbum(this.readUnsignedByteString());
                            song.setAuthor(this.readUnsignedByteString());
                            song.setDate(this.readUnsignedByteString());
                            song.setCopyright(this.readUnsignedByteString());
                            song.setWriter(this.readUnsignedByteString());
                            song.setTranscriber(this.readUnsignedByteString());
                            song.setComments(this.readIntegerString());
                            var channelCount = this.readByte();
                            for (var i = 0; i < channelCount; i++) {
                                var channel = this.factory.newChannel();
                                this.readChannel(channel);
                                song.addChannel$org_herac_tuxguitar_song_models_TGChannel(channel);
                            }
                            var headerCount = this.readShort();
                            var lastHeader = null;
                            var headerStart = org.herac.tuxguitar.song.models.TGDuration.QUARTER_TIME;
                            for (var i = 0; i < headerCount; i++) {
                                var header = this.readMeasureHeader(i + 1, headerStart, lastHeader);
                                song.addMeasureHeader$org_herac_tuxguitar_song_models_TGMeasureHeader(header);
                                headerStart += header.getLength();
                                lastHeader = header;
                            }
                            var trackCount = this.readByte();
                            for (var i = 0; i < trackCount; i++) {
                                song.addTrack$org_herac_tuxguitar_song_models_TGTrack(this.readTrack(i + 1, song));
                            }
                            return song;
                        };
                        TGSongReaderImpl.prototype.readTrack = function (number, song) {
                            var header = this.readHeader();
                            var track = this.factory.newTrack();
                            track.setNumber(number);
                            track.setName(this.readUnsignedByteString());
                            track.setSolo((header & org.herac.tuxguitar.io.tg.TGStream.TRACK_SOLO) !== 0);
                            track.setMute((header & org.herac.tuxguitar.io.tg.TGStream.TRACK_MUTE) !== 0);
                            track.setChannelId(this.readShort());
                            var measureCount = song.countMeasureHeaders();
                            var lastMeasure = null;
                            for (var i = 0; i < measureCount; i++) {
                                var measure = this.readMeasure(song.getMeasureHeader(i), lastMeasure);
                                track.addMeasure$org_herac_tuxguitar_song_models_TGMeasure(measure);
                                lastMeasure = measure;
                            }
                            var stringCount = this.readByte();
                            for (var i = 0; i < stringCount; i++) {
                                track.getStrings().add(this.readInstrumentString(i + 1));
                            }
                            track.setOffset(org.herac.tuxguitar.song.models.TGTrack.MIN_OFFSET + this.readByte());
                            this.readRGBColor(track.getColor());
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.TRACK_LYRICS) !== 0)) {
                                this.readLyrics(track.getLyrics());
                            }
                            return track;
                        };
                        TGSongReaderImpl.prototype.readMeasureHeader = function (number, start, lastMeasureHeader) {
                            var header = this.readHeader();
                            var measureHeader = this.factory.newHeader();
                            measureHeader.setNumber(number);
                            measureHeader.setStart(start);
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_TIMESIGNATURE) !== 0)) {
                                this.readTimeSignature(measureHeader.getTimeSignature());
                            }
                            else if (lastMeasureHeader != null) {
                                measureHeader.getTimeSignature().copyFrom(lastMeasureHeader.getTimeSignature());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_TEMPO) !== 0)) {
                                this.readTempo(measureHeader.getTempo());
                            }
                            else if (lastMeasureHeader != null) {
                                measureHeader.getTempo().copyFrom(lastMeasureHeader.getTempo());
                            }
                            measureHeader.setRepeatOpen((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_REPEAT_OPEN) !== 0);
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_REPEAT_CLOSE) !== 0)) {
                                measureHeader.setRepeatClose(this.readShort());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE) !== 0)) {
                                measureHeader.setRepeatAlternative(this.readByte());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_MARKER) !== 0)) {
                                measureHeader.setMarker(this.readMarker(number));
                            }
                            measureHeader.setTripletFeel((lastMeasureHeader != null) ? lastMeasureHeader.getTripletFeel() : org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_NONE);
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_TRIPLET_FEEL) !== 0)) {
                                measureHeader.setTripletFeel(this.readByte());
                            }
                            return measureHeader;
                        };
                        TGSongReaderImpl.prototype.readMeasure = function (measureHeader, lastMeasure) {
                            var header = this.readHeader();
                            var measure = this.factory.newMeasure(measureHeader);
                            var data = new tg.TGStream.TGBeatData(this.__parent, measure);
                            this.readBeats(measure, data);
                            measure.setClef((lastMeasure == null) ? org.herac.tuxguitar.song.models.TGMeasure.CLEF_TREBLE : lastMeasure.getClef());
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_CLEF) !== 0)) {
                                measure.setClef(this.readByte());
                            }
                            measure.setKeySignature((lastMeasure == null) ? 0 : lastMeasure.getKeySignature());
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_KEYSIGNATURE) !== 0)) {
                                measure.setKeySignature(this.readByte());
                            }
                            return measure;
                        };
                        TGSongReaderImpl.prototype.readChannel = function (channel) {
                            channel.setChannelId(this.readShort());
                            channel.setBank(((this.readByte() & 255) | 0));
                            channel.setProgram(((this.readByte() & 255) | 0));
                            channel.setVolume(((this.readByte() & 255) | 0));
                            channel.setBalance(((this.readByte() & 255) | 0));
                            channel.setChorus(((this.readByte() & 255) | 0));
                            channel.setReverb(((this.readByte() & 255) | 0));
                            channel.setPhaser(((this.readByte() & 255) | 0));
                            channel.setTremolo(((this.readByte() & 255) | 0));
                            channel.setName(this.readUnsignedByteString());
                            this.readChannelParameters(channel);
                        };
                        TGSongReaderImpl.prototype.readChannelParameters = function (channel) {
                            var count = this.readShort();
                            for (var i = 0; i < count; i++) {
                                this.readChannelParameter(channel);
                            }
                        };
                        TGSongReaderImpl.prototype.readChannelParameter = function (channel) {
                            var parameter = this.factory.newChannelParameter();
                            parameter.setKey(this.readUnsignedByteString());
                            parameter.setValue(this.readIntegerString());
                            channel.addParameter$org_herac_tuxguitar_song_models_TGChannelParameter(parameter);
                        };
                        TGSongReaderImpl.prototype.readBeats = function (measure, data) {
                            var header = org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_NEXT;
                            while ((((header & org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_NEXT) !== 0))) {
                                header = this.readHeader();
                                this.readBeat(header, measure, data);
                            }
                            ;
                        };
                        TGSongReaderImpl.prototype.readBeat = function (header, measure, data) {
                            var beat = this.factory.newBeat();
                            beat.setStart(data.getCurrentStart());
                            this.readVoices(header, beat, data);
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_STROKE) !== 0)) {
                                this.readStroke(beat.getStroke());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_CHORD) !== 0)) {
                                this.readChord(beat);
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_TEXT) !== 0)) {
                                this.readText(beat);
                            }
                            measure.addBeat(beat);
                        };
                        TGSongReaderImpl.prototype.readVoices = function (header, beat, data) {
                            for (var i = 0; i < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; i++) {
                                var shift = (i * 2);
                                beat.getVoice(i).setEmpty(true);
                                if (((header & (org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_VOICE << shift)) !== 0)) {
                                    if (((header & (org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_VOICE_CHANGES << shift)) !== 0)) {
                                        data.getVoice(i).setFlags(this.readHeader());
                                    }
                                    var flags = data.getVoice(i).getFlags();
                                    if (((flags & org.herac.tuxguitar.io.tg.TGStream.VOICE_NEXT_DURATION) !== 0)) {
                                        this.readDuration(data.getVoice(i).getDuration());
                                    }
                                    if (((flags & org.herac.tuxguitar.io.tg.TGStream.VOICE_HAS_NOTES) !== 0)) {
                                        this.readNotes(beat.getVoice(i), data);
                                    }
                                    if (((flags & org.herac.tuxguitar.io.tg.TGStream.VOICE_DIRECTION_UP) !== 0)) {
                                        beat.getVoice(i).setDirection(org.herac.tuxguitar.song.models.TGVoice.DIRECTION_UP);
                                    }
                                    else if (((flags & org.herac.tuxguitar.io.tg.TGStream.VOICE_DIRECTION_DOWN) !== 0)) {
                                        beat.getVoice(i).setDirection(org.herac.tuxguitar.song.models.TGVoice.DIRECTION_DOWN);
                                    }
                                    beat.getVoice(i).getDuration().copyFrom(data.getVoice(i).getDuration());
                                    data.getVoice(i).setStart(data.getVoice(i).getStart() + beat.getVoice(i).getDuration().getTime());
                                    beat.getVoice(i).setEmpty(false);
                                }
                            }
                        };
                        TGSongReaderImpl.prototype.readNotes = function (voice, data) {
                            var header = org.herac.tuxguitar.io.tg.TGStream.NOTE_HAS_NEXT;
                            while ((((header & org.herac.tuxguitar.io.tg.TGStream.NOTE_HAS_NEXT) !== 0))) {
                                header = this.readHeader();
                                this.readNote(header, voice, data);
                            }
                            ;
                        };
                        TGSongReaderImpl.prototype.readNote = function (header, voice, data) {
                            var note = this.factory.newNote();
                            note.setValue(this.readByte());
                            note.setString(this.readByte());
                            note.setTiedNote((header & org.herac.tuxguitar.io.tg.TGStream.NOTE_TIED) !== 0);
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.NOTE_VELOCITY) !== 0)) {
                                data.getVoice(voice.getIndex()).setVelocity(this.readByte());
                            }
                            note.setVelocity(data.getVoice(voice.getIndex()).getVelocity());
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.NOTE_EFFECT) !== 0)) {
                                this.readNoteEffect(note.getEffect());
                            }
                            voice.addNote(note);
                        };
                        TGSongReaderImpl.prototype.readChord = function (beat) {
                            var chord = this.factory.newChord(this.readByte());
                            chord.setName(this.readUnsignedByteString());
                            chord.setFirstFret(this.readByte());
                            for (var string = 0; string < chord.countStrings(); string++) {
                                chord.addFretValue(string, this.readByte());
                            }
                            beat.setChord(chord);
                        };
                        TGSongReaderImpl.prototype.readText = function (beat) {
                            var text = this.factory.newText();
                            text.setValue(this.readUnsignedByteString());
                            beat.setText(text);
                        };
                        TGSongReaderImpl.prototype.readInstrumentString = function (number) {
                            var string = this.factory.newString();
                            string.setNumber(number);
                            string.setValue(this.readByte());
                            return string;
                        };
                        TGSongReaderImpl.prototype.readTempo = function (tempo) {
                            tempo.setValue(this.readShort());
                        };
                        TGSongReaderImpl.prototype.readTimeSignature = function (timeSignature) {
                            timeSignature.setNumerator(this.readByte());
                            this.readDuration(timeSignature.getDenominator());
                        };
                        TGSongReaderImpl.prototype.readDuration = function (duration) {
                            var header = this.readHeader();
                            duration.setDotted((header & org.herac.tuxguitar.io.tg.TGStream.DURATION_DOTTED) !== 0);
                            duration.setDoubleDotted((header & org.herac.tuxguitar.io.tg.TGStream.DURATION_DOUBLE_DOTTED) !== 0);
                            duration.setValue(this.readByte());
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.DURATION_NO_TUPLET) !== 0)) {
                                this.readDivisionType(duration.getDivision());
                            }
                            else {
                                duration.getDivision().copyFrom(org.herac.tuxguitar.song.models.TGDivisionType.NORMAL_$LI$());
                            }
                        };
                        TGSongReaderImpl.prototype.readDivisionType = function (divisionType) {
                            divisionType.setEnters(this.readByte());
                            divisionType.setTimes(this.readByte());
                        };
                        TGSongReaderImpl.prototype.readStroke = function (stroke) {
                            stroke.setDirection(this.readByte());
                            stroke.setValue(this.readByte());
                        };
                        TGSongReaderImpl.prototype.readNoteEffect = function (effect) {
                            var header = this.readHeader$int(3);
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_BEND) !== 0)) {
                                effect.setBend(this.readBendEffect());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_TREMOLO_BAR) !== 0)) {
                                effect.setTremoloBar(this.readTremoloBarEffect());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_HARMONIC) !== 0)) {
                                effect.setHarmonic(this.readHarmonicEffect());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_GRACE) !== 0)) {
                                effect.setGrace(this.readGraceEffect());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_TRILL) !== 0)) {
                                effect.setTrill(this.readTrillEffect());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_TREMOLO_PICKING) !== 0)) {
                                effect.setTremoloPicking(this.readTremoloPickingEffect());
                            }
                            effect.setVibrato(((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_VIBRATO) !== 0));
                            effect.setDeadNote(((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_DEAD) !== 0));
                            effect.setSlide(((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_SLIDE) !== 0));
                            effect.setHammer(((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_HAMMER) !== 0));
                            effect.setGhostNote(((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_GHOST) !== 0));
                            effect.setAccentuatedNote(((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_ACCENTUATED) !== 0));
                            effect.setHeavyAccentuatedNote(((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_HEAVY_ACCENTUATED) !== 0));
                            effect.setPalmMute(((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_PALM_MUTE) !== 0));
                            effect.setStaccato(((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_STACCATO) !== 0));
                            effect.setTapping(((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_TAPPING) !== 0));
                            effect.setSlapping(((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_SLAPPING) !== 0));
                            effect.setPopping(((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_POPPING) !== 0));
                            effect.setFadeIn(((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_FADE_IN) !== 0));
                            effect.setLetRing(((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_LET_RING) !== 0));
                        };
                        TGSongReaderImpl.prototype.readBendEffect = function () {
                            var bend = this.factory.newEffectBend();
                            var count = this.readByte();
                            for (var i = 0; i < count; i++) {
                                var position = this.readByte();
                                var value = this.readByte();
                                bend.addPoint(position, value);
                            }
                            return bend;
                        };
                        TGSongReaderImpl.prototype.readTremoloBarEffect = function () {
                            var tremoloBar = this.factory.newEffectTremoloBar();
                            var count = this.readByte();
                            for (var i = 0; i < count; i++) {
                                var position = this.readByte();
                                var value = (this.readByte() - org.herac.tuxguitar.song.models.effects.TGEffectTremoloBar.MAX_VALUE_LENGTH);
                                tremoloBar.addPoint(position, value);
                            }
                            return tremoloBar;
                        };
                        TGSongReaderImpl.prototype.readHarmonicEffect = function () {
                            var effect = this.factory.newEffectHarmonic();
                            effect.setType(this.readByte());
                            if (effect.getType() !== org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.TYPE_NATURAL) {
                                effect.setData(this.readByte());
                            }
                            return effect;
                        };
                        TGSongReaderImpl.prototype.readGraceEffect = function () {
                            var header = this.readHeader();
                            var effect = this.factory.newEffectGrace();
                            effect.setDead((header & org.herac.tuxguitar.io.tg.TGStream.GRACE_FLAG_DEAD) !== 0);
                            effect.setOnBeat((header & org.herac.tuxguitar.io.tg.TGStream.GRACE_FLAG_ON_BEAT) !== 0);
                            effect.setFret(this.readByte());
                            effect.setDuration(this.readByte());
                            effect.setDynamic(this.readByte());
                            effect.setTransition(this.readByte());
                            return effect;
                        };
                        TGSongReaderImpl.prototype.readTremoloPickingEffect = function () {
                            var effect = this.factory.newEffectTremoloPicking();
                            effect.getDuration().setValue(this.readByte());
                            return effect;
                        };
                        TGSongReaderImpl.prototype.readTrillEffect = function () {
                            var effect = this.factory.newEffectTrill();
                            effect.setFret(this.readByte());
                            effect.getDuration().setValue(this.readByte());
                            return effect;
                        };
                        TGSongReaderImpl.prototype.readMarker = function (measure) {
                            var marker = this.factory.newMarker();
                            marker.setMeasure(measure);
                            marker.setTitle(this.readUnsignedByteString());
                            this.readRGBColor(marker.getColor());
                            return marker;
                        };
                        TGSongReaderImpl.prototype.readRGBColor = function (color) {
                            color.setR((this.readByte() & 255));
                            color.setG((this.readByte() & 255));
                            color.setB((this.readByte() & 255));
                        };
                        TGSongReaderImpl.prototype.readLyrics = function (lyrics) {
                            lyrics.setFrom(this.readShort());
                            lyrics.setLyrics(this.readIntegerString());
                        };
                        TGSongReaderImpl.prototype.readByte = function () {
                            return (this.dataInputStream.read() | 0);
                        };
                        TGSongReaderImpl.prototype.readHeader$ = function () {
                            return this.dataInputStream.read();
                        };
                        TGSongReaderImpl.prototype.readHeader$int = function (bCount) {
                            var header = 0;
                            for (var i = bCount; i > 0; i--) {
                                header += (this.readHeader() << ((8 * i) - 8));
                            }
                            return header;
                        };
                        TGSongReaderImpl.prototype.readHeader = function (bCount) {
                            if (((typeof bCount === 'number') || bCount === null)) {
                                return this.readHeader$int(bCount);
                            }
                            else if (bCount === undefined) {
                                return this.readHeader$();
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongReaderImpl.prototype.readShort = function () {
                            return this.dataInputStream.readShort();
                        };
                        TGSongReaderImpl.prototype.readUnsignedByteString = function () {
                            return this.readString((this.dataInputStream.read() & 255));
                        };
                        TGSongReaderImpl.prototype.readIntegerString = function () {
                            return this.readString(this.dataInputStream.readInt());
                        };
                        TGSongReaderImpl.prototype.readString = function (length) {
                            var sb = new java.lang.StringBuilder();
                            for (var i = 0; i < length; i++) {
                                sb.append(this.dataInputStream.readChar());
                            }
                            return sb.toString();
                        };
                        return TGSongReaderImpl;
                    }(org.herac.tuxguitar.io.tg.TGStream));
                    tg.TGSongReaderImpl = TGSongReaderImpl;
                    TGSongReaderImpl["__class"] = "org.herac.tuxguitar.io.tg.TGSongReaderImpl";
                    TGSongReaderImpl["__interfaces"] = ["org.herac.tuxguitar.io.base.TGSongReader", "org.herac.tuxguitar.io.base.TGSongPersistenceHandler"];
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var io;
            (function (io) {
                var tg;
                (function (tg) {
                    var TGSongWriterImpl = (function (_super) {
                        __extends(TGSongWriterImpl, _super);
                        function TGSongWriterImpl() {
                            var _this = _super.call(this) || this;
                            _this.dataOutputStream = null;
                            return _this;
                        }
                        TGSongWriterImpl.prototype.getFileFormat = function () {
                            return org.herac.tuxguitar.io.tg.TGStream.TG_FORMAT_$LI$();
                        };
                        TGSongWriterImpl.prototype.write$org_herac_tuxguitar_io_base_TGSongWriterHandle = function (handle) {
                            try {
                                this.dataOutputStream = new java.io.DataOutputStream(handle.getOutputStream());
                                this.writeVersion();
                                this.write$org_herac_tuxguitar_song_models_TGSong(handle.getSong());
                                this.dataOutputStream.flush();
                                this.dataOutputStream.close();
                            }
                            catch (throwable) {
                                throw new org.herac.tuxguitar.io.base.TGFileFormatException(throwable);
                            }
                            ;
                        };
                        TGSongWriterImpl.prototype.write = function (handle) {
                            if (((handle != null && handle instanceof org.herac.tuxguitar.io.base.TGSongWriterHandle) || handle === null)) {
                                return this.write$org_herac_tuxguitar_io_base_TGSongWriterHandle(handle);
                            }
                            else if (((handle != null && handle instanceof org.herac.tuxguitar.song.models.TGSong) || handle === null)) {
                                return this.write$org_herac_tuxguitar_song_models_TGSong(handle);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongWriterImpl.prototype.writeVersion = function () {
                            this.writeUnsignedByteString(org.herac.tuxguitar.io.tg.TGStream.TG_FORMAT_VERSION_$LI$());
                        };
                        TGSongWriterImpl.prototype.write$org_herac_tuxguitar_song_models_TGSong = function (song) {
                            this.writeUnsignedByteString(song.getName());
                            this.writeUnsignedByteString(song.getArtist());
                            this.writeUnsignedByteString(song.getAlbum());
                            this.writeUnsignedByteString(song.getAuthor());
                            this.writeUnsignedByteString(song.getDate());
                            this.writeUnsignedByteString(song.getCopyright());
                            this.writeUnsignedByteString(song.getWriter());
                            this.writeUnsignedByteString(song.getTranscriber());
                            this.writeIntegerString(song.getComments());
                            this.writeByte(song.countChannels());
                            for (var i = 0; i < song.countChannels(); i++) {
                                this.writeChannel(song.getChannel(i));
                            }
                            this.writeShort((song.countMeasureHeaders() | 0));
                            var lastHeader = null;
                            var headers = song.getMeasureHeaders();
                            while ((headers.hasNext())) {
                                var header = headers.next();
                                this.writeMeasureHeader(header, lastHeader);
                                lastHeader = header;
                            }
                            ;
                            this.writeByte(song.countTracks());
                            for (var i = 0; i < song.countTracks(); i++) {
                                this.writeTrack(song.getTrack(i));
                            }
                        };
                        TGSongWriterImpl.prototype.writeTrack = function (track) {
                            var header = 0;
                            if (track.isSolo()) {
                                header |= org.herac.tuxguitar.io.tg.TGStream.TRACK_SOLO;
                            }
                            if (track.isMute()) {
                                header |= org.herac.tuxguitar.io.tg.TGStream.TRACK_MUTE;
                            }
                            if (!track.getLyrics().isEmpty()) {
                                header |= org.herac.tuxguitar.io.tg.TGStream.TRACK_LYRICS;
                            }
                            this.writeHeader$int(header);
                            this.writeUnsignedByteString(track.getName());
                            this.writeShort((track.getChannelId() | 0));
                            var lastMeasure = null;
                            var measures = track.getMeasures();
                            while ((measures.hasNext())) {
                                var measure = measures.next();
                                this.writeMeasure(measure, lastMeasure);
                                lastMeasure = measure;
                            }
                            ;
                            this.writeByte(track.getStrings().size());
                            var stringIt = track.getStrings().iterator();
                            while ((stringIt.hasNext())) {
                                var string = stringIt.next();
                                this.writeInstrumentString(string);
                            }
                            ;
                            this.writeByte(track.getOffset() - org.herac.tuxguitar.song.models.TGTrack.MIN_OFFSET);
                            this.writeRGBColor(track.getColor());
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.TRACK_LYRICS) !== 0)) {
                                this.writeLyrics(track.getLyrics());
                            }
                        };
                        TGSongWriterImpl.prototype.writeMeasureHeader = function (measureheader, lastMeasureHeader) {
                            var header = 0;
                            if (lastMeasureHeader == null) {
                                header |= org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_TIMESIGNATURE;
                                header |= org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_TEMPO;
                                if (measureheader.getTripletFeel() !== org.herac.tuxguitar.song.models.TGMeasureHeader.TRIPLET_FEEL_NONE) {
                                    header |= org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_TRIPLET_FEEL;
                                }
                            }
                            else {
                                var numerator = measureheader.getTimeSignature().getNumerator();
                                var value = measureheader.getTimeSignature().getDenominator().getValue();
                                var prevNumerator = lastMeasureHeader.getTimeSignature().getNumerator();
                                var prevValue = lastMeasureHeader.getTimeSignature().getDenominator().getValue();
                                if (numerator !== prevNumerator || value !== prevValue) {
                                    header |= org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_TIMESIGNATURE;
                                }
                                if (measureheader.getTempo().getValue() !== lastMeasureHeader.getTempo().getValue()) {
                                    header |= org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_TEMPO;
                                }
                                if (measureheader.getTripletFeel() !== lastMeasureHeader.getTripletFeel()) {
                                    header |= org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_TRIPLET_FEEL;
                                }
                            }
                            header = (measureheader.isRepeatOpen()) ? header |= org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_REPEAT_OPEN : header;
                            header = (measureheader.getRepeatClose() > 0) ? header |= org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_REPEAT_CLOSE : header;
                            header = (measureheader.getRepeatAlternative() > 0) ? header |= org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE : header;
                            header = (measureheader.hasMarker()) ? header |= org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_MARKER : header;
                            this.writeHeader$int(header);
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_TIMESIGNATURE) !== 0)) {
                                this.writeTimeSignature(measureheader.getTimeSignature());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_TEMPO) !== 0)) {
                                this.writeTempo(measureheader.getTempo());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_REPEAT_CLOSE) !== 0)) {
                                this.writeShort((measureheader.getRepeatClose() | 0));
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_REPEAT_ALTERNATIVE) !== 0)) {
                                this.writeByte(measureheader.getRepeatAlternative());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_MARKER) !== 0)) {
                                this.writeMarker(measureheader.getMarker());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_HEADER_TRIPLET_FEEL) !== 0)) {
                                this.writeByte(measureheader.getTripletFeel());
                            }
                        };
                        TGSongWriterImpl.prototype.writeMeasure = function (measure, lastMeasure) {
                            var header = 0;
                            if (lastMeasure == null) {
                                header |= org.herac.tuxguitar.io.tg.TGStream.MEASURE_CLEF;
                                header |= org.herac.tuxguitar.io.tg.TGStream.MEASURE_KEYSIGNATURE;
                            }
                            else {
                                if (measure.getClef() !== lastMeasure.getClef()) {
                                    header |= org.herac.tuxguitar.io.tg.TGStream.MEASURE_CLEF;
                                }
                                if (measure.getKeySignature() !== lastMeasure.getKeySignature()) {
                                    header |= org.herac.tuxguitar.io.tg.TGStream.MEASURE_KEYSIGNATURE;
                                }
                            }
                            this.writeHeader$int(header);
                            var data = new tg.TGStream.TGBeatData(this.__parent, measure);
                            this.writeBeats(measure, data);
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_CLEF) !== 0)) {
                                this.writeByte(measure.getClef());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.MEASURE_KEYSIGNATURE) !== 0)) {
                                this.writeByte(measure.getKeySignature());
                            }
                        };
                        TGSongWriterImpl.prototype.writeChannel = function (channel) {
                            this.writeShort((channel.getChannelId() | 0));
                            this.writeByte(channel.getBank());
                            this.writeByte(channel.getProgram());
                            this.writeByte(channel.getVolume());
                            this.writeByte(channel.getBalance());
                            this.writeByte(channel.getChorus());
                            this.writeByte(channel.getReverb());
                            this.writeByte(channel.getPhaser());
                            this.writeByte(channel.getTremolo());
                            this.writeUnsignedByteString(channel.getName());
                            this.writeChannelParameters(channel);
                        };
                        TGSongWriterImpl.prototype.writeChannelParameters = function (channel) {
                            this.writeShort((channel.countParameters() | 0));
                            var iterator = channel.getParameters();
                            while ((iterator.hasNext())) {
                                this.writeChannelParameter(iterator.next());
                            }
                            ;
                        };
                        TGSongWriterImpl.prototype.writeChannelParameter = function (parameter) {
                            this.writeUnsignedByteString(parameter.getKey());
                            this.writeIntegerString(parameter.getValue());
                        };
                        TGSongWriterImpl.prototype.writeBeats = function (measure, data) {
                            var count = measure.countBeats();
                            for (var i = 0; i < count; i++) {
                                var beat = measure.getBeat(i);
                                this.writeBeat(beat, data, (i + 1 < count));
                            }
                        };
                        TGSongWriterImpl.prototype.writeBeat = function (beat, data, hasNext) {
                            var header = hasNext ? org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_NEXT : 0;
                            for (var i = 0; i < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; i++) {
                                var shift = (i * 2);
                                if (!beat.getVoice(i).isEmpty()) {
                                    header |= (org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_VOICE << shift);
                                    var flags = (beat.getVoice(i).isRestVoice() ? 0 : org.herac.tuxguitar.io.tg.TGStream.VOICE_HAS_NOTES);
                                    if (!beat.getVoice(i).getDuration().isEqual(data.getVoice(i).getDuration())) {
                                        flags |= org.herac.tuxguitar.io.tg.TGStream.VOICE_NEXT_DURATION;
                                        data.getVoice(i).setDuration(beat.getVoice(i).getDuration());
                                    }
                                    if (beat.getVoice(i).getDirection() !== org.herac.tuxguitar.song.models.TGVoice.DIRECTION_NONE) {
                                        if (beat.getVoice(i).getDirection() === org.herac.tuxguitar.song.models.TGVoice.DIRECTION_UP) {
                                            flags |= org.herac.tuxguitar.io.tg.TGStream.VOICE_DIRECTION_UP;
                                        }
                                        else if (beat.getVoice(i).getDirection() === org.herac.tuxguitar.song.models.TGVoice.DIRECTION_DOWN) {
                                            flags |= org.herac.tuxguitar.io.tg.TGStream.VOICE_DIRECTION_DOWN;
                                        }
                                    }
                                    if (data.getVoice(i).getFlags() !== flags) {
                                        header |= (org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_VOICE_CHANGES << shift);
                                        data.getVoice(i).setFlags(flags);
                                    }
                                }
                            }
                            if (beat.getStroke().getDirection() !== org.herac.tuxguitar.song.models.TGStroke.STROKE_NONE) {
                                header |= org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_STROKE;
                            }
                            if (beat.getChord() != null) {
                                header |= org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_CHORD;
                            }
                            if (beat.getText() != null) {
                                header |= org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_TEXT;
                            }
                            this.writeHeader$int(header);
                            this.writeVoices(header, beat, data);
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_STROKE) !== 0)) {
                                this.writeStroke(beat.getStroke());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_CHORD) !== 0)) {
                                this.writeChord(beat.getChord());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_TEXT) !== 0)) {
                                this.writeText(beat.getText());
                            }
                        };
                        TGSongWriterImpl.prototype.writeVoices = function (header, beat, data) {
                            for (var i = 0; i < org.herac.tuxguitar.song.models.TGBeat.MAX_VOICES; i++) {
                                var shift = (i * 2);
                                if (((header & (org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_VOICE << shift)) !== 0)) {
                                    if (((header & (org.herac.tuxguitar.io.tg.TGStream.BEAT_HAS_VOICE_CHANGES << shift)) !== 0)) {
                                        this.writeHeader$int(data.getVoice(i).getFlags());
                                    }
                                    if (((data.getVoice(i).getFlags() & org.herac.tuxguitar.io.tg.TGStream.VOICE_NEXT_DURATION) !== 0)) {
                                        this.writeDuration(beat.getVoice(i).getDuration());
                                    }
                                    if (((data.getVoice(i).getFlags() & org.herac.tuxguitar.io.tg.TGStream.VOICE_HAS_NOTES) !== 0)) {
                                        this.writeNotes(beat.getVoice(i), data);
                                    }
                                }
                            }
                        };
                        TGSongWriterImpl.prototype.writeNotes = function (voice, data) {
                            for (var i = 0; i < voice.countNotes(); i++) {
                                var note = voice.getNote(i);
                                var header = (i + 1 < voice.countNotes() ? org.herac.tuxguitar.io.tg.TGStream.NOTE_HAS_NEXT : 0);
                                header = (note.isTiedNote()) ? header |= org.herac.tuxguitar.io.tg.TGStream.NOTE_TIED : header;
                                if (note.getVelocity() !== data.getVoice(voice.getIndex()).getVelocity()) {
                                    data.getVoice(voice.getIndex()).setVelocity(note.getVelocity());
                                    header |= org.herac.tuxguitar.io.tg.TGStream.NOTE_VELOCITY;
                                }
                                header = (note.getEffect().hasAnyEffect()) ? header |= org.herac.tuxguitar.io.tg.TGStream.NOTE_EFFECT : header;
                                this.writeHeader$int(header);
                                this.writeNote(header, note);
                            }
                        };
                        TGSongWriterImpl.prototype.writeNote = function (header, note) {
                            this.writeByte(note.getValue());
                            this.writeByte(note.getString());
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.NOTE_VELOCITY) !== 0)) {
                                this.writeByte(note.getVelocity());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.NOTE_EFFECT) !== 0)) {
                                this.writeNoteEffect(note.getEffect());
                            }
                        };
                        TGSongWriterImpl.prototype.writeStroke = function (stroke) {
                            this.writeByte(stroke.getDirection());
                            this.writeByte(stroke.getValue());
                        };
                        TGSongWriterImpl.prototype.writeChord = function (chord) {
                            this.writeByte(chord.countStrings());
                            this.writeUnsignedByteString(chord.getName());
                            this.writeByte(chord.getFirstFret());
                            for (var string = 0; string < chord.countStrings(); string++) {
                                this.writeByte(chord.getFretValue(string));
                            }
                        };
                        TGSongWriterImpl.prototype.writeText = function (text) {
                            this.writeUnsignedByteString(text.getValue());
                        };
                        TGSongWriterImpl.prototype.writeInstrumentString = function (string) {
                            this.writeByte(string.getValue());
                        };
                        TGSongWriterImpl.prototype.writeTempo = function (tempo) {
                            this.writeShort((tempo.getValue() | 0));
                        };
                        TGSongWriterImpl.prototype.writeTimeSignature = function (timeSignature) {
                            this.writeByte(timeSignature.getNumerator());
                            this.writeDuration(timeSignature.getDenominator());
                        };
                        TGSongWriterImpl.prototype.writeDuration = function (duration) {
                            var header = 0;
                            header = (duration.isDotted()) ? header |= org.herac.tuxguitar.io.tg.TGStream.DURATION_DOTTED : header;
                            header = (duration.isDoubleDotted()) ? header |= org.herac.tuxguitar.io.tg.TGStream.DURATION_DOUBLE_DOTTED : header;
                            header = (!duration.getDivision().isEqual(org.herac.tuxguitar.song.models.TGDivisionType.NORMAL_$LI$())) ? header |= org.herac.tuxguitar.io.tg.TGStream.DURATION_NO_TUPLET : header;
                            this.writeHeader$int(header);
                            this.writeByte(duration.getValue());
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.DURATION_NO_TUPLET) !== 0)) {
                                this.writeDivisionType(duration.getDivision());
                            }
                        };
                        TGSongWriterImpl.prototype.writeDivisionType = function (divisionType) {
                            this.writeByte(divisionType.getEnters());
                            this.writeByte(divisionType.getTimes());
                        };
                        TGSongWriterImpl.prototype.writeNoteEffect = function (effect) {
                            var header = 0;
                            header = (effect.isBend()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_BEND : header;
                            header = (effect.isTremoloBar()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_TREMOLO_BAR : header;
                            header = (effect.isHarmonic()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_HARMONIC : header;
                            header = (effect.isGrace()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_GRACE : header;
                            header = (effect.isTrill()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_TRILL : header;
                            header = (effect.isTremoloPicking()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_TREMOLO_PICKING : header;
                            header = (effect.isVibrato()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_VIBRATO : header;
                            header = (effect.isDeadNote()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_DEAD : header;
                            header = (effect.isSlide()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_SLIDE : header;
                            header = (effect.isHammer()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_HAMMER : header;
                            header = (effect.isGhostNote()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_GHOST : header;
                            header = (effect.isAccentuatedNote()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_ACCENTUATED : header;
                            header = (effect.isHeavyAccentuatedNote()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_HEAVY_ACCENTUATED : header;
                            header = (effect.isPalmMute()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_PALM_MUTE : header;
                            header = (effect.isStaccato()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_STACCATO : header;
                            header = (effect.isTapping()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_TAPPING : header;
                            header = (effect.isSlapping()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_SLAPPING : header;
                            header = (effect.isPopping()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_POPPING : header;
                            header = (effect.isFadeIn()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_FADE_IN : header;
                            header = (effect.isLetRing()) ? header |= org.herac.tuxguitar.io.tg.TGStream.EFFECT_LET_RING : header;
                            this.writeHeader$int$int(header, 3);
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_BEND) !== 0)) {
                                this.writeBendEffect(effect.getBend());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_TREMOLO_BAR) !== 0)) {
                                this.writeTremoloBarEffect(effect.getTremoloBar());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_HARMONIC) !== 0)) {
                                this.writeHarmonicEffect(effect.getHarmonic());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_GRACE) !== 0)) {
                                this.writeGraceEffect(effect.getGrace());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_TRILL) !== 0)) {
                                this.writeTrillEffect(effect.getTrill());
                            }
                            if (((header & org.herac.tuxguitar.io.tg.TGStream.EFFECT_TREMOLO_PICKING) !== 0)) {
                                this.writeTremoloPickingEffect(effect.getTremoloPicking());
                            }
                        };
                        TGSongWriterImpl.prototype.writeBendEffect = function (effect) {
                            this.writeByte(effect.getPoints().size());
                            var it = effect.getPoints().iterator();
                            while ((it.hasNext())) {
                                var point = it.next();
                                this.writeByte(point.getPosition());
                                this.writeByte(point.getValue());
                            }
                            ;
                        };
                        TGSongWriterImpl.prototype.writeTremoloBarEffect = function (effect) {
                            this.writeByte(effect.getPoints().size());
                            var it = effect.getPoints().iterator();
                            while ((it.hasNext())) {
                                var point = it.next();
                                this.writeByte(point.getPosition());
                                this.writeByte((point.getValue() + org.herac.tuxguitar.song.models.effects.TGEffectTremoloBar.MAX_VALUE_LENGTH));
                            }
                            ;
                        };
                        TGSongWriterImpl.prototype.writeHarmonicEffect = function (effect) {
                            this.writeByte(effect.getType());
                            if (effect.getType() !== org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.TYPE_NATURAL) {
                                this.writeByte(effect.getData());
                            }
                        };
                        TGSongWriterImpl.prototype.writeGraceEffect = function (effect) {
                            var header = 0;
                            header = (effect.isDead()) ? header |= org.herac.tuxguitar.io.tg.TGStream.GRACE_FLAG_DEAD : header;
                            header = (effect.isOnBeat()) ? header |= org.herac.tuxguitar.io.tg.TGStream.GRACE_FLAG_ON_BEAT : header;
                            this.writeHeader$int(header);
                            this.writeByte(effect.getFret());
                            this.writeByte(effect.getDuration());
                            this.writeByte(effect.getDynamic());
                            this.writeByte(effect.getTransition());
                        };
                        TGSongWriterImpl.prototype.writeTremoloPickingEffect = function (effect) {
                            this.writeByte(effect.getDuration().getValue());
                        };
                        TGSongWriterImpl.prototype.writeTrillEffect = function (effect) {
                            this.writeByte(effect.getFret());
                            this.writeByte(effect.getDuration().getValue());
                        };
                        TGSongWriterImpl.prototype.writeMarker = function (marker) {
                            this.writeUnsignedByteString(marker.getTitle());
                            this.writeRGBColor(marker.getColor());
                        };
                        TGSongWriterImpl.prototype.writeRGBColor = function (color) {
                            this.writeByte(color.getR());
                            this.writeByte(color.getG());
                            this.writeByte(color.getB());
                        };
                        TGSongWriterImpl.prototype.writeLyrics = function (lyrics) {
                            this.writeShort((lyrics.getFrom() | 0));
                            this.writeIntegerString(lyrics.getLyrics());
                        };
                        TGSongWriterImpl.prototype.writeByte = function (v) {
                            this.dataOutputStream.write(v);
                        };
                        TGSongWriterImpl.prototype.writeUnsignedByteString = function (v) {
                            var byteString = (v == null ? new String() : ((v.length > 255) ? v.substring(0, 255) : v));
                            this.dataOutputStream.write(byteString.length);
                            this.dataOutputStream.writeChars(byteString);
                        };
                        TGSongWriterImpl.prototype.writeIntegerString = function (v) {
                            this.dataOutputStream.writeInt(v.length);
                            this.dataOutputStream.writeChars(v);
                        };
                        TGSongWriterImpl.prototype.writeHeader$int = function (v) {
                            this.dataOutputStream.write(v);
                        };
                        TGSongWriterImpl.prototype.writeHeader$int$int = function (v, bCount) {
                            for (var i = bCount; i > 0; i--) {
                                this.writeHeader$int((v >>> ((8 * i) - 8)) & 255);
                            }
                        };
                        TGSongWriterImpl.prototype.writeHeader = function (v, bCount) {
                            if (((typeof v === 'number') || v === null) && ((typeof bCount === 'number') || bCount === null)) {
                                return this.writeHeader$int$int(v, bCount);
                            }
                            else if (((typeof v === 'number') || v === null) && bCount === undefined) {
                                return this.writeHeader$int(v);
                            }
                            else
                                throw new Error('invalid overload');
                        };
                        TGSongWriterImpl.prototype.writeShort = function (v) {
                            this.dataOutputStream.writeShort(v);
                        };
                        return TGSongWriterImpl;
                    }(org.herac.tuxguitar.io.tg.TGStream));
                    tg.TGSongWriterImpl = TGSongWriterImpl;
                    TGSongWriterImpl["__class"] = "org.herac.tuxguitar.io.tg.TGSongWriterImpl";
                    TGSongWriterImpl["__interfaces"] = ["org.herac.tuxguitar.io.base.TGSongWriter", "org.herac.tuxguitar.io.base.TGSongPersistenceHandler"];
                })(tg = io.tg || (io.tg = {}));
            })(io = tuxguitar.io || (tuxguitar.io = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var graphics;
            (function (graphics) {
                var control;
                (function (control) {
                    var TGFactoryImpl = (function (_super) {
                        __extends(TGFactoryImpl, _super);
                        function TGFactoryImpl() {
                            return _super.call(this) || this;
                        }
                        TGFactoryImpl.prototype.newHeader = function () {
                            return new org.herac.tuxguitar.graphics.control.TGMeasureHeaderImpl(this);
                        };
                        TGFactoryImpl.prototype.newTrack = function () {
                            return new org.herac.tuxguitar.graphics.control.TGTrackImpl(this);
                        };
                        TGFactoryImpl.prototype.newMeasure = function (header) {
                            return new org.herac.tuxguitar.graphics.control.TGMeasureImpl(header);
                        };
                        TGFactoryImpl.prototype.newNote = function () {
                            return new org.herac.tuxguitar.graphics.control.TGNoteImpl(this);
                        };
                        TGFactoryImpl.prototype.newBeat = function () {
                            return new org.herac.tuxguitar.graphics.control.TGBeatImpl(this);
                        };
                        TGFactoryImpl.prototype.newVoice = function (index) {
                            return new org.herac.tuxguitar.graphics.control.TGVoiceImpl(this, index);
                        };
                        TGFactoryImpl.prototype.newLyric = function () {
                            return new org.herac.tuxguitar.graphics.control.TGLyricImpl();
                        };
                        TGFactoryImpl.prototype.newChord = function (length) {
                            return new org.herac.tuxguitar.graphics.control.TGChordImpl(length);
                        };
                        TGFactoryImpl.prototype.newText = function () {
                            return new org.herac.tuxguitar.graphics.control.TGTextImpl();
                        };
                        return TGFactoryImpl;
                    }(org.herac.tuxguitar.song.factory.TGFactory));
                    control.TGFactoryImpl = TGFactoryImpl;
                    TGFactoryImpl["__class"] = "org.herac.tuxguitar.graphics.control.TGFactoryImpl";
                })(control = graphics.control || (graphics.control = {}));
            })(graphics = tuxguitar.graphics || (tuxguitar.graphics = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tg;
        (function (tg) {
            var webapp;
            (function (webapp) {
                var event;
                (function (event) {
                    var TGUpdateMeasureEvent = (function (_super) {
                        __extends(TGUpdateMeasureEvent, _super);
                        function TGUpdateMeasureEvent(number, context) {
                            var _this = _super.call(this, org.herac.tg.webapp.event.TGUpdateEvent.MEASURE_UPDATED, context) || this;
                            _this.setAttribute(TGUpdateMeasureEvent.PROPERTY_MEASURE_NUMBER, javaemul.internal.IntegerHelper.valueOf(number));
                            return _this;
                        }
                        return TGUpdateMeasureEvent;
                    }(org.herac.tg.webapp.event.TGUpdateEvent));
                    TGUpdateMeasureEvent.PROPERTY_MEASURE_NUMBER = "measureNumber";
                    event.TGUpdateMeasureEvent = TGUpdateMeasureEvent;
                    TGUpdateMeasureEvent["__class"] = "org.herac.tg.webapp.event.TGUpdateMeasureEvent";
                })(event = webapp.event || (webapp.event = {}));
            })(webapp = tg.webapp || (tg.webapp = {}));
        })(tg = herac.tg || (herac.tg = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var action;
            (function (action) {
                var TGActionErrorEvent = (function (_super) {
                    __extends(TGActionErrorEvent, _super);
                    function TGActionErrorEvent(eventType, actionId, actionContext, actionError) {
                        var _this = this;
                        if (((typeof eventType === 'string') || eventType === null) && ((typeof actionId === 'string') || actionId === null) && ((actionContext != null && actionContext instanceof org.herac.tuxguitar.action.TGActionContext) || actionContext === null) && ((actionError != null && actionError instanceof Error) || actionError === null)) {
                            var __args = Array.prototype.slice.call(arguments);
                            _this = _super.call(this, eventType, actionId, actionContext) || this;
                            (function () {
                                _this.setAttribute(TGActionErrorEvent.PROPERTY_ACTION_ERROR, actionError);
                            })();
                        }
                        else if (((typeof eventType === 'string') || eventType === null) && ((actionId != null && actionId instanceof org.herac.tuxguitar.action.TGActionContext) || actionId === null) && ((actionContext != null && actionContext instanceof Error) || actionContext === null) && actionError === undefined) {
                            var __args = Array.prototype.slice.call(arguments);
                            var actionId_1 = __args[0];
                            var actionContext_1 = __args[1];
                            var actionError_1 = __args[2];
                            {
                                var __args_17 = Array.prototype.slice.call(arguments);
                                var eventType_1 = TGActionErrorEvent.EVENT_TYPE;
                                _this = _super.call(this, eventType_1, actionId_1, actionContext_1) || this;
                                (function () {
                                    _this.setAttribute(TGActionErrorEvent.PROPERTY_ACTION_ERROR, actionError_1);
                                })();
                            }
                        }
                        else
                            throw new Error('invalid overload');
                        return _this;
                    }
                    return TGActionErrorEvent;
                }(org.herac.tuxguitar.action.TGActionEvent));
                TGActionErrorEvent.EVENT_TYPE = "action-error";
                TGActionErrorEvent.PROPERTY_ACTION_ERROR = "actionError";
                action.TGActionErrorEvent = TGActionErrorEvent;
                TGActionErrorEvent["__class"] = "org.herac.tuxguitar.action.TGActionErrorEvent";
            })(action = tuxguitar.action || (tuxguitar.action = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var action;
            (function (action) {
                var TGActionPostExecutionEvent = (function (_super) {
                    __extends(TGActionPostExecutionEvent, _super);
                    function TGActionPostExecutionEvent(actionId, actionContext) {
                        return _super.call(this, TGActionPostExecutionEvent.EVENT_TYPE, actionId, actionContext) || this;
                    }
                    return TGActionPostExecutionEvent;
                }(org.herac.tuxguitar.action.TGActionEvent));
                TGActionPostExecutionEvent.EVENT_TYPE = "action-post-execution";
                action.TGActionPostExecutionEvent = TGActionPostExecutionEvent;
                TGActionPostExecutionEvent["__class"] = "org.herac.tuxguitar.action.TGActionPostExecutionEvent";
            })(action = tuxguitar.action || (tuxguitar.action = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
(function (org) {
    var herac;
    (function (herac) {
        var tuxguitar;
        (function (tuxguitar) {
            var action;
            (function (action) {
                var TGActionPreExecutionEvent = (function (_super) {
                    __extends(TGActionPreExecutionEvent, _super);
                    function TGActionPreExecutionEvent(actionId, actionContext) {
                        return _super.call(this, TGActionPreExecutionEvent.EVENT_TYPE, actionId, actionContext) || this;
                    }
                    return TGActionPreExecutionEvent;
                }(org.herac.tuxguitar.action.TGActionEvent));
                TGActionPreExecutionEvent.EVENT_TYPE = "action-pre-execution";
                action.TGActionPreExecutionEvent = TGActionPreExecutionEvent;
                TGActionPreExecutionEvent["__class"] = "org.herac.tuxguitar.action.TGActionPreExecutionEvent";
            })(action = tuxguitar.action || (tuxguitar.action = {}));
        })(tuxguitar = herac.tuxguitar || (herac.tuxguitar = {}));
    })(herac = org.herac || (org.herac = {}));
})(org || (org = {}));
org.herac.tuxguitar.io.tg.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$();
org.herac.tuxguitar.io.base.TGFileFormatUtils.DEFAULT_EXTENSION_$LI$();
org.herac.tuxguitar.io.tg.v12.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$();
org.herac.tuxguitar.io.tg.v11.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$();
org.herac.tuxguitar.io.tg.v10.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$();
org.herac.tuxguitar.io.tg.dev.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_MARKER_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_CHORD_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_LYRIC_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_TIME_SIGNATURE_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_TEMPO_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_CHANNEL_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_DURATION_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_STRING_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_NOTE_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_VOICE_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_BEAT_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_MEASURE_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_HEADER_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_TRACK_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_SONG_$LI$();
org.herac.tuxguitar.document.TGDocumentContextAttributes.ATTRIBUTE_SONG_MANAGER_$LI$();
org.herac.tuxguitar.io.tg.v09.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$();
org.herac.tuxguitar.io.tg.v08.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$();
org.herac.tuxguitar.io.tg.TGStream.TG_FORMAT_$LI$();
org.herac.tuxguitar.io.tg.TGStream.TG_FORMAT_CODE_$LI$();
org.herac.tuxguitar.io.tg.TGStream.TG_FORMAT_VERSION_$LI$();
org.herac.tuxguitar.io.tg.TGStream.TG_FORMAT_NAME_$LI$();
org.herac.tuxguitar.io.tg.v12.TGStream.TG_FORMAT_$LI$();
org.herac.tuxguitar.io.tg.v12.TGStream.TG_FORMAT_EXTENSION_$LI$();
org.herac.tuxguitar.io.tg.v12.TGStream.TG_FORMAT_VERSION_$LI$();
org.herac.tuxguitar.io.tg.v12.TGStream.TG_FORMAT_NAME_$LI$();
org.herac.tuxguitar.io.tg.v11.TGStream.TG_FORMAT_$LI$();
org.herac.tuxguitar.io.tg.v11.TGStream.TG_FORMAT_EXTENSION_$LI$();
org.herac.tuxguitar.io.tg.v11.TGStream.TG_FORMAT_VERSION_$LI$();
org.herac.tuxguitar.io.tg.v11.TGStream.TG_FORMAT_NAME_$LI$();
org.herac.tuxguitar.io.tg.v10.TGStream.TG_FORMAT_$LI$();
org.herac.tuxguitar.io.tg.v10.TGStream.TG_FORMAT_EXTENSION_$LI$();
org.herac.tuxguitar.io.tg.v10.TGStream.TG_FORMAT_VERSION_$LI$();
org.herac.tuxguitar.io.tg.v10.TGStream.TG_FORMAT_NAME_$LI$();
org.herac.tuxguitar.io.tg.dev.TGStream.TG_FORMAT_$LI$();
org.herac.tuxguitar.io.tg.dev.TGStream.TG_FORMAT_CODE_$LI$();
org.herac.tuxguitar.io.tg.dev.TGStream.TG_FORMAT_VERSION_$LI$();
org.herac.tuxguitar.io.tg.dev.TGStream.TG_FORMAT_NAME_$LI$();
org.herac.tuxguitar.graphics.control.TGMeasureImpl.SCORE_KEY_FLAT_POSITIONS_$LI$();
org.herac.tuxguitar.graphics.control.TGMeasureImpl.SCORE_KEY_SHARP_POSITIONS_$LI$();
org.herac.tuxguitar.graphics.control.TGMeasureImpl.SCORE_KEY_OFFSETS_$LI$();
org.herac.tuxguitar.graphics.control.TGMeasureImpl.ACCIDENTAL_NOTES_$LI$();
org.herac.tuxguitar.graphics.control.TGMeasureImpl.ACCIDENTAL_FLAT_NOTES_$LI$();
org.herac.tuxguitar.graphics.control.TGMeasureImpl.ACCIDENTAL_SHARP_NOTES_$LI$();
org.herac.tuxguitar.graphics.control.TGMeasureImpl.KEY_SIGNATURES_$LI$();
org.herac.tuxguitar.song.models.TGMarker.DEFAULT_COLOR_$LI$();
org.herac.tuxguitar.io.tg.v07.TGSongReaderImpl.SUPPORTED_FORMAT_$LI$();
org.herac.tuxguitar.io.tg.v07.TGSongReaderImpl.TG_FORMAT_$LI$();
org.herac.tuxguitar.io.tg.v09.TGStream.TG_FORMAT_$LI$();
org.herac.tuxguitar.io.tg.v09.TGStream.TG_FORMAT_CODE_$LI$();
org.herac.tuxguitar.io.tg.v09.TGStream.TG_VERSION_$LI$();
org.herac.tuxguitar.io.tg.v08.TGStream.TG_FORMAT_$LI$();
org.herac.tuxguitar.io.tg.v08.TGStream.TG_FORMAT_CODE_$LI$();
org.herac.tuxguitar.io.tg.v08.TGStream.TG_VERSION_$LI$();
org.herac.tuxguitar.graphics.control.TGTrackSpacing.POSITIONS_$LI$();
org.herac.tuxguitar.graphics.control.TGBeatSpacing.POSITIONS_$LI$();
org.herac.tuxguitar.graphics.control.TGBeatSpacing.EFFECT_POSITIONS_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGSilencePainter.SIXTY_FOURTH_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGSilencePainter.THIRTY_SECOND_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGSilencePainter.SIXTEENTH_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGSilencePainter.EIGHTH_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGSilencePainter.QUARTER_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGSilencePainter.HALF_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGSilencePainter.WHOLE_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGNotePainter.FOOTER_DOWN_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGNotePainter.FOOTER_UP_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGNotePainter.HARMONIC_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGNotePainter.NOTE_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGKeySignaturePainter.NATURAL_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGKeySignaturePainter.FLAT_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGKeySignaturePainter.SHARP_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGClefPainter.TENOR_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGClefPainter.ALTO_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGClefPainter.BASS_MODEL_$LI$();
org.herac.tuxguitar.graphics.control.painters.TGClefPainter.TREBLE_MODEL_$LI$();
org.herac.tuxguitar.util.TGVersion.CURRENT_$LI$();
org.herac.tuxguitar.util.TGServiceReader.SERVICE_PATH_$LI$();
org.herac.tuxguitar.song.models.TGMeasure.DEFAULT_CLEF_$LI$();
org.herac.tuxguitar.song.models.TGDivisionType.ALTERED_DIVISION_TYPES_$LI$();
org.herac.tuxguitar.song.models.TGDivisionType.TRIPLET_$LI$();
org.herac.tuxguitar.song.models.TGDivisionType.NORMAL_$LI$();
org.herac.tuxguitar.song.models.TGColor.BLACK_$LI$();
org.herac.tuxguitar.song.models.TGColor.WHITE_$LI$();
org.herac.tuxguitar.song.models.TGColor.BLUE_$LI$();
org.herac.tuxguitar.song.models.TGColor.GREEN_$LI$();
org.herac.tuxguitar.song.models.TGColor.RED_$LI$();
org.herac.tuxguitar.song.models.TGChannelNames.DEFAULT_NAMES_$LI$();
org.herac.tuxguitar.song.models.effects.TGEffectHarmonic.NATURAL_FREQUENCIES_$LI$();
org.herac.tuxguitar.song.models.effects.TGEffectBend.MAX_VALUE_LENGTH_$LI$();
org.herac.tuxguitar.song.managers.TGSongManager.DEFAULT_TUNING_VALUES_$LI$();
org.herac.tuxguitar.player.base.MidiSequenceParser.DEFAULT_EXPORT_FLAGS_$LI$();
org.herac.tuxguitar.player.base.MidiSequenceParser.DEFAULT_PLAY_FLAGS_$LI$();
org.herac.tuxguitar.player.base.MidiPercussionKey.PERCUSSION_KEY_LIST_$LI$();
org.herac.tuxguitar.player.base.MidiInstrument.INSTRUMENT_LIST_$LI$();
org.herac.tuxguitar.graphics.control.TGLayout.DEFAULT_MODE_$LI$();
org.herac.tuxguitar.graphics.control.TGBeatGroup.SCORE_FLAT_POSITIONS_$LI$();
org.herac.tuxguitar.graphics.control.TGBeatGroup.SCORE_SHARP_POSITIONS_$LI$();
org.herac.tuxguitar.graphics.control.TGBeatGroup.SCORE_MIDDLE_KEYS_$LI$();
java.lang.Thread.MAIN_THREAD_$LI$();
org.herac.tg.webapp.TGWebApp.main(null);
